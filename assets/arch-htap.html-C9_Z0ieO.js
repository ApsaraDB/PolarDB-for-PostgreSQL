import{_ as i,c,a as n,b as a,e as d,w as l,r as o,o as u,d as p}from"./app-HZE5kvva.js";const k="/PolarDB-for-PostgreSQL/assets/htap-1-background-spowOHJU.png",P="/PolarDB-for-PostgreSQL/assets/htap-2-arch-9jMAEiAc.png",m="/PolarDB-for-PostgreSQL/assets/htap-3-mpp-jrU6LCSN.png",v="/PolarDB-for-PostgreSQL/assets/htap-4-1-consistency-CN3AgZlI.png",b="/PolarDB-for-PostgreSQL/assets/htap-4-2-serverless-ChOC1z2u.png",h="/PolarDB-for-PostgreSQL/assets/htap-4-3-serverlessmap-CXx4-kAG.png",g="/PolarDB-for-PostgreSQL/assets/htap-5-skew-CGu8XLkV.png",f="/PolarDB-for-PostgreSQL/assets/htap-7-1-acc--fNK91m9.png",w="/PolarDB-for-PostgreSQL/assets/htap-7-2-cpu-Bx0hJl5u.png",S="/PolarDB-for-PostgreSQL/assets/htap-7-3-dop-BovrSV4Q.png",M="/PolarDB-for-PostgreSQL/assets/htap-8-1-tpch-mpp-BonkD7SS.png",y="/PolarDB-for-PostgreSQL/assets/htap-8-2-tpch-mpp-each-DhosjIGV.png",_="/PolarDB-for-PostgreSQL/assets/htap-6-btbuild-D5VrHGoS.png",B={},T={class:"table-of-contents"};function D(t,s){const r=o("ArticleInfo"),e=o("router-link");return u(),c("div",null,[s[17]||(s[17]=n("h1",{id:"htap-architecture",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#htap-architecture"},[n("span",null,"HTAP Architecture")])],-1)),a(r,{frontmatter:t.$frontmatter},null,8,["frontmatter"]),n("nav",T,[n("ul",null,[n("li",null,[a(e,{to:"#背景"},{default:l(()=>s[0]||(s[0]=[p("背景")])),_:1})]),n("li",null,[a(e,{to:"#原理"},{default:l(()=>s[1]||(s[1]=[p("原理")])),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#架构特性"},{default:l(()=>s[2]||(s[2]=[p("架构特性")])),_:1})]),n("li",null,[a(e,{to:"#分布式-mpp-执行引擎"},{default:l(()=>s[3]||(s[3]=[p("分布式 MPP 执行引擎")])),_:1})]),n("li",null,[a(e,{to:"#serverless-弹性扩展"},{default:l(()=>s[4]||(s[4]=[p("Serverless 弹性扩展")])),_:1})]),n("li",null,[a(e,{to:"#消除倾斜"},{default:l(()=>s[5]||(s[5]=[p("消除倾斜")])),_:1})])])]),n("li",null,[a(e,{to:"#tpc-h-性能对比"},{default:l(()=>s[6]||(s[6]=[p("TPC-H 性能对比")])),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#单机并行-vs-分布式-mpp"},{default:l(()=>s[7]||(s[7]=[p("单机并行 vs 分布式 MPP")])),_:1})]),n("li",null,[a(e,{to:"#polardb-vs-传统-mpp-数据库"},{default:l(()=>s[8]||(s[8]=[p("PolarDB vs 传统 MPP 数据库")])),_:1})])])]),n("li",null,[a(e,{to:"#功能特性"},{default:l(()=>s[9]||(s[9]=[p("功能特性")])),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#parallel-query-并行查询"},{default:l(()=>s[10]||(s[10]=[p("Parallel Query 并行查询")])),_:1})]),n("li",null,[a(e,{to:"#parallel-dml"},{default:l(()=>s[11]||(s[11]=[p("Parallel DML")])),_:1})]),n("li",null,[a(e,{to:"#索引构建加速"},{default:l(()=>s[12]||(s[12]=[p("索引构建加速")])),_:1})])])]),n("li",null,[a(e,{to:"#使用说明"},{default:l(()=>s[13]||(s[13]=[p("使用说明")])),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#使用-mpp-进行分析型查询"},{default:l(()=>s[14]||(s[14]=[p("使用 MPP 进行分析型查询")])),_:1})]),n("li",null,[a(e,{to:"#使用-mpp-进行分区表查询"},{default:l(()=>s[15]||(s[15]=[p("使用 MPP 进行分区表查询")])),_:1})]),n("li",null,[a(e,{to:"#使用-mpp-加速索引创建"},{default:l(()=>s[16]||(s[16]=[p("使用 MPP 加速索引创建")])),_:1})])])])])]),s[18]||(s[18]=d('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>很多 PolarDB PG 的用户都有 TP (Transactional Processing) 和 AP (Analytical Processing) 共用的需求。他们期望数据库在白天处理高并发的 TP 请求，在夜间 TP 流量下降、机器负载空闲时进行 AP 的报表分析。但是即使这样，依然没有最大化利用空闲机器的资源。原先的 PolarDB PG 数据库在处理复杂的 AP 查询时会遇到两大挑战:</p><ul><li>单条 SQL 在原生 PostgreSQL 执行引擎下只能在单个节点上执行，无论是单机串行还是单机并行，都无法利用其他节点的 CPU、内存等计算资源，只能纵向 Scale Up，不能横向 Scale Out；</li><li>PolarDB 底层是存储池，理论上 I/O 吞吐是无限大的。而单条 SQL 在原生 PostgreSQL 执行引擎下只能在单个节点上执行，受限于单节点 CPU 和内存的瓶颈，无法充分发挥存储侧大 I/O 带宽的优势。</li></ul><p><img src="'+k+'" alt="image.png"></p><p>为了解决用户实际使用中的痛点，PolarDB 实现了 HTAP 特性。当前业界 HTAP 的解决方案主要有以下三种：</p><ol><li>TP 和 AP 在存储和计算上完全分离 <ul><li>优势：两种业务负载互不影响</li><li>劣势： <ul><li>时效性：TP 的数据需要导入到 AP 系统中，存在一定的延迟</li><li>成本 / 运维难度：增加了一套冗余的 AP 系统</li></ul></li></ul></li><li>TP 和 AP 在存储和计算上完全共享 <ul><li>优势：成本最小化、资源利用最大化</li><li>劣势： <ul><li>计算共享会导致 AP 查询和 TP 查询同时运行时或多或少会存在相互影响</li><li>扩展计算节点存储时，数据需要重分布，无法快速弹性 Scale Out</li></ul></li></ul></li><li><strong>TP 和 AP 在存储上共享，在计算上分离</strong>： <ul><li>PolarDB 的存储计算分离架构天然支持此方案</li></ul></li></ol><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><h3 id="架构特性" tabindex="-1"><a class="header-anchor" href="#架构特性"><span>架构特性</span></a></h3><p>基于 PolarDB 的存储计算分离架构，我们研发了分布式 MPP 执行引擎，提供了跨机并行执行、弹性计算弹性扩展的保证，使得 PolarDB 初步具备了 HTAP 的能力:</p><ol><li>一体化存储：毫秒级数据新鲜度 <ul><li>TP / AP 共享一套存储数据，减少存储成本，提高查询时效</li></ul></li><li>TP / AP 物理隔离：杜绝 CPU / 内存的相互影响 <ul><li>单机执行引擎：在 RW / RO 节点上，处理高并发的 TP 查询</li><li>分布式 MPP 执行引擎: 在 RO 节点，处理高复杂度的 AP 查询</li></ul></li><li>Serverless 弹性扩展：任何一个 RO 节点均可发起 MPP 查询 <ul><li>Scale Out：弹性调整 MPP 的执行节点范围</li><li>Scale Up：弹性调整 MPP 的单机并行度</li></ul></li><li>消除数据倾斜、计算倾斜，充分考虑 PostgreSQL 的 Buffer Pool 亲和性</li></ol><p><img src="'+P+'" alt="image.png"></p><h3 id="分布式-mpp-执行引擎" tabindex="-1"><a class="header-anchor" href="#分布式-mpp-执行引擎"><span>分布式 MPP 执行引擎</span></a></h3><p>PolarDB HTAP 的核心是分布式 MPP 执行引擎，是典型的火山模型引擎。A、B 两张表先做 join 再做聚合输出，这也是 PostgreSQL 单机执行引擎的执行流程。</p><p><img src="'+m+'" alt="image.png"></p><p>在传统的 MPP 执行引擎中，数据被打散到不同的节点上，不同节点上的数据可能具有不同的分布属性，比如哈希分布、随机分布、复制分布等。传统的 MPP 执行引擎会针对不同表的数据分布特点，在执行计划中插入算子来保证上层算子对数据的分布属性无感知。</p><p>不同的是，PolarDB 是共享存储架构，存储上的数据可以被所有计算节点全量访问。如果使用传统的 MPP 执行引擎，每个计算节点 Worker 都会扫描全量数据，从而得到重复的数据；同时，也没有起到扫描时分治加速的效果，并不能称得上是真正意义上的 MPP 引擎。</p><p>因此，在 PolarDB 分布式 MPP 执行引擎中，我们借鉴了火山模型论文中的思想，对所有扫描算子进行并发处理，引入了 PxScan 算子来屏蔽共享存储。PxScan 算子将 shared-storage 的数据映射为 shared-nothing 的数据，通过 Worker 之间的协调，将目标表划分为多个虚拟分区数据块，每个 Worker 扫描各自的虚拟分区数据块，从而实现了跨机分布式并行扫描。</p><p>PxScan 算子扫描出来的数据会通过 Shuffle 算子来重分布。重分布后的数据在每个 Worker 上如同单机执行一样，按照火山模型来执行。</p><h3 id="serverless-弹性扩展" tabindex="-1"><a class="header-anchor" href="#serverless-弹性扩展"><span>Serverless 弹性扩展</span></a></h3><p>传统 MPP 只能在指定节点发起 MPP 查询，因此每个节点上都只能有单个 Worker 扫描一张表。为了支持云原生下 serverless 弹性扩展的需求，我们引入了分布式事务一致性保证。</p><p><img src="'+v+'" alt="image.png"></p><p>任意选择一个节点作为 Coordinator 节点，它的 ReadLSN 会作为约定的 LSN，从所有 MPP 节点的快照版本号中选择最小的版本号作为全局约定的快照版本号。通过 LSN 的回放等待和 Global Snapshot 同步机制，确保在任何一个节点发起 MPP 查询时，数据和快照均能达到一致可用的状态。</p><p><img src="'+b+'" alt="image.png"></p><p>为了实现 serverless 的弹性扩展，我们从共享存储的特点出发，将 Coordinator 节点全链路上各个模块需要的外部依赖全部放至共享存储上。各个 Worker 节点运行时需要的参数也会通过控制链路从 Coordinator 节点同步过来，从而使 Coordinator 节点和 Worker 节点全链路 <strong>无状态化 (Stateless)</strong>。</p><p>基于以上两点设计，PolarDB 的弹性扩展具备了以下几大优势：</p><ul><li>任何节点都可以成为 Coordinator 节点，解决了传统 MPP 数据库 Coordinator 节点的单点问题。</li><li>PolarDB 可以横向 Scale Out（计算节点数量），也可以纵向 Scale Up（单节点并行度），且弹性扩展即时生效，不需要重新分布数据。</li><li>允许业务有更多的弹性调度策略，不同的业务域可以运行在不同的节点集合上。如下图右侧所示，业务域 1 的 SQL 可以选择 RO1 和 RO2 节点来执行 AP 查询，业务域 2 的 SQL 可以选择使用 RO3 和 RO4 节点来执行 AP 查询。两个业务域使用的计算节点可以实现弹性调度。</li></ul><p><img src="'+h+'" alt="image.png"></p><h3 id="消除倾斜" tabindex="-1"><a class="header-anchor" href="#消除倾斜"><span>消除倾斜</span></a></h3><p>倾斜是传统 MPP 固有的问题，其根本原因主要是数据分布倾斜和数据计算倾斜：</p><ul><li>数据分布倾斜通常由数据打散不均衡导致，在 PostgreSQL 中还会由于大对象 Toast 表存储引入一些不可避免的数据分布不均衡问题；</li><li>计算倾斜通常由于不同节点上并发的事务、Buffer Pool、网络、I/O 抖动导致。</li></ul><p>倾斜会导致传统 MPP 在执行时出现木桶效应，执行完成时间受制于执行最慢的子任务。</p><p><img src="'+g+'" alt="image.png"></p><p>PolarDB 设计并实现了 <strong>自适应扫描机制</strong>。如上图所示，采用 Coordinator 节点来协调 Worker 节点的工作模式。在扫描数据时，Coordinator 节点会在内存中创建一个任务管理器，根据扫描任务对 Worker 节点进行调度。Coordinator 节点内部分为两个线程：</p><ul><li>Data 线程主要负责服务数据链路、收集汇总元组</li><li>Control 线程负责服务控制链路、控制每一个扫描算子的扫描进度</li></ul><p>扫描进度较快的 Worker 能够扫描多个数据块，实现能者多劳。比如上图中 RO1 与 RO3 的 Worker 各自扫描了 4 个数据块， RO2 由于计算倾斜可以扫描更多数据块，因此它最终扫描了 6 个数据块。</p><p>PolarDB HTAP 的自适应扫描机制还充分考虑了 PostgreSQL 的 Buffer Pool 亲和性，保证每个 Worker 尽可能扫描固定的数据块，从而最大化命中 Buffer Pool 的概率，降低 I/O 开销。</p><h2 id="tpc-h-性能对比" tabindex="-1"><a class="header-anchor" href="#tpc-h-性能对比"><span>TPC-H 性能对比</span></a></h2><h3 id="单机并行-vs-分布式-mpp" tabindex="-1"><a class="header-anchor" href="#单机并行-vs-分布式-mpp"><span>单机并行 vs 分布式 MPP</span></a></h3><p>我们使用 256 GB 内存的 16 个 PolarDB PG 实例作为 RO 节点，搭建了 1 TB 的 TPC-H 环境进行对比测试。相较于单机并行，分布式 MPP 并行充分利用了所有 RO 节点的计算资源和底层共享存储的 I/O 带宽，从根本上解决了前文提及的 HTAP 诸多挑战。在 TPC-H 的 22 条 SQL 中，有 3 条 SQL 加速了 60 多倍，19 条 SQL 加速了 10 多倍，平均加速 23 倍。</p><p><img src="'+f+'" alt="image.png"></p><p>此外，我们也测试了弹性扩展计算资源带来的性能变化。通过增加 CPU 的总核心数，从 16 核增加到 128 核，TPC-H 的总运行时间线性提升，每条 SQL 的执行速度也呈线性提升，这也验证了 PolarDB HTAP serverless 弹性扩展的特点。</p><p><img src="'+w+'" alt="image.png"></p><p><img src="'+S+'" alt="image.png"></p><p>在测试中发现，当 CPU 的总核数增加到 256 核时，性能提升不再明显。原因是此时 PolarDB 共享存储的 I/O 带宽已经打满，成为了瓶颈。</p><h3 id="polardb-vs-传统-mpp-数据库" tabindex="-1"><a class="header-anchor" href="#polardb-vs-传统-mpp-数据库"><span>PolarDB vs 传统 MPP 数据库</span></a></h3><p>我们将 PolarDB 的分布式 MPP 执行引擎与传统数据库的 MPP 执行引擎进行了对比，同样使用了 256 GB 内存的 16 个节点。</p><p>在 1 TB 的 TPC-H 数据上，当保持与传统 MPP 数据库相同单机并行度的情况下（多机单进程），PolarDB 的性能是传统 MPP 数据库的 90%。其中最本质的原因是传统 MPP 数据库的数据默认是哈希分布的，当两张表的 join key 是各自的分布键时，可以不用 shuffle 直接进行本地的 Wise Join。而 PolarDB 的底层是共享存储池，PxScan 算子并行扫描出来的数据等价于随机分布，必须进行 shuffle 重分布以后才能像传统 MPP 数据库一样进行后续的处理。因此，TPC-H 涉及到表连接时，PolarDB 相比传统 MPP 数据库多了一次网络 shuffle 的开销。</p><p><img src="'+M+'" alt="image.png"></p><p><img src="'+y+'" alt="image.png"></p><p>PolarDB 分布式 MPP 执行引擎能够进行弹性扩展，数据无需重分布。因此，在有限的 16 台机器上执行 MPP 时，PolarDB 还可以继续扩展单机并行度，充分利用每台机器的资源：当 PolarDB 的单机并行度为 8 时，它的性能是传统 MPP 数据库的 5-6 倍；当 PolarDB 的单机并行度呈线性增加时，PolarDB 的总体性能也呈线性增加。只需要修改配置参数，就可以即时生效。</p><h2 id="功能特性" tabindex="-1"><a class="header-anchor" href="#功能特性"><span>功能特性</span></a></h2><h3 id="parallel-query-并行查询" tabindex="-1"><a class="header-anchor" href="#parallel-query-并行查询"><span>Parallel Query 并行查询</span></a></h3><p>经过持续迭代的研发，目前 PolarDB HTAP 在 Parallel Query 上支持的功能特性主要有五大部分：</p><ul><li>基础算子全支持：扫描 / 连接 / 聚合 / 子查询等算子。</li><li>共享存储算子优化：包括 Shuffle 算子共享、SharedSeqScan 共享、SharedIndexScan 算子等。其中 SharedSeqScan 共享、SharedIndexScan 共享是指，在大表 join 小表时，小表采用类似于复制表的机制来减少广播开销，进而提升性能。</li><li>分区表支持：不仅包括对 Hash / Range / List 三种分区方式的完整支持，还包括对多级分区静态裁剪、分区动态裁剪的支持。除此之外，PolarDB 分布式 MPP 执行引擎还支持分区表的 Partition Wise Join。</li><li>并行度弹性控制：包括全局级别、表级别、会话级别、查询级别的并行度控制。</li><li>Serverless 弹性扩展：不仅包括任意节点发起 MPP、MPP 节点范围内的任意组合，还包括集群拓扑信息的自动维护，以及支持共享存储模式、主备库模式、三节点模式。</li></ul><h3 id="parallel-dml" tabindex="-1"><a class="header-anchor" href="#parallel-dml"><span>Parallel DML</span></a></h3><p>基于 PolarDB 读写分离架构和 HTAP serverless 弹性扩展的设计， PolarDB Parallel DML 支持一写多读、多写多读两种特性。</p><ul><li>一写多读：在 RO 节点上有多个读 Worker，在 RW 节点上只有一个写 Worker；</li><li>多写多读：在 RO 节点上有多个读 Worker，在 RW 节点上也有多个写 Worker。多写多读场景下，读写的并发度完全解耦。</li></ul><p>不同的特性适用不同的场景，用户可以根据自己的业务特点来选择不同的 PDML 功能特性。</p><h3 id="索引构建加速" tabindex="-1"><a class="header-anchor" href="#索引构建加速"><span>索引构建加速</span></a></h3><p>PolarDB 分布式 MPP 执行引擎，不仅可以用于只读查询和 DML，还可以用于 <strong>索引构建加速</strong>。OLTP 业务中有大量的索引，而 B-Tree 索引创建的过程大约有 80% 的时间消耗在排序和构建索引页上，20% 消耗在写入索引页上。如下图所示，PolarDB 利用 RO 节点对数据进行分布式 MPP 加速排序，采用流水化的技术来构建索引页，同时使用批量写入技术来提升索引页的写入速度。</p><p><img src="'+_+`" alt="image.png"></p><p>在目前索引构建加速这一特性中，PolarDB 已经对 B-Tree 索引的普通创建以及 B-Tree 索引的在线创建 (Concurrently) 两种功能进行了支持。</p><h2 id="使用说明" tabindex="-1"><a class="header-anchor" href="#使用说明"><span>使用说明</span></a></h2><p>PolarDB HTAP 适用于日常业务中的 <strong>轻分析类业务</strong>，例如：对账业务，报表业务。</p><h3 id="使用-mpp-进行分析型查询" tabindex="-1"><a class="header-anchor" href="#使用-mpp-进行分析型查询"><span>使用 MPP 进行分析型查询</span></a></h3><p>PolarDB PG 引擎默认不开启 MPP 功能。若您需要使用此功能，请使用如下参数：</p><ul><li><code>polar_enable_px</code>：指定是否开启 MPP 功能。默认为 <code>OFF</code>，即不开启。</li><li><code>polar_px_max_workers_number</code>：设置单个节点上的最大 MPP Worker 进程数，默认为 <code>30</code>。该参数限制了单个节点上的最大并行度，节点上所有会话的 MPP workers 进程数不能超过该参数大小。</li><li><code>polar_px_dop_per_node</code>：设置当前会话并行查询的并行度，默认为 <code>1</code>，推荐值为当前 CPU 总核数。若设置该参数为 <code>N</code>，则一个会话在每个节点上将会启用 <code>N</code> 个 MPP Worker 进程，用于处理当前的 MPP 逻辑</li><li><code>polar_px_nodes</code>：指定参与 MPP 的只读节点。默认为空，表示所有只读节点都参与。可配置为指定节点参与 MPP，以逗号分隔</li><li><code>px_worker</code>：指定 MPP 是否对特定表生效。默认不生效。MPP 功能比较消耗集群计算节点的资源，因此只有对设置了 <code>px_workers</code> 的表才使用该功能。例如： <ul><li><code>ALTER TABLE t1 SET(px_workers=1)</code> 表示 t1 表允许 MPP</li><li><code>ALTER TABLE t1 SET(px_workers=-1)</code> 表示 t1 表禁止 MPP</li><li><code>ALTER TABLE t1 SET(px_workers=0)</code> 表示 t1 表忽略 MPP（默认状态）</li></ul></li></ul><p>本示例以简单的单表查询操作，来描述 MPP 的功能是否有效。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token comment">-- 创建 test 表并插入基础数据。</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test <span class="token keyword">SELECT</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 默认情况下 MPP 功能不开启，单表查询执行计划为 PG 原生的 Seq Scan</span></span>
<span class="line"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test<span class="token punctuation">;</span></span>
<span class="line">                       QUERY <span class="token keyword">PLAN</span></span>
<span class="line"><span class="token comment">--------------------------------------------------------</span></span>
<span class="line"> Seq Scan <span class="token keyword">on</span> test  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.35</span><span class="token number">.50</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">2550</span> width<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启并使用 MPP 功能：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token comment">-- 对 test 表启用 MPP 功能</span></span>
<span class="line"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> test <span class="token keyword">SET</span> <span class="token punctuation">(</span>px_workers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 开启 MPP 功能</span></span>
<span class="line"><span class="token keyword">SET</span> polar_enable_px <span class="token operator">=</span> <span class="token keyword">on</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                                  QUERY <span class="token keyword">PLAN</span></span>
<span class="line"><span class="token comment">-------------------------------------------------------------------------------</span></span>
<span class="line"> PX Coordinator <span class="token number">2</span>:<span class="token number">1</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.431</span><span class="token number">.00</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">1</span> width<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token operator">-</span><span class="token operator">&gt;</span>  Seq Scan <span class="token keyword">on</span> test <span class="token punctuation">(</span>scan <span class="token keyword">partial</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.431</span><span class="token number">.00</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">1</span> width<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"> Optimizer: PolarDB PX Optimizer</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置参与 MPP 的计算节点范围：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token comment">-- 查询当前所有只读节点的名称</span></span>
<span class="line"><span class="token keyword">CREATE</span> EXTENSION polar_monitor<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>host<span class="token punctuation">,</span>port <span class="token keyword">FROM</span> polar_cluster_info <span class="token keyword">WHERE</span> px_node<span class="token operator">=</span><span class="token string">&#39;t&#39;</span><span class="token punctuation">;</span></span>
<span class="line"> name  <span class="token operator">|</span>   host    <span class="token operator">|</span> port</span>
<span class="line"><span class="token comment">-------+-----------+------</span></span>
<span class="line"> node1 <span class="token operator">|</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token operator">|</span> <span class="token number">5433</span></span>
<span class="line"> node2 <span class="token operator">|</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token operator">|</span> <span class="token number">5434</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 当前集群有 2 个只读节点，名称分别为：node1，node2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 指定 node1 只读节点参与 MPP</span></span>
<span class="line"><span class="token keyword">SET</span> polar_px_nodes <span class="token operator">=</span> <span class="token string">&#39;node1&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 查询参与并行查询的节点</span></span>
<span class="line"><span class="token keyword">SHOW</span> polar_px_nodes<span class="token punctuation">;</span></span>
<span class="line"> polar_px_nodes</span>
<span class="line"><span class="token comment">----------------</span></span>
<span class="line"> node1</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test<span class="token punctuation">;</span></span>
<span class="line">                                  QUERY <span class="token keyword">PLAN</span></span>
<span class="line"><span class="token comment">-------------------------------------------------------------------------------</span></span>
<span class="line"> PX Coordinator <span class="token number">1</span>:<span class="token number">1</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.431</span><span class="token number">.00</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">1</span> width<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> test  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.431</span><span class="token number">.00</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">1</span> width<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"> Optimizer: PolarDB PX Optimizer</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-mpp-进行分区表查询" tabindex="-1"><a class="header-anchor" href="#使用-mpp-进行分区表查询"><span>使用 MPP 进行分区表查询</span></a></h3><p>当前 MPP 对分区表支持的功能如下所示：</p><ul><li>支持 Range 分区的并行查询</li><li>支持 List 分区的并行查询</li><li>支持单列 Hash 分区的并行查询</li><li>支持分区裁剪</li><li>支持带有索引的分区表并行查询</li><li>支持分区表连接查询</li><li>支持多级分区的并行查询</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token comment">--分区表 MPP 功能默认关闭，需要先开启 MPP 功能</span></span>
<span class="line"><span class="token keyword">SET</span> polar_enable_px <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 执行以下语句，开启分区表 MPP 功能</span></span>
<span class="line"><span class="token keyword">SET</span> polar_px_enable_partition <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 执行以下语句，开启多级分区表 MPP 功能</span></span>
<span class="line"><span class="token keyword">SET</span> polar_px_optimizer_multilevel_partitioning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-mpp-加速索引创建" tabindex="-1"><a class="header-anchor" href="#使用-mpp-加速索引创建"><span>使用 MPP 加速索引创建</span></a></h3><p>当前仅支持对 B-Tree 索引的构建，且暂不支持 <code>INCLUDE</code> 等索引构建语法，暂不支持表达式等索引列类型。</p><p>如果需要使用 MPP 功能加速创建索引，请使用如下参数：</p><ul><li><code>polar_px_dop_per_node</code>：指定通过 MPP 加速构建索引的并行度。默认为 <code>1</code>。</li><li><code>polar_px_enable_replay_wait</code>：当使用 MPP 加速索引构建时，当前会话内无需手动开启该参数，该参数将自动生效，以保证最近更新的数据表项可以被创建到索引中，保证索引表的完整性。索引创建完成后，该参数将会被重置为数据库默认值。</li><li><code>polar_px_enable_btbuild</code>：是否开启使用 MPP 加速创建索引。取值为 <code>OFF</code> 时不开启（默认），取值为 <code>ON</code> 时开启。</li><li><code>polar_bt_write_page_buffer_size</code>：指定索引构建过程中的写 I/O 策略。该参数默认值为 <code>0</code>（不开启），单位为块，最大值可设置为 <code>8192</code>。推荐设置为 <code>4096</code>。 <ul><li>当该参数设置为不开启时，在索引创建的过程中，对于索引页写满后的写盘方式是 block-by-block 的单个块写盘。</li><li>当该参数设置为开启时，内核中将缓存一个 <code>polar_bt_write_page_buffer_size</code> 大小的 buffer，对于需要写盘的索引页，会通过该 buffer 进行 I/O 合并再统一写盘，避免了频繁调度 I/O 带来的性能开销。该参数会额外提升 20% 的索引创建性能。</li></ul></li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token comment">-- 开启使用 MPP 加速创建索引功能。</span></span>
<span class="line"><span class="token keyword">SET</span> polar_px_enable_btbuild <span class="token operator">=</span> <span class="token keyword">on</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 使用如下语法创建索引</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> t <span class="token keyword">ON</span> test<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">WITH</span><span class="token punctuation">(</span>px_build <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 查询表结构</span></span>
<span class="line">\\d test</span>
<span class="line">               <span class="token keyword">Table</span> <span class="token string">&quot;public.test&quot;</span></span>
<span class="line"> <span class="token keyword">Column</span> <span class="token operator">|</span>  <span class="token keyword">Type</span>   <span class="token operator">|</span> Collation <span class="token operator">|</span> Nullable <span class="token operator">|</span> <span class="token keyword">Default</span></span>
<span class="line"><span class="token comment">--------+---------+-----------+----------+---------</span></span>
<span class="line"> id     <span class="token operator">|</span> <span class="token keyword">integer</span> <span class="token operator">|</span>           <span class="token operator">|</span>          <span class="token operator">|</span></span>
<span class="line"> id2    <span class="token operator">|</span> <span class="token keyword">integer</span> <span class="token operator">|</span>           <span class="token operator">|</span>          <span class="token operator">|</span></span>
<span class="line">Indexes:</span>
<span class="line">    <span class="token string">&quot;t&quot;</span> <span class="token keyword">btree</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">WITH</span> <span class="token punctuation">(</span>px_build<span class="token operator">=</span>finish<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,82))])}const L=i(B,[["render",D]]),A=JSON.parse('{"path":"/theory/arch-htap.html","title":"HTAP Architecture","lang":"en-US","frontmatter":{"author":"严华","date":"2022/09/10","minute":35},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[{"level":3,"title":"架构特性","slug":"架构特性","link":"#架构特性","children":[]},{"level":3,"title":"分布式 MPP 执行引擎","slug":"分布式-mpp-执行引擎","link":"#分布式-mpp-执行引擎","children":[]},{"level":3,"title":"Serverless 弹性扩展","slug":"serverless-弹性扩展","link":"#serverless-弹性扩展","children":[]},{"level":3,"title":"消除倾斜","slug":"消除倾斜","link":"#消除倾斜","children":[]}]},{"level":2,"title":"TPC-H 性能对比","slug":"tpc-h-性能对比","link":"#tpc-h-性能对比","children":[{"level":3,"title":"单机并行 vs 分布式 MPP","slug":"单机并行-vs-分布式-mpp","link":"#单机并行-vs-分布式-mpp","children":[]},{"level":3,"title":"PolarDB vs 传统 MPP 数据库","slug":"polardb-vs-传统-mpp-数据库","link":"#polardb-vs-传统-mpp-数据库","children":[]}]},{"level":2,"title":"功能特性","slug":"功能特性","link":"#功能特性","children":[{"level":3,"title":"Parallel Query 并行查询","slug":"parallel-query-并行查询","link":"#parallel-query-并行查询","children":[]},{"level":3,"title":"Parallel DML","slug":"parallel-dml","link":"#parallel-dml","children":[]},{"level":3,"title":"索引构建加速","slug":"索引构建加速","link":"#索引构建加速","children":[]}]},{"level":2,"title":"使用说明","slug":"使用说明","link":"#使用说明","children":[{"level":3,"title":"使用 MPP 进行分析型查询","slug":"使用-mpp-进行分析型查询","link":"#使用-mpp-进行分析型查询","children":[]},{"level":3,"title":"使用 MPP 进行分区表查询","slug":"使用-mpp-进行分区表查询","link":"#使用-mpp-进行分区表查询","children":[]},{"level":3,"title":"使用 MPP 加速索引创建","slug":"使用-mpp-加速索引创建","link":"#使用-mpp-加速索引创建","children":[]}]}],"git":{"updatedTime":1760793941000,"contributors":[{"name":"aCoder2013","username":"aCoder2013","email":"7877752+aCoder2013@users.noreply.github.com","commits":1,"url":"https://github.com/aCoder2013"}],"changelog":[{"hash":"6fcfdc2993a4b32b3c1c8119b43c3545d6ab9654","time":1760793941000,"email":"7877752+aCoder2013@users.noreply.github.com","author":"acoder2014","message":"fix: typo in arch-overview.md (#608)"}]},"filePathRelative":"theory/arch-htap.md"}');export{L as comp,A as data};
