import{_ as r,c as d,a as s,b as n,e as u,w as l,r as i,o as m,d as p}from"./app-HZE5kvva.js";const h="/PolarDB-for-PostgreSQL/assets/tde_1-Btu-oPFy.png",K="/PolarDB-for-PostgreSQL/assets/tde_2-DiR4CKl8.png",g="/PolarDB-for-PostgreSQL/assets/tde_3-DifkEnJp.png",k={},E={class:"table-of-contents"};function _(t,a){const c=i("Badge"),o=i("ArticleInfo"),e=i("router-link");return m(),d("div",null,[a[7]||(a[7]=s("h1",{id:"tde-透明数据加密",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#tde-透明数据加密"},[s("span",null,"TDE 透明数据加密")])],-1)),n(c,{type:"tip",text:"V11 / v1.1.1-",vertical:"top"}),n(o,{frontmatter:t.$frontmatter},null,8,["frontmatter"]),s("nav",E,[s("ul",null,[s("li",null,[n(e,{to:"#背景"},{default:l(()=>a[0]||(a[0]=[p("背景")])),_:1})]),s("li",null,[n(e,{to:"#术语"},{default:l(()=>a[1]||(a[1]=[p("术语")])),_:1})]),s("li",null,[n(e,{to:"#使用"},{default:l(()=>a[2]||(a[2]=[p("使用")])),_:1})]),s("li",null,[n(e,{to:"#原理"},{default:l(()=>a[3]||(a[3]=[p("原理")])),_:1}),s("ul",null,[s("li",null,[n(e,{to:"#密钥管理模块"},{default:l(()=>a[4]||(a[4]=[p("密钥管理模块")])),_:1})]),s("li",null,[n(e,{to:"#加密模块"},{default:l(()=>a[5]||(a[5]=[p("加密模块")])),_:1})]),s("li",null,[n(e,{to:"#解密模块"},{default:l(()=>a[6]||(a[6]=[p("解密模块")])),_:1})])])])])]),a[8]||(a[8]=u(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p><strong>TDE（Transparent Data Encryption）</strong>，即 <strong>透明数据加密</strong>。TDE 通过在数据库层执行透明的数据加密，阻止可能的攻击者绕过数据库直接从存储层读取敏感信息。经过数据库身份验证的用户可以 <strong>透明</strong>（不需要更改应用代码或配置）地访问数据，而尝试读取表空间文件中敏感数据的 OS 用户以及尝试读取磁盘或备份信息的不法之徒将不允许访问明文数据。在国内，为了保证互联网信息安全，国家要求相关服务开发商需要满足一些数据安全标准，例如：</p><ul><li><a href="http://www.npc.gov.cn/npc/c30834/201910/6f7be7dd5ae5459a8de8baf36296bc74.shtml" target="_blank" rel="noopener noreferrer">《国家密码法》</a>（2020 年 1 月 1 日施行）</li><li><a href="http://gxxxzx.gxzf.gov.cn/szjcss/wlyxxaq/P020200429546812083554.pdf" target="_blank" rel="noopener noreferrer">《网络安全等级保护基本要求》</a>（GB/T 22239-2019）</li><li>...</li></ul><p>在国际上，一些相关行业也有监管数据安全标准，例如：</p><ul><li>Payment Card Industry Data Security Standard (PCI DSS)</li><li>Health Insurance Portability and Accountability Act (HIPAA)</li><li>General Data Protection Regulation (GDPR)</li><li>California Consumer Protection Act (CCPA)</li><li>Sarbanes-Oxley Act (SOX)</li></ul><p>为了满足保护用户数据安全的需求，我们在 PolarDB 中实现 TDE 功能。</p><h2 id="术语" tabindex="-1"><a class="header-anchor" href="#术语"><span>术语</span></a></h2><ul><li>KEK：密钥加密密钥（Key Encryption Key)。</li><li>MDEK：<code>pg_strong_random</code> 随机生成，存在内存中，作为实际加密数据的密码。</li><li>TDEK：Table Data Encryption Key，由 MDEK 经 HKDF 算法生成，存在内存中，作为实际加密数据的密码。</li><li>WDEK：Wal Data Encryption Key，MDEK 经 HKDF 算法生成，存在内存中，作为实际加密数据的密码。</li><li>HMACK：passphrase 经 SHA-512 加密后生成 KEK 和 HMACK。</li><li>KEK_HMAC：ENCMDEK 和 HMACK 经过 HMAC 算法生成 KEK_HMAC，用于还原密钥时的校验信息。</li><li>ENCMDEK：用 KEK 加密 MDEK 生成 ENCMDEK。</li></ul><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p>对于用户来说：</p><ul><li><p><code>initdb</code> 时增加 <code>--cluster-passphrase-command &#39;xxx&#39; -e aes-256</code> 参数就会生成支持 TDE 的集群，其中 <code>cluster-passphrase-command</code> 参数为得到加密密钥的密钥的命令，<code>-e</code> 代表数据加密采用的加密算法，目前支持 AES-128、AES-256 和 SM4。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">initdb --cluster-passphrase-command <span class="token string">&#39;echo \\&quot;abc123\\&quot;&#39;</span> <span class="token parameter variable">-e</span> aes-256</span>
<span class="line"></span></code></pre></div></li><li><p>在数据库运行过程中，只有超级用户可以执行如下命令得到对应的加密算法：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">show</span> polar_data_encryption_cipher<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>在数据库运行过程中，可以创建插件 <code>polar_tde_utils</code> 来修改 TDE 的加密密钥或者查询 TDE 的一些执行状态，目前支持：</p><ol><li><p>修改加密密钥，其中函数参数为获取加密密钥的方法（该方法保证只能在宿主机所在网络才可以获得），该函数执行后，<code>kmgr</code> 文件内容变更，等下次重启后生效。</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">select</span> polar_tde_update_kmgr_file<span class="token punctuation">(</span><span class="token string">&#39;echo \\&quot;abc123456\\&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>得到当前的 kmgr 的 info 信息。</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> polar_tde_kmgr_info_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>检查 kmgr 文件的完整性。</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">select</span> polar_tde_check_kmgr_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div></li></ol></li><li><p>执行 <code>pg_filedump</code> 解析加密后的页面，用于一些极端情况下，做页面解析。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">pg_filedump <span class="token parameter variable">-e</span> aes-128 <span class="token parameter variable">-C</span> <span class="token string">&#39;echo \\&quot;abc123\\&quot;&#39;</span> <span class="token parameter variable">-K</span> global/kmgr base/14543/2608</span>
<span class="line"></span></code></pre></div></li></ul><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><h3 id="密钥管理模块" tabindex="-1"><a class="header-anchor" href="#密钥管理模块"><span>密钥管理模块</span></a></h3><h4 id="密钥结构" tabindex="-1"><a class="header-anchor" href="#密钥结构"><span>密钥结构</span></a></h4><p>采用 2 层密钥结构，即密钥加密密钥和表数据加密密钥。表数据加密密钥是实际对数据库数据进行加密的密钥。密钥加密密钥则是对表数据加密密钥进行进一步加密的密钥。两层密钥的详细介绍如下：</p><ul><li>密钥加密密钥（KEK），以及 KEK 的校验值 HMACK：通过运行 <code>polar_cluster_passphrase_command</code> 参数中命令并计算 SHA-512 后得到 64 字节的数据，其中前 32 字节为顶层加密密钥 KEK，后 32 字节为 HMACK。</li><li>表数据加密密钥（TDEK）和 WAL 日志加密密钥（WDEK）：通过密码学中的安全随机数生成器生成的密钥，是数据和 WAL 日志加密的真正密钥。两个密钥加密后的密文使用 HMACK 作为密钥，经过 HMAC 算法得到 rdek_hmac 和 wdek_hmac，用于密钥 KEK 的校验，保存在共享存储上。</li></ul><p>KEK 和 HMACK 每次都是通过外部获取，例如 KMS，测试的时候可以直接 <code>echo passphrase</code> 得到。ENCMDEK 和 KEK_HMAC 需要保存在共享存储上，用来保证下次启动时 RW 和 RO 都可以读取该文件，获取真正的加密密钥。其数据结构如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">KmgrFileData</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* version for kmgr file */</span></span>
<span class="line">    uint32      kmgr_version_no<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Are data pages encrypted? Zero if encryption is disabled */</span></span>
<span class="line">    uint32      data_encryption_cipher<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">     * Wrapped Key information for data encryption.</span>
<span class="line">     */</span></span>
<span class="line">    WrappedEncKeyWithHmac tde_rdek<span class="token punctuation">;</span></span>
<span class="line">    WrappedEncKeyWithHmac tde_wdek<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* CRC of all above ... MUST BE LAST! */</span></span>
<span class="line">    pg_crc32c   crc<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> KmgrFileData<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该文件当前是在 <code>initdb</code> 的时候产生，这样就可以保证 Standby 通过 <code>pg_basebackup</code> 获取到。</p><p>在实例运行状态下，TDE 相关的控制信息保存在进程的内存中，结构如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token class-name">keydata_t</span> keyEncKey<span class="token punctuation">[</span>TDE_KEK_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token class-name">keydata_t</span> relEncKey<span class="token punctuation">[</span>TDE_MAX_DEK_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token class-name">keydata_t</span> walEncKey<span class="token punctuation">[</span>TDE_MAX_DEK_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">char</span> <span class="token operator">*</span>polar_cluster_passphrase_command <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token keyword">int</span> data_encryption_cipher<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="密钥加密" tabindex="-1"><a class="header-anchor" href="#密钥加密"><span>密钥加密</span></a></h4><p>数据库初始化时需要生成密钥，过程示意图如下：</p><p><img src="`+h+'" alt="image.png"></p><ol><li>运行 <code>polar_cluster_passphrase_command</code> 得到 64 字节的 KEK + HMACK，其中 KEK 长度为 32 字节，HMACK 长度为 32 字节。</li><li>调用 <a href="https://www.openssl.org/" target="_blank" rel="noopener noreferrer">OpenSSL</a> 中的随机数生成算法生成 MDEK。</li><li>使用 MDEK 调用 OpenSSL 的 HKDF 算法生成 TDEK。</li><li>使用 MDEK 调用 OpenSSL 的 HKDF 算法生成 WDEK。</li><li>使用 KEK 加密 MDEK 生成 ENCMDEK。</li><li>ENCMDEK 和 HMACK 经过 HMAC 算法生成 KEK_HMAC 用于还原密钥时的校验信息。</li><li>将 ENCMDEK 和 KEK_HMAC 补充其他 <code>KmgrFileData</code> 结构信息写入 <code>global/kmgr</code> 文件。</li></ol><h4 id="密钥解密" tabindex="-1"><a class="header-anchor" href="#密钥解密"><span>密钥解密</span></a></h4><p>当数据库崩溃或重新启动等情况下，需要通过有限的密文信息解密出对应的密钥，其过程如下：</p><p><img src="'+K+'" alt="image.png"></p><ol><li>读取 <code>global/kmgr</code> 文件获取 ENCMDEK 和 KEK_HMAC。</li><li>运行 <code>polar_cluster_passphrase_command</code> 得到 64 字节的 KEK + HMACK。</li><li>ENCMDEK 和 HMACK 经过 HMAC 算法生成 KEK_HMAC&#39;，比较 KEK_HMAC 和 KEK_HMAC&#39; 两者是否相同，如果相同，继续下一步；如果不同则报错返回。</li><li>使用 KEK 解密 ENCMDEK 生成 MDEK。</li><li>使用 MDEK 调用 OpenSSL 的 HKDF 算法生成 TDEK，因为是特定的 info 所以可以生成相同 TDEK。</li><li>使用 MDEK 调用 OpenSSL 的 HKDF 算法生成 WDEK，因为是特定的 info 所以可以生成相同 WDEK。</li></ol><h4 id="密钥更换" tabindex="-1"><a class="header-anchor" href="#密钥更换"><span>密钥更换</span></a></h4><p>密钥更换的过程可以理解为先用旧的 KEK 还原密钥，然后再用新的 KEK 生成新的 kmgr 文件。其过程如下图：</p><p><img src="'+g+`" alt="image.png"></p><ol><li>读取 <code>global/kmgr</code> 文件获取 ENCMDEK 和 KEK_HMAC。</li><li>运行 <code>polar_cluster_passphrase_command</code> 得到 64 字节的 KEK + HMACK</li><li>ENCMDEK 和 HMACK 经过 HMAC 算法生成 KEK_HMAC&#39;，比较 KEK_HMAC 和 KEK_HMAC&#39; 两者是否相同，如果相同，继续下一步；如果不同则报错返回。</li><li>使用 KEK 解密 ENCMDEK 生成 MDEK。</li><li>运行 <code>polar_cluster_passphrase_command</code> 得到 64 字节新的 new_KEK + new_HMACK。</li><li>使用 new_KEK 加密 MDEK 生成 new_ENCMDEK。</li><li>new_ENCMDEK 和 new_HMACK 经过 HMAC 算法生成 new_KEK_HMAC 用于在还原密钥时校验信息。</li><li>将 new_ENCMDEK 和 new_KEK_HMAC 补充其他 <code>KmgrFileData</code> 结构信息写入 <code>global/kmgr</code> 文件。</li></ol><h3 id="加密模块" tabindex="-1"><a class="header-anchor" href="#加密模块"><span>加密模块</span></a></h3><p>我们期望对所有的用户数据按照 Page 的粒度进行加密，加密方法采用 AES-128/256 加密算法（产品化默认使用 AES-256）。<code>(page LSN，page number)</code> 作为每个数据页加密的 IV，IV 是可以保证相同内容加密出不同结果的初始向量。</p><p>每个 Page 的头部数据结构如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">PageHeaderData</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* XXX LSN is member of *any* block, not only page-organized ones */</span></span>
<span class="line">    PageXLogRecPtr pd_lsn<span class="token punctuation">;</span>      <span class="token comment">/* LSN: next byte after last byte of xlog</span>
<span class="line">                                 * record for last change to this page */</span></span>
<span class="line">    uint16      pd_checksum<span class="token punctuation">;</span>    <span class="token comment">/* checksum */</span></span>
<span class="line">    uint16      pd_flags<span class="token punctuation">;</span>       <span class="token comment">/* flag bits, see below */</span></span>
<span class="line">    LocationIndex pd_lower<span class="token punctuation">;</span>     <span class="token comment">/* offset to start of free space */</span></span>
<span class="line">    LocationIndex pd_upper<span class="token punctuation">;</span>     <span class="token comment">/* offset to end of free space */</span></span>
<span class="line">    LocationIndex pd_special<span class="token punctuation">;</span>   <span class="token comment">/* offset to start of special space */</span></span>
<span class="line">    uint16      pd_pagesize_version<span class="token punctuation">;</span></span>
<span class="line">    TransactionId pd_prune_xid<span class="token punctuation">;</span> <span class="token comment">/* oldest prunable XID, or zero if none */</span></span>
<span class="line">    ItemIdData  pd_linp<span class="token punctuation">[</span>FLEXIBLE_ARRAY_MEMBER<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* line pointer array */</span></span>
<span class="line"><span class="token punctuation">}</span> PageHeaderData<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述结构中：</p><ul><li><code>pd_lsn</code> 不能加密：因为解密时需要使用 IV 来解密。</li><li><code>pd_flags</code> 增加是否加密的标志位 <code>0x8000</code>，并且不加密：这样可以兼容明文 page 的读取，为增量实例打开 TDE 提供条件。</li><li><code>pd_checksum</code> 不加密：这样可以在密文条件下判断 Page 的校验和。</li></ul><h4 id="加密文件" tabindex="-1"><a class="header-anchor" href="#加密文件"><span>加密文件</span></a></h4><p>当前加密含有用户数据的文件，比如数据目录中以下子目录中的文件：</p><ul><li><code>base/</code></li><li><code>global/</code></li><li><code>pg_tblspc/</code></li><li><code>pg_replslot/</code></li><li><code>pg_stat/</code></li><li><code>pg_stat_tmp/</code></li><li>...</li></ul><h4 id="何时加密" tabindex="-1"><a class="header-anchor" href="#何时加密"><span>何时加密</span></a></h4><p>当前对于按照数据 Page 来进行组织的数据，将按照 Page 来进行加密的。Page 落盘之前必定需要计算校验和，即使校验和相关参数关闭，也会调用校验和相关的函数 <code>PageSetChecksumCopy</code>、<code>PageSetChecksumInplace</code>。所以，只需要计算校验和之前加密 Page，即可保证用户数据在存储上是被加密的。</p><h3 id="解密模块" tabindex="-1"><a class="header-anchor" href="#解密模块"><span>解密模块</span></a></h3><p>存储上的 Page 读入内存之前必定经过 checksum 校验，即使相关参数关闭，也会调用校验函数 <code>PageIsVerified</code>。所以，只需要在校验和计算之后解密，即可保证内存中的数据已被解密。</p>`,46))])}const b=r(k,[["render",_]]),f=JSON.parse('{"path":"/zh/features/security/tde.html","title":"TDE 透明数据加密","lang":"zh-CN","frontmatter":{"author":"恒亦","date":"2022/09/27","minute":20},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"术语","slug":"术语","link":"#术语","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[{"level":3,"title":"密钥管理模块","slug":"密钥管理模块","link":"#密钥管理模块","children":[]},{"level":3,"title":"加密模块","slug":"加密模块","link":"#加密模块","children":[]},{"level":3,"title":"解密模块","slug":"解密模块","link":"#解密模块","children":[]}]}],"git":{"updatedTime":1760793941000,"contributors":[{"name":"aCoder2013","username":"aCoder2013","email":"7877752+aCoder2013@users.noreply.github.com","commits":1,"url":"https://github.com/aCoder2013"}],"changelog":[{"hash":"6fcfdc2993a4b32b3c1c8119b43c3545d6ab9654","time":1760793941000,"email":"7877752+aCoder2013@users.noreply.github.com","author":"acoder2014","message":"fix: typo in arch-overview.md (#608)"}]},"filePathRelative":"zh/features/security/tde.md"}');export{b as comp,f as data};
