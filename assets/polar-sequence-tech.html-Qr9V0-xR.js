import{_ as p,c as l,a as n,b as t,e as c,r as i,o}from"./app-HZE5kvva.js";const r="/PolarDB-for-PostgreSQL/assets/polar_sequence_monotonic_cyclic-BSnsESxQ.png",m="/PolarDB-for-PostgreSQL/assets/polar_sequence_sql_interface-BgyrMPcn.png",d="/PolarDB-for-PostgreSQL/assets/polar_sequence_is_called-C-rPLlZf.png",u="/PolarDB-for-PostgreSQL/assets/polar_sequence_called-90ZF4rtX.png",k="/PolarDB-for-PostgreSQL/assets/polar_sequence_alignment_no_cache-BukQZCj0.png",v="/PolarDB-for-PostgreSQL/assets/polar_sequence_alignment_desc_1-Dh3U83gA.png",b="/PolarDB-for-PostgreSQL/assets/polar_sequence_session_cache-DUpcORNw.png",h="/PolarDB-for-PostgreSQL/assets/polar_sequence_alignment_cache-CCDMTKWV.png",g="/PolarDB-for-PostgreSQL/assets/polar_sequence_alignment_cache_1-CKDOEFZF.png",y="/PolarDB-for-PostgreSQL/assets/polar_sequence_performance_comparison-bcr8rzEc.png",E={};function w(a,s){const e=i("ArticleInfo");return o(),l("div",null,[s[0]||(s[0]=n("h1",{id:"sequence-使用、原理全面解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sequence-使用、原理全面解析"},[n("span",null,"Sequence 使用、原理全面解析")])],-1)),t(e,{frontmatter:a.$frontmatter},null,8,["frontmatter"]),s[1]||(s[1]=c(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>Sequence 作为数据库中的一个特别的表级对象，可以根据用户设定的不同属性，产生一系列有规则的整数，从而起到发号器的作用。</p><p>在使用方面，可以设置永不重复的 Sequence 用来作为一张表的主键，也可以通过不同表共享同一个 Sequence 来记录多个表的总插入行数。根据 ANSI 标准，一个 Sequence 对象在数据库要具备以下特征：</p><ol><li>独立的数据库对象 (CREATE SEQUENCE)，和表、视图同一层级</li><li>可以设置生成属性：初始值 (star value)，步长 (increment)，最大/小值 (max/min)，循环产生 (cycle)，缓存 (cache)等</li><li>Sequence 对象在<strong>当前值</strong>的基础上进行递增或者递减，当前值被初始化为初始值</li><li>在设置循环后，当前值的变化具有周期性；不设置循环下，当前值的变化具有单调性，当前值到达最值后不可再变化</li></ol><p>为了解释上述特性，我们分别定义 <code>a</code>、<code>b</code> 两种序列来举例其具体的行为。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> SEQUENCE a <span class="token keyword">start</span> <span class="token keyword">with</span> <span class="token number">5</span> minvalue <span class="token operator">-</span><span class="token number">1</span> increment <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> SEQUENCE b <span class="token keyword">start</span> <span class="token keyword">with</span> <span class="token number">2</span> minvalue <span class="token number">1</span> maxvalue <span class="token number">4</span> <span class="token keyword">cycle</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>两个 Sequence 对象提供的序列值，随着序列申请次数的变化，如下所示：</p><p><img src="`+r+'" alt="单调序列与循环序列"></p><table><thead><tr><th>PostgreSQL</th><th>Oracle</th><th>SQLSERVER</th><th>MySQL</th><th>MariaDB</th><th>DB2</th><th>Sybase</th><th>Hive</th></tr></thead><tbody><tr><td>支持</td><td>支持</td><td>支持</td><td>仅支持自增字段</td><td>支持</td><td>支持</td><td>仅支持自增字段</td><td>不支持</td></tr></tbody></table><p>为了更进一步了解 PostgreSQL 中的 Sequence 对象，我们先来了解 Sequence 的用法，并从用法中透析 Sequence 背后的设计原理。</p><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h2><p>PostgreSQL 提供了丰富的 Sequence 调用接口，以及组合使用的场景，以充分支持开发者的各种需求。</p><h3 id="sql-接口" tabindex="-1"><a class="header-anchor" href="#sql-接口"><span>SQL 接口</span></a></h3><p>PostgreSQL 对 Sequence 对象也提供了类似于 <strong>表</strong> 的访问方式，即 DQL、DML 以及 DDL。我们从下图中可一览对外提供的 SQL 接口。</p><p><img src="'+m+`" alt="SQL接口"></p><p>分别来介绍以下这几个接口：</p><h4 id="currval" tabindex="-1"><a class="header-anchor" href="#currval"><span>currval</span></a></h4><p>该接口的含义为，返回 Session 上次使用的某一 Sequence 的值。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select currval(&#39;seq&#39;);</span></span>
<span class="line"> currval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，使用该接口必须使用过一次 <code>nextval</code> 方法，否则会提示目标 Sequence 在当前 Session 未定义。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">postgres<span class="token operator">=</span><span class="token comment"># select currval(&#39;seq&#39;);</span></span>
<span class="line">ERROR:  currval <span class="token keyword">of</span> sequence <span class="token string">&quot;seq&quot;</span> <span class="token operator">is</span> <span class="token operator">not</span> yet defined <span class="token operator">in</span> this <span class="token keyword">session</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lastval" tabindex="-1"><a class="header-anchor" href="#lastval"><span>lastval</span></a></h4><p>该接口的含义为，返回 Session 上次使用的 Sequence 的值。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">3</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select lastval();</span></span>
<span class="line"> lastval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">3</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，为了知道上次用的是哪个 Sequence 对象，需要用一次 <code>nextval(&#39;seq&#39;)</code>，让 Session 以全局变量的形式记录下上次使用的 Sequence 对象。</p><p><code>lastval</code> 与 <code>curval</code> 两个接口仅仅只是参数不同，<code>currval</code> 需要指定是哪个访问过的 Sequence 对象，而 <code>lastval</code> 无法指定，只能是最近一次使用的 Sequence 对象。</p><h4 id="nextval" tabindex="-1"><a class="header-anchor" href="#nextval"><span>nextval</span></a></h4><p>该接口的含义为，取 Sequence 对象的下一个序列值。</p><p>通过使用 <code>nextval</code> 方法，可以让数据库基于 Sequence 对象的当前值，返回一个递增了 <code>increment</code> 数量的一个序列值，并将递增后的值作为 Sequence 对象当前值。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">postgres<span class="token operator">=</span><span class="token comment"># CREATE SEQUENCE seq start with 1 increment 2;</span></span>
<span class="line"><span class="token keyword">CREATE</span> SEQUENCE</span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">3</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>increment</code> 称作 Sequence 对象的步长，Sequence 的每次以 <code>nextval</code> 的方式进行申请，都是以步长为单位进行申请的。同时，需要注意的是，Sequence 对象创建好以后，第一次申请获得的值，是 start value 所定义的值。对于 start value 的默认值，有以下 PostgreSQL 规则：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mi mathvariant="normal">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mi>f</mi><mo>:</mo><mi>i</mi><mi>n</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>&gt;</mo><mn>0</mn><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">start\\_value = 1, if:increment &gt; 0; </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">in</span><span class="mord mathnormal">cre</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">;</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mi mathvariant="normal">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo>=</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mi>f</mi><mo>:</mo><mi>i</mi><mi>n</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>&lt;</mo><mn>0</mn><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">start\\_value = -1,if:increment &lt; 0; </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">in</span><span class="mord mathnormal">cre</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">;</span></span></span></span></span></p><p>另外，<code>nextval</code> 是一种特殊的 DML，其不受事务所保护，即：申请出的序列值不会再回滚。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">postgres<span class="token operator">=</span><span class="token comment"># BEGIN;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># ROLLBACK;</span></span>
<span class="line"><span class="token keyword">ROLLBACK</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PostgreSQL 为了 Sequence 对象可以获得较好的并发性能，并没有采用多版本的方式来更新 Sequence 对象，而是采用了原地修改的方式完成 Sequence 对象的更新，这种不用事务保护的方式几乎成为所有支持 Sequence 对象的 RDMS 的通用做法，这也使得 Sequence 成为一种特殊的表级对象。</p><h4 id="setval" tabindex="-1"><a class="header-anchor" href="#setval"><span>setval</span></a></h4><p>该接口的含义是，设置 Sequence 对象的序列值。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">4</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select setval(&#39;seq&#39;, 1);</span></span>
<span class="line"> setval</span>
<span class="line"><span class="token comment">--------</span></span>
<span class="line">      <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法可以将 Sequence 对象的序列值设置到给定的位置，同时可以将第一个序列值申请出来。如果不想申请出来，可以采用加入 <code>false</code> 参数的做法。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">4</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select setval(&#39;seq&#39;, 1, false);</span></span>
<span class="line"> setval</span>
<span class="line"><span class="token comment">--------</span></span>
<span class="line">      <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt="SQL接口"></p><p>通过在 <code>setval</code> 来设置好 Sequence 对象的值以后，同时来设置 Sequence 对象的 <code>is_called</code> 属性。<code>nextval</code> 就可以根据 Sequence 对象的 <code>is_called</code> 属性来判断要返回的是否要返回设置的序列值。即：如果 <code>is_called</code> 为 <code>false</code>，<code>nextval</code> 接口会去设置 <code>is_called</code> 为 <code>true</code>，而不是进行 increment。</p><h4 id="create-alter-sequence" tabindex="-1"><a class="header-anchor" href="#create-alter-sequence"><span>CREATE/ALTER SEQUENCE</span></a></h4><p><code>CREATE</code> 和 <code>ALTER SEQUENCE</code> 用于创建/变更 Sequence 对象，其中 Sequence 属性也通过 <code>CREATE</code> 和 <code>ALTER SEQUENCE</code> 接口进行设置，前面已简单介绍部分属性，下面将详细描述具体的属性。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span> <span class="token keyword">TEMPORARY</span> <span class="token operator">|</span> <span class="token keyword">TEMP</span> <span class="token punctuation">]</span> SEQUENCE <span class="token punctuation">[</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">]</span> name</span>
<span class="line">    <span class="token punctuation">[</span> <span class="token keyword">AS</span> data_type <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span> INCREMENT <span class="token punctuation">[</span> <span class="token keyword">BY</span> <span class="token punctuation">]</span> increment <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span> MINVALUE minvalue <span class="token operator">|</span> <span class="token keyword">NO</span> MINVALUE <span class="token punctuation">]</span> <span class="token punctuation">[</span> MAXVALUE maxvalue <span class="token operator">|</span> <span class="token keyword">NO</span> MAXVALUE <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span> <span class="token keyword">START</span> <span class="token punctuation">[</span> <span class="token keyword">WITH</span> <span class="token punctuation">]</span> <span class="token keyword">start</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> CACHE cache <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token keyword">NO</span> <span class="token punctuation">]</span> <span class="token keyword">CYCLE</span> <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span> OWNED <span class="token keyword">BY</span> { table_name<span class="token punctuation">.</span>column_name <span class="token operator">|</span> NONE } <span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">ALTER</span> SEQUENCE <span class="token punctuation">[</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">]</span> name</span>
<span class="line">    <span class="token punctuation">[</span> <span class="token keyword">AS</span> data_type <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span> INCREMENT <span class="token punctuation">[</span> <span class="token keyword">BY</span> <span class="token punctuation">]</span> increment <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span> MINVALUE minvalue <span class="token operator">|</span> <span class="token keyword">NO</span> MINVALUE <span class="token punctuation">]</span> <span class="token punctuation">[</span> MAXVALUE maxvalue <span class="token operator">|</span> <span class="token keyword">NO</span> MAXVALUE <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span> <span class="token keyword">START</span> <span class="token punctuation">[</span> <span class="token keyword">WITH</span> <span class="token punctuation">]</span> <span class="token keyword">start</span> <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span> RESTART <span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token keyword">WITH</span> <span class="token punctuation">]</span> restart <span class="token punctuation">]</span> <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span> CACHE cache <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token keyword">NO</span> <span class="token punctuation">]</span> <span class="token keyword">CYCLE</span> <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">[</span> OWNED <span class="token keyword">BY</span> { table_name<span class="token punctuation">.</span>column_name <span class="token operator">|</span> NONE } <span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>AS</code>：设置 Sequence 的数据类型，只可以设置为 <code>smallint</code>，<code>int</code>，<code>bigint</code>；与此同时也限定了 <code>minvalue</code> 和 <code>maxvalue</code> 的设置范围，默认为 <code>bigint</code> 类型（注意，只是限定，而不是设置，设置的范围不得超过数据类型的范围）。</li><li><code>INCREMENT</code>：步长，<code>nextval</code> 申请序列值的递增数量，默认值为 1。</li><li><code>MINVALUE</code> / <code>NOMINVALUE</code>：设置/不设置 Sequence 对象的最小值，如果不设置则是数据类型规定的范围，例如 <code>bigint</code> 类型，则最小值设置为 <code>PG_INT64_MIN</code>（-9223372036854775808）</li><li><code>MAXVALUE</code> / <code>NOMAXVALUE</code>：设置/不设置 Sequence 对象的最大值，如果不设置，则默认设置规则如上。</li><li><code>START</code>：Sequence 对象的初始值，必须在 <code>MINVALUE</code> 和 <code>MAXVALUE</code> 范围之间。</li><li><code>RESTART</code>：ALTER 后，可以重新设置 Sequence 对象的序列值，默认设置为 start value。</li><li><code>CACHE</code> / <code>NOCACHE</code>：设置 Sequence 对象使用的 Cache 大小，<code>NOCACHE</code> 或者不设置则默认为 1。</li><li><code>OWNED BY</code>：设置 Sequence 对象归属于某张表的某一列，删除列后，Sequence 对象也将删除。</li></ul><h4 id="特殊场景下的序列回滚" tabindex="-1"><a class="header-anchor" href="#特殊场景下的序列回滚"><span>特殊场景下的序列回滚</span></a></h4><p>下面描述了一种序列回滚的场景</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> SEQUENCE</span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># BEGIN;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># ALTER SEQUENCE seq maxvalue 10;</span></span>
<span class="line"><span class="token keyword">ALTER</span> SEQUENCE</span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># ROLLBACK;</span></span>
<span class="line"><span class="token keyword">ROLLBACK</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与之前描述的不同，此处 Sequence 对象受到了事务的保护，序列值发生了发生回滚。实际上，此处事务保护的是 <code>ALTER SEQUENCE</code>（DDL），而非 <code>nextval</code>（DML），因此此处发生的回滚是将 Sequence 对象回滚到 <code>ALTER SEQUENCE</code> 之前的状态，故发生了序列回滚现象。</p><h4 id="drop-truncate" tabindex="-1"><a class="header-anchor" href="#drop-truncate"><span>DROP/TRUNCATE</span></a></h4><ul><li><code>DROP SEQUENCE</code>，如字面意思，去除数据库中的 Sequence 对象。</li><li><code>TRUNCATE</code>，准确来讲，是通过 <code>TRUNCATE TABLE</code> 完成 <code>RESTART SEQUENCE</code>。</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">postgres<span class="token operator">=</span><span class="token comment"># CREATE TABLE tbl_iden (i INTEGER, j int GENERATED ALWAYS AS IDENTITY);</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># insert into tbl_iden values (100);</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token number">0</span> <span class="token number">1</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># insert into tbl_iden values (1000);</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token number">0</span> <span class="token number">1</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select * from tbl_iden;</span></span>
<span class="line">  i   <span class="token operator">|</span> j</span>
<span class="line"><span class="token comment">------+---</span></span>
<span class="line">  <span class="token number">100</span> <span class="token operator">|</span> <span class="token number">1</span></span>
<span class="line"> <span class="token number">1000</span> <span class="token operator">|</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># TRUNCATE TABLE tbl_iden RESTART IDENTITY;</span></span>
<span class="line"><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># insert into tbl_iden values (1234);</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token number">0</span> <span class="token number">1</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select * from tbl_iden;</span></span>
<span class="line">  i   <span class="token operator">|</span> j</span>
<span class="line"><span class="token comment">------+---</span></span>
<span class="line"> <span class="token number">1234</span> <span class="token operator">|</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处相当于在 <code>TRUNCATE</code> 表的时候，执行 <code>ALTER SEQUENCE RESTART</code>。</p><h3 id="sequence-组合使用场景" tabindex="-1"><a class="header-anchor" href="#sequence-组合使用场景"><span>Sequence 组合使用场景</span></a></h3><p>SEQUENCE 除了作为一个独立的对象时候以外，还可以组合其他 PostgreSQL 其他组件进行使用，我们总结了一下几个常用的场景。</p><p><img src="`+u+`" alt="组合调用"></p><h4 id="显式调用" tabindex="-1"><a class="header-anchor" href="#显式调用"><span>显式调用</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> SEQUENCE seq<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tbl <span class="token punctuation">(</span>i <span class="token keyword">INTEGER</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>nextval<span class="token punctuation">(</span><span class="token string">&#39;seq&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tbl <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">1</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span></span>
<span class="line">   tbl</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="触发器调用" tabindex="-1"><a class="header-anchor" href="#触发器调用"><span>触发器调用</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> SEQUENCE seq<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tbl <span class="token punctuation">(</span>i <span class="token keyword">INTEGER</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> j <span class="token keyword">INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">RETURNS</span> <span class="token keyword">TRIGGER</span> <span class="token keyword">AS</span></span>
<span class="line">$$</span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">NEW<span class="token punctuation">.</span>i :<span class="token operator">=</span> nextval<span class="token punctuation">(</span><span class="token string">&#39;seq&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">RETURN</span> NEW<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line">$$</span>
<span class="line"><span class="token keyword">LANGUAGE</span> <span class="token string">&#39;plpgsql&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> tg</span>
<span class="line">BEFORE <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> tbl</span>
<span class="line"><span class="token keyword">FOR EACH ROW</span></span>
<span class="line"><span class="token keyword">EXECUTE</span> <span class="token keyword">PROCEDURE</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl <span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tbl<span class="token punctuation">;</span></span>
<span class="line"> i <span class="token operator">|</span> j</span>
<span class="line"><span class="token comment">---+---</span></span>
<span class="line"> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">4</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="default-调用" tabindex="-1"><a class="header-anchor" href="#default-调用"><span>DEFAULT 调用</span></a></h4><p>显式 <code>DEFAULT</code> 调用：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> SEQUENCE seq<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tbl<span class="token punctuation">(</span>i <span class="token keyword">INTEGER</span> <span class="token keyword">DEFAULT</span> nextval<span class="token punctuation">(</span><span class="token string">&#39;seq&#39;</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> j <span class="token keyword">INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl <span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token keyword">DEFAULT</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl<span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">321</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl <span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>nextval<span class="token punctuation">(</span><span class="token string">&#39;seq&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tbl<span class="token punctuation">;</span></span>
<span class="line"> i <span class="token operator">|</span>  j</span>
<span class="line"><span class="token comment">---+-----</span></span>
<span class="line"> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">321</span></span>
<span class="line"> <span class="token number">1</span> <span class="token operator">|</span>  <span class="token number">11</span></span>
<span class="line"> <span class="token number">3</span> <span class="token operator">|</span>   <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SERIAL</code> 调用：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tbl <span class="token punctuation">(</span>i <span class="token keyword">SERIAL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> j <span class="token keyword">INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl <span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token keyword">DEFAULT</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl <span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tbl<span class="token punctuation">;</span></span>
<span class="line"> i <span class="token operator">|</span> j</span>
<span class="line"><span class="token comment">---+----</span></span>
<span class="line"> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">42</span></span>
<span class="line"> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">25</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>SERIAL</code> 并不是一种类型，而是 <code>DEFAULT</code> 调用的另一种形式，只不过 <code>SERIAL</code> 会自动创建 <code>DEFAULT</code> 约束所要使用的 Sequence。</p><h4 id="auto-inc-调用" tabindex="-1"><a class="header-anchor" href="#auto-inc-调用"><span>AUTO_INC 调用</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tbl <span class="token punctuation">(</span>i <span class="token keyword">int</span> GENERATED ALWAYS <span class="token keyword">AS</span> <span class="token keyword">IDENTITY</span><span class="token punctuation">,</span></span>
<span class="line">                  j <span class="token keyword">INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token keyword">DEFAULT</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl<span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tbl<span class="token punctuation">;</span></span>
<span class="line"> i <span class="token operator">|</span> j</span>
<span class="line"><span class="token comment">---+----</span></span>
<span class="line"> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">32</span></span>
<span class="line"> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">23</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AUTO_INC</code> 调用对列附加了自增约束，与 <code>default</code> 约束不同，自增约束通过查找 dependency 的方式找到该列关联的 Sequence，而 <code>default</code> 调用仅仅是将默认值设置为一个 <code>nextval</code> 表达式。</p><h2 id="原理剖析" tabindex="-1"><a class="header-anchor" href="#原理剖析"><span>原理剖析</span></a></h2><h3 id="sequence-在系统表与数据表中的描述" tabindex="-1"><a class="header-anchor" href="#sequence-在系统表与数据表中的描述"><span>Sequence 在系统表与数据表中的描述</span></a></h3><p>在 PostgreSQL 中有一张专门记录 Sequence 信息的系统表，即 <code>pg_sequence</code>。其表结构如下：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">postgres<span class="token operator">=</span><span class="token comment"># \\d pg_sequence</span></span>
<span class="line">             <span class="token keyword">Table</span> <span class="token string">&quot;pg_catalog.pg_sequence&quot;</span></span>
<span class="line">    <span class="token keyword">Column</span>    <span class="token operator">|</span>  <span class="token keyword">Type</span>   <span class="token operator">|</span> Collation <span class="token operator">|</span> Nullable <span class="token operator">|</span> <span class="token keyword">Default</span></span>
<span class="line"><span class="token comment">--------------+---------+-----------+----------+---------</span></span>
<span class="line"> seqrelid     <span class="token operator">|</span> oid     <span class="token operator">|</span>           <span class="token operator">|</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">|</span></span>
<span class="line"> seqtypid     <span class="token operator">|</span> oid     <span class="token operator">|</span>           <span class="token operator">|</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">|</span></span>
<span class="line"> seqstart     <span class="token operator">|</span> <span class="token keyword">bigint</span>  <span class="token operator">|</span>           <span class="token operator">|</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">|</span></span>
<span class="line"> seqincrement <span class="token operator">|</span> <span class="token keyword">bigint</span>  <span class="token operator">|</span>           <span class="token operator">|</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">|</span></span>
<span class="line"> seqmax       <span class="token operator">|</span> <span class="token keyword">bigint</span>  <span class="token operator">|</span>           <span class="token operator">|</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">|</span></span>
<span class="line"> seqmin       <span class="token operator">|</span> <span class="token keyword">bigint</span>  <span class="token operator">|</span>           <span class="token operator">|</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">|</span></span>
<span class="line"> seqcache     <span class="token operator">|</span> <span class="token keyword">bigint</span>  <span class="token operator">|</span>           <span class="token operator">|</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">|</span></span>
<span class="line"> seqcycle     <span class="token operator">|</span> <span class="token keyword">boolean</span> <span class="token operator">|</span>           <span class="token operator">|</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">|</span></span>
<span class="line">Indexes:</span>
<span class="line">    <span class="token string">&quot;pg_sequence_seqrelid_index&quot;</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> <span class="token keyword">btree</span> <span class="token punctuation">(</span>seqrelid<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不难看出，<code>pg_sequence</code> 中记录了 Sequence 的全部的属性信息，该属性在 <code>CREATE/ALTER SEQUENCE</code> 中被设置，Sequence 的 <code>nextval</code> 以及 <code>setval</code> 要经常打开这张系统表，按照<strong>规则</strong>办事。</p><p>对于 Sequence 序列数据本身，其实现方式是基于 heap 表实现的，heap 表共计三个字段，其在表结构如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">FormData_pg_sequence_data</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    int64		last_value<span class="token punctuation">;</span></span>
<span class="line">    int64		log_cnt<span class="token punctuation">;</span></span>
<span class="line">    bool		is_called<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> FormData_pg_sequence_data<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>last_value</code> 记录了 Sequence 的当前的序列值，我们称之为<strong>页面值</strong>（与后续的<strong>缓存值</strong>相区分）</li><li><code>log_cnt</code> 记录了 Sequence 在 <code>nextval</code> 申请时，预先向 WAL 中额外申请的序列次数，这一部分我们放在<strong>序列申请机制剖析</strong>中详细介绍。</li><li><code>is_called</code> 标记 Sequence 的 <code>last_value</code> 是否已经被申请过，例如 <code>setval</code> 可以设置 <code>is_called</code> 字段：</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token comment">-- setval false</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select setval(&#39;seq&#39;, 10, false);</span></span>
<span class="line"> setval</span>
<span class="line"><span class="token comment">--------</span></span>
<span class="line">     <span class="token number">10</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select * from seq;</span></span>
<span class="line"> last_value <span class="token operator">|</span> log_cnt <span class="token operator">|</span> is_called</span>
<span class="line"><span class="token comment">------------+---------+-----------</span></span>
<span class="line">         <span class="token number">10</span> <span class="token operator">|</span>       <span class="token number">0</span> <span class="token operator">|</span> f</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">      <span class="token number">10</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- setval true</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select setval(&#39;seq&#39;, 10, true);</span></span>
<span class="line"> setval</span>
<span class="line"><span class="token comment">--------</span></span>
<span class="line">     <span class="token number">10</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select * from seq;</span></span>
<span class="line"> last_value <span class="token operator">|</span> log_cnt <span class="token operator">|</span> is_called</span>
<span class="line"><span class="token comment">------------+---------+-----------</span></span>
<span class="line">         <span class="token number">10</span> <span class="token operator">|</span>       <span class="token number">0</span> <span class="token operator">|</span> t</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">      <span class="token number">11</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每当用户创建一个 Sequence 对象时，PostgreSQL 总是会创建出一张上面这种结构的 heap 表，来记录 Sequence 对象的数据信息。当 Sequence 对象因为 <code>nextval</code> 或 <code>setval</code> 导致序列值变化时，PostgreSQL 就会通过原地更新的方式更新 heap 表中的这一行的三个字段。</p><p>以 <code>setval</code> 为例，下面的逻辑解释了其具体的原地更新过程。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">do_setval</span><span class="token punctuation">(</span>Oid relid<span class="token punctuation">,</span> int64 next<span class="token punctuation">,</span> bool iscalled<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* 打开并对Sequence heap表进行加锁 */</span></span>
<span class="line">    <span class="token function">init_sequence</span><span class="token punctuation">(</span>relid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>elm<span class="token punctuation">,</span> <span class="token operator">&amp;</span>seqrel<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* 对buffer进行加锁，同时提取tuple */</span></span>
<span class="line">    seq <span class="token operator">=</span> <span class="token function">read_seq_tuple</span><span class="token punctuation">(</span>seqrel<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>seqdatatuple<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* 原地更新tuple */</span></span>
<span class="line">    seq<span class="token operator">-&gt;</span>last_value <span class="token operator">=</span> next<span class="token punctuation">;</span>		<span class="token comment">/* last fetched number */</span></span>
<span class="line">    seq<span class="token operator">-&gt;</span>is_called <span class="token operator">=</span> iscalled<span class="token punctuation">;</span></span>
<span class="line">    seq<span class="token operator">-&gt;</span>log_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* 释放buffer锁以及表锁 */</span></span>
<span class="line">    <span class="token function">UnlockReleaseBuffer</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">relation_close</span><span class="token punctuation">(</span>seqrel<span class="token punctuation">,</span> NoLock<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，<code>do_setval</code> 会直接去设置 Sequence heap 表中的这一行元组，而非普通 heap 表中的删除 + 插入的方式来完成元组更新，对于 <code>nextval</code> 而言，也是类似的过程，只不过 <code>last_value</code> 的值需要计算得出，而非用户设置。</p><h3 id="序列申请机制剖析" tabindex="-1"><a class="header-anchor" href="#序列申请机制剖析"><span>序列申请机制剖析</span></a></h3><p>讲清楚 Sequence 对象在内核中的存在形式之后，就需要讲清楚一个序列值是如何发出的，即 <code>nextval</code> 方法。其在内核的具体实现在 <code>sequence.c</code> 中的 <code>nextval_internal</code> 函数，其最核心的功能，就是计算 <code>last_value</code> 以及 <code>log_cnt</code>。</p><p><code>last_value</code> 和 <code>log_cnt</code> 的具体关系如下图：</p><p><img src="`+k+`" alt="页面值与wal关系"></p><p>其中 <code>log_cnt</code> 是一个预留的申请次数。默认值为 32，由下面的宏定义决定：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * We don&#39;t want to log each fetching of a value from a sequence,</span>
<span class="line"> * so we pre-log a few fetches in advance. In the event of</span>
<span class="line"> * crash we can lose (skip over) as many values as we pre-logged.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SEQ_LOG_VALS</span>	<span class="token expression"><span class="token number">32</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每当将 <code>last_value</code> 增加一个 increment 的长度时，<code>log_cnt</code> 就会递减 1。</p><p><img src="`+v+`" alt="页面值递增"></p><p>当 <code>log_cnt</code> 为 0，或者发生 <code>checkpoint</code> 以后，就会触发一次 WAL 日志写入，按下面的公式设置 WAL 日志中的页面值，并重新将 <code>log_cnt</code> 设置为 <code>SEQ_LOG_VALS</code>。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>w</mi><mi>a</mi><mi>l</mi><mi mathvariant="normal">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo>=</mo><mi>l</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi mathvariant="normal">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo>+</mo><mi>i</mi><mi>n</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>∗</mo><mi>S</mi><mi>E</mi><mi>Q</mi><mi mathvariant="normal">_</mi><mi>L</mi><mi>O</mi><mi>G</mi><mi mathvariant="normal">_</mi><mi>V</mi><mi>A</mi><mi>L</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">wal\\_value = last\\_value+increment*SEQ\\_LOG\\_VALS </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">in</span><span class="mord mathnormal">cre</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9933em;vertical-align:-0.31em;"></span><span class="mord mathnormal">SEQ</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">L</span><span class="mord mathnormal">OG</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal">A</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></span></p><p>通过这种方式，PostgreSQL 每次通过 <code>nextval</code> 修改页面中的 <code>last_value</code> 后，不需要每次都写入 WAL 日志。这意味着：如果 <code>nextval</code> 每次都需要修改页面值的话，这种优化将会使得写 WAL 的频率降低 32 倍。其代价就是，在发生 crash 前如果没有及时进行 checkpoint，那么会丢失一段序列。如下面所示：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">postgres<span class="token operator">=</span><span class="token comment"># create sequence seq;</span></span>
<span class="line"><span class="token keyword">CREATE</span> SEQUENCE</span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">       <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select * from seq;</span></span>
<span class="line"> last_value <span class="token operator">|</span> log_cnt <span class="token operator">|</span> is_called</span>
<span class="line"><span class="token comment">------------+---------+-----------</span></span>
<span class="line">          <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">32</span> <span class="token operator">|</span> t</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- crash and restart</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select * from seq;</span></span>
<span class="line"> last_value <span class="token operator">|</span> log_cnt <span class="token operator">|</span> is_called</span>
<span class="line"><span class="token comment">------------+---------+-----------</span></span>
<span class="line">         <span class="token number">33</span> <span class="token operator">|</span>       <span class="token number">0</span> <span class="token operator">|</span> t</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># select nextval(&#39;seq&#39;);</span></span>
<span class="line"> nextval</span>
<span class="line"><span class="token comment">---------</span></span>
<span class="line">      <span class="token number">34</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，crash 以后，Sequence 对象产生了 2-33 这段空洞，但这个代价是可以被接受的，因为 Sequence 并没有违背唯一性原则。同时，在特定场景下极大地降低了写 WAL 的频率。</p><h3 id="sequence-缓存机制" tabindex="-1"><a class="header-anchor" href="#sequence-缓存机制"><span>Sequence 缓存机制</span></a></h3><p>通过上述描述，不难发现 Sequence 每次发生序列申请，都需要通过加入 buffer 锁的方式来修改页面，这意味着 Sequence 的并发性能是比较差的。</p><p>针对这个问题，PostgreSQL 使用对 Sequence 使用了 Session Cache 来提前缓存一段序列，来提高并发性能。如下图所示：</p><p><img src="`+b+`" alt="Session Cache"></p><p>Sequence Session Cache 的实现是一个 entry 数量固定为 16 的哈希表，以 Sequence 的 OID 为 key 去检索已经缓存好的 Sequence 序列，其缓存的 value 结构如下：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SeqTableData</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Oid			relid<span class="token punctuation">;</span>			<span class="token comment">/* Sequence OID(hash key) */</span></span>
<span class="line">    int64		last<span class="token punctuation">;</span>			<span class="token comment">/* value last returned by nextval */</span></span>
<span class="line">    int64		cached<span class="token punctuation">;</span>			<span class="token comment">/* last value already cached for nextval */</span></span>
<span class="line">    int64		increment<span class="token punctuation">;</span>		<span class="token comment">/* copy of sequence&#39;s increment field */</span></span>
<span class="line"><span class="token punctuation">}</span> SeqTableData<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>last</code> 即为 Sequence 在 Session 中的<strong>当前值</strong>，即 current_value，<code>cached</code> 为 Sequence 在 Session 中的<strong>缓存值</strong>，即 cached_value，<code>increment</code> 记录了步长，有了这三个值即可满足 Sequence 缓存的基本条件。</p><p>对于 Sequence Session Cache 与页面值之间的关系，如下图所示：</p><p><img src="`+h+'" alt="cache与页面关系"></p><p>类似于 <code>log_cnt</code>，<code>cache_cnt</code> 即为用户在定义 Sequence 时，设置的 Cache 大小，最小为 1。只有当 cache domain 中的序列用完以后，才会去对 buffer 加锁，修改页中的 Sequence <strong>页面值</strong>。调整过程如下所示：</p><p><img src="'+g+'" alt="cache申请"></p><p>例如，如果 CACHE 设置的值为 20，那么当 cache 使用完以后，就会尝试对 buffer 加锁来调整<strong>页面值</strong>，并重新申请 20 个 increment 至 cache 中。对于上图而言，有如下关系：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mi>a</mi><mi>c</mi><mi>h</mi><mi>e</mi><mi>d</mi><mi mathvariant="normal">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo>=</mo><mi>N</mi><mi>E</mi><mi>W</mi><mtext> </mtext><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">cached\\_value = NEW\\ current\\_value </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">NE</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace"> </span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal">rre</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>N</mi><mi>E</mi><mi>W</mi><mtext> </mtext><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo>+</mo><mn>20</mn><mo>×</mo><mi>I</mi><mi>N</mi><mi>C</mi><mo>=</mo><mi>N</mi><mi>E</mi><mi>W</mi><mtext> </mtext><mi>c</mi><mi>a</mi><mi>c</mi><mi>h</mi><mi>e</mi><mi>d</mi><mi mathvariant="normal">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">NEW\\ current\\_value+20\\times INC=NEW\\ cached\\_value </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">NE</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace"> </span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal">rre</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">20</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.07153em;">NC</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">NE</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace"> </span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>N</mi><mi>E</mi><mi>W</mi><mtext> </mtext><mi>l</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi mathvariant="normal">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo>=</mo><mi>N</mi><mi>E</mi><mi>W</mi><mtext> </mtext><mi>c</mi><mi>a</mi><mi>c</mi><mi>h</mi><mi>e</mi><mi>d</mi><mi mathvariant="normal">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">NEW\\ last\\_value = NEW\\ cached\\_value </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">NE</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">NE</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace"> </span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span></span></span></span></span></p><p>在 Sequence Session Cache 的加持下，<code>nextval</code> 方法的并发性能得到了极大的提升，以下是通过 pgbench 进行压测的结果对比。</p><p><img src="'+y+'" alt="性能对比"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Sequence 在 PostgreSQL 中是一类特殊的表级对象，提供了简单而又丰富的 SQL 接口，使得用户可以更加方便的创建、使用定制化的序列对象。不仅如此，Sequence 在内核中也具有丰富的组合使用场景，其使用场景也得到了极大地扩展。</p><p>本文详细介绍了 Sequence 对象在 PostgreSQL 内核中的具体设计，从对象的元数据描述、对象的数据描述出发，介绍了 Sequence 对象的组成。本文随后介绍了 Sequence 最为核心的 SQL 接口——<code>nextval</code>，从 <code>nextval</code> 的序列值计算、原地更新、降低 WAL 日志写入三个方面进行了详细阐述。最后，本文介绍了 Sequence Session Cache 的相关原理，描述了引入 Cache 以后，序列值在 Cache 中，以及页面中的计算方法以及对齐关系，并对比了引入 Cache 前后，<code>nextval</code> 方法在单序列和多序列并发场景下的对比情况。</p>',117))])}const S=p(E,[["render",w]]),x=JSON.parse('{"path":"/zh/theory/polar-sequence-tech.html","title":"Sequence 使用、原理全面解析","lang":"zh-CN","frontmatter":{"author":"羁鸟","date":"2022/08/22","minute":30},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[{"level":3,"title":"SQL 接口","slug":"sql-接口","link":"#sql-接口","children":[]},{"level":3,"title":"Sequence 组合使用场景","slug":"sequence-组合使用场景","link":"#sequence-组合使用场景","children":[]}]},{"level":2,"title":"原理剖析","slug":"原理剖析","link":"#原理剖析","children":[{"level":3,"title":"Sequence 在系统表与数据表中的描述","slug":"sequence-在系统表与数据表中的描述","link":"#sequence-在系统表与数据表中的描述","children":[]},{"level":3,"title":"序列申请机制剖析","slug":"序列申请机制剖析","link":"#序列申请机制剖析","children":[]},{"level":3,"title":"Sequence 缓存机制","slug":"sequence-缓存机制","link":"#sequence-缓存机制","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1760793941000,"contributors":[{"name":"aCoder2013","username":"aCoder2013","email":"7877752+aCoder2013@users.noreply.github.com","commits":1,"url":"https://github.com/aCoder2013"}],"changelog":[{"hash":"6fcfdc2993a4b32b3c1c8119b43c3545d6ab9654","time":1760793941000,"email":"7877752+aCoder2013@users.noreply.github.com","author":"acoder2014","message":"fix: typo in arch-overview.md (#608)"}]},"filePathRelative":"zh/theory/polar-sequence-tech.md"}');export{S as comp,x as data};
