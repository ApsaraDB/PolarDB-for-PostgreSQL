import{_ as u,c as k,a as n,b as a,e as o,w as p,d as e,r as t,o as m}from"./app-HZE5kvva.js";const b="/PolarDB-for-PostgreSQL/assets/htap-non-adaptive-scan-M-kqk4bv.png",v="/PolarDB-for-PostgreSQL/assets/htap-adaptive-scan-DNIJP8n3.png",h={},g={class:"table-of-contents"};function P(r,s){const i=t("Badge"),c=t("ArticleInfo"),l=t("router-link"),d=t("RouteLink");return m(),k("div",null,[s[14]||(s[14]=n("h1",{id:"自适应扫描",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#自适应扫描"},[n("span",null,"自适应扫描")])],-1)),a(i,{type:"tip",text:"V11 / v1.1.17-",vertical:"top"}),a(c,{frontmatter:r.$frontmatter},null,8,["frontmatter"]),n("nav",g,[n("ul",null,[n("li",null,[a(l,{to:"#背景介绍"},{default:p(()=>s[0]||(s[0]=[e("背景介绍")])),_:1})]),n("li",null,[a(l,{to:"#术语"},{default:p(()=>s[1]||(s[1]=[e("术语")])),_:1})]),n("li",null,[a(l,{to:"#功能介绍"},{default:p(()=>s[2]||(s[2]=[e("功能介绍")])),_:1}),n("ul",null,[n("li",null,[a(l,{to:"#非自适应扫描"},{default:p(()=>s[3]||(s[3]=[e("非自适应扫描")])),_:1})]),n("li",null,[a(l,{to:"#自适应扫描-1"},{default:p(()=>s[4]||(s[4]=[e("自适应扫描")])),_:1})])])]),n("li",null,[a(l,{to:"#功能设计"},{default:p(()=>s[5]||(s[5]=[e("功能设计")])),_:1}),n("ul",null,[n("li",null,[a(l,{to:"#非自适应扫描-1"},{default:p(()=>s[6]||(s[6]=[e("非自适应扫描")])),_:1})]),n("li",null,[a(l,{to:"#自适应扫描-2"},{default:p(()=>s[7]||(s[7]=[e("自适应扫描")])),_:1})])])]),n("li",null,[a(l,{to:"#使用指南"},{default:p(()=>s[8]||(s[8]=[e("使用指南")])),_:1}),n("ul",null,[n("li",null,[a(l,{to:"#非自适应扫描-2"},{default:p(()=>s[9]||(s[9]=[e("非自适应扫描")])),_:1})]),n("li",null,[a(l,{to:"#自适应扫描-3"},{default:p(()=>s[10]||(s[10]=[e("自适应扫描")])),_:1})])])])])]),s[15]||(s[15]=o('<h2 id="背景介绍" tabindex="-1"><a class="header-anchor" href="#背景介绍"><span>背景介绍</span></a></h2><p>PolarDB for PostgreSQL 支持 ePQ 弹性跨机并行查询特性，通过利用集群中多个节点的计算能力，来实现跨节点的并行查询功能。ePQ 可以支持顺序扫描、索引扫描等多种物理算子的跨节点并行化。其中，对顺序扫描算子，ePQ 提供了两种扫描模式，分别为 <strong>自适应扫描模式</strong> 与 <strong>非自适应扫描模式</strong>。</p><h2 id="术语" tabindex="-1"><a class="header-anchor" href="#术语"><span>术语</span></a></h2><ul><li>QC：Query Coordinator，发起 ePQ 并行查询的进程角色。</li><li>PX Worker：参与 ePQ 跨节点并行查询的工作进程角色。</li><li>Worker ID：唯一标识一个 PX Worker 的编号。</li><li>Disk Unit ID：ePQ 跨节点并行扫描的最小存储单元，默认为 4MB 大小。</li></ul><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍"><span>功能介绍</span></a></h2><h3 id="非自适应扫描" tabindex="-1"><a class="header-anchor" href="#非自适应扫描"><span>非自适应扫描</span></a></h3><p>非自适应扫描模式是 ePQ 顺序扫描算子（Sequential Scan）的默认扫描方式。每一个参与并行查询的 PX Worker 在执行过程中都会被分配一个唯一的 Worker ID。非自适应扫描模式将会依据 Worker ID 划分数据表在物理存储上的 Disk Unit ID，从而实现每个 PX Worker 可以均匀扫描数据表在共享存储上的存储单元，所有 PX Worker 的扫描结果最终汇总形成全量的数据。</p><h3 id="自适应扫描-1" tabindex="-1"><a class="header-anchor" href="#自适应扫描-1"><span>自适应扫描</span></a></h3><p>在非自适应扫描模式下，扫描单元会均匀划分给每个 PX Worker。当存在个别只读节点计算资源不足的情况下，可能会导致扫描过程发生计算倾斜：用户发起的单次并行查询迟迟不能完成，查询受限于计算资源不足的节点长时间不能完成扫描任务。</p><p>ePQ 提供的自适应扫描模式可以解决这个问题。自适应扫描模式不再限定每个 PX Worker 扫描特定的 Disk Unit ID，而是采用 <strong>请求-响应（Request-Response）模式</strong>，通过 QC 进程与 PX Worker 进程之间的特定 RPC 通信机制，由 QC 进程负责告知每个 PX Worker 进程可以执行的扫描任务，从而消除计算倾斜的问题。</p><h2 id="功能设计" tabindex="-1"><a class="header-anchor" href="#功能设计"><span>功能设计</span></a></h2><h3 id="非自适应扫描-1" tabindex="-1"><a class="header-anchor" href="#非自适应扫描-1"><span>非自适应扫描</span></a></h3><p>QC 进程在发起并行查询任务时，会为每个 PX Worker 进程分配固定的 Worker ID，每个 PX Worker 进程根据 Worker ID 对存储单元 <strong>取模</strong>，只扫描其所属的特定的 Dist Unit。</p><p><img src="'+b+'" alt="non-adaptive-scan"></p><h3 id="自适应扫描-2" tabindex="-1"><a class="header-anchor" href="#自适应扫描-2"><span>自适应扫描</span></a></h3><p>QC 进程在发起并行查询任务时，会启动 <strong>自适应扫描线程</strong>，用于接收并处理来自 PX Worker 进程的请求消息。自适应扫描线程维护了当前查询扫描任务的进度，并根据每个 PX Worker 进程的工作进度，向 PX Worker 进程分派需要扫描的 Disk Unit ID。对于需要扫描的最后一个 Disk Unit，自适应扫描线程会唤醒处于空闲状态的 PX Worker，加速最后一块 Disk Unit 的扫描过程。</p><p><img src="'+v+'" alt="adaptive-scan"></p><h4 id="消息通信机制" tabindex="-1"><a class="header-anchor" href="#消息通信机制"><span>消息通信机制</span></a></h4><p>由于自适应扫描线程与各个 PX worker 进程之间的通信数据很少，频率不高，所以重用了已有的 QC 进程与 PX worker 进程之间的 libpq 连接进行报文通信。自适应扫描线程通过 <strong>poll</strong> 的方式在需要时同步轮询 PX Worker 进程的请求和响应。</p><h4 id="扫描任务协调" tabindex="-1"><a class="header-anchor" href="#扫描任务协调"><span>扫描任务协调</span></a></h4><p>PX Worker 进程在执行顺序扫描算子时，会首先向 QC 进程发起询问请求，将以下信息发送给 QC 端的自适应扫描线程：</p><ul><li>扫描任务的编号</li><li>扫描动作（正向 / 反向扫描）</li><li>扫描物理块数</li></ul><p>自适应扫描线程在收到询问请求后，会创建扫描任务或更新扫描任务的进度。</p><h4 id="可变颗粒度" tabindex="-1"><a class="header-anchor" href="#可变颗粒度"><span>可变颗粒度</span></a></h4><p>为了减少请求带来的网络交互次数，ePQ 实现了可变的任务颗粒度。当扫描任务量剩余较多时，PX Worker 进程单次领取的扫描物理块数较多；当扫描任务量剩余较少时，PX Worker 进程单次领取的扫描物理块数相应减少。通过这种方法，可以平衡 <strong>网络开销</strong> 与 <strong>负载均衡</strong> 两者之间的关系。</p><h4 id="缓存友好" tabindex="-1"><a class="header-anchor" href="#缓存友好"><span>缓存友好</span></a></h4>',26)),n("p",null,[s[12]||(s[12]=e("自适应扫描模式将尽量保证每个节点在多次执行并行查询任务时，能够重用 Shared Buffer 缓存，避免缓存频繁更新 / 淘汰。在实现上，自适应扫描功能会根据 ")),a(d,{to:"/zh/features/epq/cluster-info.html"},{default:p(()=>s[11]||(s[11]=[e("集群拓扑视图")])),_:1}),s[13]||(s[13]=e(" 配置的节点 IP 地址信息，采用缓存绑定策略，尽量让同一个物理 Page 被同一个节点复用。"))]),s[16]||(s[16]=o(`<h4 id="报文设计" tabindex="-1"><a class="header-anchor" href="#报文设计"><span>报文设计</span></a></h4><ul><li><p>PX Worker 请求报文：采用 libpq 的 <code>&#39;S&#39;</code> 协议进行通信，按照 key-value 的方式编码为字符串。</p><table><thead><tr><th>内容</th><th>描述</th></tr></thead><tbody><tr><td>task_id</td><td>扫描任务编号</td></tr><tr><td>direction</td><td>扫描方向</td></tr><tr><td>page_count</td><td>需扫描的总物理块数</td></tr><tr><td>scan_start</td><td>扫描起始物理块号</td></tr><tr><td>current_page</td><td>当前扫描的物理块号</td></tr><tr><td>scan_round</td><td>扫描的次数</td></tr></tbody></table></li><li><p>自适应扫描线程回复报文</p><table><thead><tr><th>内容</th><th>描述</th></tr></thead><tbody><tr><td>success</td><td>是否成功</td></tr><tr><td>page_start</td><td>响应的起始物理块号</td></tr><tr><td>page_end</td><td>响应的结束物理块号</td></tr></tbody></table></li></ul><h2 id="使用指南" tabindex="-1"><a class="header-anchor" href="#使用指南"><span>使用指南</span></a></h2><p>创建测试表：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">postgres<span class="token operator">=</span><span class="token comment"># CREATE TABLE t(id INT);</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># INSERT INTO t VALUES(generate_series(1,100));</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token number">0</span> <span class="token number">100</span></span>
<span class="line"></span></code></pre></div><h3 id="非自适应扫描-2" tabindex="-1"><a class="header-anchor" href="#非自适应扫描-2"><span>非自适应扫描</span></a></h3><p>开启 ePQ 并行查询功能，并设置单节点并发度为 3。通过 <code>EXPLAIN</code> 可以看到执行计划来自 PX 优化器。由于参与测试的只读节点有两个，所以从执行计划中可以看到整体并发度为 6。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">postgres<span class="token operator">=</span><span class="token comment"># SET polar_enable_px = 1;</span></span>
<span class="line"><span class="token keyword">SET</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># SET polar_px_dop_per_node = 3;</span></span>
<span class="line"><span class="token keyword">SET</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># SHOW polar_px_enable_adps;</span></span>
<span class="line"> polar_px_enable_adps</span>
<span class="line"><span class="token comment">----------------------</span></span>
<span class="line"> <span class="token keyword">off</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># EXPLAIN SELECT * FROM t;</span></span>
<span class="line">                                  QUERY <span class="token keyword">PLAN</span></span>
<span class="line"><span class="token comment">-------------------------------------------------------------------------------</span></span>
<span class="line"> PX Coordinator <span class="token number">6</span>:<span class="token number">1</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.431</span><span class="token number">.00</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">1</span> width<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.431</span><span class="token number">.00</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">1</span> width<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"> Optimizer: PolarDB PX Optimizer</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># SELECT COUNT(*) FROM t;</span></span>
<span class="line"> count</span>
<span class="line"><span class="token comment">-------</span></span>
<span class="line">   <span class="token number">100</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自适应扫描-3" tabindex="-1"><a class="header-anchor" href="#自适应扫描-3"><span>自适应扫描</span></a></h3><p>开启自适应扫描功能的开关后，通过 <code>EXPLAIN ANALYZE</code> 可以看到每个 PX Worker 进程扫描的物理块号。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">postgres<span class="token operator">=</span><span class="token comment"># SET polar_enable_px = 1;</span></span>
<span class="line"><span class="token keyword">SET</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># SET polar_px_dop_per_node = 3;</span></span>
<span class="line"><span class="token keyword">SET</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># SET polar_px_enable_adps = 1;</span></span>
<span class="line"><span class="token keyword">SET</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># SHOW polar_px_enable_adps;</span></span>
<span class="line"> polar_px_enable_adps</span>
<span class="line"><span class="token comment">----------------------</span></span>
<span class="line"> <span class="token keyword">on</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># SET polar_px_enable_adps_explain_analyze = 1;</span></span>
<span class="line"><span class="token keyword">SET</span></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># SHOW polar_px_enable_adps_explain_analyze;</span></span>
<span class="line"> polar_px_enable_adps_explain_analyze</span>
<span class="line"><span class="token comment">--------------------------------------</span></span>
<span class="line"> <span class="token keyword">on</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># EXPLAIN ANALYZE SELECT * FROM t;</span></span>
<span class="line">                                                        QUERY <span class="token keyword">PLAN</span></span>
<span class="line"><span class="token comment">---------------------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"> PX Coordinator <span class="token number">6</span>:<span class="token number">1</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.431</span><span class="token number">.00</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">1</span> width<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>actual <span class="token keyword">time</span><span class="token operator">=</span><span class="token number">0.968</span><span class="token punctuation">.</span><span class="token number">.0</span><span class="token number">.982</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">100</span> loops<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.431</span><span class="token number">.00</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">1</span> width<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>actual <span class="token keyword">time</span><span class="token operator">=</span><span class="token number">0.380</span><span class="token punctuation">.</span><span class="token number">.0</span><span class="token number">.435</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">100</span> loops<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">         Dynamic Pages Per Worker: <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"> Planning <span class="token keyword">Time</span>: <span class="token number">5.571</span> ms</span>
<span class="line"> Optimizer: PolarDB PX Optimizer</span>
<span class="line">   <span class="token punctuation">(</span>slice0<span class="token punctuation">)</span>    Executor memory: <span class="token number">23</span>K bytes<span class="token punctuation">.</span></span>
<span class="line">   <span class="token punctuation">(</span>slice1<span class="token punctuation">)</span>    Executor memory: <span class="token number">14</span>K bytes avg x <span class="token number">6</span> workers<span class="token punctuation">,</span> <span class="token number">14</span>K bytes <span class="token function">max</span> <span class="token punctuation">(</span>seg0<span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line"> Execution <span class="token keyword">Time</span>: <span class="token number">9.047</span> ms</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">8</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">postgres<span class="token operator">=</span><span class="token comment"># SELECT COUNT(*) FROM t;</span></span>
<span class="line"> count</span>
<span class="line"><span class="token comment">-------</span></span>
<span class="line">   <span class="token number">100</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11))])}const f=u(h,[["render",P]]),y=JSON.parse('{"path":"/zh/features/epq/adaptive-scan.html","title":"自适应扫描","lang":"zh-CN","frontmatter":{"author":"步真","date":"2022/09/21","minute":25},"headers":[{"level":2,"title":"背景介绍","slug":"背景介绍","link":"#背景介绍","children":[]},{"level":2,"title":"术语","slug":"术语","link":"#术语","children":[]},{"level":2,"title":"功能介绍","slug":"功能介绍","link":"#功能介绍","children":[{"level":3,"title":"非自适应扫描","slug":"非自适应扫描","link":"#非自适应扫描","children":[]},{"level":3,"title":"自适应扫描","slug":"自适应扫描-1","link":"#自适应扫描-1","children":[]}]},{"level":2,"title":"功能设计","slug":"功能设计","link":"#功能设计","children":[{"level":3,"title":"非自适应扫描","slug":"非自适应扫描-1","link":"#非自适应扫描-1","children":[]},{"level":3,"title":"自适应扫描","slug":"自适应扫描-2","link":"#自适应扫描-2","children":[]}]},{"level":2,"title":"使用指南","slug":"使用指南","link":"#使用指南","children":[{"level":3,"title":"非自适应扫描","slug":"非自适应扫描-2","link":"#非自适应扫描-2","children":[]},{"level":3,"title":"自适应扫描","slug":"自适应扫描-3","link":"#自适应扫描-3","children":[]}]}],"git":{"updatedTime":1760793941000,"contributors":[{"name":"aCoder2013","username":"aCoder2013","email":"7877752+aCoder2013@users.noreply.github.com","commits":1,"url":"https://github.com/aCoder2013"}],"changelog":[{"hash":"6fcfdc2993a4b32b3c1c8119b43c3545d6ab9654","time":1760793941000,"email":"7877752+aCoder2013@users.noreply.github.com","author":"acoder2014","message":"fix: typo in arch-overview.md (#608)"}]},"filePathRelative":"zh/features/epq/adaptive-scan.md"}');export{f as comp,y as data};
