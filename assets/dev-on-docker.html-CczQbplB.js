import{_ as u,c as b,a,b as p,e as o,d as s,w as e,r as i,o as k}from"./app-HZE5kvva.js";const h={};function m(c,n){const d=i("ArticleInfo"),r=i("CodeTabs");return k(),b("div",null,[n[12]||(n[12]=a("h1",{id:"基于-docker-容器开发",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#基于-docker-容器开发"},[a("span",null,"基于 Docker 容器开发")])],-1)),p(d,{frontmatter:c.$frontmatter},null,8,["frontmatter"]),n[13]||(n[13]=a("h2",{id:"下载源代码",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#下载源代码"},[a("span",null,"下载源代码")])],-1)),n[14]||(n[14]=a("p",null,[s("从 "),a("a",{href:"https://github.com/ApsaraDB/PolarDB-for-PostgreSQL",target:"_blank",rel:"noopener noreferrer"},"GitHub"),s(" 上下载 PolarDB for PostgreSQL 的源代码，稳定分支为 "),a("code",null,"POLARDB_15_STABLE"),s("：")],-1)),p(r,{id:"11",data:[{id:"GitHub"},{id:"Gitee"}]},{title0:e(({value:t,isActive:l})=>n[0]||(n[0]=[s("GitHub")])),title1:e(({value:t,isActive:l})=>n[1]||(n[1]=[s("Gitee")])),tab0:e(({value:t,isActive:l})=>n[2]||(n[2]=[a("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[a("pre",null,[a("code",null,[a("span",{class:"line"},[a("span",{class:"token function"},"git"),s(" clone "),a("span",{class:"token parameter variable"},"-b"),s(" POLARDB_15_STABLE https://github.com/ApsaraDB/PolarDB-for-PostgreSQL.git")]),s(`
`),a("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:l})=>n[3]||(n[3]=[a("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[a("pre",null,[a("code",null,[a("span",{class:"line"},[a("span",{class:"token function"},"git"),s(" clone "),a("span",{class:"token parameter variable"},"-b"),s(" POLARDB_15_STABLE https://gitee.com/mirrors/PolarDB-for-PostgreSQL")]),s(`
`),a("span",{class:"line"})])])],-1)])),_:1}),n[15]||(n[15]=o(`<p>代码克隆完毕后，进入源码目录：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> PolarDB-for-PostgreSQL/</span>
<span class="line"></span></code></pre></div><h2 id="拉取开发镜像" tabindex="-1"><a class="header-anchor" href="#拉取开发镜像"><span>拉取开发镜像</span></a></h2><p>拉取 PolarDB-PG 的 <a href="https://hub.docker.com/r/polardb/polardb_pg_devel/tags" target="_blank" rel="noopener noreferrer">开发镜像</a>。</p>`,4)),p(r,{id:"29",data:[{id:"DockerHub"},{id:"阿里云 ACR"}]},{title0:e(({value:t,isActive:l})=>n[4]||(n[4]=[s("DockerHub")])),title1:e(({value:t,isActive:l})=>n[5]||(n[5]=[s("阿里云 ACR")])),tab0:e(({value:t,isActive:l})=>n[6]||(n[6]=[a("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[a("pre",null,[a("code",null,[a("span",{class:"line"},[a("span",{class:"token function"},"docker"),s(" pull polardb/polardb_pg_devel:ubuntu24.04")]),s(`
`),a("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:l})=>n[7]||(n[7]=[a("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[a("pre",null,[a("code",null,[a("span",{class:"line"},[a("span",{class:"token function"},"docker"),s(" pull registry.cn-hangzhou.aliyuncs.com/polardb_pg/polardb_pg_devel:ubuntu24.04")]),s(`
`),a("span",{class:"line"})])])],-1)])),_:1}),n[16]||(n[16]=a("h2",{id:"创建并运行容器",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#创建并运行容器"},[a("span",null,"创建并运行容器")])],-1)),n[17]||(n[17]=a("p",null,"此时我们已经在开发机器的源码目录中。从开发镜像上创建一个容器，将当前目录作为一个 volume 挂载到容器中，这样可以：",-1)),n[18]||(n[18]=a("ul",null,[a("li",null,"在容器内的环境中编译源码"),a("li",null,"在容器外（开发机器上）使用编辑器来查看或修改代码")],-1)),p(r,{id:"55",data:[{id:"DockerHub"},{id:"阿里云 ACR"}]},{title0:e(({value:t,isActive:l})=>n[8]||(n[8]=[s("DockerHub")])),title1:e(({value:t,isActive:l})=>n[9]||(n[9]=[s("阿里云 ACR")])),tab0:e(({value:t,isActive:l})=>n[10]||(n[10]=[a("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[a("pre",null,[a("code",null,[a("span",{class:"line"},[a("span",{class:"token function"},"docker"),s(" run "),a("span",{class:"token parameter variable"},"-it"),s(),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    "),a("span",{class:"token parameter variable"},"-v"),s(),a("span",{class:"token environment constant"},"$PWD"),s(":/home/postgres/polardb_pg "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    --shm-size"),a("span",{class:"token operator"},"="),s("512m --cap-add"),a("span",{class:"token operator"},"="),s("SYS_PTRACE "),a("span",{class:"token parameter variable"},"--privileged"),a("span",{class:"token operator"},"="),s("true "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    "),a("span",{class:"token parameter variable"},"--name"),s(" polardb_pg_devel "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    polardb/polardb_pg_devel:ubuntu24.04 "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    "),a("span",{class:"token function"},"bash")]),s(`
`),a("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:l})=>n[11]||(n[11]=[a("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[a("pre",null,[a("code",null,[a("span",{class:"line"},[a("span",{class:"token function"},"docker"),s(" run "),a("span",{class:"token parameter variable"},"-it"),s(),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    "),a("span",{class:"token parameter variable"},"-v"),s(),a("span",{class:"token environment constant"},"$PWD"),s(":/home/postgres/polardb_pg "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    --shm-size"),a("span",{class:"token operator"},"="),s("512m --cap-add"),a("span",{class:"token operator"},"="),s("SYS_PTRACE "),a("span",{class:"token parameter variable"},"--privileged"),a("span",{class:"token operator"},"="),s("true "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    "),a("span",{class:"token parameter variable"},"--name"),s(" polardb_pg_devel "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    registry.cn-hangzhou.aliyuncs.com/polardb_pg/polardb_pg_devel:ubuntu24.04 "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    "),a("span",{class:"token function"},"bash")]),s(`
`),a("span",{class:"line"})])])],-1)])),_:1}),n[19]||(n[19]=o(`<p>进入容器后，为容器内用户获取源码目录的权限，然后编译部署 PolarDB-PG 实例。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># 获取权限并编译部署</span></span>
<span class="line"><span class="token builtin class-name">cd</span> polardb_pg</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token parameter variable">-R</span> a+wr ./</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> postgres:postgres ./</span>
<span class="line">./build.sh</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 验证</span></span>
<span class="line">psql <span class="token parameter variable">-c</span> <span class="token string">&#39;SELECT version();&#39;</span></span>
<span class="line">                                   version</span>
<span class="line">----------------------------------------------------------------------</span>
<span class="line"> PostgreSQL <span class="token number">15</span>.x <span class="token punctuation">(</span>PolarDB <span class="token number">15</span>.x.x.x build xxxxxxxx<span class="token punctuation">)</span> on <span class="token punctuation">{</span>your_platform<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span> row<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><h2 id="构建选项说明" tabindex="-1"><a class="header-anchor" href="#构建选项说明"><span>构建选项说明</span></a></h2><p>以下表格列出了编译、初始化或测试 PolarDB-PG 集群所可能使用到的选项及说明。更多选项及其说明详见源码目录下的 <code>build.sh</code> 脚本。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>--wr=N</code></td><td>初始化 Replica 节点数量</td></tr><tr><td><code>--ws=N</code></td><td>初始化 Standby 节点数量</td></tr><tr><td><code>--ec=&#39;--with-pfsd&#39;</code></td><td>是否编译 PolarDB File System (PFS) 相关功能</td></tr><tr><td><code>--ni</code></td><td>只编译，不拉起示例集群</td></tr><tr><td><code>--port=</code></td><td>指定 primary 节点端口号</td></tr><tr><td><code>--debug=[on/off]</code></td><td>编译为 Debug / Release 模式</td></tr></tbody></table><p>如无定制的需求，则可以按照下面给出的选项编译部署不同形态的 PolarDB-PG 集群并进行测试。</p><h2 id="各形态编译部署" tabindex="-1"><a class="header-anchor" href="#各形态编译部署"><span>各形态编译部署</span></a></h2><p>本地搭建一个单 Primary 节点：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">./build.sh</span>
<span class="line"></span></code></pre></div><p>本地搭建一个 Primary 节点 + 两个 Replica 节点的共享存储集群：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">./build.sh <span class="token parameter variable">--wr</span><span class="token operator">=</span><span class="token number">2</span></span>
<span class="line"></span></code></pre></div><p>本地搭建一个 Primary 节点 + 一个 Replica 节点 + 一个 Standby 节点的集群：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">./build.sh <span class="token parameter variable">--wr</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--ws</span><span class="token operator">=</span><span class="token number">1</span></span>
<span class="line"></span></code></pre></div><h2 id="回归测试" tabindex="-1"><a class="header-anchor" href="#回归测试"><span>回归测试</span></a></h2><p>可以根据机器负载自行调整并行度 <code>$jobs</code>。</p><p>Debug 模式：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">./build.sh <span class="token parameter variable">--ws</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--wr</span><span class="token operator">=</span><span class="token number">2</span> <span class="token parameter variable">--debug</span><span class="token operator">=</span>on <span class="token parameter variable">--jobs</span><span class="token operator">=</span><span class="token variable">$jobs</span> <span class="token parameter variable">--ec</span><span class="token operator">=</span><span class="token string">&quot;--enable-tap-tests&quot;</span></span>
<span class="line"><span class="token function">make</span> precheck -j<span class="token variable">$jobs</span></span>
<span class="line"></span></code></pre></div><p>Release 模式：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">./build.sh <span class="token parameter variable">--ws</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--wr</span><span class="token operator">=</span><span class="token number">2</span> <span class="token parameter variable">--debug</span><span class="token operator">=</span>off <span class="token parameter variable">--jobs</span><span class="token operator">=</span><span class="token variable">$jobs</span> <span class="token parameter variable">--ec</span><span class="token operator">=</span><span class="token string">&quot;--enable-tap-tests&quot;</span></span>
<span class="line"><span class="token function">make</span> precheck -j<span class="token variable">$jobs</span></span>
<span class="line"></span></code></pre></div>`,19))])}const v=u(h,[["render",m]]),f=JSON.parse('{"path":"/development/dev-on-docker.html","title":"基于 Docker 容器开发","lang":"en-US","frontmatter":{"author":"棠羽","date":"2024/08/30","minute":10},"headers":[{"level":2,"title":"下载源代码","slug":"下载源代码","link":"#下载源代码","children":[]},{"level":2,"title":"拉取开发镜像","slug":"拉取开发镜像","link":"#拉取开发镜像","children":[]},{"level":2,"title":"创建并运行容器","slug":"创建并运行容器","link":"#创建并运行容器","children":[]},{"level":2,"title":"构建选项说明","slug":"构建选项说明","link":"#构建选项说明","children":[]},{"level":2,"title":"各形态编译部署","slug":"各形态编译部署","link":"#各形态编译部署","children":[]},{"level":2,"title":"回归测试","slug":"回归测试","link":"#回归测试","children":[]}],"git":{"updatedTime":1760793941000,"contributors":[{"name":"aCoder2013","username":"aCoder2013","email":"7877752+aCoder2013@users.noreply.github.com","commits":1,"url":"https://github.com/aCoder2013"}],"changelog":[{"hash":"6fcfdc2993a4b32b3c1c8119b43c3545d6ab9654","time":1760793941000,"email":"7877752+aCoder2013@users.noreply.github.com","author":"acoder2014","message":"fix: typo in arch-overview.md (#608)"}]},"filePathRelative":"development/dev-on-docker.md"}');export{v as comp,f as data};
