import{_ as u,c as k,a,b as p,e as m,d as s,w as e,r,o as g}from"./app-HZE5kvva.js";const h={},b={class:"table-of-contents"};function v(i,n){const c=r("ArticleInfo"),l=r("router-link"),d=r("CodeTabs");return g(),k("div",null,[n[9]||(n[9]=a("h1",{id:"replica-节点在线-promote",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#replica-节点在线-promote"},[a("span",null,"Replica 节点在线 Promote")])],-1)),p(c,{frontmatter:i.$frontmatter},null,8,["frontmatter"]),n[10]||(n[10]=a("p",null,[s("PolarDB for PostgreSQL 是一款存储与计算分离的云原生数据库，所有计算节点共享一份存储，并且对存储的访问具有 "),a("strong",null,"一写多读"),s(" 的限制：所有计算节点可以对存储进行读取，但只有一个计算节点可以对存储进行写入。这种限制会带来一个问题：当 Primary 节点因为宕机或网络故障而不可用时，集群中将没有能够可以写入存储的计算节点，应用业务中的增、删、改，以及 DDL 都将无法运行。")],-1)),n[11]||(n[11]=a("p",null,"本文将指导您在 PolarDB for PostgreSQL 计算集群中的 Primary 节点停止服务时，将任意一个 Replica 节点在线提升为 Primary 节点，从而使集群恢复对于共享存储的写入能力。",-1)),a("nav",b,[a("ul",null,[a("li",null,[p(l,{to:"#前置准备"},{default:e(()=>n[0]||(n[0]=[s("前置准备")])),_:1})]),a("li",null,[p(l,{to:"#replica-节点不可写"},{default:e(()=>n[1]||(n[1]=[s("Replica 节点不可写")])),_:1})]),a("li",null,[p(l,{to:"#primary-节点停止写入"},{default:e(()=>n[2]||(n[2]=[s("Primary 节点停止写入")])),_:1})]),a("li",null,[p(l,{to:"#replica-节点-promote"},{default:e(()=>n[3]||(n[3]=[s("Replica 节点 Promote")])),_:1})]),a("li",null,[p(l,{to:"#计算集群恢复写入"},{default:e(()=>n[4]||(n[4]=[s("计算集群恢复写入")])),_:1})])])]),n[12]||(n[12]=a("h2",{id:"前置准备",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#前置准备"},[a("span",null,"前置准备")])],-1)),n[13]||(n[13]=a("p",null,"为方便起见，本示例使用基于本地磁盘的实例来进行演示。拉取如下镜像并启动容器，可以得到带有一个 Primary 节点和一个 Replica 节点的共享存储集群。",-1)),p(d,{id:"20",data:[{id:"DockerHub"},{id:"阿里云 ACR"}]},{title0:e(({value:t,isActive:o})=>n[5]||(n[5]=[s("DockerHub")])),title1:e(({value:t,isActive:o})=>n[6]||(n[6]=[s("阿里云 ACR")])),tab0:e(({value:t,isActive:o})=>n[7]||(n[7]=[a("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[a("pre",null,[a("code",null,[a("span",{class:"line"},[a("span",{class:"token function"},"docker"),s(" pull polardb/polardb_pg_local_instance:15")]),s(`
`),a("span",{class:"line"},[a("span",{class:"token function"},"docker"),s(" run "),a("span",{class:"token parameter variable"},"-it"),s(),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    --cap-add"),a("span",{class:"token operator"},"="),s("SYS_PTRACE "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    "),a("span",{class:"token parameter variable"},"--privileged"),a("span",{class:"token operator"},"="),s("true "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    "),a("span",{class:"token parameter variable"},"--name"),s(" polardb_pg_htap "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    --shm-size"),a("span",{class:"token operator"},"="),s("512m "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    polardb/polardb_pg_local_instance:15 "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    "),a("span",{class:"token function"},"bash")]),s(`
`),a("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:o})=>n[8]||(n[8]=[a("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[a("pre",null,[a("code",null,[a("span",{class:"line"},[a("span",{class:"token function"},"docker"),s(" pull registry.cn-hangzhou.aliyuncs.com/polardb_pg/polardb_pg_local_instance:15")]),s(`
`),a("span",{class:"line"},[a("span",{class:"token function"},"docker"),s(" run "),a("span",{class:"token parameter variable"},"-it"),s(),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    --cap-add"),a("span",{class:"token operator"},"="),s("SYS_PTRACE "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    "),a("span",{class:"token parameter variable"},"--privileged"),a("span",{class:"token operator"},"="),s("true "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    "),a("span",{class:"token parameter variable"},"--name"),s(" polardb_pg_htap "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    --shm-size"),a("span",{class:"token operator"},"="),s("512m "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    registry.cn-hangzhou.aliyuncs.com/polardb_pg/polardb_pg_local_instance:15 "),a("span",{class:"token punctuation"},"\\")]),s(`
`),a("span",{class:"line"},[s("    "),a("span",{class:"token function"},"bash")]),s(`
`),a("span",{class:"line"})])])],-1)])),_:1}),n[14]||(n[14]=m(`<p>容器内的 <code>5432</code> 和 <code>5433</code> 端口分别运行着 Primary 节点 Replica 节点。两个节点共享数据，并通过物理复制保持内存状态同步。</p><h2 id="replica-节点不可写" tabindex="-1"><a class="header-anchor" href="#replica-节点不可写"><span>Replica 节点不可写</span></a></h2><p>首先，连接到 Primary 节点，创建一张表并插入一些数据：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">psql <span class="token parameter variable">-p5432</span></span>
<span class="line"></span></code></pre></div><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t <span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t <span class="token keyword">SELECT</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>连接到 Replica 节点，并同样试图对表插入数据，将会发现无法进行插入操作：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">psql <span class="token parameter variable">-p5433</span></span>
<span class="line"></span></code></pre></div><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t <span class="token keyword">SELECT</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">ERROR:  cannot <span class="token keyword">execute</span> <span class="token keyword">INSERT</span> <span class="token operator">in</span> a <span class="token keyword">read</span><span class="token operator">-</span>only <span class="token keyword">transaction</span></span>
<span class="line"></span></code></pre></div><h2 id="primary-节点停止写入" tabindex="-1"><a class="header-anchor" href="#primary-节点停止写入"><span>Primary 节点停止写入</span></a></h2><p>此时，关闭 Primary 节点，模拟出 Primary 节点不可用的行为：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">$ pg_ctl <span class="token parameter variable">-D</span> ~/tmp_polardb_pg_15_primary/ stop</span>
<span class="line">waiting <span class="token keyword">for</span> server to shut down<span class="token punctuation">..</span><span class="token punctuation">..</span> <span class="token keyword">done</span></span>
<span class="line">server stopped</span>
<span class="line"></span></code></pre></div><p>此时，集群中没有任何节点可以写入存储了。这时，我们需要将 Replica 节点提升为 Primary 节点，恢复对存储的写入。</p><h2 id="replica-节点-promote" tabindex="-1"><a class="header-anchor" href="#replica-节点-promote"><span>Replica 节点 Promote</span></a></h2><p>只有当 Primary 节点停止写入后，才可以将 Replica 节点提升为 Primary 节点，否则将会出现集群内两个节点同时写入存储的情况。当数据库检测到出现多节点写入时，将会导致运行异常。</p><p>将运行在 <code>5433</code> 端口的 Replica 节点提升为 Primary 节点：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">$ pg_ctl <span class="token parameter variable">-D</span> ~/tmp_polardb_pg_15_replica1/ promote</span>
<span class="line">waiting <span class="token keyword">for</span> server to promote<span class="token punctuation">..</span><span class="token punctuation">..</span> <span class="token keyword">done</span></span>
<span class="line">server promoted</span>
<span class="line"></span></code></pre></div><h2 id="计算集群恢复写入" tabindex="-1"><a class="header-anchor" href="#计算集群恢复写入"><span>计算集群恢复写入</span></a></h2><p>连接到已经完成 promote 的新 Primary 节点上，再次尝试之前的 <code>INSERT</code> 操作：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">psql <span class="token parameter variable">-p5433</span></span>
<span class="line"></span></code></pre></div><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t <span class="token keyword">SELECT</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token number">0</span> <span class="token number">10</span></span>
<span class="line"></span></code></pre></div><p>从上述结果中可以看到，新的 Primary 节点能够成功对存储进行写入。这说明原先的 Replica 节点已经被提升为 Primary 节点了。</p>`,21))])}const f=u(h,[["render",v]]),P=JSON.parse('{"path":"/operation/ro-online-promote.html","title":"Replica 节点在线 Promote","lang":"en-US","frontmatter":{"author":"棠羽","date":"2022/12/25","minute":15},"headers":[{"level":2,"title":"前置准备","slug":"前置准备","link":"#前置准备","children":[]},{"level":2,"title":"Replica 节点不可写","slug":"replica-节点不可写","link":"#replica-节点不可写","children":[]},{"level":2,"title":"Primary 节点停止写入","slug":"primary-节点停止写入","link":"#primary-节点停止写入","children":[]},{"level":2,"title":"Replica 节点 Promote","slug":"replica-节点-promote","link":"#replica-节点-promote","children":[]},{"level":2,"title":"计算集群恢复写入","slug":"计算集群恢复写入","link":"#计算集群恢复写入","children":[]}],"git":{"updatedTime":1760793941000,"contributors":[{"name":"aCoder2013","username":"aCoder2013","email":"7877752+aCoder2013@users.noreply.github.com","commits":1,"url":"https://github.com/aCoder2013"}],"changelog":[{"hash":"6fcfdc2993a4b32b3c1c8119b43c3545d6ab9654","time":1760793941000,"email":"7877752+aCoder2013@users.noreply.github.com","author":"acoder2014","message":"fix: typo in arch-overview.md (#608)"}]},"filePathRelative":"operation/ro-online-promote.md"}');export{f as comp,P as data};
