import{_ as c,c as p,a as t,b as r,e as h,w as a,r as i,o as g,d}from"./app-HZE5kvva.js";const S="/PolarDB-for-PostgreSQL/assets/ss-old-D8EMkj16.png",u="/PolarDB-for-PostgreSQL/assets/ss-new-_y8g9W1g.png",v="/PolarDB-for-PostgreSQL/assets/ss-pool-Byyg2PPr.png",b="/PolarDB-for-PostgreSQL/assets/ss-tpcc-D93Th3ij.jpg",P="/PolarDB-for-PostgreSQL/assets/ss-pgbench1-Dp9N7ROA.jpg",m="/PolarDB-for-PostgreSQL/assets/ss-pgbench2-BvvWIASw.jpg",x={},f={class:"table-of-contents"};function _(n,e){const s=i("Badge"),o=i("ArticleInfo"),l=i("router-link");return g(),p("div",null,[e[10]||(e[10]=t("h1",{id:"shared-server",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#shared-server"},[t("span",null,"Shared Server")])],-1)),r(s,{type:"tip",text:"V11 / v1.1.30-",vertical:"top"}),r(o,{frontmatter:n.$frontmatter},null,8,["frontmatter"]),t("nav",f,[t("ul",null,[t("li",null,[r(l,{to:"#背景"},{default:a(()=>e[0]||(e[0]=[d("背景")])),_:1})]),t("li",null,[r(l,{to:"#原理"},{default:a(()=>e[1]||(e[1]=[d("原理")])),_:1})]),t("li",null,[r(l,{to:"#性能对比"},{default:a(()=>e[2]||(e[2]=[d("性能对比")])),_:1}),t("ul",null,[t("li",null,[r(l,{to:"#tpc-c-高并发"},{default:a(()=>e[3]||(e[3]=[d("TPC-C 高并发")])),_:1})]),t("li",null,[r(l,{to:"#pgbench-短连接"},{default:a(()=>e[4]||(e[4]=[d("PgBench 短连接")])),_:1})])])]),t("li",null,[r(l,{to:"#功能特性"},{default:a(()=>e[5]||(e[5]=[d("功能特性")])),_:1}),t("ul",null,[t("li",null,[r(l,{to:"#pgbouncer-对比"},{default:a(()=>e[6]||(e[6]=[d("PgBouncer 对比")])),_:1})]),t("li",null,[r(l,{to:"#自定义配置"},{default:a(()=>e[7]||(e[7]=[d("自定义配置")])),_:1})])])]),t("li",null,[r(l,{to:"#使用说明"},{default:a(()=>e[8]||(e[8]=[d("使用说明")])),_:1}),t("ul",null,[t("li",null,[r(l,{to:"#常用参数"},{default:a(()=>e[9]||(e[9]=[d("常用参数")])),_:1})])])])])]),e[11]||(e[11]=h('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>原生 PostgreSQL 的连接调度方式是每一个进程对应一个连接 (One-Process-Per-Connection)，这种调度方式适合低并发、长连接的业务场景。而在高并发或大量短连接的业务场景中，进程的大量创建、销毁以及上下文切换，会严重影响性能。同时，在业务容器化部署后，每个容器通过连接池向数据库发起连接，业务在高峰期会弹性扩展出很多容器，后端数据库的连接数会瞬间增高，影响数据库稳定性，导致 OOM 频发。</p><p>为了解决上述问题，业界在使用 PostgreSQL 时通常会配置连接池组件，比如部署在数据库侧的后置连接池 <a href="https://www.pgbouncer.org/" target="_blank" rel="noopener noreferrer">PgBouncer</a>，部署在应用侧的前置连接池 <a href="https://github.com/alibaba/druid" target="_blank" rel="noopener noreferrer">Druid</a>。但后置连接池无法支持保留用户连接私有信息（如 GUC 参数、Prepared Statement）的相关功能，在面临进程被污染的情况（如加载动态链接库、修改 <code>role</code> 参数）时也无法及时清理。前置连接池不仅无法解决后置连接池的缺陷，还无法根据应用规模扩展而实时调整配置，仍然会面临连接数膨胀的问题。</p><p>PolarDB for PostgreSQL 针对上述问题，从数据库内部提供了 <strong>Shared Server</strong>（后文简称 SS）内置连接池功能，采用共享内存 + Session Context + Dispatcher 转发 + Backend Pool 的架构，实现了用户连接与后端进程的解绑。后端进程具备了 Native、Shared、Dedicated 三种执行模式，并且在运行时可以根据实时负载和进程污染情况进行动态转换。负载调度算法充分吸收 AliSQL 对社区版 MySQL 线程池的缺陷改进，使用 Stall 机制弹性控制 Worker 数量，同时避免用户连接饿死。从根本上解决了高并发或者大量短连接带来的性能、稳定性问题。</p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p>在 PostgreSQL 原生的 One-Process-Per-Connection 连接调度策略中，用户发起的连接与后端进程一一绑定：这里不仅是生命周期的绑定，同时还是服务与被服务关系的绑定。</p><p><img src="'+S+'" alt="ss-old"></p><p>在 Shared Server 内置连接池中，通过提取出会话相关上下文 Session Context，将用户连接和后端进程进行了解绑，并且引入 Dispatcher 来进行代理转发：</p><p><img src="'+u+'" alt="ss-new"></p><ul><li>Session Context 保存 Session 相关数据，存放于共享内存中，跨进程共享。存放数据包括：Prepared Statement、连接私有参数、临时表元数据等，后续还可以不断扩展。</li><li>Dispatcher 进程承载代理转发工作，用户连接通过 Dispatcher 分发调度到不同的后端进程上，后端进程通过 Dispatcher 被多个用户连接共享使用。Dispatcher 进程可以配置多个。</li><li>每个 Dispatcher 管理的后端进程按 <code>&lt;user, database, GUCs&gt;</code> 为 key，划分成不同的后端进程池。每个后端进程池都有自己独占的后端进程组，单个后端进程池内的后端进程数量随着负载增高而增多，随着负载降低而减少。</li><li>用户连接中的一个事务会始终被同一个后端进程服务，不同事务可能会被不同的后端进程服务</li></ul><p><img src="'+v+'" alt="ss-pool"></p><p>在 Shared Server 中，后端进程有三种执行模式。进程执行模式在运行时会根据实时负载和进程污染情况进行动态转换：</p><ul><li>Native 模式（原生模式）：一个后端进程只服务一个用户连接，不存在 Dispatcher 转发数据 <ul><li>SS 关闭后，所有后端进程都处于 Native 模式</li><li>SS 开启后，对于以下场景，后端进程也会在用户连接的登录阶段回退为 Native 模式： <ul><li>WAL Sender 进程</li><li>MPP 进程</li><li>SS 共享内存耗尽</li><li>在参数 <code>polar_ss_dedicated_dbuser_names</code> 黑名单范围内的数据库或用户</li></ul></li></ul></li><li>Shared 模式（共享模式）：后端进程作为可共享的工作进程提供给各个用户连接使用。Shared 模式是标准的、期望的连接池状态，表示后端进程是可复用的；SS 开启后，后端进程会优先使用 Shared 模式，同时会在触发兜底机制时转换为 Dedicated 模式。</li><li>Dedicated 模式（兜底模式）：由于各种原因导致后端进程被污染，退化为当前后端进程只能服务当前用户连接，用户连接退出后，后端进程也退出 <ul><li>用户连接不再使用新的 SS 共享内存，而是使用本地进程内存。</li><li>用户连接与后端进程之间的数据传输依旧经过 Dispatcher 转发</li><li>以下场景中会触发兜底机制，执行模式会由 Shared 转变为 Dedicated： <ul><li>更新了 SS 黑名单内的 GUC 参数</li><li>使用了 SS 黑名单内的插件</li><li>执行了 <code>DECLARE CURSOR</code> 命令</li><li>对 ONCOMMIT DELETE ROWS 属性的表进行操作</li><li>执行 <code>CURSOR WITH HOLD</code> 操作</li><li>使用自定义 GUC 参数</li><li>加载动态链接库</li></ul></li></ul></li></ul><h2 id="性能对比" tabindex="-1"><a class="header-anchor" href="#性能对比"><span>性能对比</span></a></h2><p>Shared Server 主要应用于高并发或大量短连接的业务场景，因此这里使用 TPC-C 进行测试。</p><h3 id="tpc-c-高并发" tabindex="-1"><a class="header-anchor" href="#tpc-c-高并发"><span>TPC-C 高并发</span></a></h3><p>使用 104c 512GB 的物理机单机部署，测试 TPC-C 1000 仓下，并发数从 300 增大到 5000 时，不同配置下的分数对比。如下图所示：</p><ul><li>old：不使用任何连接池，使用 PostgreSQL 的原生执行模式（即 Native 模式）</li><li>ss off：使用 Shared Server 内置连接池，<strong>启动前关闭 SS 开关</strong>，退化为 Native 模式</li><li>ss native：使用 Shared Server 内置连接池，<strong>启动后关闭 SS 开关</strong>，退化为 Native 模式</li><li>ss didicated：使用 Shared Server 内置连接池，<strong>启动后开启 SS 开关</strong>，但强制使用 Dedicated 模式</li><li>ss shared：使用 Shared Server 内置连接池，<strong>启动后开启 SS 开关</strong>，使用标准的 Shared 模式</li></ul><p><img src="'+b+'" alt="ss-tpcc"></p><p>从图中可以看出：</p><ul><li>原生 PostgreSQL 场景、Shared Server 关闭的场景、Shared Server 兜底场景中，均无法稳定进行 TPC-C 高并发测试。性能从并发数为 1500 时开始下跌，在并发数为 5000 时已经不能提供服务</li><li>Shared Server 开启并进入 Shared 模式后，TPC-C 性能不受高并发数影响，始终保持在稳定状态，很好地支持了高并发场景</li></ul><h3 id="pgbench-短连接" tabindex="-1"><a class="header-anchor" href="#pgbench-短连接"><span>PgBench 短连接</span></a></h3><p>使用 104c 512GB 的物理机单机部署，利用 <code>pgbench</code> 分别测试以下配置中，并发短连接数从 1 到 128 的场景下的性能表现：</p><ul><li>pgbouncer session：使用 PgBouncer 后置连接池， 配置为 <a href="https://www.pgbouncer.org/features.html" target="_blank" rel="noopener noreferrer">session pooling</a> 模式</li><li>pgbouncer transaction：使用 PgBouncer 后置连接池， 配置为 <a href="https://www.pgbouncer.org/features.html" target="_blank" rel="noopener noreferrer">transaction pooling</a> 模式</li><li>old：不使用任何连接池，使用 PostgreSQL 的原生执行模式</li><li>ss dedicated：使用 Shared Server 内置连接池，但强制设置为 Dedicated 模式</li><li>ss shared：使用 Shared Server 内置连接池，配置为标准的 Shared 模式</li></ul><p><img src="'+P+'" alt="ss-pgbench1"></p><p><img src="'+m+'" alt="ss-pgbench2"></p><p>从图中可以看出，使用连接池后，对于短连接，PgBouncer 和 Shared Server 的性能均有所提升。但 PgBouncer 最高只能提升 14 倍性能，Shared Server 最高可以提升 42 倍性能。</p><h2 id="功能特性" tabindex="-1"><a class="header-anchor" href="#功能特性"><span>功能特性</span></a></h2><h3 id="pgbouncer-对比" tabindex="-1"><a class="header-anchor" href="#pgbouncer-对比"><span>PgBouncer 对比</span></a></h3><p>业界典型的后置连接池 PgBouncer 具有多种模式。其中 session pooling 模式仅对短连接友好，一般不使用；transaction pooling 模式对短连接、长连接都友好，是默认推荐的模式。与 PgBouncer 相比，Shared Server 的差异化功能特点如下：</p><table><thead><tr><th>Feature</th><th style="text-align:center;">PgBouncer<br>Session Pooling</th><th style="text-align:center;">PgBouncer<br>Transaction Pooling</th><th style="text-align:center;">Shared Server</th></tr></thead><tbody><tr><td>Startup parameters</td><td style="text-align:center;">受限</td><td style="text-align:center;">受限</td><td style="text-align:center;">支持</td></tr><tr><td>SSL</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">未来将支持</td></tr><tr><td>LISTEN/NOTIFY</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持<br>触发兜底</td></tr><tr><td>LOAD statement</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持<br>触发兜底</td></tr><tr><td>Session-level advisory locks</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持<br>触发兜底</td></tr><tr><td>SET/RESET GUC</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持</td></tr><tr><td>Protocol-level prepared plans</td><td style="text-align:center;">支持</td><td style="text-align:center;">未来将支持</td><td style="text-align:center;">支持</td></tr><tr><td>PREPARE / DEALLOCATE</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持</td></tr><tr><td>Cached Plan Reset</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td></tr><tr><td>WITHOUT HOLD CURSOR</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td></tr><tr><td>WITH HOLD CURSOR</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">未来将支持<br>触发兜底</td></tr><tr><td>PRESERVE/DELETE ROWS temp</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">未来将支持<br>触发兜底</td></tr><tr><td>ON COMMIT DROP temp</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td></tr></tbody></table><p>注：</p><ul><li>PgBouncer 的 Startup 参数仅包括： <ul><li><code>client_encoding</code></li><li><code>datestyle</code></li><li><code>timezone</code></li><li><code>standard_conforming_strings</code></li></ul></li><li>触发进入 Dedicated 兜底模式，用户连接断开后，后端进程也会释放，避免污染后的进程被其他用户连接使用</li></ul><h3 id="自定义配置" tabindex="-1"><a class="header-anchor" href="#自定义配置"><span>自定义配置</span></a></h3><p>为了适应不同的环境，Shared Server 支持丰富了参数配置：</p><ol><li>支持配置 Dispatcher 进程和后端进程的最大数量，可以实时调整出最佳性能模式</li><li>支持总连接数超过阈值后才启用 SS 的 Shared 模式，避免连接数较少时 SS 性能不显著</li><li>支持配置强制启用 Dedicated 模式，避免后端进程被污染后持续影响其他用户连接</li><li>支持配置指定的数据库/用户不使用 Shared Server，给专用账户和管理员留下应急通道</li><li>支持配置指定插件不使用 Shared Server，避免外部插件异常导致 Shared Server 不稳定</li><li>支持配置指定 GUC 参数不使用 Shared Server，避免 GUC 功能复杂导致 Shared Server 不稳定</li><li>支持 Dispatcher 阻塞连接数量超过阈值后回退到 Native 模式，避免 Dispatcher 缺陷导致不可用</li><li>支持配置用户连接的超时等待时间，避免用户连接长时间等待后端进程</li><li>支持配置后端进程空闲时间阈值，避免后端进程长时间空闲，占用系统资源</li><li>支持配置后端进程活跃时间阈值, 避免后端进程长时间活跃，占用系统资源</li><li>支持配置每个后端进程池中保留后端进程的最小个数，保持连接池热度，避免进程被全部释放</li><li>支持配置 Shared Server 调试日志，方便排查后端进程调度相关的任何问题</li></ol><h2 id="使用说明" tabindex="-1"><a class="header-anchor" href="#使用说明"><span>使用说明</span></a></h2><h3 id="常用参数" tabindex="-1"><a class="header-anchor" href="#常用参数"><span>常用参数</span></a></h3><p>Shared Server 的典型配置参数说明如下：</p><ul><li><code>polar_enable_shm_aset</code>：是否开启全局共享内存，当前默认关闭，重启生效</li><li><code>polar_ss_shared_memory_size</code>：Shared Server 全局共享内存的使用上限，单位 kB，为 <code>0</code> 时表示关闭，默认 1MB。重启生效。</li><li><code>polar_ss_dispatcher_count</code>：Dispatcher 进程的最大个数，默认为 <code>2</code>，最大为 CPU 核心数，建议配置与 CPU 核心数相同。重启生效。</li><li><code>polar_enable_shared_server</code>：Shared Server 功能是否开启，默认关闭。</li><li><code>polar_ss_backend_max_count</code>：后端进程的最大数量，默认为 <code>-5</code>，表示为 <code>max_connection</code> 的 1/5；<code>0</code> / <code>-1</code> 表示与 <code>max_connection</code> 保持一致。建议设置为 CPU 核心数的 10 倍为佳。</li><li><code>polar_ss_backend_idle_timeout</code>：后端进程的空闲退出时间，默认 3 分钟</li><li><code>polar_ss_session_wait_timeout</code>：后端进程被用满时，用户连接等待被服务的最大时间，默认 60 秒</li><li><code>polar_ss_dedicated_dbuser_names</code>：记录指定数据库/用户使用时进入 Native 模式，默认为空，格式为 <code>d1/_,_/u1,d2/u2</code>，表示对使用数据库 <code>d1</code> 的任意连接、使用用户 <code>u1</code> 的任意连接、使用数据库 <code>d2</code> 且用户 <code>u2</code> 的任意连接，都会回退到 Native 模式</li></ul>',40))])}const C=c(x,[["render",_]]),D=JSON.parse('{"path":"/zh/features/performance/shared-server.html","title":"Shared Server","lang":"zh-CN","frontmatter":{"author":"严华","date":"2022/11/25","minute":20},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"性能对比","slug":"性能对比","link":"#性能对比","children":[{"level":3,"title":"TPC-C 高并发","slug":"tpc-c-高并发","link":"#tpc-c-高并发","children":[]},{"level":3,"title":"PgBench 短连接","slug":"pgbench-短连接","link":"#pgbench-短连接","children":[]}]},{"level":2,"title":"功能特性","slug":"功能特性","link":"#功能特性","children":[{"level":3,"title":"PgBouncer 对比","slug":"pgbouncer-对比","link":"#pgbouncer-对比","children":[]},{"level":3,"title":"自定义配置","slug":"自定义配置","link":"#自定义配置","children":[]}]},{"level":2,"title":"使用说明","slug":"使用说明","link":"#使用说明","children":[{"level":3,"title":"常用参数","slug":"常用参数","link":"#常用参数","children":[]}]}],"git":{"updatedTime":1760793941000,"contributors":[{"name":"aCoder2013","username":"aCoder2013","email":"7877752+aCoder2013@users.noreply.github.com","commits":1,"url":"https://github.com/aCoder2013"}],"changelog":[{"hash":"6fcfdc2993a4b32b3c1c8119b43c3545d6ab9654","time":1760793941000,"email":"7877752+aCoder2013@users.noreply.github.com","author":"acoder2014","message":"fix: typo in arch-overview.md (#608)"}]},"filePathRelative":"zh/features/performance/shared-server.md"}');export{C as comp,D as data};
