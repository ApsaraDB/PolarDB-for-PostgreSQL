import{_ as i,c as k,a as n,b as a,e as d,w as p,r as o,o as u,d as t}from"./app-HZE5kvva.js";const m={},y={class:"table-of-contents"};function g(l,s){const c=o("Badge"),r=o("ArticleInfo"),e=o("router-link");return u(),k("div",null,[s[3]||(s[3]=n("h1",{id:"epq-执行计划查看与分析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#epq-执行计划查看与分析"},[n("span",null,"ePQ 执行计划查看与分析")])],-1)),a(c,{type:"tip",text:"V11 / v1.1.20-",vertical:"top"}),a(r,{frontmatter:l.$frontmatter},null,8,["frontmatter"]),n("nav",y,[n("ul",null,[n("li",null,[a(e,{to:"#背景"},{default:p(()=>s[0]||(s[0]=[t("背景")])),_:1})]),n("li",null,[a(e,{to:"#功能介绍"},{default:p(()=>s[1]||(s[1]=[t("功能介绍")])),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#执行计划查看"},{default:p(()=>s[2]||(s[2]=[t("执行计划查看")])),_:1})])])])])]),s[4]||(s[4]=d(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>PostgreSQL 提供了 <code>EXPLAIN</code> 命令用于 SQL 语句的性能分析。它能够输出 SQL 对应的查询计划，以及在执行过程中的具体耗时、资源消耗等信息，可用于排查 SQL 的性能瓶颈。</p><p><code>EXPLAIN</code> 命令原先只适用于单机执行的 SQL 性能分析。PolarDB-PG 的 ePQ 弹性跨机并行查询扩展了 <code>EXPLAIN</code> 的功能，使其可以打印 ePQ 的跨机并行执行计划，还能够统计 ePQ 执行计划在各个算子上的执行时间、数据扫描量、内存使用量等信息，并以统一的视角返回给客户端。</p><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍"><span>功能介绍</span></a></h2><h3 id="执行计划查看" tabindex="-1"><a class="header-anchor" href="#执行计划查看"><span>执行计划查看</span></a></h3><p>ePQ 的执行计划是分片的。每个计划分片（Slice）由计算节点上的虚拟执行单元（Segment）启动的一组进程（Gang）负责执行，完成 SQL 的一部分计算。ePQ 在执行计划中引入了 Motion 算子，用于在执行不同计划分片的进程组之间进行数据传递。因此，Motion 算子就是计划分片的边界。</p><p>ePQ 中总共引入了三种 Motion 算子：</p><ul><li><code>PX Coordinator</code>：源端数据发送到同一个目标端（汇聚）</li><li><code>PX Broadcast</code>：源端数据发送到每一个目标端（广播）</li><li><code>PX Hash</code>：源端数据经过哈希计算后发送到某一个目标端（重分布）</li></ul><p>以一个简单查询作为例子：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t <span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">SET</span> polar_enable_px <span class="token keyword">TO</span> <span class="token keyword">ON</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">EXPLAIN</span> <span class="token punctuation">(</span>COSTS <span class="token keyword">OFF</span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">                   QUERY <span class="token keyword">PLAN</span></span>
<span class="line"><span class="token comment">-------------------------------------------------</span></span>
<span class="line"> <span class="token keyword">Limit</span></span>
<span class="line">   <span class="token operator">-</span><span class="token operator">&gt;</span>  PX Coordinator <span class="token number">6</span>:<span class="token number">1</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t</span>
<span class="line"> Optimizer: PolarDB PX Optimizer</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">4</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>以上执行计划以 Motion 算子为界，被分为了两个分片：一个是接收最终结果的分片 <code>slice0</code>，一个是扫描数据的分片<code>slice1</code>。对于 <code>slice1</code> 这个计划分片，ePQ 将使用六个执行单元（<code>segments: 6</code>）分别启动一个进程来执行，这六个进程各自负责扫描表的一部分数据（<code>Partial Seq Scan</code>），通过 Motion 算子将六个进程的数据汇聚到一个目标端（<code>PX Coordinator 6:1</code>），传递给 <code>Limit</code> 算子。</p><p>如果查询逐渐复杂，则执行计划中的计划分片和 Motion 算子会越来越多：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t1 <span class="token punctuation">(</span>a <span class="token keyword">INT</span><span class="token punctuation">,</span> b <span class="token keyword">INT</span><span class="token punctuation">,</span> c <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">SET</span> polar_enable_px <span class="token keyword">TO</span> <span class="token keyword">ON</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">EXPLAIN</span> <span class="token punctuation">(</span>COSTS <span class="token keyword">OFF</span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">FROM</span> t1 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> a <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">                         QUERY <span class="token keyword">PLAN</span></span>
<span class="line"><span class="token comment">------------------------------------------------------------</span></span>
<span class="line"> <span class="token keyword">Limit</span></span>
<span class="line">   <span class="token operator">-</span><span class="token operator">&gt;</span>  PX Coordinator <span class="token number">6</span>:<span class="token number">1</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token operator">-</span><span class="token operator">&gt;</span>  GroupAggregate</span>
<span class="line">               <span class="token keyword">Group</span> <span class="token keyword">Key</span>: a</span>
<span class="line">               <span class="token operator">-</span><span class="token operator">&gt;</span>  Sort</span>
<span class="line">                     Sort <span class="token keyword">Key</span>: a</span>
<span class="line">                     <span class="token operator">-</span><span class="token operator">&gt;</span>  PX <span class="token keyword">Hash</span> <span class="token number">6</span>:<span class="token number">6</span>  <span class="token punctuation">(</span>slice2<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line">                           <span class="token keyword">Hash</span> <span class="token keyword">Key</span>: a</span>
<span class="line">                           <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t1</span>
<span class="line"> Optimizer: PolarDB PX Optimizer</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">10</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>以上执行计划中总共有三个计划分片。将会有六个进程（<code>segments: 6</code>）负责执行 <code>slice2</code> 分片，分别扫描表的一部分数据，然后通过 Motion 算子（<code>PX Hash 6:6</code>）将数据重分布到另外六个（<code>segments: 6</code>）负责执行 <code>slice1</code> 分片的进程上，各自完成排序（<code>Sort</code>）和聚合（<code>GroupAggregate</code>），最终通过 Motion 算子（<code>PX Coordinator 6:1</code>）将数据汇聚到结果分片 <code>slice0</code>。</p>`,14))])}const h=i(m,[["render",g]]),P=JSON.parse('{"path":"/zh/features/epq/epq-explain-analyze.html","title":"ePQ 执行计划查看与分析","lang":"zh-CN","frontmatter":{"author":"渊云、秦疏","date":"2023/09/06","minute":30},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"功能介绍","slug":"功能介绍","link":"#功能介绍","children":[{"level":3,"title":"执行计划查看","slug":"执行计划查看","link":"#执行计划查看","children":[]}]}],"git":{"updatedTime":1760793941000,"contributors":[{"name":"aCoder2013","username":"aCoder2013","email":"7877752+aCoder2013@users.noreply.github.com","commits":1,"url":"https://github.com/aCoder2013"}],"changelog":[{"hash":"6fcfdc2993a4b32b3c1c8119b43c3545d6ab9654","time":1760793941000,"email":"7877752+aCoder2013@users.noreply.github.com","author":"acoder2014","message":"fix: typo in arch-overview.md (#608)"}]},"filePathRelative":"zh/features/epq/epq-explain-analyze.md"}');export{h as comp,P as data};
