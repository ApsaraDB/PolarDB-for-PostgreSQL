import{_ as r,c as i,a as n,b as a,e as d,w as e,r as t,o as u,d as o}from"./app-HZE5kvva.js";const w="/PolarDB-for-PostgreSQL/assets/htap-multi-level-partition-1-B3MUuoZn.png",y={},m={class:"table-of-contents"};function T(l,s){const c=t("Badge"),k=t("ArticleInfo"),p=t("router-link");return u(),i("div",null,[s[6]||(s[6]=n("h1",{id:"epq-支持分区表查询",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#epq-支持分区表查询"},[n("span",null,"ePQ 支持分区表查询")])],-1)),a(c,{type:"tip",text:"V11 / v1.1.17-",vertical:"top"}),a(k,{frontmatter:l.$frontmatter},null,8,["frontmatter"]),n("nav",m,[n("ul",null,[n("li",null,[a(p,{to:"#背景"},{default:e(()=>s[0]||(s[0]=[o("背景")])),_:1})]),n("li",null,[a(p,{to:"#使用指南"},{default:e(()=>s[1]||(s[1]=[o("使用指南")])),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#分区表并行查询"},{default:e(()=>s[2]||(s[2]=[o("分区表并行查询")])),_:1})]),n("li",null,[a(p,{to:"#分区静态裁剪"},{default:e(()=>s[3]||(s[3]=[o("分区静态裁剪")])),_:1})]),n("li",null,[a(p,{to:"#智能分区连接"},{default:e(()=>s[4]||(s[4]=[o("智能分区连接")])),_:1})]),n("li",null,[a(p,{to:"#多级分区表并行查询"},{default:e(()=>s[5]||(s[5]=[o("多级分区表并行查询")])),_:1})])])])])]),s[7]||(s[7]=d(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>随着数据量的不断增长，表的规模将会越来越大。为了方便管理和提高查询性能，比较好的实践是使用分区表，将大表拆分成多个子分区表。甚至每个子分区表还可以进一步拆成二级子分区表，从而形成了多级分区表。</p><p>PolarDB-PG 支持 ePQ 弹性跨机并行查询，能够利用集群中多个计算节点提升只读查询的性能。ePQ 不仅能够对普通表进行高效的跨机并行查询，对分区表也实现了跨机并行查询。</p><p>ePQ 对分区表的基础功能支持包含：</p><ul><li>对分区策略为 Range / List / Hash 的分区表进行并行扫描</li><li>对分区表进行索引扫描</li><li>对分区表进行连接查询</li></ul><p>此外，ePQ 还支持了部分与分区表相关的高级功能：</p><ul><li>分区裁剪</li><li>智能分区连接（Partition Wise Join）</li><li>对多级分区表进行并行查询</li></ul><p>ePQ 暂不支持对具有多列分区键的分区表进行并行查询。</p><h2 id="使用指南" tabindex="-1"><a class="header-anchor" href="#使用指南"><span>使用指南</span></a></h2><h3 id="分区表并行查询" tabindex="-1"><a class="header-anchor" href="#分区表并行查询"><span>分区表并行查询</span></a></h3><p>创建一张分区策略为 Range 的分区表，并创建三个子分区：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t1 <span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">)</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t1_p1 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> t1 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t1_p2 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> t1 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t1_p3 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> t1 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>设置参数打开 ePQ 开关和 ePQ 分区表扫描功能的开关：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">SET</span> polar_enable_px <span class="token keyword">TO</span> <span class="token keyword">ON</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SET</span> polar_px_enable_partition <span class="token keyword">TO</span> <span class="token keyword">ON</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>查看对分区表进行全表扫描的执行计划：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">EXPLAIN</span> <span class="token punctuation">(</span>COSTS <span class="token keyword">OFF</span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1<span class="token punctuation">;</span></span>
<span class="line">                QUERY <span class="token keyword">PLAN</span></span>
<span class="line"><span class="token comment">-------------------------------------------</span></span>
<span class="line"> PX Coordinator <span class="token number">6</span>:<span class="token number">1</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token operator">-</span><span class="token operator">&gt;</span>  Append</span>
<span class="line">         <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t1_p1</span>
<span class="line">         <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t1_p2</span>
<span class="line">         <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t1_p3</span>
<span class="line"> Optimizer: PolarDB PX Optimizer</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">6</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>ePQ 将会启动一组进程并行扫描分区表的每一个子表。每一个扫描进程都会通过 <code>Append</code> 算子依次扫描每一个子表的一部分数据（<code>Partial Seq Scan</code>），并通过 Motion 算子（<code>PX Coordinator</code>）将所有进程的扫描结果汇聚到发起查询的进程并返回。</p><h3 id="分区静态裁剪" tabindex="-1"><a class="header-anchor" href="#分区静态裁剪"><span>分区静态裁剪</span></a></h3><p>当查询的过滤条件中包含分区键时，ePQ 优化器可以根据过滤条件对将要扫描的分区表进行裁剪，避免扫描不需要的子分区，节省系统资源，提升查询性能。以上述 <code>t1</code> 表为例，查看以下查询的执行计划：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">EXPLAIN</span> <span class="token punctuation">(</span>COSTS <span class="token keyword">OFF</span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1 <span class="token keyword">WHERE</span> id <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">                QUERY <span class="token keyword">PLAN</span></span>
<span class="line"><span class="token comment">-------------------------------------------</span></span>
<span class="line"> PX Coordinator <span class="token number">6</span>:<span class="token number">1</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token operator">-</span><span class="token operator">&gt;</span>  Append</span>
<span class="line">         <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t1_p1</span>
<span class="line">               Filter: <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"> Optimizer: PolarDB PX Optimizer</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">5</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>由于查询的过滤条件 <code>id &lt; 100</code> 包含分区键，因此 ePQ 优化器可以根据分区表的分区边界，在产生执行计划时去除不符合过滤条件的子分区（<code>t1_p2</code>、<code>t1_p3</code>），只保留符合过滤条件的子分区（<code>t1_p1</code>）。</p><h3 id="智能分区连接" tabindex="-1"><a class="header-anchor" href="#智能分区连接"><span>智能分区连接</span></a></h3><p>在进行分区表之间的连接操作时，如果分区策略和边界相同，并且连接条件为分区键时，ePQ 优化器可以产生以子分区为单位进行连接的执行计划，避免两张分区表的进行笛卡尔积式的连接，节省系统资源，提升查询性能。</p><p>以两张 Range 分区表的连接为例。使用以下 SQL 创建两张分区策略和边界都相同的分区表 <code>t2</code> 和 <code>t3</code>：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t2 <span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">)</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t2_p1 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> t2 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t2_p2 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> t2 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t2_p3 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> t2 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t3 <span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">)</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t3_p1 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> t3 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t3_p2 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> t3 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t3_p3 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> t3 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>打开以下参数启用 ePQ 对分区表的支持：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">SET</span> polar_enable_px <span class="token keyword">TO</span> <span class="token keyword">ON</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SET</span> polar_px_enable_partition <span class="token keyword">TO</span> <span class="token keyword">ON</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>当 Partition Wise join 关闭时，两表在分区键上等值连接的执行计划如下：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">SET</span> polar_px_enable_partitionwise_join <span class="token keyword">TO</span> <span class="token keyword">OFF</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">EXPLAIN</span> <span class="token punctuation">(</span>COSTS <span class="token keyword">OFF</span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t2 <span class="token keyword">JOIN</span> t3 <span class="token keyword">ON</span> t2<span class="token punctuation">.</span>id <span class="token operator">=</span> t3<span class="token punctuation">.</span>id<span class="token punctuation">;</span></span>
<span class="line">                        QUERY <span class="token keyword">PLAN</span></span>
<span class="line"><span class="token comment">-----------------------------------------------------------</span></span>
<span class="line"> PX Coordinator <span class="token number">6</span>:<span class="token number">1</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Hash</span> <span class="token keyword">Join</span></span>
<span class="line">         <span class="token keyword">Hash</span> Cond: <span class="token punctuation">(</span>t2_p1<span class="token punctuation">.</span>id <span class="token operator">=</span> t3_p1<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span>
<span class="line">         <span class="token operator">-</span><span class="token operator">&gt;</span>  Append</span>
<span class="line">               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t2_p1</span>
<span class="line">               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t2_p2</span>
<span class="line">               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t2_p3</span>
<span class="line">         <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Hash</span></span>
<span class="line">               <span class="token operator">-</span><span class="token operator">&gt;</span>  PX Broadcast <span class="token number">6</span>:<span class="token number">6</span>  <span class="token punctuation">(</span>slice2<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line">                     <span class="token operator">-</span><span class="token operator">&gt;</span>  Append</span>
<span class="line">                           <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t3_p1</span>
<span class="line">                           <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t3_p2</span>
<span class="line">                           <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t3_p3</span>
<span class="line"> Optimizer: PolarDB PX Optimizer</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">14</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>从执行计划中可以看出，执行 <code>slice1</code> 计划分片的六个进程会分别通过 <code>Append</code> 算子依次扫描分区表 <code>t2</code> 每一个子分区的一部分数据，并通过 Motion 算子（<code>PX Broadcast</code>）接收来自执行 <code>slice2</code> 的六个进程广播的 <code>t3</code> 全表数据，在本地完成哈希连接（<code>Hash Join</code>）后，通过 Motion 算子（<code>PX Coordinator</code>）汇聚结果并返回。本质上，分区表 <code>t2</code> 的每一行数据都与 <code>t3</code> 的每一行数据做了一次连接。</p><p>打开参数 <code>polar_px_enable_partitionwise_join</code> 启用 Partition Wise join 后，再次查看执行计划：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">SET</span> polar_px_enable_partitionwise_join <span class="token keyword">TO</span> <span class="token keyword">ON</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">EXPLAIN</span> <span class="token punctuation">(</span>COSTS <span class="token keyword">OFF</span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t2 <span class="token keyword">JOIN</span> t3 <span class="token keyword">ON</span> t2<span class="token punctuation">.</span>id <span class="token operator">=</span> t3<span class="token punctuation">.</span>id<span class="token punctuation">;</span></span>
<span class="line">                   QUERY <span class="token keyword">PLAN</span></span>
<span class="line"><span class="token comment">------------------------------------------------</span></span>
<span class="line"> PX Coordinator <span class="token number">6</span>:<span class="token number">1</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token operator">-</span><span class="token operator">&gt;</span>  Append</span>
<span class="line">         <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Hash</span> <span class="token keyword">Join</span></span>
<span class="line">               <span class="token keyword">Hash</span> Cond: <span class="token punctuation">(</span>t2_p1<span class="token punctuation">.</span>id <span class="token operator">=</span> t3_p1<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span>
<span class="line">               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t2_p1</span>
<span class="line">               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Hash</span></span>
<span class="line">                     <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Full</span> Seq Scan <span class="token keyword">on</span> t3_p1</span>
<span class="line">         <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Hash</span> <span class="token keyword">Join</span></span>
<span class="line">               <span class="token keyword">Hash</span> Cond: <span class="token punctuation">(</span>t2_p2<span class="token punctuation">.</span>id <span class="token operator">=</span> t3_p2<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span>
<span class="line">               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t2_p2</span>
<span class="line">               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Hash</span></span>
<span class="line">                     <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Full</span> Seq Scan <span class="token keyword">on</span> t3_p2</span>
<span class="line">         <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Hash</span> <span class="token keyword">Join</span></span>
<span class="line">               <span class="token keyword">Hash</span> Cond: <span class="token punctuation">(</span>t2_p3<span class="token punctuation">.</span>id <span class="token operator">=</span> t3_p3<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span>
<span class="line">               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t2_p3</span>
<span class="line">               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Hash</span></span>
<span class="line">                     <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Full</span> Seq Scan <span class="token keyword">on</span> t3_p3</span>
<span class="line"> Optimizer: PolarDB PX Optimizer</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">18</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>在上述执行计划中，执行 <code>slice1</code> 计划分片的六个进程将通过 <code>Append</code> 算子依次扫描分区表 <code>t2</code> 每个子分区中的一部分数据，以及分区表 <code>t3</code> <strong>相对应子分区</strong> 的全部数据，将两份数据进行哈希连接（<code>Hash Join</code>），最终通过 Motion 算子（<code>PX Coordinator</code>）汇聚结果并返回。在上述执行过程中，分区表 <code>t2</code> 的每一个子分区 <code>t2_p1</code>、<code>t2_p2</code>、<code>t2_p3</code> 分别只与分区表 <code>t3</code> 对应的 <code>t3_p1</code>、<code>t3_p2</code>、<code>t3_p3</code> 做了连接，并没有与其它不相关的分区连接，节省了不必要的工作。</p><h3 id="多级分区表并行查询" tabindex="-1"><a class="header-anchor" href="#多级分区表并行查询"><span>多级分区表并行查询</span></a></h3><p>在多级分区表中，每级分区表的分区维度（分区键）可以不同：比如一级分区表按照时间维度分区，二级分区表按照地域维度分区。当查询 SQL 的过滤条件中包含每一级分区表中的分区键时，ePQ 优化器支持对多级分区表进行静态分区裁剪，从而过滤掉不需要被扫描的子分区。</p><p>以下图为例：当查询过滤条件 <code>WHERE date = &#39;202201&#39; AND region = &#39;beijing&#39;</code> 中包含一级分区键 <code>date</code> 和二级分区键 <code>region</code> 时，ePQ 优化器能够裁剪掉所有不相关的分区，产生的执行计划中只包含符合条件的子分区。由此，执行器只对需要扫描的子分区进行扫描即可。</p><p><img src="`+w+`" alt="multi-level-partition"></p><p>使用以下 SQL 为例，创建一张多级分区表：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> r1 <span class="token punctuation">(</span>a <span class="token keyword">INT</span><span class="token punctuation">,</span> b <span class="token keyword">TIMESTAMP</span><span class="token punctuation">)</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> r1_p1 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> r1 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token string">&#39;2000-01-01&#39;</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token string">&#39;2010-01-01&#39;</span><span class="token punctuation">)</span>  <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> r1_p1_p1 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> r1_p1 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> r1_p1_p2 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> r1_p1 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">2000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> r1_p2 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> r1 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token string">&#39;2010-01-01&#39;</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token string">&#39;2020-01-01&#39;</span><span class="token punctuation">)</span>  <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> r1_p2_p1 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> r1_p2 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> r1_p2_p2 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> r1_p2 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">2000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>打开以下参数启用 ePQ 对分区表的支持：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">SET</span> polar_enable_px <span class="token keyword">TO</span> <span class="token keyword">ON</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SET</span> polar_px_enable_partition <span class="token keyword">TO</span> <span class="token keyword">ON</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p>执行一条以两级分区键作为过滤条件的 SQL，并关闭 ePQ 的多级分区扫描功能，将得到 PostgreSQL 内置优化器经过多级分区静态裁剪后的执行计划：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">SET</span> polar_px_optimizer_multilevel_partitioning <span class="token keyword">TO</span> <span class="token keyword">OFF</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">EXPLAIN</span> <span class="token punctuation">(</span>COSTS <span class="token keyword">OFF</span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> r1 <span class="token keyword">WHERE</span> a <span class="token operator">&lt;</span> <span class="token number">1000000</span> <span class="token operator">AND</span> b <span class="token operator">&lt;</span> <span class="token string">&#39;2009-01-01 00:00:00&#39;</span><span class="token punctuation">;</span></span>
<span class="line">                                       QUERY <span class="token keyword">PLAN</span></span>
<span class="line"><span class="token comment">----------------------------------------------------------------------------------------</span></span>
<span class="line"> Seq Scan <span class="token keyword">on</span> r1_p1_p1 r1</span>
<span class="line">   Filter: <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token string">&#39;2009-01-01 00:00:00&#39;</span>::<span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>启用 ePQ 的多级分区扫描功能，再次查看执行计划：</p><div class="language-sql" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">SET</span> polar_px_optimizer_multilevel_partitioning <span class="token keyword">TO</span> <span class="token keyword">ON</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">EXPLAIN</span> <span class="token punctuation">(</span>COSTS <span class="token keyword">OFF</span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> r1 <span class="token keyword">WHERE</span> a <span class="token operator">&lt;</span> <span class="token number">1000000</span> <span class="token operator">AND</span> b <span class="token operator">&lt;</span> <span class="token string">&#39;2009-01-01 00:00:00&#39;</span><span class="token punctuation">;</span></span>
<span class="line">                                             QUERY <span class="token keyword">PLAN</span></span>
<span class="line"><span class="token comment">----------------------------------------------------------------------------------------------------</span></span>
<span class="line"> PX Coordinator <span class="token number">6</span>:<span class="token number">1</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token operator">-</span><span class="token operator">&gt;</span>  Append</span>
<span class="line">         <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> r1_p1_p1</span>
<span class="line">               Filter: <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token string">&#39;2009-01-01 00:00:00&#39;</span>::<span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"> Optimizer: PolarDB PX Optimizer</span>
<span class="line"><span class="token punctuation">(</span><span class="token number">5</span> <span class="token keyword">rows</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>在上述计划中，ePQ 优化器进行了对多级分区表的静态裁剪。执行 <code>slice1</code> 计划分片的六个进程只需对符合过滤条件的子分区 <code>r1_p1_p1</code> 进行并行扫描（<code>Partial Seq Scan</code>）即可，并将扫描到的数据通过 Motion 算子（<code>PX Coordinator</code>）汇聚并返回。</p>`,46))])}const O=r(y,[["render",T]]),E=JSON.parse('{"path":"/zh/features/epq/epq-partitioned-table.html","title":"ePQ 支持分区表查询","lang":"zh-CN","frontmatter":{"author":"渊云","date":"2023/09/06","minute":20},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"使用指南","slug":"使用指南","link":"#使用指南","children":[{"level":3,"title":"分区表并行查询","slug":"分区表并行查询","link":"#分区表并行查询","children":[]},{"level":3,"title":"分区静态裁剪","slug":"分区静态裁剪","link":"#分区静态裁剪","children":[]},{"level":3,"title":"智能分区连接","slug":"智能分区连接","link":"#智能分区连接","children":[]},{"level":3,"title":"多级分区表并行查询","slug":"多级分区表并行查询","link":"#多级分区表并行查询","children":[]}]}],"git":{"updatedTime":1760793941000,"contributors":[{"name":"aCoder2013","username":"aCoder2013","email":"7877752+aCoder2013@users.noreply.github.com","commits":1,"url":"https://github.com/aCoder2013"}],"changelog":[{"hash":"6fcfdc2993a4b32b3c1c8119b43c3545d6ab9654","time":1760793941000,"email":"7877752+aCoder2013@users.noreply.github.com","author":"acoder2014","message":"fix: typo in arch-overview.md (#608)"}]},"filePathRelative":"zh/features/epq/epq-partitioned-table.md"}');export{O as comp,E as data};
