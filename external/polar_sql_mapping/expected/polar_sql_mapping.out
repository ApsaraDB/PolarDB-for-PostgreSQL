--=========================================================
--================= SQL MAPPING ===========================
--=========================================================
-- setup
SET CLIENT_MIN_MESSAGES = ERROR;
DROP EXTENSION IF EXISTS polar_sql_mapping;
CREATE EXTENSION IF NOT EXISTS polar_sql_mapping;
CREATE SCHEMA IF NOT EXISTS polar_sql_mapping_test;
-- Check all sql_mapping object collation is C
-- Because the ScanKeyInit we use when mapping uses the C collation by default
select attrelid::regclass::text as relname,attname
from pg_catalog.pg_attribute where
attrelid in (select oid from pg_catalog.pg_class where relnamespace = 'polar_sql_mapping'::regnamespace::oid)
and attcollation != 0 and attcollation != (select oid from pg_catalog.pg_collation  where collname = 'C');
 relname | attname 
---------+---------
(0 rows)

-- start up
DROP TABLE IF EXISTS polar_sql_mapping_test.t;
RESET CLIENT_MIN_MESSAGES;
CREATE TABLE polar_sql_mapping_test.t (a int);
INSERT INTO polar_sql_mapping_test.t (SELECT a FROM generate_series(10, 15) a);
-- test sql mapping insertion
SELECT * FROM polar_sql_mapping.polar_sql_mapping_table;
 id | source_sql | target_sql 
----+------------+------------
(0 rows)

SELECT polar_sql_mapping.insert_mapping('a','b');
 insert_mapping 
----------------
 
(1 row)

SELECT polar_sql_mapping.insert_mapping('c','b');
 insert_mapping 
----------------
 
(1 row)

SELECT polar_sql_mapping.insert_mapping('b','a');
 insert_mapping 
----------------
 
(1 row)

SELECT * FROM polar_sql_mapping.polar_sql_mapping_table;
 id | source_sql | target_sql 
----+------------+------------
  1 | a          | b
  2 | c          | b
  3 | b          | a
(3 rows)

-- test sql mapping duplicate insertion
SELECT polar_sql_mapping.insert_mapping('a','c');
ERROR:  duplicate key value violates unique constraint "polar_sql_mapping_source_sql_unique_idx"
DETAIL:  Key (source_sql)=(a) already exists.
CONTEXT:  SQL statement "INSERT INTO 
       polar_sql_mapping.polar_sql_mapping_table(source_sql,target_sql)
       VALUES(sourcesql,targetsql)"
PL/pgSQL function polar_sql_mapping.insert_mapping(text,text) line 3 at SQL statement
SELECT * FROM polar_sql_mapping.polar_sql_mapping_table;
 id | source_sql | target_sql 
----+------------+------------
  1 | a          | b
  2 | c          | b
  3 | b          | a
(3 rows)

-- test sql mapping when GUC is off
SELECT polar_sql_mapping.insert_mapping('SELEC * FROM polar_sql_mapping_test.t;','SELECT * FROM polar_sql_mapping_test.t;');
 insert_mapping 
----------------
 
(1 row)

SET polar_sql_mapping.use_sql_mapping TO OFF;
SHOW polar_sql_mapping.use_sql_mapping;
 polar_sql_mapping.use_sql_mapping 
-----------------------------------
 off
(1 row)

SELECT * FROM polar_sql_mapping.polar_sql_mapping_table;
 id |               source_sql               |               target_sql                
----+----------------------------------------+-----------------------------------------
  1 | a                                      | b
  2 | c                                      | b
  3 | b                                      | a
  5 | SELEC * FROM polar_sql_mapping_test.t; | SELECT * FROM polar_sql_mapping_test.t;
(4 rows)

SELEC * FROM polar_sql_mapping_test.t;
ERROR:  syntax error at or near "SELEC"
LINE 1: SELEC * FROM polar_sql_mapping_test.t;
        ^
-- test sql mapping when GUC is on
SET polar_sql_mapping.use_sql_mapping TO ON;
SHOW polar_sql_mapping.use_sql_mapping;
 polar_sql_mapping.use_sql_mapping 
-----------------------------------
 on
(1 row)

SELECT * FROM polar_sql_mapping.polar_sql_mapping_table;
 id |               source_sql               |               target_sql                
----+----------------------------------------+-----------------------------------------
  1 | a                                      | b
  2 | c                                      | b
  3 | b                                      | a
  5 | SELEC * FROM polar_sql_mapping_test.t; | SELECT * FROM polar_sql_mapping_test.t;
(4 rows)

SELEC * FROM polar_sql_mapping_test.t;
 a  
----
 10
 11
 12
 13
 14
 15
(6 rows)

-- test sql mapping after deleting
DELETE FROM polar_sql_mapping.polar_sql_mapping_table WHERE source_sql = 'SELEC * FROM polar_sql_mapping_test.t;';
SHOW polar_sql_mapping.use_sql_mapping;
 polar_sql_mapping.use_sql_mapping 
-----------------------------------
 on
(1 row)

SELECT * FROM polar_sql_mapping.polar_sql_mapping_table;
 id | source_sql | target_sql 
----+------------+------------
  1 | a          | b
  2 | c          | b
  3 | b          | a
(3 rows)

SELEC * FROM polar_sql_mapping_test.t;
ERROR:  syntax error at or near "SELEC"
LINE 1: SELEC * FROM polar_sql_mapping_test.t;
        ^
-- test sql mapping after transaction failed
SELECT polar_sql_mapping.insert_mapping('SELEE * FROM polar_sql_mapping_test.t;','SELECT * FROM polar_sql_mapping_test.t;');
 insert_mapping 
----------------
 
(1 row)

BEGIN TRANSACTION;
SELEC * FROM polar_sql_mapping_test.t;
ERROR:  syntax error at or near "SELEC"
LINE 1: SELEC * FROM polar_sql_mapping_test.t;
        ^
SELEE * FROM polar_sql_mapping_test.t;
ERROR:  syntax error at or near "SELEE"
LINE 1: SELEE * FROM polar_sql_mapping_test.t;
        ^
COMMIT;
BEGIN TRANSACTION;
SELEC * FROM polar_sql_mapping_test.t;
ERROR:  syntax error at or near "SELEC"
LINE 1: SELEC * FROM polar_sql_mapping_test.t;
        ^
COMMIT;
SELEE * FROM polar_sql_mapping_test.t;
 a  
----
 10
 11
 12
 13
 14
 15
(6 rows)

-- test turn on after dropping extension
DROP EXTENSION polar_sql_mapping;
SET polar_sql_mapping.use_sql_mapping TO ON;
SELECT * FROM polar_sql_mapping_test.t;
 a  
----
 10
 11
 12
 13
 14
 15
(6 rows)

SELEE * FROM polar_sql_mapping_test.t;
ERROR:  syntax error at or near "SELEE"
LINE 1: SELEE * FROM polar_sql_mapping_test.t;
        ^
DROP SCHEMA polar_sql_mapping_test CASCADE;
NOTICE:  drop cascades to table polar_sql_mapping_test.t
--=========================================================
--================= ERROR DETECTIVE =======================
--=========================================================
--  * error detective test *
--  * initial *
SET CLIENT_MIN_MESSAGES = ERROR;
DROP EXTENSION IF EXISTS polar_sql_mapping;
CREATE SCHEMA IF NOT EXISTS polar_error_detective_test;
RESET CLIENT_MIN_MESSAGES;
CREATE EXTENSION polar_sql_mapping ;
SET polar_sql_mapping.record_error_sql TO TRUE; 
SET search_path TO polar_error_detective_test;
--=========================================================
-- * crate tables *
SET CLIENT_MIN_MESSAGES = ERROR;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS t;
RESET CLIENT_MIN_MESSAGES;
CREATE TABLE polar_error_detective_test.films (
    code        char(5) CONSTRAINT firstkey PRIMARY KEY,
    title       varchar(40) NOT NULL,
    did         integer NOT NULL,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute
);
CREATE TABLE polar_error_detective_test.t (
    a           integer PRIMARY KEY,
    b           integer NOT NULL
);
--=========================================================
-- * reset polar_sql_mapping.error_sql_info view *
select polar_sql_mapping.error_sql_info_clear();
 error_sql_info_clear 
----------------------
 
(1 row)

select * from polar_sql_mapping.error_sql_info order by (id);
 id | query | emessage | calls 
----+-------+----------+-------
(0 rows)

--=========================================================
-- * different error type *
set client_min_messages to 'error';
select * from t1;
ERROR:  relation "t1" does not exist
LINE 1: select * from t1;
                      ^
select abc;
ERROR:  column "abc" does not exist
LINE 1: select abc;
               ^
-- no error
prepare s as select * from t where now() > $1;
execute s(1);
ERROR:  parameter $1 of type integer cannot be coerced to the expected type timestamp with time zone
LINE 1: execute s(1);
                  ^
HINT:  You will need to rewrite or cast the expression.
select abcd(1);
ERROR:  function abcd(integer) does not exist
LINE 1: select abcd(1);
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
select sum(distinct a) over (partition by b) from t;
ERROR:  DISTINCT is not implemented for window functions
LINE 1: select sum(distinct a) over (partition by b) from t;
               ^
--=========================================================
-- * show polar_sql_mapping.error_sql_info view *
select * from polar_sql_mapping.error_sql_info order by (id);
 id |                        query                         |                                           emessage                                           | calls 
----+------------------------------------------------------+----------------------------------------------------------------------------------------------+-------
  1 | select * from t1;                                    | relation "t1" does not exist                                                                 |     1
  2 | select abc;                                          | column "abc" does not exist                                                                  |     1
  3 | execute s(1);                                        | parameter $1 of type integer cannot be coerced to the expected type timestamp with time zone |     1
  4 | select abcd(1);                                      | function abcd(integer) does not exist                                                        |     1
  5 | select sum(distinct a) over (partition by b) from t; | DISTINCT is not implemented for window functions                                             |     1
(5 rows)

--=========================================================
-- * not record the error caused by "Class 23 — Integrity Constraint Violation" & 
-- * "Class 25 — Invalid Transaction State"
-- * more details refer to https://www.postgresql.org/docs/12/errcodes-appendix.html *
-- no error 
insert into films values ('abc', 'polar_sql_mapping', 1, '2021,8,18', 'art', '2:30');
-- error but not record
insert into films values ('abc', 'polar_sql_mapping', 1, '2021,8,18', 'art', '2:30');
ERROR:  duplicate key value violates unique constraint "firstkey"
DETAIL:  Key (code)=(abc  ) already exists.
-- error but not record
insert into films values ('abdc', NULL, 1, '2021,8,18', 'art', '2:30');
ERROR:  null value in column "title" of relation "films" violates not-null constraint
DETAIL:  Failing row contains (abdc , null, 1, 08-18-2021, art, @ 2 hours 30 mins).
select * from polar_sql_mapping.error_sql_info order by (id);
 id |                        query                         |                                           emessage                                           | calls 
----+------------------------------------------------------+----------------------------------------------------------------------------------------------+-------
  1 | select * from t1;                                    | relation "t1" does not exist                                                                 |     1
  2 | select abc;                                          | column "abc" does not exist                                                                  |     1
  3 | execute s(1);                                        | parameter $1 of type integer cannot be coerced to the expected type timestamp with time zone |     1
  4 | select abcd(1);                                      | function abcd(integer) does not exist                                                        |     1
  5 | select sum(distinct a) over (partition by b) from t; | DISTINCT is not implemented for window functions                                             |     1
(5 rows)

--=========================================================
-- * repeat errors just increase their calls *
select * from t1;
ERROR:  relation "t1" does not exist
LINE 1: select * from t1;
                      ^
select abc;
ERROR:  column "abc" does not exist
LINE 1: select abc;
               ^
select abc;
ERROR:  column "abc" does not exist
LINE 1: select abc;
               ^
select abc;
ERROR:  column "abc" does not exist
LINE 1: select abc;
               ^
select * from polar_sql_mapping.error_sql_info order by (id);
 id |                        query                         |                                           emessage                                           | calls 
----+------------------------------------------------------+----------------------------------------------------------------------------------------------+-------
  1 | select * from t1;                                    | relation "t1" does not exist                                                                 |     2
  2 | select abc;                                          | column "abc" does not exist                                                                  |     4
  3 | execute s(1);                                        | parameter $1 of type integer cannot be coerced to the expected type timestamp with time zone |     1
  4 | select abcd(1);                                      | function abcd(integer) does not exist                                                        |     1
  5 | select sum(distinct a) over (partition by b) from t; | DISTINCT is not implemented for window functions                                             |     1
(5 rows)

--=========================================================
-- * number of records more than max number, not record anymore * 
-- max number of record
show polar_sql_mapping.max_num;
 polar_sql_mapping.max_num 
---------------------------
 10
(1 row)

select dd from films;
ERROR:  column "dd" does not exist
LINE 1: select dd from films;
               ^
HINT:  Perhaps you meant to reference the column "films.did".
select ff from films;
ERROR:  column "ff" does not exist
LINE 1: select ff from films;
               ^
select gg from films;
ERROR:  column "gg" does not exist
LINE 1: select gg from films;
               ^
select hh from films;
ERROR:  column "hh" does not exist
LINE 1: select hh from films;
               ^
select abcd;
ERROR:  column "abcd" does not exist
LINE 1: select abcd;
               ^
-- number of records equal to max number
select * from polar_sql_mapping.error_sql_info order by (id);
 id |                        query                         |                                           emessage                                           | calls 
----+------------------------------------------------------+----------------------------------------------------------------------------------------------+-------
  1 | select * from t1;                                    | relation "t1" does not exist                                                                 |     2
  2 | select abc;                                          | column "abc" does not exist                                                                  |     4
  3 | execute s(1);                                        | parameter $1 of type integer cannot be coerced to the expected type timestamp with time zone |     1
  4 | select abcd(1);                                      | function abcd(integer) does not exist                                                        |     1
  5 | select sum(distinct a) over (partition by b) from t; | DISTINCT is not implemented for window functions                                             |     1
  6 | select dd from films;                                | column "dd" does not exist                                                                   |     1
  7 | select ff from films;                                | column "ff" does not exist                                                                   |     1
  8 | select gg from films;                                | column "gg" does not exist                                                                   |     1
  9 | select hh from films;                                | column "hh" does not exist                                                                   |     1
 10 | select abcd;                                         | column "abcd" does not exist                                                                 |     1
(10 rows)

-- not record
select not_record;
ERROR:  column "not_record" does not exist
LINE 1: select not_record;
               ^
select * from polar_sql_mapping.error_sql_info order by (id);
 id |                        query                         |                                           emessage                                           | calls 
----+------------------------------------------------------+----------------------------------------------------------------------------------------------+-------
  1 | select * from t1;                                    | relation "t1" does not exist                                                                 |     2
  2 | select abc;                                          | column "abc" does not exist                                                                  |     4
  3 | execute s(1);                                        | parameter $1 of type integer cannot be coerced to the expected type timestamp with time zone |     1
  4 | select abcd(1);                                      | function abcd(integer) does not exist                                                        |     1
  5 | select sum(distinct a) over (partition by b) from t; | DISTINCT is not implemented for window functions                                             |     1
  6 | select dd from films;                                | column "dd" does not exist                                                                   |     1
  7 | select ff from films;                                | column "ff" does not exist                                                                   |     1
  8 | select gg from films;                                | column "gg" does not exist                                                                   |     1
  9 | select hh from films;                                | column "hh" does not exist                                                                   |     1
 10 | select abcd;                                         | column "abcd" does not exist                                                                 |     1
(10 rows)

--=========================================================
-- * reset the record view *
select polar_sql_mapping.error_sql_info_clear();
 error_sql_info_clear 
----------------------
 
(1 row)

select * from polar_sql_mapping.error_sql_info order by (id);
 id | query | emessage | calls 
----+-------+----------+-------
(0 rows)

--=========================================================
-- * length of a error sql more than 1024 will not be record *
-- length is 1100 > 1024, not record
-- we expanded the max length of an error sql to 1024 * 1024
-- so this test case is ignored.
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;
select * from polar_sql_mapping.error_sql_info order by (id);
 id | query | emessage | calls 
----+-------+----------+-------
(0 rows)

--=========================================================
-- * errors occuring in a transaction *
BEGIN TRANSACTION;
-- record
SELEC * FROM polar_sql_mapping_test.t;
ERROR:  syntax error at or near "SELEC"
LINE 1: SELEC * FROM polar_sql_mapping_test.t;
        ^
-- not record
SELECT 2;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
-- record
SELEE * FROM polar_sql_mapping_test.t;
ERROR:  syntax error at or near "SELEE"
LINE 1: SELEE * FROM polar_sql_mapping_test.t;
        ^
COMMIT; 
select * from polar_sql_mapping.error_sql_info order by (id);
 id |                 query                  |            emessage             | calls 
----+----------------------------------------+---------------------------------+-------
 11 | SELEC * FROM polar_sql_mapping_test.t; | syntax error at or near "SELEC" |     1
 12 | SELEE * FROM polar_sql_mapping_test.t; | syntax error at or near "SELEE" |     1
(2 rows)

--=========================================================
-- * test polar_sql_mapping.insert_mapping_id(id, targetsql) *
select polar_sql_mapping.insert_mapping_id(15, 'select 2;');
 insert_mapping_id 
-------------------
 
(1 row)

select * from polar_sql_mapping.polar_sql_mapping_table where target_sql =  'select 2;';
 id | source_sql | target_sql 
----+------------+------------
(0 rows)

select polar_sql_mapping.insert_mapping_id(11, 'select 2;');
 insert_mapping_id 
-------------------
 
(1 row)

select * from polar_sql_mapping.polar_sql_mapping_table where target_sql =  'select 2;';
 id |               source_sql               | target_sql 
----+----------------------------------------+------------
  1 | SELEC * FROM polar_sql_mapping_test.t; | select 2;
(1 row)

-- * test work with sql mapping *
set polar_sql_mapping.use_sql_mapping to true;
-- well done!
SELEC * FROM polar_sql_mapping_test.t;
 ?column? 
----------
        2
(1 row)

reset polar_sql_mapping.use_sql_mapping;
-- error again
SELEC * FROM polar_sql_mapping_test.t;
ERROR:  syntax error at or near "SELEC"
LINE 1: SELEC * FROM polar_sql_mapping_test.t;
        ^
--=========================================================
-- * test configure of unexpected_error_catagory *
select polar_sql_mapping.error_sql_info_clear();
 error_sql_info_clear 
----------------------
 
(1 row)

show polar_sql_mapping.unexpected_error_catagory;
 polar_sql_mapping.unexpected_error_catagory 
---------------------------------------------
 23,25
(1 row)

-- not record  errcode = "23505"
insert into films values ('abc', 'polar_sql_mapping', 1, '2021,8,18', 'art', '2:30');
ERROR:  duplicate key value violates unique constraint "firstkey"
DETAIL:  Key (code)=(abc  ) already exists.
select * from polar_sql_mapping.error_sql_info order by (id);
 id | query | emessage | calls 
----+-------+----------+-------
(0 rows)

set polar_sql_mapping.unexpected_error_catagory to '25';
-- record 
insert into films values ('abc', 'polar_sql_mapping', 1, '2021,8,18', 'art', '2:30');
ERROR:  duplicate key value violates unique constraint "firstkey"
DETAIL:  Key (code)=(abc  ) already exists.
select * from polar_sql_mapping.error_sql_info order by (id);
 id |                                         query                                         |                         emessage                          | calls 
----+---------------------------------------------------------------------------------------+-----------------------------------------------------------+-------
 14 | insert into films values ('abc', 'polar_sql_mapping', 1, '2021,8,18', 'art', '2:30'); | duplicate key value violates unique constraint "firstkey" |     1
(1 row)

set polar_sql_mapping.unexpected_error_catagory to '23503,25';
-- record
insert into films values ('abc', 'polar_sql_mapping', 1, '2021,8,18', 'art', '2:30');
ERROR:  duplicate key value violates unique constraint "firstkey"
DETAIL:  Key (code)=(abc  ) already exists.
select * from polar_sql_mapping.error_sql_info order by (id);
 id |                                         query                                         |                         emessage                          | calls 
----+---------------------------------------------------------------------------------------+-----------------------------------------------------------+-------
 14 | insert into films values ('abc', 'polar_sql_mapping', 1, '2021,8,18', 'art', '2:30'); | duplicate key value violates unique constraint "firstkey" |     2
(1 row)

set polar_sql_mapping.unexpected_error_catagory to '23505,25';
-- not record
insert into films values ('abc', 'polar_sql_mapping', 1, '2021,8,18', 'art', '2:30');
ERROR:  duplicate key value violates unique constraint "firstkey"
DETAIL:  Key (code)=(abc  ) already exists.
select * from polar_sql_mapping.error_sql_info order by (id);
 id |                                         query                                         |                         emessage                          | calls 
----+---------------------------------------------------------------------------------------+-----------------------------------------------------------+-------
 14 | insert into films values ('abc', 'polar_sql_mapping', 1, '2021,8,18', 'art', '2:30'); | duplicate key value violates unique constraint "firstkey" |     2
(1 row)

-- illegal unexpected_error_catagory
set polar_sql_mapping.unexpected_error_catagory to '235057,25';
-- record
insert into films values ('abc', 'polar_sql_mapping', 1, '2021,8,18', 'art', '2:30');
ERROR:  duplicate key value violates unique constraint "firstkey"
DETAIL:  Key (code)=(abc  ) already exists.
select * from polar_sql_mapping.error_sql_info order by (id);
 id |                                         query                                         |                         emessage                          | calls 
----+---------------------------------------------------------------------------------------+-----------------------------------------------------------+-------
 14 | insert into films values ('abc', 'polar_sql_mapping', 1, '2021,8,18', 'art', '2:30'); | duplicate key value violates unique constraint "firstkey" |     3
(1 row)

reset client_min_messages;
reset polar_sql_mapping.unexpected_error_catagory;
--=========================================================
-- * test error_pattern *
SELECT polar_sql_mapping.error_sql_info_clear();
 error_sql_info_clear 
----------------------
 
(1 row)

reset polar_sql_mapping.error_pattern;
show polar_sql_mapping.error_pattern;
 polar_sql_mapping.error_pattern 
---------------------------------
 
(1 row)

-- not record
select count(*) from films;
 count 
-------
     1
(1 row)

select query,emessage from polar_sql_mapping.error_sql_info order by (id);
 query | emessage 
-------+----------
(0 rows)

--record
set polar_sql_mapping.error_pattern to 'select%count%';
select count(*) from films;
 count 
-------
     1
(1 row)

select query,emessage from polar_sql_mapping.error_sql_info order by (id);
            query            |          emessage          
-----------------------------+----------------------------
 select count(*) from films; | Error Pattern Force Record
(1 row)

RESET polar_sql_mapping.error_pattern;
--mapping to right
select polar_sql_mapping.insert_mapping(query,'select count(*)::numeric as "count(*)" from films;') from polar_sql_mapping.error_sql_info;
 insert_mapping 
----------------
 
(1 row)

set polar_sql_mapping.use_sql_mapping to true;
select count(*) from films;
 count(*) 
----------
        1
(1 row)

reset polar_sql_mapping.use_sql_mapping;
--=========================================================
-- * test done *
RESET polar_sql_mapping.use_sql_mapping;
RESET polar_sql_mapping.error_pattern;
RESET polar_sql_mapping.record_error_sql;
SELECT polar_sql_mapping.error_sql_info_clear();
 error_sql_info_clear 
----------------------
 
(1 row)

DROP SCHEMA polar_error_detective_test CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table films
drop cascades to table t
RESET search_path;
DROP extension polar_sql_mapping;
