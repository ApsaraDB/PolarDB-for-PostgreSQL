// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paxos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "paxos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace alisql {

namespace {

const ::google::protobuf::Descriptor* LogEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompressedLogEntries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompressedLogEntries_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigureChangeValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigureChangeValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterInfoEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterInfoEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* PolarExtra_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PolarExtra_reflection_ = NULL;
const ::google::protobuf::Descriptor* PaxosMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PaxosMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg1_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMsg2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMsg2_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_paxos_2eproto() {
  protobuf_AddDesc_paxos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "paxos.proto");
  GOOGLE_CHECK(file != NULL);
  LogEntry_descriptor_ = file->message_type(0);
  static const int LogEntry_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, ikey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, checksum_),
  };
  LogEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEntry_descriptor_,
      LogEntry::default_instance_,
      LogEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEntry));
  CompressedLogEntries_descriptor_ = file->message_type(1);
  static const int CompressedLogEntries_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedLogEntries, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedLogEntries, rawsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedLogEntries, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedLogEntries, checksum_),
  };
  CompressedLogEntries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompressedLogEntries_descriptor_,
      CompressedLogEntries::default_instance_,
      CompressedLogEntries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedLogEntries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedLogEntries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompressedLogEntries));
  ConfigureChangeValue_descriptor_ = file->message_type(2);
  static const int ConfigureChangeValue_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureChangeValue, cctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureChangeValue, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureChangeValue, addrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureChangeValue, allservers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureChangeValue, alllearners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureChangeValue, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureChangeValue, forcesync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureChangeValue, electionweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureChangeValue, learnersource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureChangeValue, applymode_),
  };
  ConfigureChangeValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigureChangeValue_descriptor_,
      ConfigureChangeValue::default_instance_,
      ConfigureChangeValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureChangeValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureChangeValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigureChangeValue));
  ClusterInfoEntry_descriptor_ = file->message_type(3);
  static const int ClusterInfoEntry_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoEntry, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoEntry, matchindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoEntry, nextindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoEntry, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoEntry, hasvoted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoEntry, forcesync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoEntry, electionweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoEntry, learnersource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoEntry, appliedindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoEntry, pipelining_),
  };
  ClusterInfoEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClusterInfoEntry_descriptor_,
      ClusterInfoEntry::default_instance_,
      ClusterInfoEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfoEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClusterInfoEntry));
  PolarExtra_descriptor_ = file->message_type(4);
  static const int PolarExtra_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolarExtra, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolarExtra, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolarExtra, applylsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolarExtra, purgelsn_),
  };
  PolarExtra_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PolarExtra_descriptor_,
      PolarExtra::default_instance_,
      PolarExtra_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolarExtra, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolarExtra, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PolarExtra));
  PaxosMsg_descriptor_ = file->message_type(5);
  static const int PaxosMsg_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, prevlogindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, prevlogterm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, commitindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, nocache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, candidateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, lastlogindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, lastlogterm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, votegranted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, ignorecheck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, lctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, minmatchindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, appliedindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, appenderror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, newclusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, cientries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, compressedentries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, extra_),
  };
  PaxosMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PaxosMsg_descriptor_,
      PaxosMsg::default_instance_,
      PaxosMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaxosMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PaxosMsg));
  TestMsg1_descriptor_ = file->message_type(6);
  static const int TestMsg1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg1, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg1, c1_),
  };
  TestMsg1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg1_descriptor_,
      TestMsg1::default_instance_,
      TestMsg1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg1));
  TestMsg2_descriptor_ = file->message_type(7);
  static const int TestMsg2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg2, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg2, c1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg2, c2_),
  };
  TestMsg2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMsg2_descriptor_,
      TestMsg2::default_instance_,
      TestMsg2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMsg2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMsg2));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_paxos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEntry_descriptor_, &LogEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompressedLogEntries_descriptor_, &CompressedLogEntries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigureChangeValue_descriptor_, &ConfigureChangeValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClusterInfoEntry_descriptor_, &ClusterInfoEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PolarExtra_descriptor_, &PolarExtra::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PaxosMsg_descriptor_, &PaxosMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg1_descriptor_, &TestMsg1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMsg2_descriptor_, &TestMsg2::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_paxos_2eproto() {
  delete LogEntry::default_instance_;
  delete LogEntry_reflection_;
  delete CompressedLogEntries::default_instance_;
  delete CompressedLogEntries_reflection_;
  delete ConfigureChangeValue::default_instance_;
  delete ConfigureChangeValue_reflection_;
  delete ClusterInfoEntry::default_instance_;
  delete ClusterInfoEntry_reflection_;
  delete PolarExtra::default_instance_;
  delete PolarExtra_reflection_;
  delete PaxosMsg::default_instance_;
  delete PaxosMsg_reflection_;
  delete TestMsg1::default_instance_;
  delete TestMsg1_reflection_;
  delete TestMsg2::default_instance_;
  delete TestMsg2_reflection_;
}

void protobuf_AddDesc_paxos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013paxos.proto\022\006alisql\"t\n\010LogEntry\022\014\n\004ter"
    "m\030\001 \002(\004\022\r\n\005index\030\002 \002(\004\022\016\n\006opType\030\003 \002(\004\022\014"
    "\n\004ikey\030\004 \001(\014\022\r\n\005value\030\005 \001(\014\022\014\n\004info\030\006 \001("
    "\004\022\020\n\010checksum\030\007 \001(\004\"U\n\024CompressedLogEntr"
    "ies\022\014\n\004type\030\001 \002(\r\022\017\n\007rawSize\030\002 \002(\r\022\014\n\004da"
    "ta\030\003 \002(\014\022\020\n\010checksum\030\004 \001(\r\"\325\001\n\024Configure"
    "ChangeValue\022\016\n\006ccType\030\001 \001(\005\022\016\n\006opType\030\002 "
    "\001(\005\022\r\n\005addrs\030\003 \003(\014\022\022\n\nallServers\030\004 \003(\014\022\023"
    "\n\013allLearners\030\005 \003(\014\022\020\n\010serverId\030\006 \001(\004\022\021\n"
    "\tforceSync\030\007 \001(\r\022\026\n\016electionWeight\030\010 \001(\r"
    "\022\025\n\rlearnerSource\030\t \001(\004\022\021\n\tapplyMode\030\n \001"
    "(\010\"\327\001\n\020ClusterInfoEntry\022\020\n\010serverId\030\001 \002("
    "\004\022\022\n\nmatchIndex\030\002 \001(\004\022\021\n\tnextIndex\030\003 \001(\004"
    "\022\014\n\004role\030\004 \001(\r\022\020\n\010hasVoted\030\005 \001(\004\022\021\n\tforc"
    "eSync\030\006 \001(\r\022\026\n\016electionWeight\030\007 \001(\r\022\025\n\rl"
    "earnerSource\030\010 \001(\004\022\024\n\014appliedIndex\030\t \001(\004"
    "\022\022\n\npipelining\030\n \001(\r\"P\n\nPolarExtra\022\020\n\010se"
    "rverId\030\001 \001(\014\022\014\n\004port\030\002 \001(\r\022\020\n\010applyLsn\030\003"
    " \001(\004\022\020\n\010purgeLsn\030\004 \001(\004\"\372\004\n\010PaxosMsg\022\020\n\010c"
    "onfigId\030\001 \001(\004\022\021\n\tclusterId\030\002 \002(\004\022\020\n\010serv"
    "erId\030\003 \002(\004\022\017\n\007msgType\030\004 \002(\005\022\014\n\004term\030\005 \002("
    "\004\022\r\n\005msgId\030\006 \002(\004\022\020\n\010leaderId\030\007 \001(\004\022\024\n\014pr"
    "evLogIndex\030\010 \001(\004\022\023\n\013prevLogTerm\030\t \001(\004\022!\n"
    "\007entries\030\n \003(\0132\020.alisql.LogEntry\022\023\n\013comm"
    "itIndex\030\013 \001(\004\022\017\n\007nocache\030\014 \001(\010\022\021\n\tisSucc"
    "ess\030\r \001(\010\022\023\n\013candidateId\030\016 \001(\004\022\024\n\014lastLo"
    "gIndex\030\017 \001(\004\022\023\n\013lastLogTerm\030\020 \001(\004\022\r\n\005for"
    "ce\030\021 \001(\004\022\014\n\004addr\030\022 \001(\014\022\023\n\013voteGranted\030\023 "
    "\001(\010\022\023\n\013ignoreCheck\030\024 \001(\010\022\016\n\006lcType\030\025 \001(\004"
    "\022\025\n\rminMatchIndex\030\026 \001(\004\022\024\n\014appliedIndex\030"
    "\027 \001(\004\022\023\n\013appendError\030\030 \001(\010\022\024\n\014newCluster"
    "Id\030\031 \001(\004\022+\n\tciEntries\030\032 \003(\0132\030.alisql.Clu"
    "sterInfoEntry\022\014\n\004role\030\033 \001(\r\0227\n\021compresse"
    "dEntries\030\034 \001(\0132\034.alisql.CompressedLogEnt"
    "ries\022\r\n\005extra\030\035 \001(\014\"\"\n\010TestMsg1\022\n\n\002id\030\001 "
    "\002(\004\022\n\n\002c1\030\002 \001(\004\".\n\010TestMsg2\022\n\n\002id\030\001 \002(\004\022"
    "\n\n\002c1\030\002 \001(\004\022\n\n\002c2\030\003 \003(\004", 1463);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "paxos.proto", &protobuf_RegisterTypes);
  LogEntry::default_instance_ = new LogEntry();
  CompressedLogEntries::default_instance_ = new CompressedLogEntries();
  ConfigureChangeValue::default_instance_ = new ConfigureChangeValue();
  ClusterInfoEntry::default_instance_ = new ClusterInfoEntry();
  PolarExtra::default_instance_ = new PolarExtra();
  PaxosMsg::default_instance_ = new PaxosMsg();
  TestMsg1::default_instance_ = new TestMsg1();
  TestMsg2::default_instance_ = new TestMsg2();
  LogEntry::default_instance_->InitAsDefaultInstance();
  CompressedLogEntries::default_instance_->InitAsDefaultInstance();
  ConfigureChangeValue::default_instance_->InitAsDefaultInstance();
  ClusterInfoEntry::default_instance_->InitAsDefaultInstance();
  PolarExtra::default_instance_->InitAsDefaultInstance();
  PaxosMsg::default_instance_->InitAsDefaultInstance();
  TestMsg1::default_instance_->InitAsDefaultInstance();
  TestMsg2::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_paxos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_paxos_2eproto {
  StaticDescriptorInitializer_paxos_2eproto() {
    protobuf_AddDesc_paxos_2eproto();
  }
} static_descriptor_initializer_paxos_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LogEntry::kTermFieldNumber;
const int LogEntry::kIndexFieldNumber;
const int LogEntry::kOpTypeFieldNumber;
const int LogEntry::kIkeyFieldNumber;
const int LogEntry::kValueFieldNumber;
const int LogEntry::kInfoFieldNumber;
const int LogEntry::kChecksumFieldNumber;
#endif  // !_MSC_VER

LogEntry::LogEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogEntry::InitAsDefaultInstance() {
}

LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogEntry::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  index_ = GOOGLE_ULONGLONG(0);
  optype_ = GOOGLE_ULONGLONG(0);
  ikey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = GOOGLE_ULONGLONG(0);
  checksum_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEntry::~LogEntry() {
  SharedDtor();
}

void LogEntry::SharedDtor() {
  if (ikey_ != &::google::protobuf::internal::kEmptyString) {
    delete ikey_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void LogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntry_descriptor_;
}

const LogEntry& LogEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paxos_2eproto();
  return *default_instance_;
}

LogEntry* LogEntry::default_instance_ = NULL;

LogEntry* LogEntry::New() const {
  return new LogEntry;
}

void LogEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = GOOGLE_ULONGLONG(0);
    index_ = GOOGLE_ULONGLONG(0);
    optype_ = GOOGLE_ULONGLONG(0);
    if (has_ikey()) {
      if (ikey_ != &::google::protobuf::internal::kEmptyString) {
        ikey_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    info_ = GOOGLE_ULONGLONG(0);
    checksum_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required uint64 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opType;
        break;
      }

      // required uint64 opType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ikey;
        break;
      }

      // optional bytes ikey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ikey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ikey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }

      // optional bytes value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_info;
        break;
      }

      // optional uint64 info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &info_)));
          set_has_info();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_checksum;
        break;
      }

      // optional uint64 checksum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required uint64 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  // required uint64 opType = 3;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->optype(), output);
  }

  // optional bytes ikey = 4;
  if (has_ikey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->ikey(), output);
  }

  // optional bytes value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->value(), output);
  }

  // optional uint64 info = 6;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->info(), output);
  }

  // optional uint64 checksum = 7;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->checksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required uint64 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  // required uint64 opType = 3;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->optype(), target);
  }

  // optional bytes ikey = 4;
  if (has_ikey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ikey(), target);
  }

  // optional bytes value = 5;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->value(), target);
  }

  // optional uint64 info = 6;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->info(), target);
  }

  // optional uint64 checksum = 7;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->checksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required uint64 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // required uint64 opType = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->optype());
    }

    // optional bytes ikey = 4;
    if (has_ikey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ikey());
    }

    // optional bytes value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional uint64 info = 6;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->info());
    }

    // optional uint64 checksum = 7;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->checksum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_ikey()) {
      set_ikey(from.ikey());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(index_, other->index_);
    std::swap(optype_, other->optype_);
    std::swap(ikey_, other->ikey_);
    std::swap(value_, other->value_);
    std::swap(info_, other->info_);
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEntry_descriptor_;
  metadata.reflection = LogEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompressedLogEntries::kTypeFieldNumber;
const int CompressedLogEntries::kRawSizeFieldNumber;
const int CompressedLogEntries::kDataFieldNumber;
const int CompressedLogEntries::kChecksumFieldNumber;
#endif  // !_MSC_VER

CompressedLogEntries::CompressedLogEntries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompressedLogEntries::InitAsDefaultInstance() {
}

CompressedLogEntries::CompressedLogEntries(const CompressedLogEntries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompressedLogEntries::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  rawsize_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  checksum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompressedLogEntries::~CompressedLogEntries() {
  SharedDtor();
}

void CompressedLogEntries::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CompressedLogEntries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedLogEntries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressedLogEntries_descriptor_;
}

const CompressedLogEntries& CompressedLogEntries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paxos_2eproto();
  return *default_instance_;
}

CompressedLogEntries* CompressedLogEntries::default_instance_ = NULL;

CompressedLogEntries* CompressedLogEntries::New() const {
  return new CompressedLogEntries;
}

void CompressedLogEntries::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    rawsize_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    checksum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompressedLogEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rawSize;
        break;
      }

      // required uint32 rawSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rawSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rawsize_)));
          set_has_rawsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_checksum;
        break;
      }

      // optional uint32 checksum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompressedLogEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 rawSize = 2;
  if (has_rawsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rawsize(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  // optional uint32 checksum = 4;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->checksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompressedLogEntries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 rawSize = 2;
  if (has_rawsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rawsize(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional uint32 checksum = 4;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->checksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompressedLogEntries::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 rawSize = 2;
    if (has_rawsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rawsize());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 checksum = 4;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checksum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedLogEntries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompressedLogEntries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompressedLogEntries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompressedLogEntries::MergeFrom(const CompressedLogEntries& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rawsize()) {
      set_rawsize(from.rawsize());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompressedLogEntries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedLogEntries::CopyFrom(const CompressedLogEntries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedLogEntries::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CompressedLogEntries::Swap(CompressedLogEntries* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(rawsize_, other->rawsize_);
    std::swap(data_, other->data_);
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompressedLogEntries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompressedLogEntries_descriptor_;
  metadata.reflection = CompressedLogEntries_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigureChangeValue::kCcTypeFieldNumber;
const int ConfigureChangeValue::kOpTypeFieldNumber;
const int ConfigureChangeValue::kAddrsFieldNumber;
const int ConfigureChangeValue::kAllServersFieldNumber;
const int ConfigureChangeValue::kAllLearnersFieldNumber;
const int ConfigureChangeValue::kServerIdFieldNumber;
const int ConfigureChangeValue::kForceSyncFieldNumber;
const int ConfigureChangeValue::kElectionWeightFieldNumber;
const int ConfigureChangeValue::kLearnerSourceFieldNumber;
const int ConfigureChangeValue::kApplyModeFieldNumber;
#endif  // !_MSC_VER

ConfigureChangeValue::ConfigureChangeValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfigureChangeValue::InitAsDefaultInstance() {
}

ConfigureChangeValue::ConfigureChangeValue(const ConfigureChangeValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigureChangeValue::SharedCtor() {
  _cached_size_ = 0;
  cctype_ = 0;
  optype_ = 0;
  serverid_ = GOOGLE_ULONGLONG(0);
  forcesync_ = 0u;
  electionweight_ = 0u;
  learnersource_ = GOOGLE_ULONGLONG(0);
  applymode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigureChangeValue::~ConfigureChangeValue() {
  SharedDtor();
}

void ConfigureChangeValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConfigureChangeValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigureChangeValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigureChangeValue_descriptor_;
}

const ConfigureChangeValue& ConfigureChangeValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paxos_2eproto();
  return *default_instance_;
}

ConfigureChangeValue* ConfigureChangeValue::default_instance_ = NULL;

ConfigureChangeValue* ConfigureChangeValue::New() const {
  return new ConfigureChangeValue;
}

void ConfigureChangeValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cctype_ = 0;
    optype_ = 0;
    serverid_ = GOOGLE_ULONGLONG(0);
    forcesync_ = 0u;
    electionweight_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    learnersource_ = GOOGLE_ULONGLONG(0);
    applymode_ = false;
  }
  addrs_.Clear();
  allservers_.Clear();
  alllearners_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigureChangeValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ccType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cctype_)));
          set_has_cctype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opType;
        break;
      }

      // optional int32 opType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_addrs;
        break;
      }

      // repeated bytes addrs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_addrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_addrs;
        if (input->ExpectTag(34)) goto parse_allServers;
        break;
      }

      // repeated bytes allServers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allServers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_allservers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_allServers;
        if (input->ExpectTag(42)) goto parse_allLearners;
        break;
      }

      // repeated bytes allLearners = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allLearners:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_alllearners()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_allLearners;
        if (input->ExpectTag(48)) goto parse_serverId;
        break;
      }

      // optional uint64 serverId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_forceSync;
        break;
      }

      // optional uint32 forceSync = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forceSync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forcesync_)));
          set_has_forcesync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_electionWeight;
        break;
      }

      // optional uint32 electionWeight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_electionWeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &electionweight_)));
          set_has_electionweight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_learnerSource;
        break;
      }

      // optional uint64 learnerSource = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_learnerSource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &learnersource_)));
          set_has_learnersource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_applyMode;
        break;
      }

      // optional bool applyMode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applyMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &applymode_)));
          set_has_applymode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigureChangeValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ccType = 1;
  if (has_cctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cctype(), output);
  }

  // optional int32 opType = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->optype(), output);
  }

  // repeated bytes addrs = 3;
  for (int i = 0; i < this->addrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->addrs(i), output);
  }

  // repeated bytes allServers = 4;
  for (int i = 0; i < this->allservers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->allservers(i), output);
  }

  // repeated bytes allLearners = 5;
  for (int i = 0; i < this->alllearners_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->alllearners(i), output);
  }

  // optional uint64 serverId = 6;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->serverid(), output);
  }

  // optional uint32 forceSync = 7;
  if (has_forcesync()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->forcesync(), output);
  }

  // optional uint32 electionWeight = 8;
  if (has_electionweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->electionweight(), output);
  }

  // optional uint64 learnerSource = 9;
  if (has_learnersource()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->learnersource(), output);
  }

  // optional bool applyMode = 10;
  if (has_applymode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->applymode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfigureChangeValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ccType = 1;
  if (has_cctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cctype(), target);
  }

  // optional int32 opType = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->optype(), target);
  }

  // repeated bytes addrs = 3;
  for (int i = 0; i < this->addrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->addrs(i), target);
  }

  // repeated bytes allServers = 4;
  for (int i = 0; i < this->allservers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->allservers(i), target);
  }

  // repeated bytes allLearners = 5;
  for (int i = 0; i < this->alllearners_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->alllearners(i), target);
  }

  // optional uint64 serverId = 6;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->serverid(), target);
  }

  // optional uint32 forceSync = 7;
  if (has_forcesync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->forcesync(), target);
  }

  // optional uint32 electionWeight = 8;
  if (has_electionweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->electionweight(), target);
  }

  // optional uint64 learnerSource = 9;
  if (has_learnersource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->learnersource(), target);
  }

  // optional bool applyMode = 10;
  if (has_applymode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->applymode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfigureChangeValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ccType = 1;
    if (has_cctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cctype());
    }

    // optional int32 opType = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional uint64 serverId = 6;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // optional uint32 forceSync = 7;
    if (has_forcesync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forcesync());
    }

    // optional uint32 electionWeight = 8;
    if (has_electionweight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->electionweight());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 learnerSource = 9;
    if (has_learnersource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->learnersource());
    }

    // optional bool applyMode = 10;
    if (has_applymode()) {
      total_size += 1 + 1;
    }

  }
  // repeated bytes addrs = 3;
  total_size += 1 * this->addrs_size();
  for (int i = 0; i < this->addrs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->addrs(i));
  }

  // repeated bytes allServers = 4;
  total_size += 1 * this->allservers_size();
  for (int i = 0; i < this->allservers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->allservers(i));
  }

  // repeated bytes allLearners = 5;
  total_size += 1 * this->alllearners_size();
  for (int i = 0; i < this->alllearners_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->alllearners(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigureChangeValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigureChangeValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigureChangeValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigureChangeValue::MergeFrom(const ConfigureChangeValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  addrs_.MergeFrom(from.addrs_);
  allservers_.MergeFrom(from.allservers_);
  alllearners_.MergeFrom(from.alllearners_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cctype()) {
      set_cctype(from.cctype());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_forcesync()) {
      set_forcesync(from.forcesync());
    }
    if (from.has_electionweight()) {
      set_electionweight(from.electionweight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_learnersource()) {
      set_learnersource(from.learnersource());
    }
    if (from.has_applymode()) {
      set_applymode(from.applymode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigureChangeValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigureChangeValue::CopyFrom(const ConfigureChangeValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigureChangeValue::IsInitialized() const {

  return true;
}

void ConfigureChangeValue::Swap(ConfigureChangeValue* other) {
  if (other != this) {
    std::swap(cctype_, other->cctype_);
    std::swap(optype_, other->optype_);
    addrs_.Swap(&other->addrs_);
    allservers_.Swap(&other->allservers_);
    alllearners_.Swap(&other->alllearners_);
    std::swap(serverid_, other->serverid_);
    std::swap(forcesync_, other->forcesync_);
    std::swap(electionweight_, other->electionweight_);
    std::swap(learnersource_, other->learnersource_);
    std::swap(applymode_, other->applymode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigureChangeValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigureChangeValue_descriptor_;
  metadata.reflection = ConfigureChangeValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClusterInfoEntry::kServerIdFieldNumber;
const int ClusterInfoEntry::kMatchIndexFieldNumber;
const int ClusterInfoEntry::kNextIndexFieldNumber;
const int ClusterInfoEntry::kRoleFieldNumber;
const int ClusterInfoEntry::kHasVotedFieldNumber;
const int ClusterInfoEntry::kForceSyncFieldNumber;
const int ClusterInfoEntry::kElectionWeightFieldNumber;
const int ClusterInfoEntry::kLearnerSourceFieldNumber;
const int ClusterInfoEntry::kAppliedIndexFieldNumber;
const int ClusterInfoEntry::kPipeliningFieldNumber;
#endif  // !_MSC_VER

ClusterInfoEntry::ClusterInfoEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClusterInfoEntry::InitAsDefaultInstance() {
}

ClusterInfoEntry::ClusterInfoEntry(const ClusterInfoEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClusterInfoEntry::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = GOOGLE_ULONGLONG(0);
  matchindex_ = GOOGLE_ULONGLONG(0);
  nextindex_ = GOOGLE_ULONGLONG(0);
  role_ = 0u;
  hasvoted_ = GOOGLE_ULONGLONG(0);
  forcesync_ = 0u;
  electionweight_ = 0u;
  learnersource_ = GOOGLE_ULONGLONG(0);
  appliedindex_ = GOOGLE_ULONGLONG(0);
  pipelining_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClusterInfoEntry::~ClusterInfoEntry() {
  SharedDtor();
}

void ClusterInfoEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClusterInfoEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterInfoEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterInfoEntry_descriptor_;
}

const ClusterInfoEntry& ClusterInfoEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paxos_2eproto();
  return *default_instance_;
}

ClusterInfoEntry* ClusterInfoEntry::default_instance_ = NULL;

ClusterInfoEntry* ClusterInfoEntry::New() const {
  return new ClusterInfoEntry;
}

void ClusterInfoEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = GOOGLE_ULONGLONG(0);
    matchindex_ = GOOGLE_ULONGLONG(0);
    nextindex_ = GOOGLE_ULONGLONG(0);
    role_ = 0u;
    hasvoted_ = GOOGLE_ULONGLONG(0);
    forcesync_ = 0u;
    electionweight_ = 0u;
    learnersource_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    appliedindex_ = GOOGLE_ULONGLONG(0);
    pipelining_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClusterInfoEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 serverId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_matchIndex;
        break;
      }

      // optional uint64 matchIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchindex_)));
          set_has_matchindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nextIndex;
        break;
      }

      // optional uint64 nextIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nextindex_)));
          set_has_nextindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role;
        break;
      }

      // optional uint32 role = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hasVoted;
        break;
      }

      // optional uint64 hasVoted = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasVoted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hasvoted_)));
          set_has_hasvoted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_forceSync;
        break;
      }

      // optional uint32 forceSync = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forceSync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forcesync_)));
          set_has_forcesync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_electionWeight;
        break;
      }

      // optional uint32 electionWeight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_electionWeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &electionweight_)));
          set_has_electionweight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_learnerSource;
        break;
      }

      // optional uint64 learnerSource = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_learnerSource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &learnersource_)));
          set_has_learnersource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_appliedIndex;
        break;
      }

      // optional uint64 appliedIndex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appliedIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &appliedindex_)));
          set_has_appliedindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pipelining;
        break;
      }

      // optional uint32 pipelining = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pipelining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pipelining_)));
          set_has_pipelining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClusterInfoEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 serverId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->serverid(), output);
  }

  // optional uint64 matchIndex = 2;
  if (has_matchindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->matchindex(), output);
  }

  // optional uint64 nextIndex = 3;
  if (has_nextindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nextindex(), output);
  }

  // optional uint32 role = 4;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->role(), output);
  }

  // optional uint64 hasVoted = 5;
  if (has_hasvoted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->hasvoted(), output);
  }

  // optional uint32 forceSync = 6;
  if (has_forcesync()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->forcesync(), output);
  }

  // optional uint32 electionWeight = 7;
  if (has_electionweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->electionweight(), output);
  }

  // optional uint64 learnerSource = 8;
  if (has_learnersource()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->learnersource(), output);
  }

  // optional uint64 appliedIndex = 9;
  if (has_appliedindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->appliedindex(), output);
  }

  // optional uint32 pipelining = 10;
  if (has_pipelining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pipelining(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClusterInfoEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 serverId = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->serverid(), target);
  }

  // optional uint64 matchIndex = 2;
  if (has_matchindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->matchindex(), target);
  }

  // optional uint64 nextIndex = 3;
  if (has_nextindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nextindex(), target);
  }

  // optional uint32 role = 4;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->role(), target);
  }

  // optional uint64 hasVoted = 5;
  if (has_hasvoted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->hasvoted(), target);
  }

  // optional uint32 forceSync = 6;
  if (has_forcesync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->forcesync(), target);
  }

  // optional uint32 electionWeight = 7;
  if (has_electionweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->electionweight(), target);
  }

  // optional uint64 learnerSource = 8;
  if (has_learnersource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->learnersource(), target);
  }

  // optional uint64 appliedIndex = 9;
  if (has_appliedindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->appliedindex(), target);
  }

  // optional uint32 pipelining = 10;
  if (has_pipelining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pipelining(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClusterInfoEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 serverId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // optional uint64 matchIndex = 2;
    if (has_matchindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchindex());
    }

    // optional uint64 nextIndex = 3;
    if (has_nextindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nextindex());
    }

    // optional uint32 role = 4;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

    // optional uint64 hasVoted = 5;
    if (has_hasvoted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hasvoted());
    }

    // optional uint32 forceSync = 6;
    if (has_forcesync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forcesync());
    }

    // optional uint32 electionWeight = 7;
    if (has_electionweight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->electionweight());
    }

    // optional uint64 learnerSource = 8;
    if (has_learnersource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->learnersource());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 appliedIndex = 9;
    if (has_appliedindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->appliedindex());
    }

    // optional uint32 pipelining = 10;
    if (has_pipelining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pipelining());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterInfoEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClusterInfoEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClusterInfoEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClusterInfoEntry::MergeFrom(const ClusterInfoEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_matchindex()) {
      set_matchindex(from.matchindex());
    }
    if (from.has_nextindex()) {
      set_nextindex(from.nextindex());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_hasvoted()) {
      set_hasvoted(from.hasvoted());
    }
    if (from.has_forcesync()) {
      set_forcesync(from.forcesync());
    }
    if (from.has_electionweight()) {
      set_electionweight(from.electionweight());
    }
    if (from.has_learnersource()) {
      set_learnersource(from.learnersource());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_appliedindex()) {
      set_appliedindex(from.appliedindex());
    }
    if (from.has_pipelining()) {
      set_pipelining(from.pipelining());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClusterInfoEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterInfoEntry::CopyFrom(const ClusterInfoEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterInfoEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClusterInfoEntry::Swap(ClusterInfoEntry* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(matchindex_, other->matchindex_);
    std::swap(nextindex_, other->nextindex_);
    std::swap(role_, other->role_);
    std::swap(hasvoted_, other->hasvoted_);
    std::swap(forcesync_, other->forcesync_);
    std::swap(electionweight_, other->electionweight_);
    std::swap(learnersource_, other->learnersource_);
    std::swap(appliedindex_, other->appliedindex_);
    std::swap(pipelining_, other->pipelining_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClusterInfoEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterInfoEntry_descriptor_;
  metadata.reflection = ClusterInfoEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PolarExtra::kServerIdFieldNumber;
const int PolarExtra::kPortFieldNumber;
const int PolarExtra::kApplyLsnFieldNumber;
const int PolarExtra::kPurgeLsnFieldNumber;
#endif  // !_MSC_VER

PolarExtra::PolarExtra()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PolarExtra::InitAsDefaultInstance() {
}

PolarExtra::PolarExtra(const PolarExtra& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PolarExtra::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  applylsn_ = GOOGLE_ULONGLONG(0);
  purgelsn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PolarExtra::~PolarExtra() {
  SharedDtor();
}

void PolarExtra::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::kEmptyString) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void PolarExtra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PolarExtra::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PolarExtra_descriptor_;
}

const PolarExtra& PolarExtra::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paxos_2eproto();
  return *default_instance_;
}

PolarExtra* PolarExtra::default_instance_ = NULL;

PolarExtra* PolarExtra::New() const {
  return new PolarExtra;
}

void PolarExtra::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::kEmptyString) {
        serverid_->clear();
      }
    }
    port_ = 0u;
    applylsn_ = GOOGLE_ULONGLONG(0);
    purgelsn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PolarExtra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes serverId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serverid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_applyLsn;
        break;
      }

      // optional uint64 applyLsn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applyLsn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applylsn_)));
          set_has_applylsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_purgeLsn;
        break;
      }

      // optional uint64 purgeLsn = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purgeLsn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &purgelsn_)));
          set_has_purgelsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PolarExtra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes serverId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->serverid(), output);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional uint64 applyLsn = 3;
  if (has_applylsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->applylsn(), output);
  }

  // optional uint64 purgeLsn = 4;
  if (has_purgelsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->purgelsn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PolarExtra::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes serverId = 1;
  if (has_serverid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serverid(), target);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional uint64 applyLsn = 3;
  if (has_applylsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->applylsn(), target);
  }

  // optional uint64 purgeLsn = 4;
  if (has_purgelsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->purgelsn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PolarExtra::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes serverId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serverid());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint64 applyLsn = 3;
    if (has_applylsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->applylsn());
    }

    // optional uint64 purgeLsn = 4;
    if (has_purgelsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->purgelsn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolarExtra::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PolarExtra* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PolarExtra*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PolarExtra::MergeFrom(const PolarExtra& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_applylsn()) {
      set_applylsn(from.applylsn());
    }
    if (from.has_purgelsn()) {
      set_purgelsn(from.purgelsn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PolarExtra::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolarExtra::CopyFrom(const PolarExtra& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolarExtra::IsInitialized() const {

  return true;
}

void PolarExtra::Swap(PolarExtra* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(port_, other->port_);
    std::swap(applylsn_, other->applylsn_);
    std::swap(purgelsn_, other->purgelsn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PolarExtra::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PolarExtra_descriptor_;
  metadata.reflection = PolarExtra_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PaxosMsg::kConfigIdFieldNumber;
const int PaxosMsg::kClusterIdFieldNumber;
const int PaxosMsg::kServerIdFieldNumber;
const int PaxosMsg::kMsgTypeFieldNumber;
const int PaxosMsg::kTermFieldNumber;
const int PaxosMsg::kMsgIdFieldNumber;
const int PaxosMsg::kLeaderIdFieldNumber;
const int PaxosMsg::kPrevLogIndexFieldNumber;
const int PaxosMsg::kPrevLogTermFieldNumber;
const int PaxosMsg::kEntriesFieldNumber;
const int PaxosMsg::kCommitIndexFieldNumber;
const int PaxosMsg::kNocacheFieldNumber;
const int PaxosMsg::kIsSuccessFieldNumber;
const int PaxosMsg::kCandidateIdFieldNumber;
const int PaxosMsg::kLastLogIndexFieldNumber;
const int PaxosMsg::kLastLogTermFieldNumber;
const int PaxosMsg::kForceFieldNumber;
const int PaxosMsg::kAddrFieldNumber;
const int PaxosMsg::kVoteGrantedFieldNumber;
const int PaxosMsg::kIgnoreCheckFieldNumber;
const int PaxosMsg::kLcTypeFieldNumber;
const int PaxosMsg::kMinMatchIndexFieldNumber;
const int PaxosMsg::kAppliedIndexFieldNumber;
const int PaxosMsg::kAppendErrorFieldNumber;
const int PaxosMsg::kNewClusterIdFieldNumber;
const int PaxosMsg::kCiEntriesFieldNumber;
const int PaxosMsg::kRoleFieldNumber;
const int PaxosMsg::kCompressedEntriesFieldNumber;
const int PaxosMsg::kExtraFieldNumber;
#endif  // !_MSC_VER

PaxosMsg::PaxosMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PaxosMsg::InitAsDefaultInstance() {
  compressedentries_ = const_cast< ::alisql::CompressedLogEntries*>(&::alisql::CompressedLogEntries::default_instance());
}

PaxosMsg::PaxosMsg(const PaxosMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PaxosMsg::SharedCtor() {
  _cached_size_ = 0;
  configid_ = GOOGLE_ULONGLONG(0);
  clusterid_ = GOOGLE_ULONGLONG(0);
  serverid_ = GOOGLE_ULONGLONG(0);
  msgtype_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  msgid_ = GOOGLE_ULONGLONG(0);
  leaderid_ = GOOGLE_ULONGLONG(0);
  prevlogindex_ = GOOGLE_ULONGLONG(0);
  prevlogterm_ = GOOGLE_ULONGLONG(0);
  commitindex_ = GOOGLE_ULONGLONG(0);
  nocache_ = false;
  issuccess_ = false;
  candidateid_ = GOOGLE_ULONGLONG(0);
  lastlogindex_ = GOOGLE_ULONGLONG(0);
  lastlogterm_ = GOOGLE_ULONGLONG(0);
  force_ = GOOGLE_ULONGLONG(0);
  addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  votegranted_ = false;
  ignorecheck_ = false;
  lctype_ = GOOGLE_ULONGLONG(0);
  minmatchindex_ = GOOGLE_ULONGLONG(0);
  appliedindex_ = GOOGLE_ULONGLONG(0);
  appenderror_ = false;
  newclusterid_ = GOOGLE_ULONGLONG(0);
  role_ = 0u;
  compressedentries_ = NULL;
  extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PaxosMsg::~PaxosMsg() {
  SharedDtor();
}

void PaxosMsg::SharedDtor() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (extra_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_;
  }
  if (this != default_instance_) {
    delete compressedentries_;
  }
}

void PaxosMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaxosMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PaxosMsg_descriptor_;
}

const PaxosMsg& PaxosMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paxos_2eproto();
  return *default_instance_;
}

PaxosMsg* PaxosMsg::default_instance_ = NULL;

PaxosMsg* PaxosMsg::New() const {
  return new PaxosMsg;
}

void PaxosMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    configid_ = GOOGLE_ULONGLONG(0);
    clusterid_ = GOOGLE_ULONGLONG(0);
    serverid_ = GOOGLE_ULONGLONG(0);
    msgtype_ = 0;
    term_ = GOOGLE_ULONGLONG(0);
    msgid_ = GOOGLE_ULONGLONG(0);
    leaderid_ = GOOGLE_ULONGLONG(0);
    prevlogindex_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    prevlogterm_ = GOOGLE_ULONGLONG(0);
    commitindex_ = GOOGLE_ULONGLONG(0);
    nocache_ = false;
    issuccess_ = false;
    candidateid_ = GOOGLE_ULONGLONG(0);
    lastlogindex_ = GOOGLE_ULONGLONG(0);
    lastlogterm_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    force_ = GOOGLE_ULONGLONG(0);
    if (has_addr()) {
      if (addr_ != &::google::protobuf::internal::kEmptyString) {
        addr_->clear();
      }
    }
    votegranted_ = false;
    ignorecheck_ = false;
    lctype_ = GOOGLE_ULONGLONG(0);
    minmatchindex_ = GOOGLE_ULONGLONG(0);
    appliedindex_ = GOOGLE_ULONGLONG(0);
    appenderror_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    newclusterid_ = GOOGLE_ULONGLONG(0);
    role_ = 0u;
    if (has_compressedentries()) {
      if (compressedentries_ != NULL) compressedentries_->::alisql::CompressedLogEntries::Clear();
    }
    if (has_extra()) {
      if (extra_ != &::google::protobuf::internal::kEmptyString) {
        extra_->clear();
      }
    }
  }
  entries_.Clear();
  cientries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PaxosMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 configId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clusterId;
        break;
      }

      // required uint64 clusterId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverId;
        break;
      }

      // required uint64 serverId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_msgType;
        break;
      }

      // required int32 msgType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_term;
        break;
      }

      // required uint64 term = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_msgId;
        break;
      }

      // required uint64 msgId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_leaderId;
        break;
      }

      // optional uint64 leaderId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_prevLogIndex;
        break;
      }

      // optional uint64 prevLogIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevLogIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prevlogindex_)));
          set_has_prevlogindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_prevLogTerm;
        break;
      }

      // optional uint64 prevLogTerm = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevLogTerm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prevlogterm_)));
          set_has_prevlogterm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_entries;
        break;
      }

      // repeated .alisql.LogEntry entries = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_entries;
        if (input->ExpectTag(88)) goto parse_commitIndex;
        break;
      }

      // optional uint64 commitIndex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commitIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commitindex_)));
          set_has_commitindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_nocache;
        break;
      }

      // optional bool nocache = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nocache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nocache_)));
          set_has_nocache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isSuccess;
        break;
      }

      // optional bool isSuccess = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSuccess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_candidateId;
        break;
      }

      // optional uint64 candidateId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_candidateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &candidateid_)));
          set_has_candidateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lastLogIndex;
        break;
      }

      // optional uint64 lastLogIndex = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLogIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastlogindex_)));
          set_has_lastlogindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_lastLogTerm;
        break;
      }

      // optional uint64 lastLogTerm = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLogTerm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastlogterm_)));
          set_has_lastlogterm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_force;
        break;
      }

      // optional uint64 force = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_addr;
        break;
      }

      // optional bytes addr = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_voteGranted;
        break;
      }

      // optional bool voteGranted = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voteGranted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &votegranted_)));
          set_has_votegranted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_ignoreCheck;
        break;
      }

      // optional bool ignoreCheck = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignoreCheck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignorecheck_)));
          set_has_ignorecheck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_lcType;
        break;
      }

      // optional uint64 lcType = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lcType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lctype_)));
          set_has_lctype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_minMatchIndex;
        break;
      }

      // optional uint64 minMatchIndex = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minMatchIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minmatchindex_)));
          set_has_minmatchindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_appliedIndex;
        break;
      }

      // optional uint64 appliedIndex = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appliedIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &appliedindex_)));
          set_has_appliedindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_appendError;
        break;
      }

      // optional bool appendError = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appendError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &appenderror_)));
          set_has_appenderror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_newClusterId;
        break;
      }

      // optional uint64 newClusterId = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newClusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newclusterid_)));
          set_has_newclusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_ciEntries;
        break;
      }

      // repeated .alisql.ClusterInfoEntry ciEntries = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ciEntries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cientries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_ciEntries;
        if (input->ExpectTag(216)) goto parse_role;
        break;
      }

      // optional uint32 role = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_compressedEntries;
        break;
      }

      // optional .alisql.CompressedLogEntries compressedEntries = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compressedEntries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compressedentries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_extra;
        break;
      }

      // optional bytes extra = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PaxosMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 configId = 1;
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->configid(), output);
  }

  // required uint64 clusterId = 2;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clusterid(), output);
  }

  // required uint64 serverId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->serverid(), output);
  }

  // required int32 msgType = 4;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msgtype(), output);
  }

  // required uint64 term = 5;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->term(), output);
  }

  // required uint64 msgId = 6;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->msgid(), output);
  }

  // optional uint64 leaderId = 7;
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->leaderid(), output);
  }

  // optional uint64 prevLogIndex = 8;
  if (has_prevlogindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->prevlogindex(), output);
  }

  // optional uint64 prevLogTerm = 9;
  if (has_prevlogterm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->prevlogterm(), output);
  }

  // repeated .alisql.LogEntry entries = 10;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->entries(i), output);
  }

  // optional uint64 commitIndex = 11;
  if (has_commitindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->commitindex(), output);
  }

  // optional bool nocache = 12;
  if (has_nocache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->nocache(), output);
  }

  // optional bool isSuccess = 13;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->issuccess(), output);
  }

  // optional uint64 candidateId = 14;
  if (has_candidateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->candidateid(), output);
  }

  // optional uint64 lastLogIndex = 15;
  if (has_lastlogindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->lastlogindex(), output);
  }

  // optional uint64 lastLogTerm = 16;
  if (has_lastlogterm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->lastlogterm(), output);
  }

  // optional uint64 force = 17;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->force(), output);
  }

  // optional bytes addr = 18;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      18, this->addr(), output);
  }

  // optional bool voteGranted = 19;
  if (has_votegranted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->votegranted(), output);
  }

  // optional bool ignoreCheck = 20;
  if (has_ignorecheck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->ignorecheck(), output);
  }

  // optional uint64 lcType = 21;
  if (has_lctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->lctype(), output);
  }

  // optional uint64 minMatchIndex = 22;
  if (has_minmatchindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->minmatchindex(), output);
  }

  // optional uint64 appliedIndex = 23;
  if (has_appliedindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->appliedindex(), output);
  }

  // optional bool appendError = 24;
  if (has_appenderror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->appenderror(), output);
  }

  // optional uint64 newClusterId = 25;
  if (has_newclusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->newclusterid(), output);
  }

  // repeated .alisql.ClusterInfoEntry ciEntries = 26;
  for (int i = 0; i < this->cientries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->cientries(i), output);
  }

  // optional uint32 role = 27;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->role(), output);
  }

  // optional .alisql.CompressedLogEntries compressedEntries = 28;
  if (has_compressedentries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->compressedentries(), output);
  }

  // optional bytes extra = 29;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      29, this->extra(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PaxosMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 configId = 1;
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->configid(), target);
  }

  // required uint64 clusterId = 2;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clusterid(), target);
  }

  // required uint64 serverId = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->serverid(), target);
  }

  // required int32 msgType = 4;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->msgtype(), target);
  }

  // required uint64 term = 5;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->term(), target);
  }

  // required uint64 msgId = 6;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->msgid(), target);
  }

  // optional uint64 leaderId = 7;
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->leaderid(), target);
  }

  // optional uint64 prevLogIndex = 8;
  if (has_prevlogindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->prevlogindex(), target);
  }

  // optional uint64 prevLogTerm = 9;
  if (has_prevlogterm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->prevlogterm(), target);
  }

  // repeated .alisql.LogEntry entries = 10;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->entries(i), target);
  }

  // optional uint64 commitIndex = 11;
  if (has_commitindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->commitindex(), target);
  }

  // optional bool nocache = 12;
  if (has_nocache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->nocache(), target);
  }

  // optional bool isSuccess = 13;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->issuccess(), target);
  }

  // optional uint64 candidateId = 14;
  if (has_candidateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->candidateid(), target);
  }

  // optional uint64 lastLogIndex = 15;
  if (has_lastlogindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->lastlogindex(), target);
  }

  // optional uint64 lastLogTerm = 16;
  if (has_lastlogterm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->lastlogterm(), target);
  }

  // optional uint64 force = 17;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->force(), target);
  }

  // optional bytes addr = 18;
  if (has_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->addr(), target);
  }

  // optional bool voteGranted = 19;
  if (has_votegranted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->votegranted(), target);
  }

  // optional bool ignoreCheck = 20;
  if (has_ignorecheck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->ignorecheck(), target);
  }

  // optional uint64 lcType = 21;
  if (has_lctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->lctype(), target);
  }

  // optional uint64 minMatchIndex = 22;
  if (has_minmatchindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->minmatchindex(), target);
  }

  // optional uint64 appliedIndex = 23;
  if (has_appliedindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->appliedindex(), target);
  }

  // optional bool appendError = 24;
  if (has_appenderror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->appenderror(), target);
  }

  // optional uint64 newClusterId = 25;
  if (has_newclusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->newclusterid(), target);
  }

  // repeated .alisql.ClusterInfoEntry ciEntries = 26;
  for (int i = 0; i < this->cientries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->cientries(i), target);
  }

  // optional uint32 role = 27;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->role(), target);
  }

  // optional .alisql.CompressedLogEntries compressedEntries = 28;
  if (has_compressedentries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->compressedentries(), target);
  }

  // optional bytes extra = 29;
  if (has_extra()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        29, this->extra(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PaxosMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 configId = 1;
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->configid());
    }

    // required uint64 clusterId = 2;
    if (has_clusterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clusterid());
    }

    // required uint64 serverId = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // required int32 msgType = 4;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgtype());
    }

    // required uint64 term = 5;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required uint64 msgId = 6;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgid());
    }

    // optional uint64 leaderId = 7;
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderid());
    }

    // optional uint64 prevLogIndex = 8;
    if (has_prevlogindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prevlogindex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 prevLogTerm = 9;
    if (has_prevlogterm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prevlogterm());
    }

    // optional uint64 commitIndex = 11;
    if (has_commitindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commitindex());
    }

    // optional bool nocache = 12;
    if (has_nocache()) {
      total_size += 1 + 1;
    }

    // optional bool isSuccess = 13;
    if (has_issuccess()) {
      total_size += 1 + 1;
    }

    // optional uint64 candidateId = 14;
    if (has_candidateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->candidateid());
    }

    // optional uint64 lastLogIndex = 15;
    if (has_lastlogindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastlogindex());
    }

    // optional uint64 lastLogTerm = 16;
    if (has_lastlogterm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastlogterm());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 force = 17;
    if (has_force()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->force());
    }

    // optional bytes addr = 18;
    if (has_addr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->addr());
    }

    // optional bool voteGranted = 19;
    if (has_votegranted()) {
      total_size += 2 + 1;
    }

    // optional bool ignoreCheck = 20;
    if (has_ignorecheck()) {
      total_size += 2 + 1;
    }

    // optional uint64 lcType = 21;
    if (has_lctype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lctype());
    }

    // optional uint64 minMatchIndex = 22;
    if (has_minmatchindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->minmatchindex());
    }

    // optional uint64 appliedIndex = 23;
    if (has_appliedindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->appliedindex());
    }

    // optional bool appendError = 24;
    if (has_appenderror()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint64 newClusterId = 25;
    if (has_newclusterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->newclusterid());
    }

    // optional uint32 role = 27;
    if (has_role()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

    // optional .alisql.CompressedLogEntries compressedEntries = 28;
    if (has_compressedentries()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compressedentries());
    }

    // optional bytes extra = 29;
    if (has_extra()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra());
    }

  }
  // repeated .alisql.LogEntry entries = 10;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  // repeated .alisql.ClusterInfoEntry ciEntries = 26;
  total_size += 2 * this->cientries_size();
  for (int i = 0; i < this->cientries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cientries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaxosMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PaxosMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PaxosMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PaxosMsg::MergeFrom(const PaxosMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  cientries_.MergeFrom(from.cientries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_prevlogindex()) {
      set_prevlogindex(from.prevlogindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_prevlogterm()) {
      set_prevlogterm(from.prevlogterm());
    }
    if (from.has_commitindex()) {
      set_commitindex(from.commitindex());
    }
    if (from.has_nocache()) {
      set_nocache(from.nocache());
    }
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_candidateid()) {
      set_candidateid(from.candidateid());
    }
    if (from.has_lastlogindex()) {
      set_lastlogindex(from.lastlogindex());
    }
    if (from.has_lastlogterm()) {
      set_lastlogterm(from.lastlogterm());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_votegranted()) {
      set_votegranted(from.votegranted());
    }
    if (from.has_ignorecheck()) {
      set_ignorecheck(from.ignorecheck());
    }
    if (from.has_lctype()) {
      set_lctype(from.lctype());
    }
    if (from.has_minmatchindex()) {
      set_minmatchindex(from.minmatchindex());
    }
    if (from.has_appliedindex()) {
      set_appliedindex(from.appliedindex());
    }
    if (from.has_appenderror()) {
      set_appenderror(from.appenderror());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_newclusterid()) {
      set_newclusterid(from.newclusterid());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_compressedentries()) {
      mutable_compressedentries()->::alisql::CompressedLogEntries::MergeFrom(from.compressedentries());
    }
    if (from.has_extra()) {
      set_extra(from.extra());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PaxosMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaxosMsg::CopyFrom(const PaxosMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaxosMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cientries_size(); i++) {
    if (!this->cientries(i).IsInitialized()) return false;
  }
  if (has_compressedentries()) {
    if (!this->compressedentries().IsInitialized()) return false;
  }
  return true;
}

void PaxosMsg::Swap(PaxosMsg* other) {
  if (other != this) {
    std::swap(configid_, other->configid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(serverid_, other->serverid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(term_, other->term_);
    std::swap(msgid_, other->msgid_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(prevlogindex_, other->prevlogindex_);
    std::swap(prevlogterm_, other->prevlogterm_);
    entries_.Swap(&other->entries_);
    std::swap(commitindex_, other->commitindex_);
    std::swap(nocache_, other->nocache_);
    std::swap(issuccess_, other->issuccess_);
    std::swap(candidateid_, other->candidateid_);
    std::swap(lastlogindex_, other->lastlogindex_);
    std::swap(lastlogterm_, other->lastlogterm_);
    std::swap(force_, other->force_);
    std::swap(addr_, other->addr_);
    std::swap(votegranted_, other->votegranted_);
    std::swap(ignorecheck_, other->ignorecheck_);
    std::swap(lctype_, other->lctype_);
    std::swap(minmatchindex_, other->minmatchindex_);
    std::swap(appliedindex_, other->appliedindex_);
    std::swap(appenderror_, other->appenderror_);
    std::swap(newclusterid_, other->newclusterid_);
    cientries_.Swap(&other->cientries_);
    std::swap(role_, other->role_);
    std::swap(compressedentries_, other->compressedentries_);
    std::swap(extra_, other->extra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PaxosMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PaxosMsg_descriptor_;
  metadata.reflection = PaxosMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg1::kIdFieldNumber;
const int TestMsg1::kC1FieldNumber;
#endif  // !_MSC_VER

TestMsg1::TestMsg1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg1::InitAsDefaultInstance() {
}

TestMsg1::TestMsg1(const TestMsg1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg1::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  c1_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg1::~TestMsg1() {
  SharedDtor();
}

void TestMsg1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestMsg1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg1_descriptor_;
}

const TestMsg1& TestMsg1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paxos_2eproto();
  return *default_instance_;
}

TestMsg1* TestMsg1::default_instance_ = NULL;

TestMsg1* TestMsg1::New() const {
  return new TestMsg1;
}

void TestMsg1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    c1_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_c1;
        break;
      }

      // optional uint64 c1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_c1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &c1_)));
          set_has_c1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 c1 = 2;
  if (has_c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->c1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 c1 = 2;
  if (has_c1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->c1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 c1 = 2;
    if (has_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->c1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg1::MergeFrom(const TestMsg1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_c1()) {
      set_c1(from.c1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg1::CopyFrom(const TestMsg1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TestMsg1::Swap(TestMsg1* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(c1_, other->c1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg1_descriptor_;
  metadata.reflection = TestMsg1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestMsg2::kIdFieldNumber;
const int TestMsg2::kC1FieldNumber;
const int TestMsg2::kC2FieldNumber;
#endif  // !_MSC_VER

TestMsg2::TestMsg2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestMsg2::InitAsDefaultInstance() {
}

TestMsg2::TestMsg2(const TestMsg2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestMsg2::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  c1_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMsg2::~TestMsg2() {
  SharedDtor();
}

void TestMsg2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestMsg2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMsg2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMsg2_descriptor_;
}

const TestMsg2& TestMsg2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paxos_2eproto();
  return *default_instance_;
}

TestMsg2* TestMsg2::default_instance_ = NULL;

TestMsg2* TestMsg2::New() const {
  return new TestMsg2;
}

void TestMsg2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    c1_ = GOOGLE_ULONGLONG(0);
  }
  c2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMsg2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_c1;
        break;
      }

      // optional uint64 c1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_c1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &c1_)));
          set_has_c1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_c2;
        break;
      }

      // repeated uint64 c2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_c2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_c2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_c2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_c2;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestMsg2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 c1 = 2;
  if (has_c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->c1(), output);
  }

  // repeated uint64 c2 = 3;
  for (int i = 0; i < this->c2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->c2(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestMsg2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 c1 = 2;
  if (has_c1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->c1(), target);
  }

  // repeated uint64 c2 = 3;
  for (int i = 0; i < this->c2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->c2(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestMsg2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 c1 = 2;
    if (has_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->c1());
    }

  }
  // repeated uint64 c2 = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->c2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->c2(i));
    }
    total_size += 1 * this->c2_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMsg2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMsg2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMsg2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMsg2::MergeFrom(const TestMsg2& from) {
  GOOGLE_CHECK_NE(&from, this);
  c2_.MergeFrom(from.c2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_c1()) {
      set_c1(from.c1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMsg2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMsg2::CopyFrom(const TestMsg2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TestMsg2::Swap(TestMsg2* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(c1_, other->c1_);
    c2_.Swap(&other->c2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMsg2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMsg2_descriptor_;
  metadata.reflection = TestMsg2_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace alisql

// @@protoc_insertion_point(global_scope)
