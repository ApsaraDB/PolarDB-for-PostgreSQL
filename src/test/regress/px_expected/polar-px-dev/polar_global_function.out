/*--EXPLAIN_QUERY_BEGIN*/
create schema polar_global_function;
-- start_ignore
SET search_path to polar_global_function;
-- end_ignore
-- test polar global function
select * from generate_series(1,10);
 generate_series 
-----------------
               1
               2
               3
               4
               5
               6
               7
               8
               9
              10
(10 rows)

select * from polar_global_function('generate_series',1,10);
ERROR:  only support polar_global_function under px
CREATE OR REPLACE FUNCTION getrngfunc2() RETURNS setof int AS 'SELECT 100;' LANGUAGE SQL;
SELECT * FROM getrngfunc2();
 getrngfunc2 
-------------
         100
(1 row)

select * from polar_global_function('getrngfunc2');
ERROR:  only support polar_global_function under px
drop table t1;
ERROR:  table "t1" does not exist
create table t1 (c1  int, c2 varchar(20));
insert into t1 values(1,'BeiJing'),(2,'NewYork'),(3,'ShaingHai');
create or replace function getTable1() returns setof t1 as 
$$
begin
return query select * from t1;
end;
$$
language plpgsql;
select * from getTable1();
 c1 |    c2     
----+-----------
  1 | BeiJing
  2 | NewYork
  3 | ShaingHai
(3 rows)

select * from polar_global_function('getTable1');
ERROR:  function getTable1() does not exist
LINE 1: select * from polar_global_function('getTable1');
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
select * from polar_global_function('gettable1');
ERROR:  only support polar_global_function under px
create or replace function getTable2(int) returns setof t1 as 
$$
begin
return query select * from t1 where c1 = $1;
end;
$$
language plpgsql IMMUTABLE;
select * from getTable2(1);
 c1 |   c2    
----+---------
  1 | BeiJing
(1 row)

select * from polar_global_function('getTable2', 1);
ERROR:  function getTable2(integer) does not exist
LINE 1: select * from polar_global_function('getTable2', 1);
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
select * from polar_global_function('gettable2', 1);
ERROR:  only support polar_global_function under px
CREATE OR REPLACE FUNCTION getrngfunc1(int) RETURNS int AS 'SELECT $1 + 10;' LANGUAGE SQL IMMUTABLE;
SELECT * FROM getrngfunc1(1);
 getrngfunc1 
-------------
          11
(1 row)

--error
select * from polar_global_function('getrngfunc1', 1);
ERROR:  only support set-returning function now
select * from polar_global_function('getrngfunc1');
ERROR:  function getrngfunc1() does not exist
LINE 1: select * from polar_global_function('getrngfunc1');
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
select * from polar_global_function('getrngfunc1', 1, 2);
ERROR:  function getrngfunc1(integer, integer) does not exist
LINE 1: select * from polar_global_function('getrngfunc1', 1, 2);
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
--由于当前px并不支持view, 这里手动在should_px_planner中放开, 测试case验证通过. 当前结果集在支持view后需要更新下
select * from (select * from polar_global_function('generate_series',1,10)) t11;
ERROR:  only support polar_global_function under px
select * from (select * from (select * from polar_global_function('generate_series',1,10)) t11) t12;
ERROR:  only support polar_global_function under px
create or replace view v1 as select * from polar_global_function('generate_series',1,10);
\d+ v1;
                          View "polar_global_function.v1"
     Column      |  Type   | Collation | Nullable | Default | Storage | Description 
-----------------+---------+-----------+----------+---------+---------+-------------
 generate_series | integer |           |          |         | plain   | 
View definition:
 SELECT generate_series.generate_series
   FROM polar_global_function('generate_series', 1, 10) generate_series(generate_series);

select * from v1;
 generate_series 
-----------------
               1
               2
               3
               4
               5
               6
               7
               8
               9
              10
(10 rows)

                    QUERY PLAN                     
---------------------------------------------------
 PX Coordinator 2:1  (slice1; segments: 2)
   Output: generate_series
   ->  Function Scan on pg_catalog.generate_series
         Output: generate_series
         Function Call: generate_series(1, 10)
 Optimizer: PolarDB PX Optimizer
(6 rows)

----COMPARE PX RESULT hash not match
 generate_series 
-----------------
               1
               1
              10
              10
               2
               2
               3
               3
               4
               4
               5
               5
               6
               6
               7
               7
               8
               8
               9
               9
(20 rows)

create or replace view v1 as select * from (select * from polar_global_function('generate_series',1,10)) t11;
\d+ v1;
                          View "polar_global_function.v1"
     Column      |  Type   | Collation | Nullable | Default | Storage | Description 
-----------------+---------+-----------+----------+---------+---------+-------------
 generate_series | integer |           |          |         | plain   | 
View definition:
 SELECT t11.generate_series
   FROM ( SELECT generate_series.generate_series
           FROM polar_global_function('generate_series', 1, 10) generate_series(generate_series)) t11;

select * from v1;
 generate_series 
-----------------
               1
               2
               3
               4
               5
               6
               7
               8
               9
              10
(10 rows)

                    QUERY PLAN                     
---------------------------------------------------
 PX Coordinator 2:1  (slice1; segments: 2)
   Output: generate_series
   ->  Function Scan on pg_catalog.generate_series
         Output: generate_series
         Function Call: generate_series(1, 10)
 Optimizer: PolarDB PX Optimizer
(6 rows)

----COMPARE PX RESULT hash not match
 generate_series 
-----------------
               1
               1
              10
              10
               2
               2
               3
               3
               4
               4
               5
               5
               6
               6
               7
               7
               8
               8
               9
               9
(20 rows)

create or replace view v1 as select * from (select * from (select * from polar_global_function('generate_series',1,10)) t11) t12;
\d+ v1;
                          View "polar_global_function.v1"
     Column      |  Type   | Collation | Nullable | Default | Storage | Description 
-----------------+---------+-----------+----------+---------+---------+-------------
 generate_series | integer |           |          |         | plain   | 
View definition:
 SELECT t12.generate_series
   FROM ( SELECT t11.generate_series
           FROM ( SELECT generate_series.generate_series
                   FROM polar_global_function('generate_series', 1, 10) generate_series(generate_series)) t11) t12;

select * from v1;
 generate_series 
-----------------
               1
               2
               3
               4
               5
               6
               7
               8
               9
              10
(10 rows)

                    QUERY PLAN                     
---------------------------------------------------
 PX Coordinator 2:1  (slice1; segments: 2)
   Output: generate_series
   ->  Function Scan on pg_catalog.generate_series
         Output: generate_series
         Function Call: generate_series(1, 10)
 Optimizer: PolarDB PX Optimizer
(6 rows)

----COMPARE PX RESULT hash not match
 generate_series 
-----------------
               1
               1
              10
              10
               2
               2
               3
               3
               4
               4
               5
               5
               6
               6
               7
               7
               8
               8
               9
               9
(20 rows)

drop view v1;
-- start_ignore
set client_min_messages='warning';
DROP SCHEMA polar_global_function CASCADE;
-- end_ignore
