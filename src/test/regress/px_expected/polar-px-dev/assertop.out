-- simple SQL with assert
-- 
/*--EXPLAIN_QUERY_BEGIN*/
explain (costs off) select (select 1 union select 2);
            QUERY PLAN            
----------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Unique
           ->  Sort
                 Sort Key: (1)
                 ->  Append
                       ->  Result
                       ->  Result
(8 rows)

-- expect assertion failure because more than 1 row returned
select (select 1 union select 2);
ERROR:  more than one row returned by a subquery used as an expression
-- 
explain (costs off) select (select generate_series(1,5));
        QUERY PLAN         
---------------------------
 Result
   InitPlan 1 (returns $0)
     ->  ProjectSet
           ->  Result
(4 rows)

-- expect assertion failure because more than 1 row returned
select (select generate_series(1,5));
ERROR:  more than one row returned by a subquery used as an expression
-- 
explain (costs off) select (select generate_series(1,1)) as series;
        QUERY PLAN         
---------------------------
 Result
   InitPlan 1 (returns $0)
     ->  ProjectSet
           ->  Result
(4 rows)

-- expect assertion pass
select (select generate_series(1,1)) as series;
 series 
--------
      1
(1 row)

-- PX query with assert
-- 
drop table if exists assert_test1;
NOTICE:  table "assert_test1" does not exist, skipping
create table assert_test1(id int);
insert into assert_test1(id) select generate_series(1, 1000) as id order by id desc;
-- expect assertion failure because more than 1 row returned
select * from assert_test1 where id = (select id from assert_test1);
ERROR:  more than one row returned by a subquery used as an expression
-- expect assertion pass because only 1 row returned
select * from assert_test1 where id = (select id from assert_test1 where id = 1);
 id 
----
  1
(1 row)

                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: assert_test1.id
   ->  Hash Join
         Output: assert_test1.id
         Hash Cond: (assert_test1.id = assert_test1_1.id)
         ->  Partial Seq Scan on public.assert_test1
               Output: assert_test1.id
         ->  Hash
               Output: assert_test1_1.id
               ->  Assert
                     Output: assert_test1_1.id
                     Assert Cond: ((row_number() OVER (?)) = 1)
                     ->  PX Broadcast 1:6  (slice2)
                           Output: assert_test1_1.id, (row_number() OVER (?))
                           ->  WindowAgg
                                 Output: assert_test1_1.id, row_number() OVER (?)
                                 ->  PX Coordinator 6:1  (slice3; segments: 6)
                                       Output: assert_test1_1.id
                                       ->  Partial Seq Scan on public.assert_test1 assert_test1_1
                                             Output: assert_test1_1.id
                                             Filter: (assert_test1_1.id = 1)
 Optimizer: PolarDB PX Optimizer
(22 rows)

-- 
drop table if exists assert_test2;
NOTICE:  table "assert_test2" does not exist, skipping
create table assert_test2(id1 int, id2 int, id3 int, id4 int);
insert into assert_test2(id1, id2, id3, id4) select
    generate_series(1, 1000),
    generate_series(1, 1000),
    generate_series(1, 1000),
    generate_series(1, 1000);
-- expect assertion failure because more than 1 row returned
select * from assert_test2 where id2 = (select id3 from assert_test2);
ERROR:  more than one row returned by a subquery used as an expression
-- expect assertion pass because only 1 row returned
select * from assert_test2 where id2 = (select id3 from assert_test2 where id4 = 1);
 id1 | id2 | id3 | id4 
-----+-----+-----+-----
   1 |   1 |   1 |   1
(1 row)

                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: assert_test2.id1, assert_test2.id2, assert_test2.id3, assert_test2.id4
   ->  Hash Join
         Output: assert_test2.id1, assert_test2.id2, assert_test2.id3, assert_test2.id4
         Hash Cond: (assert_test2.id2 = assert_test2_1.id3)
         ->  Partial Seq Scan on public.assert_test2
               Output: assert_test2.id1, assert_test2.id2, assert_test2.id3, assert_test2.id4
         ->  Hash
               Output: assert_test2_1.id3
               ->  Assert
                     Output: assert_test2_1.id3
                     Assert Cond: ((row_number() OVER (?)) = 1)
                     ->  PX Broadcast 1:6  (slice2)
                           Output: assert_test2_1.id3, (row_number() OVER (?))
                           ->  WindowAgg
                                 Output: assert_test2_1.id3, row_number() OVER (?)
                                 ->  PX Coordinator 6:1  (slice3; segments: 6)
                                       Output: assert_test2_1.id3
                                       ->  Partial Seq Scan on public.assert_test2 assert_test2_1
                                             Output: assert_test2_1.id3
                                             Filter: (assert_test2_1.id4 = 1)
 Optimizer: PolarDB PX Optimizer
(22 rows)

-- More DML with assert to be test seperately...
