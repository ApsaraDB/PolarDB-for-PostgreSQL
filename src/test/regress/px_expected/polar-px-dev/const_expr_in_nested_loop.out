--
-- This file contains tests for const expressions in nested loops.
--
/*--EXPLAIN_QUERY_BEGIN*/
CREATE TABLE foo_tbl (a int, b text);
-- Create an index for foo_tbl(a), so that we are able to generate
-- a plan with NestedLoop.
CREATE UNIQUE INDEX foo_index_a ON foo_tbl(a);
CREATE INDEX foo_index_b ON foo_tbl(b);
INSERT INTO foo_tbl VALUES (1, 'aaa');
INSERT INTO foo_tbl VALUES (2, 'bbb');
INSERT INTO foo_tbl VALUES (3, 'ccc');
INSERT INTO foo_tbl VALUES (4, 'ddd');
INSERT INTO foo_tbl VALUES (5, 'eee');
SELECT * FROM foo_tbl
  WHERE a=(SELECT 1);
 a |  b  
---+-----
 1 | aaa
(1 row)

                             QUERY PLAN                             
--------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   ->  Nested Loop
         Output: a, b
         Join Filter: true
         ->  Result
               Output: 1
         ->  Partial Index Scan using foo_index_a on public.foo_tbl
               Output: a, b
               Index Cond: (foo_tbl.a = (1))
 Optimizer: PolarDB PX Optimizer
(11 rows)

SELECT * FROM foo_tbl
  WHERE b=(SELECT 'aaa');
 a |  b  
---+-----
 1 | aaa
(1 row)

                             QUERY PLAN                             
--------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   ->  Nested Loop
         Output: a, b
         Join Filter: true
         ->  Result
               Output: 'aaa'::text
         ->  Partial Index Scan using foo_index_b on public.foo_tbl
               Output: a, b
               Index Cond: (foo_tbl.b = ('aaa'::text))
 Optimizer: PolarDB PX Optimizer
(11 rows)

SELECT * FROM foo_tbl
  WHERE a=(SELECT 1) AND b=(SELECT 'aaa');
 a |  b  
---+-----
 1 | aaa
(1 row)

SELECT * FROM foo_tbl
  WHERE a=(SELECT 1) OR b=(SELECT 'aaa');
 a |  b  
---+-----
 1 | aaa
(1 row)

                             QUERY PLAN                             
--------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   ->  Result
         Output: a, b
         Filter: ((foo_tbl.a = (1)) OR (foo_tbl.b = ('aaa'::text)))
         ->  Nested Loop Left Join
               Output: a, b, (1), ('aaa'::text)
               Join Filter: true
               ->  Nested Loop Left Join
                     Output: a, b, (1)
                     Join Filter: true
                     ->  Partial Seq Scan on public.foo_tbl
                           Output: a, b
                     ->  Result
                           Output: 1
               ->  Result
                     Output: 'aaa'::text
 Optimizer: PolarDB PX Optimizer
(18 rows)

DROP TABLE foo_tbl;
