--
-- Test for plpgsql in parallel mode
--
/*--EXPLAIN_QUERY_BEGIN*/
drop table px_plpgsql_table;
ERROR:  table "px_plpgsql_table" does not exist
create table px_plpgsql_table (a int, b int);
-- query in trigger will not use px
create or replace function px_trigger()
  returns trigger language plpgsql as
$$
declare
    x integer;
    id integer;
begin
    select _px_worker_id, count(*) into id, x from px_plpgsql_table group by 1;
    if id = -1 then
        RAISE NOTICE 'trigger is not parallel';
    end if;
    return new;
end;
$$;
create trigger px_trig after insert on px_plpgsql_table
  for each row execute procedure px_trigger();
insert into px_plpgsql_table values (1,1),(2,2),(3,3),(4,4);
NOTICE:  trigger is not parallel
NOTICE:  trigger is not parallel
NOTICE:  trigger is not parallel
NOTICE:  trigger is not parallel
-- IMMUTABLE function will use px
create or replace function count_only() returns int as
$$
declare
    x integer;
    id integer;
begin
    select _px_worker_id, count(*) into id, x from px_plpgsql_table group by 1;
    if id <> -1 then
        RAISE NOTICE 'IMMUTABLE function is parallel';
    end if;
    return x;
end
$$
language plpgsql 
IMMUTABLE;
select count_only();
 count_only 
------------
          4
(1 row)

select * from px_plpgsql_table where a + count_only() < 6;
 a | b 
---+---
 1 | 1
(1 row)

NOTICE:  IMMUTABLE function is parallel
                    QUERY PLAN                     
---------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   ->  Partial Seq Scan on public.px_plpgsql_table
         Output: a, b
         Filter: ((px_plpgsql_table.a + 4) < 6)
 Optimizer: PolarDB PX Optimizer
(6 rows)

NOTICE:  IMMUTABLE function is parallel
-- IMMUTABLE function will use px
create or replace function count2() returns int as
$$
declare
    x integer;
    id integer;
begin
    select _px_worker_id, count(*) into id, x from px_plpgsql_table group by 1;
    if id <> -1 then
        RAISE NOTICE 'IMMUTABLE function is parallel';
    end if;
    return x;
end
$$
language plpgsql ;
select count2();
 count2 
--------
      4
(1 row)

select * from px_plpgsql_table where a + count2() < 6;
 a | b 
---+---
 1 | 1
(1 row)

                      QUERY PLAN                       
-------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   ->  Partial Seq Scan on public.px_plpgsql_table
         Output: a, b
         Filter: ((px_plpgsql_table.a + count2()) < 6)
 Optimizer: PolarDB PX Optimizer
(6 rows)

NOTICE:  IMMUTABLE function is parallel
NOTICE:  IMMUTABLE function is parallel
NOTICE:  IMMUTABLE function is parallel
NOTICE:  IMMUTABLE function is parallel
-- normal function will not use px
create or replace function both_rw() returns int as
$$
declare
    x integer;
    id integer;
begin
    insert into px_plpgsql_table values (5,5),(6,6);
    select _px_worker_id, count(*) into id, x from px_plpgsql_table group by 1;
    if id = -1 then
        RAISE NOTICE 'NORMAL function is not parallel';
    end if;
    return x;
end
$$
language plpgsql;
select both_rw();
NOTICE:  trigger is not parallel
NOTICE:  trigger is not parallel
NOTICE:  NORMAL function is not parallel
 both_rw 
---------
       6
(1 row)

select * from px_plpgsql_table where a + both_rw() < 6;
NOTICE:  trigger is not parallel
NOTICE:  trigger is not parallel
NOTICE:  NORMAL function is not parallel
NOTICE:  trigger is not parallel
NOTICE:  trigger is not parallel
NOTICE:  NORMAL function is not parallel
NOTICE:  trigger is not parallel
NOTICE:  trigger is not parallel
NOTICE:  NORMAL function is not parallel
NOTICE:  trigger is not parallel
NOTICE:  trigger is not parallel
NOTICE:  NORMAL function is not parallel
NOTICE:  trigger is not parallel
NOTICE:  trigger is not parallel
NOTICE:  NORMAL function is not parallel
NOTICE:  trigger is not parallel
NOTICE:  trigger is not parallel
NOTICE:  NORMAL function is not parallel
 a | b 
---+---
(0 rows)

                       QUERY PLAN                       
--------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   ->  Partial Seq Scan on public.px_plpgsql_table
         Output: a, b
         Filter: ((px_plpgsql_table.a + both_rw()) < 6)
 Optimizer: PolarDB PX Optimizer
(6 rows)

ERROR:  cannot execute INSERT in a read-only transaction
CONTEXT:  SQL statement "insert into px_plpgsql_table values (5,5),(6,6)"
PL/pgSQL function both_rw() line 6 at SQL statement
----COMPARE PX RESULT status not match(7, 2)
create or replace function count3() returns int as
$$
declare
    x integer;
    id integer;
    rec1 record;
begin
    for rec1 in select * from px_plpgsql_table loop
        select _px_worker_id, count(*) into id, x from px_plpgsql_table group by 1;
    if id <> -1 then
        RAISE NOTICE 'IMMUTABLE function is parallel';
    end if;
    end loop;
    return x;
end
$$
language plpgsql IMMUTABLE;
select count3();
 count3 
--------
     18
(1 row)

drop table px_plpgsql_table;
