/*--EXPLAIN_QUERY_BEGIN*/
drop table t1 cascade;
ERROR:  table "t1" does not exist
CREATE TABLE t1 (c1 int, c2 character varying(100));
insert into t1 select generate_series(1,100), repeat('hello',20);
update t1 set c2 = 'world' where c1 < 10;
update t1 set c2 = null where c1 < 5;
drop table t2 cascade;
ERROR:  table "t2" does not exist
CREATE TABLE t2 (c1 int, c2 character varying(100));
insert into t2 select * from t1;
set polar_px_optimizer_enable_crossproduct=1;
SELECT    c1, c2
FROM t2 AS OUTR
WHERE NOT EXISTS
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR
    WHERE OUTR.c2 <= 'wor' ) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
  1 | 
  2 | 
  3 | 
  4 | 
(4 rows)

                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: t2.c1, t2.c2
   ->  Nested Loop
         Output: t2.c1, t2.c2
         Join Filter: true
         ->  Partial Seq Scan on public.t2
               Output: t2.c1, t2.c2
               Filter: ((t2.c1 <= 39) AND (t2.c2 IS NULL) AND (NOT ((t2.c2)::text <= 'wor'::text)))
         ->  Materialize
               ->  PX Broadcast 1:6  (slice2)
                     ->  Limit
                           ->  PX Coordinator 6:1  (slice3; segments: 6)
                                 ->  Limit
                                       ->  Partial Seq Scan on public.t1
 Optimizer: PolarDB PX Optimizer
(15 rows)

----COMPARE PX RESULT hash not match
 c1 | c2 
----+----
(0 rows)

SELECT    c1, c2
FROM t2 AS OUTR
WHERE  EXISTS
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR
    WHERE OUTR.c2 <= 'wor' ) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
(0 rows)

                           QUERY PLAN                            
-----------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: t2.c1, t2.c2
   ->  Nested Loop Semi Join
         Output: t2.c1, t2.c2
         Join Filter: true
         ->  Result
               Output: t2.c1, t2.c2
               Filter: ((t2.c2)::text <= 'wor'::text)
               ->  Partial Seq Scan on public.t2
                     Output: t2.c1, t2.c2
                     Filter: ((t2.c1 <= 39) AND (t2.c2 IS NULL))
         ->  Materialize
               ->  PX Broadcast 6:6  (slice2; segments: 6)
                     ->  Partial Seq Scan on public.t1
 Optimizer: PolarDB PX Optimizer
(15 rows)

SELECT    c1, c2
FROM t2 AS OUTR
WHERE NOT EXISTS
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
(0 rows)

                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: t2.c1, t2.c2
   ->  Nested Loop
         Output: t2.c1, t2.c2
         Join Filter: true
         ->  Partial Seq Scan on public.t2
               Output: t2.c1, t2.c2
               Filter: ((t2.c1 <= 39) AND (t2.c2 IS NULL))
         ->  Materialize
               ->  PX Broadcast 1:6  (slice2)
                     ->  Result
                           Filter: ((count()) = '0'::bigint)
                           ->  Finalize Aggregate
                                 Output: count()
                                 ->  PX Coordinator 6:1  (slice3; segments: 6)
                                       Output: (PARTIAL count())
                                       ->  Partial Aggregate
                                             Output: PARTIAL count()
                                             ->  Partial Seq Scan on public.t1
 Optimizer: PolarDB PX Optimizer
(20 rows)

SELECT    c1, c2
FROM t2 AS OUTR
WHERE  EXISTS
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
  1 | 
  2 | 
  3 | 
  4 | 
(4 rows)

                               QUERY PLAN                                
-------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: t2.c1, t2.c2
   ->  Nested Loop Semi Join
         Output: t2.c1, t2.c2
         Join Filter: true
         ->  Partial Seq Scan on public.t2
               Output: t2.c1, t2.c2
               Filter: ((t2.c1 <= 39) AND (t2.c2 IS NULL))
         ->  Materialize
               ->  PX Broadcast 1:6  (slice2)
                     ->  Limit
                           ->  PX Coordinator 6:1  (slice3; segments: 6)
                                 ->  Limit
                                       ->  Partial Seq Scan on public.t1
 Optimizer: PolarDB PX Optimizer
(15 rows)

set polar_px_optimizer_enable_crossproduct=0;
SELECT    c1, c2
FROM t2 AS OUTR
WHERE NOT EXISTS
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR
    WHERE OUTR.c2 <= 'wor' ) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
  1 | 
  2 | 
  3 | 
  4 | 
(4 rows)

                        QUERY PLAN                         
-----------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: t2.c1, t2.c2
   ->  Nested Loop Anti Join
         Output: t2.c1, t2.c2
         Join Filter: ((t2.c2)::text <= 'wor'::text)
         ->  Partial Seq Scan on public.t2
               Output: t2.c1, t2.c2
               Filter: ((t2.c1 <= 39) AND (t2.c2 IS NULL))
         ->  Materialize
               ->  PX Broadcast 6:6  (slice2; segments: 6)
                     ->  Partial Seq Scan on public.t1
 Optimizer: PolarDB PX Optimizer
(12 rows)

SELECT    c1, c2
FROM t2 AS OUTR
WHERE  EXISTS
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR
    WHERE OUTR.c2 <= 'wor' ) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
(0 rows)

                           QUERY PLAN                            
-----------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: t2.c1, t2.c2
   ->  Nested Loop Semi Join
         Output: t2.c1, t2.c2
         Join Filter: true
         ->  Result
               Output: t2.c1, t2.c2
               Filter: ((t2.c2)::text <= 'wor'::text)
               ->  Partial Seq Scan on public.t2
                     Output: t2.c1, t2.c2
                     Filter: ((t2.c1 <= 39) AND (t2.c2 IS NULL))
         ->  Materialize
               ->  PX Broadcast 6:6  (slice2; segments: 6)
                     ->  Partial Seq Scan on public.t1
 Optimizer: PolarDB PX Optimizer
(15 rows)

SELECT    c1, c2
FROM t2 AS OUTR
WHERE NOT EXISTS
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
(0 rows)

                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: t2.c1, t2.c2
   ->  Nested Loop
         Output: t2.c1, t2.c2
         Join Filter: true
         ->  Partial Seq Scan on public.t2
               Output: t2.c1, t2.c2
               Filter: ((t2.c1 <= 39) AND (t2.c2 IS NULL))
         ->  Materialize
               ->  PX Broadcast 1:6  (slice2)
                     ->  Result
                           Filter: ((count()) = '0'::bigint)
                           ->  Finalize Aggregate
                                 Output: count()
                                 ->  PX Coordinator 6:1  (slice3; segments: 6)
                                       Output: (PARTIAL count())
                                       ->  Partial Aggregate
                                             Output: PARTIAL count()
                                             ->  Partial Seq Scan on public.t1
 Optimizer: PolarDB PX Optimizer
(20 rows)

SELECT    c1, c2
FROM t2 AS OUTR
WHERE  EXISTS
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
  1 | 
  2 | 
  3 | 
  4 | 
(4 rows)

                               QUERY PLAN                                
-------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: t2.c1, t2.c2
   ->  Nested Loop Semi Join
         Output: t2.c1, t2.c2
         Join Filter: true
         ->  Partial Seq Scan on public.t2
               Output: t2.c1, t2.c2
               Filter: ((t2.c1 <= 39) AND (t2.c2 IS NULL))
         ->  Materialize
               ->  PX Broadcast 1:6  (slice2)
                     ->  Limit
                           ->  PX Coordinator 6:1  (slice3; segments: 6)
                                 ->  Limit
                                       ->  Partial Seq Scan on public.t1
 Optimizer: PolarDB PX Optimizer
(15 rows)

set polar_px_optimizer_enable_lasj_notin=0;
SELECT    c1, c2
FROM t2 AS OUTR
WHERE OUTR.c1 NOT IN
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
(0 rows)

                                                                                                                                                                    QUERY PLAN                                                                                                                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result
   Output: t2.c1, t2.c2
   Filter: (SubPlan 1)
   ->  PX Coordinator 6:1  (slice1; segments: 6)
         Output: t2.c1, t2.c2
         ->  Partial Seq Scan on public.t2
               Output: t2.c1, t2.c2
               Filter: ((t2.c1 <= 39) AND (t2.c2 IS NULL))
   SubPlan 1
     ->  Result
           Output: true
           Filter: ((CASE WHEN (sum((CASE WHEN (t2.c1 = t1.c1) THEN 1 ELSE 0 END)) IS NULL) THEN true WHEN (sum((CASE WHEN (t1.c1 IS NULL) THEN 1 ELSE 0 END)) > '0'::bigint) THEN NULL::boolean WHEN (t2.c1 IS NULL) THEN NULL::boolean WHEN (sum((CASE WHEN (t2.c1 = t1.c1) THEN 1 ELSE 0 END)) = '0'::bigint) THEN true ELSE false END) = true)
           ->  Aggregate
                 Output: CASE WHEN (sum((CASE WHEN (t2.c1 = t1.c1) THEN 1 ELSE 0 END)) IS NULL) THEN true WHEN (sum((CASE WHEN (t1.c1 IS NULL) THEN 1 ELSE 0 END)) > '0'::bigint) THEN NULL::boolean WHEN (t2.c1 IS NULL) THEN NULL::boolean WHEN (sum((CASE WHEN (t2.c1 = t1.c1) THEN 1 ELSE 0 END)) = '0'::bigint) THEN true ELSE false END
                 ->  Result
                       Output: CASE WHEN (t2.c1 = t1.c1) THEN 1 ELSE 0 END, CASE WHEN (t1.c1 IS NULL) THEN 1 ELSE 0 END
                       ->  Materialize
                             Output: t1.c1
                             ->  PX Coordinator 6:1  (slice2; segments: 6)
                                   Output: t1.c1
                                   ->  Partial Seq Scan on public.t1
                                         Output: t1.c1
 Optimizer: PolarDB PX Optimizer
(23 rows)

SELECT    c1, c2
FROM t2 AS OUTR
WHERE OUTR.c1  IN
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
  1 | 
  2 | 
  3 | 
  4 | 
(4 rows)

                           QUERY PLAN                            
-----------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: t2.c1, t2.c2
   ->  Hash Semi Join
         Output: t2.c1, t2.c2
         Hash Cond: (t2.c1 = t1.c1)
         ->  PX Hash 6:6  (slice2; segments: 6)
               Output: t2.c1, t2.c2
               Hash Key: t2.c1
               ->  Partial Seq Scan on public.t2
                     Output: t2.c1, t2.c2
                     Filter: ((t2.c1 <= 39) AND (t2.c2 IS NULL))
         ->  Hash
               Output: t1.c1
               ->  PX Hash 6:6  (slice3; segments: 6)
                     Output: t1.c1
                     Hash Key: t1.c1
                     ->  Partial Seq Scan on public.t1
                           Output: t1.c1
 Optimizer: PolarDB PX Optimizer
(19 rows)

SELECT    c1, c2
FROM t2 AS OUTR
WHERE OUTR.c1 NOT IN
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR
    WHERE OUTR.c2 <= 'wor' ) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
  1 | 
  2 | 
  3 | 
  4 | 
(4 rows)

                                                                                                                                                                       QUERY PLAN                                                                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: t2.c1, t2.c2
   ->  Partial Seq Scan on public.t2
         Output: t2.c1, t2.c2
         Filter: (((t2.c1 <= 39) AND (t2.c2 IS NULL)) AND (SubPlan 1))
         SubPlan 1
           ->  Result
                 Output: true
                 Filter: ((CASE WHEN (sum((CASE WHEN (t2.c1 = t1.c1) THEN 1 ELSE 0 END)) IS NULL) THEN true WHEN (sum((CASE WHEN (t1.c1 IS NULL) THEN 1 ELSE 0 END)) > '0'::bigint) THEN NULL::boolean WHEN (t2.c1 IS NULL) THEN NULL::boolean WHEN (sum((CASE WHEN (t2.c1 = t1.c1) THEN 1 ELSE 0 END)) = '0'::bigint) THEN true ELSE false END) = true)
                 ->  Aggregate
                       Output: CASE WHEN (sum((CASE WHEN (t2.c1 = t1.c1) THEN 1 ELSE 0 END)) IS NULL) THEN true WHEN (sum((CASE WHEN (t1.c1 IS NULL) THEN 1 ELSE 0 END)) > '0'::bigint) THEN NULL::boolean WHEN (t2.c1 IS NULL) THEN NULL::boolean WHEN (sum((CASE WHEN (t2.c1 = t1.c1) THEN 1 ELSE 0 END)) = '0'::bigint) THEN true ELSE false END
                       ->  Result
                             Output: CASE WHEN (t2.c1 = t1.c1) THEN 1 ELSE 0 END, CASE WHEN (t1.c1 IS NULL) THEN 1 ELSE 0 END
                             One-Time Filter: ((t2.c2)::text <= 'wor'::text)
                             ->  Materialize
                                   Output: t1.c1
                                   ->  PX Broadcast 6:6  (slice2; segments: 6)
                                         Output: t1.c1
                                         ->  Partial Seq Scan on public.t1
                                               Output: t1.c1
 Optimizer: PolarDB PX Optimizer
(21 rows)

SELECT    c1, c2
FROM t2 AS OUTR
WHERE OUTR.c1  IN
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR 
    WHERE OUTR.c2 <= 'wor' ) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
(0 rows)

                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: t2.c1, t2.c2
   ->  Hash Join
         Output: t2.c1, t2.c2
         Hash Cond: (t1.c1 = t2.c1)
         ->  GroupAggregate
               Output: t1.c1
               Group Key: t1.c1
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: t1.c1
                           Hash Key: t1.c1
                           ->  Partial Seq Scan on public.t1
                                 Output: t1.c1
         ->  Hash
               Output: t2.c1, t2.c2
               ->  PX Broadcast 6:6  (slice3; segments: 6)
                     Output: t2.c1, t2.c2
                     ->  Result
                           Output: t2.c1, t2.c2
                           Filter: ((t2.c2)::text <= 'wor'::text)
                           ->  Partial Seq Scan on public.t2
                                 Output: t2.c1, t2.c2
                                 Filter: ((t2.c1 <= 39) AND (t2.c2 IS NULL))
 Optimizer: PolarDB PX Optimizer
(27 rows)

set polar_px_optimizer_enable_lasj_notin=1;
SELECT    c1, c2
FROM t2 AS OUTR
WHERE OUTR.c1 NOT IN
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
(0 rows)

                        QUERY PLAN                         
-----------------------------------------------------------
 Hash Left Anti Semi (Not-In) Join
   Output: t2.c1, t2.c2
   Hash Cond: (t2.c1 = t1.c1)
   ->  PX Coordinator 6:1  (slice1; segments: 6)
         Output: t2.c1, t2.c2
         ->  Partial Seq Scan on public.t2
               Output: t2.c1, t2.c2
               Filter: ((t2.c1 <= 39) AND (t2.c2 IS NULL))
   ->  Hash
         Output: t1.c1
         ->  PX Coordinator 6:1  (slice2; segments: 6)
               Output: t1.c1
               ->  Partial Seq Scan on public.t1
                     Output: t1.c1
 Optimizer: PolarDB PX Optimizer
(15 rows)

SELECT    c1, c2
FROM t2 AS OUTR
WHERE OUTR.c1  IN
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
  1 | 
  2 | 
  3 | 
  4 | 
(4 rows)

                           QUERY PLAN                            
-----------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: t2.c1, t2.c2
   ->  Hash Semi Join
         Output: t2.c1, t2.c2
         Hash Cond: (t2.c1 = t1.c1)
         ->  PX Hash 6:6  (slice2; segments: 6)
               Output: t2.c1, t2.c2
               Hash Key: t2.c1
               ->  Partial Seq Scan on public.t2
                     Output: t2.c1, t2.c2
                     Filter: ((t2.c1 <= 39) AND (t2.c2 IS NULL))
         ->  Hash
               Output: t1.c1
               ->  PX Hash 6:6  (slice3; segments: 6)
                     Output: t1.c1
                     Hash Key: t1.c1
                     ->  Partial Seq Scan on public.t1
                           Output: t1.c1
 Optimizer: PolarDB PX Optimizer
(19 rows)

SELECT    c1, c2
FROM t2 AS OUTR
WHERE OUTR.c1 NOT IN
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR
    WHERE OUTR.c2 <= 'wor' ) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
  1 | 
  2 | 
  3 | 
  4 | 
(4 rows)

                                                                                                                                                                       QUERY PLAN                                                                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: t2.c1, t2.c2
   ->  Partial Seq Scan on public.t2
         Output: t2.c1, t2.c2
         Filter: (((t2.c1 <= 39) AND (t2.c2 IS NULL)) AND (SubPlan 1))
         SubPlan 1
           ->  Result
                 Output: true
                 Filter: ((CASE WHEN (sum((CASE WHEN (t2.c1 = t1.c1) THEN 1 ELSE 0 END)) IS NULL) THEN true WHEN (sum((CASE WHEN (t1.c1 IS NULL) THEN 1 ELSE 0 END)) > '0'::bigint) THEN NULL::boolean WHEN (t2.c1 IS NULL) THEN NULL::boolean WHEN (sum((CASE WHEN (t2.c1 = t1.c1) THEN 1 ELSE 0 END)) = '0'::bigint) THEN true ELSE false END) = true)
                 ->  Aggregate
                       Output: CASE WHEN (sum((CASE WHEN (t2.c1 = t1.c1) THEN 1 ELSE 0 END)) IS NULL) THEN true WHEN (sum((CASE WHEN (t1.c1 IS NULL) THEN 1 ELSE 0 END)) > '0'::bigint) THEN NULL::boolean WHEN (t2.c1 IS NULL) THEN NULL::boolean WHEN (sum((CASE WHEN (t2.c1 = t1.c1) THEN 1 ELSE 0 END)) = '0'::bigint) THEN true ELSE false END
                       ->  Result
                             Output: CASE WHEN (t2.c1 = t1.c1) THEN 1 ELSE 0 END, CASE WHEN (t1.c1 IS NULL) THEN 1 ELSE 0 END
                             One-Time Filter: ((t2.c2)::text <= 'wor'::text)
                             ->  Materialize
                                   Output: t1.c1
                                   ->  PX Broadcast 6:6  (slice2; segments: 6)
                                         Output: t1.c1
                                         ->  Partial Seq Scan on public.t1
                                               Output: t1.c1
 Optimizer: PolarDB PX Optimizer
(21 rows)

SELECT    c1, c2
FROM t2 AS OUTR
WHERE OUTR.c1  IN
    (SELECT INNR.c1 AS Y
    FROM t1 AS INNR 
    WHERE OUTR.c2 <= 'wor' ) AND OUTR.c1<=39 and OUTR.c2 is null;
 c1 | c2 
----+----
(0 rows)

                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: t2.c1, t2.c2
   ->  Hash Join
         Output: t2.c1, t2.c2
         Hash Cond: (t1.c1 = t2.c1)
         ->  GroupAggregate
               Output: t1.c1
               Group Key: t1.c1
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: t1.c1
                           Hash Key: t1.c1
                           ->  Partial Seq Scan on public.t1
                                 Output: t1.c1
         ->  Hash
               Output: t2.c1, t2.c2
               ->  PX Broadcast 6:6  (slice3; segments: 6)
                     Output: t2.c1, t2.c2
                     ->  Result
                           Output: t2.c1, t2.c2
                           Filter: ((t2.c2)::text <= 'wor'::text)
                           ->  Partial Seq Scan on public.t2
                                 Output: t2.c1, t2.c2
                                 Filter: ((t2.c1 <= 39) AND (t2.c2 IS NULL))
 Optimizer: PolarDB PX Optimizer
(27 rows)

