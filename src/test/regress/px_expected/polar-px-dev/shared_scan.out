--
-- Queries that lead to hanging (not dead lock) when we don't handle synchronization properly in shared scan
--
/*--EXPLAIN_QUERY_BEGIN*/
CREATE SCHEMA shared_scan;
SET search_path = shared_scan;
CREATE TABLE foo (a int, b int);
CREATE TABLE bar (c int, d int);
CREATE TABLE jazz(e int, f int);
INSERT INTO bar  VALUES (1, 1), (2, 2), (3, 3);
INSERT INTO jazz VALUES (2, 2), (3, 3);
ANALYZE foo;
ANALYZE bar;
ANALYZE jazz;
SET statement_timeout = '15s';
select pg_sleep(30);
ERROR:  canceling statement due to statement timeout
SELECT * FROM
        (
        WITH cte AS (SELECT * FROM foo)
        SELECT * FROM (SELECT * FROM cte UNION ALL SELECT * FROM cte)
        AS X
        JOIN bar ON b = c
        ) AS XY
        JOIN jazz on c = e AND b = f;
 a | b | c | d | e | f 
---+---+---+---+---+---
(0 rows)

                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref2.a, share0_ref2.b, bar.c, bar.d, jazz.e, jazz.f
   ->  Hash Join
         Output: share0_ref2.a, share0_ref2.b, bar.c, bar.d, jazz.e, jazz.f
         Hash Cond: (bar.c = jazz.e)
         ->  Sequence
               Output: share0_ref2.a, share0_ref2.b, bar.c, bar.d
               ->  Shared Scan (Producer; slice1; share0)
                     Output: share0_ref1.a, share0_ref1.b
                     ->  Partial Seq Scan on shared_scan.foo
                           Output: foo.a, foo.b
               ->  Hash Join
                     Output: share0_ref2.a, share0_ref2.b, bar.c, bar.d
                     Hash Cond: (bar.c = share0_ref2.b)
                     ->  Partial Seq Scan on shared_scan.bar
                           Output: bar.c, bar.d
                     ->  Hash
                           Output: share0_ref2.a, share0_ref2.b
                           ->  PX Broadcast 6:6  (slice2; segments: 6)
                                 Output: share0_ref2.a, share0_ref2.b
                                 ->  Append
                                       ->  Shared Scan (Consumer; slice2; share0)
                                             Output: share0_ref2.a, share0_ref2.b
                                       ->  Shared Scan (Consumer; slice2; share0)
                                             Output: share0_ref3.a, share0_ref3.b
         ->  Hash
               Output: jazz.e, jazz.f
               ->  PX Broadcast 6:6  (slice3; segments: 6)
                     Output: jazz.e, jazz.f
                     ->  Partial Seq Scan on shared_scan.jazz
                           Output: jazz.e, jazz.f
                           Filter: (jazz.e = jazz.f)
 Optimizer: PolarDB PX Optimizer
(33 rows)

SELECT *,
        (
        WITH cte AS (SELECT * FROM jazz WHERE jazz.e = bar.c)
        SELECT 1 FROM cte c1, cte c2
        )
        FROM bar;
 c | d | ?column? 
---+---+----------
 1 | 1 |         
 2 | 2 |        1
 3 | 3 |        1
(3 rows)

