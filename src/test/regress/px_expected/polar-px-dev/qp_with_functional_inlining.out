-- See qp_with_functional.sql
--
-- Launch the tests with CTE sharing on (with planner), or with CTE inlining
-- on (with ORCA).
--set gp_cte_sharing = on;
set polar_px_optimizer_cte_inlining = on;
set polar_px_optimizer_cte_inlining_bound=1000;
create schema qp_with_functional_inlining;
set search_path='qp_with_functional_inlining';
\i sql/polar-px-dev/qp_with_functional.sql
--
-- WITH-clause tests
--
-- These test queries are run twice in the test suite, with CTE inlining or
-- sharing, and without those options. This file is included by two launcher
-- scripts, qp_with_functional_noinlining.sql, and
-- qp_with_functional_inlining.sql, which set the desired options before
-- including this file.
--
-- The output is duplicated for both tests, since there's no include
-- mechanism for outputs in pg_regress or gpdiff. There are no differences,
-- apart from the different GUCs set by the launcher scripts, between the
-- expected outputs. Please try to keep it that way!
--
-- start_matchsubs
-- # The error message you get when you have a UDF that tries to do SQL access
-- # depends on the plan, and when the error is caught. Mask out that
-- # difference.
-- m/.*ERROR:.*function cannot execute on a QE slice because it accesses relation.*/
-- s/.*ERROR:.*/ERROR: error message might be different for CTE/
--
-- m/.*ERROR:  query plan with multiple segworker groups is not supported.*/
-- s/.*ERROR:.*/ERROR: error message might be different for CTE/
--
-- # This test file is included in the launcher script,
-- # qp_with_function.sql. psql prepends any ERRORs and NOTICEs from included
-- # files with the source filename and number. Scrub them out.
-- m/psql:sql\/qp_with_functional.sql:\d+: /
-- s/psql:sql\/qp_with_functional.sql:\d+: //
--
-- m/qp_with_functional_inlining/
-- s/qp_with_functional_inlining/qp_with_functional/
-- m/qp_with_functional_noinlining/
-- s/qp_with_functional_noinlining/qp_with_functional/
--
-- end_matchsubs
-- start_ignore
/*--EXPLAIN_QUERY_BEGIN*/
CREATE LANGUAGE plpython3u;
psql:sql/polar-px-dev/qp_with_functional.sql:40: ERROR:  language "plpython3u" already exists
-- end_ignore
CREATE TABLE foo AS SELECT i as a, i+1 as b from generate_series(1,10)i;
CREATE TABLE bar AS SELECT i as c, i+1 as d from generate_series(1,10)i;
CREATE TABLE foo_ao(a int, b int) WITH ( appendonly = true);
psql:sql/polar-px-dev/qp_with_functional.sql:46: ERROR:  unrecognized parameter "appendonly"
INSERT INTO foo_ao SELECT i as a, i+1 as b FROM generate_series(1,10)i;
psql:sql/polar-px-dev/qp_with_functional.sql:47: ERROR:  relation "foo_ao" does not exist
LINE 1: INSERT INTO foo_ao SELECT i as a, i+1 as b FROM generate_ser...
                    ^
CREATE TABLE bar_co(c int, d int) WITH ( appendonly = true, orientation = column);
psql:sql/polar-px-dev/qp_with_functional.sql:49: ERROR:  unrecognized parameter "appendonly"
INSERT INTO bar_co SELECT i as c, i+1 as d FROM generate_series(1,10)i;
psql:sql/polar-px-dev/qp_with_functional.sql:50: ERROR:  relation "bar_co" does not exist
LINE 1: INSERT INTO bar_co SELECT i as c, i+1 as d FROM generate_ser...
                    ^
CREATE TABLE foobar (c int, d int);
INSERT INTO foobar select i, i+1 from generate_series(1,10) i;
-- @description test1: Single producer and single consumer
WITH v AS (SELECT a, b FROM foo WHERE b < 5)
SELECT * FROM v WHERE a = 1 ORDER BY 1;
 a | b 
---+---
 1 | 2
(1 row)

                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   Merge Key: a
   ->  Sort
         Output: a, b
         Sort Key: foo.a
         ->  Sort
               Output: a, b
               Sort Key: foo.a
               ->  Result
                     Output: a, b
                     Filter: (foo.a = 1)
                     ->  Partial Seq Scan on qp_with_functional_inlining.foo
                           Output: a, b
                           Filter: (foo.b < 5)
 Optimizer: PolarDB PX Optimizer
(16 rows)

-- @description test2: Single producer and multiple consumers
WITH v AS (SELECT a, b FROM foo WHERE b < 5)
SELECT v1.a, v2.b
FROM v AS v1, v AS v2
WHERE v1.a < v2.a ORDER BY 1,2;
 a | b 
---+---
 1 | 3
 1 | 4
 2 | 4
(3 rows)

                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, foo_1.b
   Merge Key: foo.a, foo_1.b
   ->  Sort
         Output: foo.a, foo_1.b
         Sort Key: foo.a, foo_1.b
         ->  Sort
               Output: foo.a, foo_1.b
               Sort Key: foo.a, foo_1.b
               ->  Nested Loop
                     Output: foo.a, foo_1.b
                     Join Filter: (foo.a < foo_1.a)
                     ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                           Output: foo_1.a, foo_1.b
                           Filter: (foo_1.b < 5)
                     ->  Materialize
                           Output: foo.a
                           ->  PX Broadcast 6:6  (slice2; segments: 6)
                                 Output: foo.a
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                       Output: foo.a
                                       Filter: (foo.b < 5)
 Optimizer: PolarDB PX Optimizer
(23 rows)

-- @description test3: Single producer and multiple consumers, with a predicate that can be pushed down one of the consumers
WITH v AS (SELECT a, b FROM foo WHERE b < 5)
SELECT v1.a, v2.b
FROM v AS v1, v AS v2
WHERE v1.a < v2.a
AND v1.a < 10 ORDER BY 1,2;
 a | b 
---+---
 1 | 3
 1 | 4
 2 | 4
(3 rows)

                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, foo_1.b
   Merge Key: foo.a, foo_1.b
   ->  Sort
         Output: foo.a, foo_1.b
         Sort Key: foo.a, foo_1.b
         ->  Sort
               Output: foo.a, foo_1.b
               Sort Key: foo.a, foo_1.b
               ->  Nested Loop
                     Output: foo.a, foo_1.b
                     Join Filter: (foo.a < foo_1.a)
                     ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                           Output: foo_1.a, foo_1.b
                           Filter: (foo_1.b < 5)
                     ->  Materialize
                           Output: foo.a
                           ->  PX Broadcast 6:6  (slice2; segments: 6)
                                 Output: foo.a
                                 ->  Result
                                       Output: foo.a
                                       Filter: (foo.a < 10)
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                             Output: foo.a
                                             Filter: (foo.b < 5)
 Optimizer: PolarDB PX Optimizer
(26 rows)

-- @description test4: Multiple CTEs defined at the same level with no dependencies
WITH v AS (SELECT a, b FROM foo WHERE b < 5),
     w AS (SELECT c, d FROM bar WHERE c > 8)
SELECT v1.a, w1.c, w2.d
FROM v AS v1, v as v2, w AS w1, w AS w2
WHERE v1.a = v2.b
AND v1.a < w1.c
AND v1.b < w2.d ORDER BY 1,2,3;
 a | c  | d  
---+----+----
 2 |  9 | 10
 2 |  9 | 11
 2 | 10 | 10
 2 | 10 | 11
 3 |  9 | 10
 3 |  9 | 11
 3 | 10 | 10
 3 | 10 | 11
(8 rows)

                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Sort
   Output: foo_1.a, bar.c, bar_1.d
   Sort Key: foo_1.a, bar.c, bar_1.d
   ->  PX Coordinator 6:1  (slice1; segments: 6)
         Output: foo_1.a, bar.c, bar_1.d
         ->  Sort
               Output: foo_1.a, bar.c, bar_1.d
               Sort Key: foo_1.a, bar.c, bar_1.d
               ->  Hash Join
                     Output: foo_1.a, bar.c, bar_1.d
                     Hash Cond: (foo.b = foo_1.a)
                     Join Filter: (foo_1.a < bar.c)
                     ->  Nested Loop
                           Output: foo.b, bar.c
                           Join Filter: true
                           ->  PX Broadcast 6:6  (slice2; segments: 6)
                                 Output: bar.c
                                 ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                       Output: bar.c
                                       Filter: (bar.c > 8)
                           ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                 Output: foo.b
                                 Filter: ((foo.b < 5) AND (foo.b < 5))
                     ->  Hash
                           Output: foo_1.a, bar_1.d
                           ->  PX Broadcast 6:6  (slice3; segments: 6)
                                 Output: foo_1.a, bar_1.d
                                 ->  Nested Loop
                                       Output: foo_1.a, bar_1.d
                                       Join Filter: (foo_1.b < bar_1.d)
                                       ->  Result
                                             Output: foo_1.a, foo_1.b
                                             Filter: (foo_1.a < 5)
                                             ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                                   Output: foo_1.a, foo_1.b
                                                   Filter: (foo_1.b < 5)
                                       ->  Materialize
                                             Output: bar_1.d
                                             ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                   Output: bar_1.d
                                                   ->  Partial Seq Scan on qp_with_functional_inlining.bar bar_1
                                                         Output: bar_1.d
                                                         Filter: (bar_1.c > 8)
 Optimizer: PolarDB PX Optimizer
(44 rows)

-- @description test5: Multiple CTEs defined at the same level with dependencies
WITH v AS (SELECT a, b FROM foo WHERE b < 5),
     w AS (SELECT * FROM v WHERE a > 2)
SELECT v1.a, w1.b b1, w2.b b2
FROM v AS v1, v as v2, w AS w1, w AS w2
WHERE v1.a = v2.b
AND v1.a < w1.a
AND v1.b < w2.b ORDER BY 1;
 a | b1 | b2 
---+----+----
 2 |  4 |  4
(1 row)

                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Sort
   Output: foo_2.a, foo_3.b, foo_1.b
   Sort Key: foo_2.a
   ->  PX Coordinator 6:1  (slice1; segments: 6)
         Output: foo_2.a, foo_3.b, foo_1.b
         ->  Sort
               Output: foo_2.a, foo_3.b, foo_1.b
               Sort Key: foo_2.a
               ->  Hash Join
                     Output: foo_2.a, foo_3.b, foo_1.b
                     Hash Cond: (foo.b = foo_2.a)
                     Join Filter: (foo_2.b < foo_1.b)
                     ->  Nested Loop
                           Output: foo.b, foo_1.b
                           Join Filter: true
                           ->  PX Broadcast 6:6  (slice2; segments: 6)
                                 Output: foo_1.b
                                 ->  Result
                                       Output: foo_1.b
                                       Filter: (foo_1.a > 2)
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                             Output: foo_1.a, foo_1.b
                                             Filter: (foo_1.b < 5)
                           ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                 Output: foo.b
                                 Filter: ((foo.b < 5) AND (foo.b < 5))
                     ->  Hash
                           Output: foo_2.a, foo_2.b, foo_3.b
                           ->  PX Broadcast 6:6  (slice3; segments: 6)
                                 Output: foo_2.a, foo_2.b, foo_3.b
                                 ->  Nested Loop
                                       Output: foo_2.a, foo_2.b, foo_3.b
                                       Join Filter: (foo_2.a < foo_3.a)
                                       ->  Result
                                             Output: foo_3.a, foo_3.b
                                             Filter: (foo_3.a > 2)
                                             ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_3
                                                   Output: foo_3.a, foo_3.b
                                                   Filter: (foo_3.b < 5)
                                       ->  Materialize
                                             Output: foo_2.a, foo_2.b
                                             ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                   Output: foo_2.a, foo_2.b
                                                   ->  Result
                                                         Output: foo_2.a, foo_2.b
                                                         Filter: (foo_2.a < 5)
                                                         ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_2
                                                               Output: foo_2.a, foo_2.b
                                                               Filter: (foo_2.b < 5)
 Optimizer: PolarDB PX Optimizer
(50 rows)

-- @description test6: CTE defined inside a subexpression (in the FROM clause)
WITH w AS (SELECT a, b from foo where b < 5)
SELECT *
FROM foo,
     (WITH v AS (SELECT c, d FROM bar, w WHERE c = w.a AND c < 2)
      SELECT v1.c, v1.d FROM v v1, v v2 WHERE v1.c = v2.c AND v1.d > 1
     ) x
WHERE foo.a = x.c ORDER BY 1;
 a | b | c | d 
---+---+---+---
 1 | 2 | 1 | 2
(1 row)

                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo_1.a, foo_1.b, share1_ref3.c, share1_ref3.d
   Merge Key: foo_1.a
   ->  Sort
         Output: foo_1.a, foo_1.b, share1_ref3.c, share1_ref3.d
         Sort Key: foo_1.a
         ->  Sort
               Output: foo_1.a, foo_1.b, share1_ref3.c, share1_ref3.d
               Sort Key: foo_1.a
               ->  Hash Join
                     Output: foo_1.a, foo_1.b, share1_ref3.c, share1_ref3.d
                     Hash Cond: ((share1_ref3.c = foo_1.a) AND (share1_ref2.c = foo_1.a))
                     ->  Sequence
                           Output: share1_ref3.c, share1_ref3.d, share1_ref2.c
                           ->  Shared Scan (Producer; slice1; share1)
                                 Output: share1_ref1.c, share1_ref1.d
                                 ->  Hash Join
                                       Output: bar.c, bar.d
                                       Hash Cond: (bar.c = foo.a)
                                       ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                             Output: bar.c, bar.d
                                             Filter: (bar.c < 2)
                                       ->  Hash
                                             Output: foo.a
                                             ->  PX Broadcast 6:6  (slice2; segments: 6)
                                                   Output: foo.a
                                                   ->  Result
                                                         Output: foo.a
                                                         Filter: (foo.a < 2)
                                                         ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                                               Output: foo.a
                                                               Filter: (foo.b < 5)
                           ->  Hash Join
                                 Output: share1_ref3.c, share1_ref3.d, share1_ref2.c
                                 Hash Cond: (share1_ref3.c = share1_ref2.c)
                                 ->  Result
                                       Output: share1_ref3.c, share1_ref3.d
                                       Filter: ((share1_ref3.d > 1) AND (share1_ref3.c < 2))
                                       ->  Shared Scan (Producer; slice1; share1)
                                             Output: share1_ref3.c, share1_ref3.d
                                 ->  Hash
                                       Output: share1_ref2.c
                                       ->  PX Broadcast 6:6  (slice3; segments: 6)
                                             Output: share1_ref2.c
                                             ->  Result
                                                   Output: share1_ref2.c
                                                   Filter: (share1_ref2.c < 2)
                                                   ->  Shared Scan (Consumer; slice3; share1)
                                                         Output: share1_ref2.c, share1_ref2.d
                     ->  Hash
                           Output: foo_1.a, foo_1.b
                           ->  PX Broadcast 6:6  (slice4; segments: 6)
                                 Output: foo_1.a, foo_1.b
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                       Output: foo_1.a, foo_1.b
                                       Filter: (foo_1.a < 2)
 Optimizer: PolarDB PX Optimizer
(57 rows)

-- @description test7a: CTE defined inside a subquery (in the WHERE clause)
SELECT *
FROM foo 
WHERE a = (WITH v as (SELECT * FROM bar WHERE c < 2)
		    SELECT max(v1.c) FROM v v1, v v2 WHERE v1.c = v2.c) ORDER BY 1;
 a | b 
---+---
 1 | 2
(1 row)

                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, foo.b
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, foo.b
         Sort Key: foo.a
         ->  Hash Join
               Output: foo.a, foo.b
               Hash Cond: ((max(bar.c)) = foo.a)
               ->  PX Hash 1:6  (slice2)
                     Output: (max(bar.c))
                     Hash Key: (max(bar.c))
                     ->  Finalize Aggregate
                           Output: max(bar.c)
                           ->  PX Coordinator 6:1  (slice3; segments: 6)
                                 Output: (PARTIAL max(bar.c))
                                 ->  Partial Aggregate
                                       Output: PARTIAL max(bar.c)
                                       ->  Hash Join
                                             Output: bar.c
                                             Hash Cond: (bar.c = bar_1.c)
                                             ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                                   Output: bar.c
                                                   Filter: ((bar.c < 2) AND (bar.c < 2))
                                             ->  Hash
                                                   Output: bar_1.c
                                                   ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                         Output: bar_1.c
                                                         ->  Partial Seq Scan on qp_with_functional_inlining.bar bar_1
                                                               Output: bar_1.c
                                                               Filter: ((bar_1.c < 2) AND (bar_1.c < 2))
               ->  Hash
                     Output: foo.a, foo.b
                     ->  PX Hash 6:6  (slice5; segments: 6)
                           Output: foo.a, foo.b
                           Hash Key: foo.a
                           ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                 Output: foo.a, foo.b
 Optimizer: PolarDB PX Optimizer
(39 rows)

-- @description test7b: CTE defined inside a subquery (in the WHERE clause)
SELECT *
FROM foo
WHERE a IN (WITH v as (SELECT * FROM bar WHERE c < 2) 
            SELECT v1.c FROM v v1, v v2 WHERE v1.c = v2.c) ORDER BY 1;
 a | b 
---+---
 1 | 2
(1 row)

                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, foo.b
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, foo.b
         Sort Key: foo.a
         ->  Hash Join
               Output: foo.a, foo.b
               Hash Cond: (foo.a = bar.c)
               ->  PX Hash 6:6  (slice2; segments: 6)
                     Output: foo.a, foo.b
                     Hash Key: foo.a
                     ->  Partial Seq Scan on qp_with_functional_inlining.foo
                           Output: foo.a, foo.b
               ->  Hash
                     Output: bar.c
                     ->  GroupAggregate
                           Output: bar.c
                           Group Key: bar.c
                           ->  Sort
                                 Output: bar.c
                                 Sort Key: bar.c
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: bar.c
                                       Hash Key: bar.c
                                       ->  Hash Join
                                             Output: bar.c
                                             Hash Cond: (bar.c = bar_1.c)
                                             ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                                   Output: bar.c
                                                   Filter: ((bar.c < 2) AND (bar.c < 2))
                                             ->  Hash
                                                   Output: bar_1.c
                                                   ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                         Output: bar_1.c
                                                         ->  Partial Seq Scan on qp_with_functional_inlining.bar bar_1
                                                               Output: bar_1.c
                                                               Filter: ((bar_1.c < 2) AND (bar_1.c < 2))
 Optimizer: PolarDB PX Optimizer
(39 rows)

-- @description test7c: CTE defined inside a subquery (in the WHERE clause)
SELECT *
FROM foo
WHERE a IN (WITH v as (SELECT * FROM bar WHERE c < 2)
            SELECT v1.c FROM v v1, v v2 WHERE v1.c = v2.c) ORDER BY 1;
 a | b 
---+---
 1 | 2
(1 row)

                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, foo.b
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, foo.b
         Sort Key: foo.a
         ->  Hash Join
               Output: foo.a, foo.b
               Hash Cond: (foo.a = bar.c)
               ->  PX Hash 6:6  (slice2; segments: 6)
                     Output: foo.a, foo.b
                     Hash Key: foo.a
                     ->  Partial Seq Scan on qp_with_functional_inlining.foo
                           Output: foo.a, foo.b
               ->  Hash
                     Output: bar.c
                     ->  GroupAggregate
                           Output: bar.c
                           Group Key: bar.c
                           ->  Sort
                                 Output: bar.c
                                 Sort Key: bar.c
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: bar.c
                                       Hash Key: bar.c
                                       ->  Hash Join
                                             Output: bar.c
                                             Hash Cond: (bar.c = bar_1.c)
                                             ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                                   Output: bar.c
                                                   Filter: ((bar.c < 2) AND (bar.c < 2))
                                             ->  Hash
                                                   Output: bar_1.c
                                                   ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                         Output: bar_1.c
                                                         ->  Partial Seq Scan on qp_with_functional_inlining.bar bar_1
                                                               Output: bar_1.c
                                                               Filter: ((bar_1.c < 2) AND (bar_1.c < 2))
 Optimizer: PolarDB PX Optimizer
(39 rows)

-- @description test8b: CTE defined in the HAVING clause
WITH w AS (SELECT a, b FROM foo where b < 5)
SELECT a, sum(b) FROM foo
WHERE b > 1
GROUP BY a
HAVING sum(b) < ( WITH z AS (SELECT c FROM bar, w WHERE c = w.a AND c < 2) SELECT c+2 FROM z) ORDER BY 1;
 a | sum 
---+-----
 1 |   2
(1 row)

                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, (sum(foo.b))
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, (sum(foo.b))
         Sort Key: foo.a
         ->  Result
               Output: foo.a, (sum(foo.b))
               Filter: ((sum(foo.b)) < (SubPlan 1))
               ->  GroupAggregate
                     Output: foo.a, sum(foo.b), sum(foo.b)
                     Group Key: foo.a
                     ->  Sort
                           Output: foo.a, foo.b
                           Sort Key: foo.a
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: foo.a, foo.b
                                 Hash Key: foo.a
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                       Output: foo.a, foo.b
                                       Filter: (foo.b > 1)
               SubPlan 1
                 ->  Materialize
                       Output: ((bar.c + 2))
                       ->  PX Broadcast 6:6  (slice3; segments: 6)
                             Output: ((bar.c + 2))
                             ->  Hash Join
                                   Output: (bar.c + 2)
                                   Hash Cond: (bar.c = foo_1.a)
                                   ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                         Output: bar.c
                                         Filter: (bar.c < 2)
                                   ->  Hash
                                         Output: foo_1.a
                                         ->  PX Broadcast 6:6  (slice4; segments: 6)
                                               Output: foo_1.a
                                               ->  Result
                                                     Output: foo_1.a
                                                     Filter: (foo_1.a < 2)
                                                     ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                                           Output: foo_1.a
                                                           Filter: (foo_1.b < 5)
 Optimizer: PolarDB PX Optimizer
(43 rows)

-- @description test8b: CTE defined in the HAVING clause
WITH w AS (SELECT a, b FROM foo where b < 5)
SELECT a, sum(b) FROM foo
WHERE b > 1
GROUP BY a
HAVING sum(b) < ( WITH z AS (SELECT c FROM bar, w WHERE c = w.a AND c < 2) SELECT c+2 FROM z) ORDER BY 1;
 a | sum 
---+-----
 1 |   2
(1 row)

                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, (sum(foo.b))
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, (sum(foo.b))
         Sort Key: foo.a
         ->  Result
               Output: foo.a, (sum(foo.b))
               Filter: ((sum(foo.b)) < (SubPlan 1))
               ->  GroupAggregate
                     Output: foo.a, sum(foo.b), sum(foo.b)
                     Group Key: foo.a
                     ->  Sort
                           Output: foo.a, foo.b
                           Sort Key: foo.a
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: foo.a, foo.b
                                 Hash Key: foo.a
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                       Output: foo.a, foo.b
                                       Filter: (foo.b > 1)
               SubPlan 1
                 ->  Materialize
                       Output: ((bar.c + 2))
                       ->  PX Broadcast 6:6  (slice3; segments: 6)
                             Output: ((bar.c + 2))
                             ->  Hash Join
                                   Output: (bar.c + 2)
                                   Hash Cond: (bar.c = foo_1.a)
                                   ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                         Output: bar.c
                                         Filter: (bar.c < 2)
                                   ->  Hash
                                         Output: foo_1.a
                                         ->  PX Broadcast 6:6  (slice4; segments: 6)
                                               Output: foo_1.a
                                               ->  Result
                                                     Output: foo_1.a
                                                     Filter: (foo_1.a < 2)
                                                     ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                                           Output: foo_1.a
                                                           Filter: (foo_1.b < 5)
 Optimizer: PolarDB PX Optimizer
(43 rows)

-- @description test9: CTE defined inside another CTE
WITH v AS (WITH w AS (SELECT a, b FROM foo WHERE b < 5) 
SELECT w1.a, w2.b from w w1, w w2 WHERE w1.a = w2.a AND w1.a > 2)
SELECT v1.a, v2.a, v2.b
FROM v as v1, v as v2
WHERE v1.a = v2.a ORDER BY 1;
 a | a | b 
---+---+---
 3 | 3 | 4
(1 row)

                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref2.a, share0_ref3.a, share0_ref3.b
   Merge Key: share0_ref2.a
   ->  Sequence
         Output: share0_ref2.a, share0_ref3.a, share0_ref3.b
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.a, share0_ref1.b
               ->  Hash Join
                     Output: foo_1.a, foo.b
                     Hash Cond: (foo.a = foo_1.a)
                     ->  Result
                           Output: foo.a, foo.b
                           Filter: (foo.a > 2)
                           ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                 Output: foo.a, foo.b
                                 Filter: (foo.b < 5)
                     ->  Hash
                           Output: foo_1.a
                           ->  PX Broadcast 6:6  (slice2; segments: 6)
                                 Output: foo_1.a
                                 ->  Result
                                       Output: foo_1.a
                                       Filter: (foo_1.a > 2)
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                             Output: foo_1.a
                                             Filter: (foo_1.b < 5)
         ->  Sort
               Output: share0_ref2.a, share0_ref3.a, share0_ref3.b
               Sort Key: share0_ref2.a
               ->  Hash Join
                     Output: share0_ref2.a, share0_ref3.a, share0_ref3.b
                     Hash Cond: (share0_ref3.a = share0_ref2.a)
                     ->  Result
                           Output: share0_ref3.a, share0_ref3.b
                           Filter: (share0_ref3.a > 2)
                           ->  Shared Scan (Producer; slice1; share0)
                                 Output: share0_ref3.a, share0_ref3.b
                     ->  Hash
                           Output: share0_ref2.a
                           ->  PX Broadcast 6:6  (slice3; segments: 6)
                                 Output: share0_ref2.a
                                 ->  Result
                                       Output: share0_ref2.a
                                       Filter: (share0_ref2.a > 2)
                                       ->  Shared Scan (Consumer; slice3; share0)
                                             Output: share0_ref2.a, share0_ref2.b
 Optimizer: PolarDB PX Optimizer
(47 rows)

-- @description test10: Multi-level nesting
WITH v as (WITH x as (
                       SELECT * FROM foo WHERE b < 5
                     ) 
           SELECT x1.a ,x1.b FROM x x1, x x2 
           WHERE x1.a = x2.a AND x1.a = (WITH y as (
						     SELECT * FROM x
                                                   ) 
					SELECT max(y1.b) FROM y y1, y y2 WHERE y1.a < y2.a)) 
SELECT * FROM v v1, v v2 WHERE v1.a < v2.b ORDER BY 1;
 a | b | a | b 
---+---+---+---
 3 | 4 | 3 | 4
(1 row)

                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref3.a, share0_ref3.b, share0_ref2.a, share0_ref2.b
   Merge Key: share0_ref3.a
   ->  Sequence
         Output: share0_ref3.a, share0_ref3.b, share0_ref2.a, share0_ref2.b
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.a, share0_ref1.b
               ->  Hash Join
                     Output: foo_2.a, foo_2.b
                     Hash Cond: (foo_2.a = foo_3.a)
                     ->  Result
                           Output: foo_2.a, foo_2.b
                           Filter: (foo_2.a = (max(foo_1.b)))
                           ->  Nested Loop Left Join
                                 Output: (max(foo_1.b)), foo_2.a, foo_2.b
                                 Join Filter: true
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_2
                                       Output: foo_2.a, foo_2.b
                                       Filter: (foo_2.b < 5)
                                 ->  Materialize
                                       Output: (max(foo_1.b))
                                       ->  PX Broadcast 1:6  (slice2)
                                             Output: (max(foo_1.b))
                                             ->  Finalize Aggregate
                                                   Output: max(foo_1.b)
                                                   ->  PX Coordinator 6:1  (slice3; segments: 6)
                                                         Output: (PARTIAL max(foo_1.b))
                                                         ->  Partial Aggregate
                                                               Output: PARTIAL max(foo_1.b)
                                                               ->  Nested Loop
                                                                     Output: foo_1.b
                                                                     Join Filter: (foo_1.a < foo.a)
                                                                     ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                                                           Output: foo_1.a, foo_1.b
                                                                           Filter: (foo_1.b < 5)
                                                                     ->  Materialize
                                                                           Output: foo.a
                                                                           ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                                                 Output: foo.a
                                                                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                                                                       Output: foo.a
                                                                                       Filter: (foo.b < 5)
                     ->  Hash
                           Output: foo_3.a
                           ->  PX Broadcast 6:6  (slice5; segments: 6)
                                 Output: foo_3.a
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_3
                                       Output: foo_3.a
                                       Filter: (foo_3.b < 5)
         ->  Nested Loop
               Output: share0_ref3.a, share0_ref3.b, share0_ref2.a, share0_ref2.b
               Join Filter: (share0_ref3.a < share0_ref2.b)
               ->  Sort
                     Output: share0_ref3.a, share0_ref3.b
                     Sort Key: share0_ref3.a
                     ->  Shared Scan (Producer; slice1; share0)
                           Output: share0_ref3.a, share0_ref3.b
               ->  Materialize
                     Output: share0_ref2.a, share0_ref2.b
                     ->  PX Broadcast 6:6  (slice6; segments: 6)
                           Output: share0_ref2.a, share0_ref2.b
                           ->  Shared Scan (Consumer; slice6; share0)
                                 Output: share0_ref2.a, share0_ref2.b
 Optimizer: PolarDB PX Optimizer
(64 rows)

-- @description test11: CTE that is defined but never used
WITH v AS (SELECT a, b FROM foo WHERE b < 5)
SELECT * FROM bar WHERE c = 8 ORDER BY 1;
 c | d 
---+---
 8 | 9
(1 row)

                           QUERY PLAN                            
-----------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: c, d
   Merge Key: c
   ->  Sort
         Output: c, d
         Sort Key: bar.c
         ->  Partial Seq Scan on qp_with_functional_inlining.bar
               Output: c, d
               Filter: (bar.c = 8)
 Optimizer: PolarDB PX Optimizer
(10 rows)

-- @description test12: Full outer join query (generates a plan with CTEs)
SELECT * FROM foo FULL OUTER JOIN bar ON (foo.a = bar.c) ORDER BY 1;
 a  | b  | c  | d  
----+----+----+----
  1 |  2 |  1 |  2
  2 |  3 |  2 |  3
  3 |  4 |  3 |  4
  4 |  5 |  4 |  5
  5 |  6 |  5 |  6
  6 |  7 |  6 |  7
  7 |  8 |  7 |  8
  8 |  9 |  8 |  9
  9 | 10 |  9 | 10
 10 | 11 | 10 | 11
(10 rows)

                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, foo.b, bar.c, bar.d
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, foo.b, bar.c, bar.d
         Sort Key: foo.a
         ->  Merge Full Join
               Output: foo.a, foo.b, bar.c, bar.d
               Merge Cond: (foo.a = bar.c)
               ->  Sort
                     Output: foo.a, foo.b
                     Sort Key: foo.a
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: foo.a, foo.b
                           Hash Key: foo.a
                           ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                 Output: foo.a, foo.b
               ->  Sort
                     Output: bar.c, bar.d
                     Sort Key: bar.c
                     ->  PX Hash 6:6  (slice3; segments: 6)
                           Output: bar.c, bar.d
                           Hash Key: bar.c
                           ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                 Output: bar.c, bar.d
 Optimizer: PolarDB PX Optimizer
(26 rows)

-- @description test13: Query with grouping sets (generates a plan with CTEs)
SELECT a, count(*)
FROM foo GROUP BY GROUPING SETS ((),(a), (a,b)) ORDER BY 1;
 a  | count 
----+-------
  1 |     1
  1 |     1
  2 |     1
  2 |     1
  3 |     1
  3 |     1
  4 |     1
  4 |     1
  5 |     1
  5 |     1
  6 |     1
  6 |     1
  7 |     1
  7 |     1
  8 |     1
  8 |     1
  9 |     1
  9 |     1
 10 |     1
 10 |     1
    |    10
(21 rows)

-- @description test14: CTE with limit
WITH v AS (SELECT * FROM foo WHERE a < 10)
SELECT * FROM v v1, v v2 ORDER BY 1,2,3,4 LIMIT 1;
 a | b | a | b 
---+---+---+---
 1 | 2 | 1 | 2
(1 row)

                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort
   Output: foo_1.a, foo_1.b, foo.a, foo.b
   Sort Key: foo_1.a, foo_1.b, foo.a, foo.b
   ->  Limit
         Output: foo_1.a, foo_1.b, foo.a, foo.b
         ->  Sort
               Output: foo_1.a, foo_1.b, foo.a, foo.b
               Sort Key: foo_1.a, foo_1.b, foo.a, foo.b
               ->  PX Coordinator 6:1  (slice1; segments: 6)
                     Output: foo_1.a, foo_1.b, foo.a, foo.b
                     ->  Limit
                           Output: foo_1.a, foo_1.b, foo.a, foo.b
                           ->  Sort
                                 Output: foo_1.a, foo_1.b, foo.a, foo.b
                                 Sort Key: foo_1.a, foo_1.b, foo.a, foo.b
                                 ->  Nested Loop
                                       Output: foo_1.a, foo_1.b, foo.a, foo.b
                                       Join Filter: true
                                       ->  PX Broadcast 6:6  (slice2; segments: 6)
                                             Output: foo_1.a, foo_1.b
                                             ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                                   Output: foo_1.a, foo_1.b
                                                   Filter: (foo_1.a < 10)
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                             Output: foo.a, foo.b
                                             Filter: (foo.a < 10)
 Optimizer: PolarDB PX Optimizer
(27 rows)

-- @description test15a: CTE with a user-defined function [IMMUTABLE NO SQL]
CREATE OR REPLACE FUNCTION cte_func1(a int) RETURNS int 
LANGUAGE plpgsql
IMMUTABLE NO SQL
AS $$
BEGIN
RETURN a + 10;
END
$$;
psql:sql/polar-px-dev/qp_with_functional.sql:172: ERROR:  syntax error at or near "NO"
LINE 3: IMMUTABLE NO SQL
                  ^
WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5)
SELECT v1.a, v2.b
FROM v AS v1, v AS v2
WHERE v1.a < v2.a ORDER BY 1,2;
psql:sql/polar-px-dev/qp_with_functional.sql:177: ERROR:  function cte_func1(integer) does not exist
LINE 1: WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- @description test15b: CTE with a user-defined function [IMMUTABLE CONTAINS SQL]
CREATE OR REPLACE FUNCTION cte_func1(a int) RETURNS int 
LANGUAGE plpgsql
IMMUTABLE CONTAINS SQL 
AS $$
DECLARE
    r int;
BEGIN
    SELECT $1 + 1 INTO r;
    RETURN r;
END
$$;
psql:sql/polar-px-dev/qp_with_functional.sql:190: ERROR:  syntax error at or near "CONTAINS"
LINE 3: IMMUTABLE CONTAINS SQL 
                  ^
WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5)
SELECT v1.a, v2.b
FROM v AS v1, v AS v2
WHERE v1.a < v2.a ORDER BY 1,2;
psql:sql/polar-px-dev/qp_with_functional.sql:194: ERROR:  function cte_func1(integer) does not exist
LINE 1: WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- @description test15c: CTE with a user-defined function [STABLE NO SQL]
CREATE OR REPLACE FUNCTION cte_func1(a int) RETURNS int 
LANGUAGE plpgsql
STABLE NO SQL
AS $$
BEGIN
RETURN a + 10;
END
$$;
psql:sql/polar-px-dev/qp_with_functional.sql:204: ERROR:  syntax error at or near "NO"
LINE 3: STABLE NO SQL
               ^
WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5)
SELECT v1.a, v2.b
FROM v AS v1, v AS v2
WHERE v1.a < v2.a ORDER BY 1,2;
psql:sql/polar-px-dev/qp_with_functional.sql:209: ERROR:  function cte_func1(integer) does not exist
LINE 1: WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- @description test15d: CTE with a user-defined function [STABLE CONTAINS SQL]
CREATE OR REPLACE FUNCTION cte_func1(a int) RETURNS int 
LANGUAGE plpgsql
STABLE CONTAINS SQL
AS $$
DECLARE
    r int;
BEGIN
    SELECT $1 + 1 INTO r;
    RETURN r;
END
$$;
psql:sql/polar-px-dev/qp_with_functional.sql:222: ERROR:  syntax error at or near "CONTAINS"
LINE 3: STABLE CONTAINS SQL
               ^
WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5)
SELECT v1.a, v2.b
FROM v AS v1, v AS v2
WHERE v1.a < v2.a ORDER BY 1,2;
psql:sql/polar-px-dev/qp_with_functional.sql:227: ERROR:  function cte_func1(integer) does not exist
LINE 1: WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- @description test15d: CTE with a user-defined function [STABLE MODIFIES SQL DATA]
CREATE OR REPLACE FUNCTION cte_func1(a int) RETURNS int
LANGUAGE plpgsql
STABLE MODIFIES SQL DATA
AS $$
BEGIN
UPDATE foobar SET d = d+1 WHERE c = $1;
RETURN $1 + 1;
END
$$;
psql:sql/polar-px-dev/qp_with_functional.sql:238: ERROR:  syntax error at or near "MODIFIES"
LINE 3: STABLE MODIFIES SQL DATA
               ^
WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5)
SELECT v1.a, v2.b
FROM v AS v1, v AS v2
WHERE v1.a < v2.a ORDER BY 1,2;
psql:sql/polar-px-dev/qp_with_functional.sql:243: ERROR:  function cte_func1(integer) does not exist
LINE 1: WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- @description test15e: CTE with a user-defined function [STABLE READS SQL DATA]
CREATE OR REPLACE FUNCTION cte_func1(a int) RETURNS int
LANGUAGE plpgsql
STABLE READS SQL DATA
AS $$
DECLARE
    r int;
BEGIN
    SELECT d FROM foobar WHERE c = $1 LIMIT 1 INTO r;
    RETURN r;
END
$$;
psql:sql/polar-px-dev/qp_with_functional.sql:256: ERROR:  syntax error at or near "READS"
LINE 3: STABLE READS SQL DATA
               ^
WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5)
SELECT v1.a, v2.b
FROM v AS v1, v AS v2
WHERE v1.a < v2.a ORDER BY 1,2;
psql:sql/polar-px-dev/qp_with_functional.sql:261: ERROR:  function cte_func1(integer) does not exist
LINE 1: WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- @description test15g: CTE with a user-defined function [VOLATILE NO SQL]
CREATE OR REPLACE FUNCTION cte_func1(a int) RETURNS int 
LANGUAGE plpgsql
VOLATILE NO SQL
AS $$
BEGIN
RETURN a + 10;
END
$$;
psql:sql/polar-px-dev/qp_with_functional.sql:271: ERROR:  syntax error at or near "NO"
LINE 3: VOLATILE NO SQL
                 ^
WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5)
SELECT v1.a, v2.b
FROM v AS v1, v AS v2
WHERE v1.a < v2.a ORDER BY 1,2;
psql:sql/polar-px-dev/qp_with_functional.sql:276: ERROR:  function cte_func1(integer) does not exist
LINE 1: WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- @description test15h: CTE with a user-defined function [VOLATILE CONTAINS SQL]
CREATE OR REPLACE FUNCTION cte_func1(a int) RETURNS int 
LANGUAGE plpgsql
VOLATILE CONTAINS SQL
AS $$
DECLARE
    r int;
BEGIN
    SELECT $1 + 1 INTO r;
    RETURN r;
END
$$;
psql:sql/polar-px-dev/qp_with_functional.sql:289: ERROR:  syntax error at or near "CONTAINS"
LINE 3: VOLATILE CONTAINS SQL
                 ^
WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5)
SELECT v1.a, v2.b
FROM v AS v1, v AS v2
WHERE v1.a < v2.a ORDER BY 1,2;
psql:sql/polar-px-dev/qp_with_functional.sql:294: ERROR:  function cte_func1(integer) does not exist
LINE 1: WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- @description test15i: CTE with a user-defined function [VOLATILE READS SQL DATA]
CREATE OR REPLACE FUNCTION cte_func1(a int) RETURNS int 
LANGUAGE plpgsql
VOLATILE READS SQL DATA
AS $$
DECLARE
    r int;
BEGIN
    SELECT d FROM foobar WHERE c = $1 LIMIT 1 INTO r;
    RETURN r;
END
$$;
psql:sql/polar-px-dev/qp_with_functional.sql:307: ERROR:  syntax error at or near "READS"
LINE 3: VOLATILE READS SQL DATA
                 ^
WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5)
SELECT v1.a, v2.b
FROM v AS v1, v AS v2
WHERE v1.a < v2.a ORDER BY 1,2;
psql:sql/polar-px-dev/qp_with_functional.sql:312: ERROR:  function cte_func1(integer) does not exist
LINE 1: WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- @description test15j: CTE with a user-defined function [VOLATILE MODIFIES SQL DATA]
CREATE OR REPLACE FUNCTION cte_func1(a int) RETURNS int 
LANGUAGE plpgsql
VOLATILE MODIFIES SQL DATA
AS $$
BEGIN
UPDATE foobar SET d = d+1 WHERE c = $1;
RETURN $1 + 1;
END
$$;
psql:sql/polar-px-dev/qp_with_functional.sql:323: ERROR:  syntax error at or near "MODIFIES"
LINE 3: VOLATILE MODIFIES SQL DATA
                 ^
WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5)
SELECT v1.a, v2.b
FROM v AS v1, v AS v2
WHERE v1.a < v2.a ORDER BY 1,2;
psql:sql/polar-px-dev/qp_with_functional.sql:328: ERROR:  function cte_func1(integer) does not exist
LINE 1: WITH v(a, b) AS (SELECT cte_func1(a), b FROM foo WHERE b < 5...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- @description test16a: CTE within a user-defined function
-- Hide Traceback and error context information. This can throw a different
-- error depending on chosen access plan, and we mask out the error message
-- with a matchsubs block (see top of file), but the context lines are
-- easiest to mask out with this.
\set VERBOSITY terse
CREATE OR REPLACE FUNCTION cte_func3()
RETURNS SETOF int 
RETURNS NULL ON NULL INPUT
AS $$
    id = []
    rv = plpy.execute("SELECT * FROM (WITH v AS (SELECT a, b FROM foo WHERE b < 9)\
SELECT v1.a FROM v AS v1, v as v2 WHERE v1.a = v2.b)OUTERFOO ORDER BY 1", 5)
    for i in range(0,5):
        val = rv[i]["a"]
        id.append(val)
    return id
$$ LANGUAGE plpython3u READS SQL DATA;
psql:sql/polar-px-dev/qp_with_functional.sql:349: ERROR:  syntax error at or near "READS" at character 375
WITH v(a, b) AS (SELECT a,b FROM foo WHERE b < 5)
SELECT * from v where b in ( select * from cte_func3()) ORDER BY 1;
psql:sql/polar-px-dev/qp_with_functional.sql:352: ERROR:  function cte_func3() does not exist at character 94
\unset VERBOSITY
-- @description test16b: CTE within a user-defined function
CREATE OR REPLACE FUNCTION cte_func2()
RETURNS int 
as $$
Declare
    rcount INTEGER;
Begin
RETURN (SELECT COUNT(*) FROM (WITH v AS (SELECT a, b FROM foo WHERE b < 9),
w AS (SELECT * FROM v WHERE a < 5)
SELECT v1.a, w1.b b1, w2.b b2
FROM v AS v1, v as v2, w AS w1, w AS w2
WHERE v1.a = v2.b)foo);
End;
$$ language plpgsql READS SQL DATA;
psql:sql/polar-px-dev/qp_with_functional.sql:369: ERROR:  syntax error at or near "READS"
LINE 13: $$ language plpgsql READS SQL DATA;
                             ^
WITH v(a, b) AS (SELECT cte_func2() as a, b FROM foo WHERE b < 5)
SELECT * from v ORDER BY 1;
psql:sql/polar-px-dev/qp_with_functional.sql:372: ERROR:  function cte_func2() does not exist
LINE 1: WITH v(a, b) AS (SELECT cte_func2() as a, b FROM foo WHERE b...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- @description test17a: CTE and views [View with a single CTE]
DROP VIEW IF EXISTS cte_view;
psql:sql/polar-px-dev/qp_with_functional.sql:375: NOTICE:  view "cte_view" does not exist, skipping
CREATE VIEW cte_view as 
(WITH cte(e)AS
(
	    SELECT d FROM bar
    INTERSECT 
    SELECT a FROM foo limit 10
)SELECT * FROM CTE);
\d+ cte_view
                View "qp_with_functional_inlining.cte_view"
 Column |  Type   | Collation | Nullable | Default | Storage | Description 
--------+---------+-----------+----------+---------+---------+-------------
 e      | integer |           |          |         | plain   | 
View definition:
 WITH cte(e) AS (
         SELECT bar.d
           FROM bar
        INTERSECT
         SELECT foo.a
           FROM foo
 LIMIT 10
        )
 SELECT cte.e
   FROM cte;

SELECT * FROM cte_view ORDER BY 1;
 e  
----
  2
  3
  4
  5
  6
  7
  8
  9
 10
(9 rows)

                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort
   Output: bar.d
   Sort Key: bar.d
   ->  Limit
         Output: bar.d
         ->  PX Coordinator 6:1  (slice1; segments: 6)
               Output: bar.d
               ->  Hash Join
                     Output: bar.d
                     Hash Cond: (bar.d = foo.a)
                     ->  GroupAggregate
                           Output: bar.d
                           Group Key: bar.d
                           ->  Sort
                                 Output: bar.d
                                 Sort Key: bar.d
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: bar.d
                                       Hash Key: bar.d
                                       ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                             Output: bar.d
                     ->  Hash
                           Output: foo.a
                           ->  GroupAggregate
                                 Output: foo.a
                                 Group Key: foo.a
                                 ->  Sort
                                       Output: foo.a
                                       Sort Key: foo.a
                                       ->  PX Hash 6:6  (slice3; segments: 6)
                                             Output: foo.a
                                             Hash Key: foo.a
                                             ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                                   Output: foo.a
 Optimizer: PolarDB PX Optimizer
(35 rows)

-- @description test17b: CTE and views [View with multiple CTE’s]
DROP VIEW IF EXISTS cte_view;
CREATE VIEW cte_view as 
( 
 WITH cte(e,f) AS (SELECT a,d FROM bar, foo WHERE foo.a = bar.d ),
      cte2(e,f) AS (SELECT e,d FROM bar, cte WHERE cte.e = bar.c )
SELECT cte2.e,cte.f FROM cte,cte2 where cte.e = cte2.e
);
\d+ cte_view
                View "qp_with_functional_inlining.cte_view"
 Column |  Type   | Collation | Nullable | Default | Storage | Description 
--------+---------+-----------+----------+---------+---------+-------------
 e      | integer |           |          |         | plain   | 
 f      | integer |           |          |         | plain   | 
View definition:
 WITH cte(e, f) AS (
         SELECT foo.a,
            bar.d
           FROM bar,
            foo
          WHERE foo.a = bar.d
        ), cte2(e, f) AS (
         SELECT cte_1.e,
            bar.d
           FROM bar,
            cte cte_1
          WHERE cte_1.e = bar.c
        )
 SELECT cte2.e,
    cte.f
   FROM cte,
    cte2
  WHERE cte.e = cte2.e;

SELECT * FROM cte_view ORDER BY 1;
 e  | f  
----+----
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(9 rows)

                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref2.a, share0_ref3.d
   Merge Key: share0_ref2.a
   ->  Sort
         Output: share0_ref2.a, share0_ref3.d
         Sort Key: share0_ref2.a
         ->  Sequence
               Output: share0_ref2.a, share0_ref3.d
               ->  Shared Scan (Producer; slice1; share0)
                     Output: share0_ref1.a, share0_ref1.d
                     ->  Hash Join
                           Output: foo.a, bar.d
                           Hash Cond: (bar.d = foo.a)
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: bar.d
                                 Hash Key: bar.d
                                 ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                       Output: bar.d
                           ->  Hash
                                 Output: foo.a
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: foo.a
                                       Hash Key: foo.a
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                             Output: foo.a
               ->  Hash Join
                     Output: share0_ref2.a, share0_ref3.d
                     Hash Cond: ((share0_ref3.a = share0_ref2.a) AND (share0_ref3.d = share0_ref2.a))
                     ->  Result
                           Output: share0_ref3.a, share0_ref3.d
                           Filter: (share0_ref3.a = share0_ref3.d)
                           ->  Shared Scan (Producer; slice1; share0)
                                 Output: share0_ref3.a, share0_ref3.d
                     ->  Hash
                           Output: share0_ref2.a
                           ->  Hash Join
                                 Output: share0_ref2.a
                                 Hash Cond: ((share0_ref2.a = bar_1.c) AND (share0_ref2.d = bar_1.c))
                                 ->  Result
                                       Output: share0_ref2.a, share0_ref2.d
                                       Filter: (share0_ref2.a = share0_ref2.d)
                                       ->  Shared Scan (Producer; slice1; share0)
                                             Output: share0_ref2.a, share0_ref2.d
                                 ->  Hash
                                       Output: bar_1.c
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: bar_1.c
                                             Hash Key: bar_1.c
                                             ->  Partial Seq Scan on qp_with_functional_inlining.bar bar_1
                                                   Output: bar_1.c
 Optimizer: PolarDB PX Optimizer
(51 rows)

-- @description test18: CTE with WINDOW function
WITH CTE(a,b) AS
(SELECT a,d FROM foo, bar WHERE foo.a = bar.d),
CTE1(e,f) AS
( SELECT foo.a, rank() OVER (PARTITION BY foo.b ORDER BY CTE.a) FROM foo,CTE )
SELECT * FROM CTE1,CTE WHERE CTE.a = CTE1.f and CTE.a = 2 ORDER BY 1;
 e  | f | a | b 
----+---+---+---
  1 | 2 | 2 | 2
  2 | 2 | 2 | 2
  3 | 2 | 2 | 2
  4 | 2 | 2 | 2
  5 | 2 | 2 | 2
  6 | 2 | 2 | 2
  7 | 2 | 2 | 2
  8 | 2 | 2 | 2
  9 | 2 | 2 | 2
 10 | 2 | 2 | 2
(10 rows)

                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo_1.a, (rank() OVER (?)), share0_ref2.a, share0_ref2.d
   Merge Key: foo_1.a
   ->  Sequence
         Output: foo_1.a, (rank() OVER (?)), share0_ref2.a, share0_ref2.d
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.a, share0_ref1.d
               ->  Hash Join
                     Output: foo.a, bar.d
                     Hash Cond: (foo.a = bar.d)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: foo.a
                           Hash Key: foo.a
                           ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                 Output: foo.a
                     ->  Hash
                           Output: bar.d
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: bar.d
                                 Hash Key: bar.d
                                 ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                       Output: bar.d
         ->  Sort
               Output: foo_1.a, (rank() OVER (?)), share0_ref2.a, share0_ref2.d
               Sort Key: foo_1.a
               ->  Hash Join
                     Output: foo_1.a, (rank() OVER (?)), share0_ref2.a, share0_ref2.d
                     Hash Cond: (((rank() OVER (?)) = (share0_ref2.a)::bigint) AND ((rank() OVER (?)) = (share0_ref2.a)::bigint) AND ((rank() OVER (?)) = (share0_ref2.d)::bigint))
                     ->  Result
                           Output: foo_1.a, (rank() OVER (?))
                           Filter: ((rank() OVER (?)) = 2)
                           ->  WindowAgg
                                 Output: rank() OVER (?), foo_1.a, foo_1.b, share0_ref3.a
                                 ->  Sort
                                       Output: foo_1.a, foo_1.b, share0_ref3.a
                                       Sort Key: foo_1.b, share0_ref3.a
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: foo_1.a, foo_1.b, share0_ref3.a
                                             Hash Key: foo_1.b
                                             ->  Nested Loop
                                                   Output: foo_1.a, foo_1.b, share0_ref3.a
                                                   Join Filter: true
                                                   ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                                         Output: foo_1.a, foo_1.b
                                                   ->  Materialize
                                                         Output: share0_ref3.a
                                                         ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                               Output: share0_ref3.a
                                                               ->  Result
                                                                     Output: share0_ref3.a
                                                                     Filter: (share0_ref3.a = share0_ref3.d)
                                                                     ->  Shared Scan (Consumer; slice5; share0)
                                                                           Output: share0_ref3.a, share0_ref3.d
                     ->  Hash
                           Output: share0_ref2.a, share0_ref2.d
                           ->  PX Broadcast 6:6  (slice6; segments: 6)
                                 Output: share0_ref2.a, share0_ref2.d
                                 ->  Result
                                       Output: share0_ref2.a, share0_ref2.d
                                       Filter: ((share0_ref2.a = 2) AND (share0_ref2.d = 2) AND (share0_ref2.a = share0_ref2.d))
                                       ->  Shared Scan (Consumer; slice6; share0)
                                             Output: share0_ref2.a, share0_ref2.d
 Optimizer: PolarDB PX Optimizer
(63 rows)

-- @description test19a :CTE with set operations [UNION]
WITH ctemax(a,b) AS
(
SELECT a,b FROM foo
),
cte(e) AS
( SELECT b FROM ctemax
UNION SELECT a FROM foo)
SELECT e FROM cte ORDER BY 1;
 e  
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
(11 rows)

                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.b
   Merge Key: foo.b
   ->  Sort
         Output: foo.b
         Sort Key: foo.b
         ->  GroupAggregate
               Output: foo.b
               Group Key: foo.b
               ->  Sort
                     Output: foo.b
                     Sort Key: foo.b
                     ->  Append
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: foo.b
                                 Hash Key: foo.b
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                       Output: foo.b
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: foo_1.a
                                 Hash Key: foo_1.a
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                       Output: foo_1.a
 Optimizer: PolarDB PX Optimizer
(24 rows)

-- @description test19b :CTE with set operations [UNION ALL]
WITH Results_CTE AS (
    SELECT t2.a, ROW_NUMBER() OVER (ORDER BY b) AS RowNum FROM foo t2 LEFT JOIN bar ON bar.d = t2.b
UNION ALL 
    SELECT t1.b, ROW_NUMBER() OVER (ORDER BY a) AS RowNum FROM foo t1
LEFT JOIN bar ON bar.c = t1.a
 ) 
SELECT * FROM Results_CTE a INNER JOIN bar ON a.a = bar.d WHERE RowNum >= 0 AND RowNum <= 10 ORDER BY 1,2,3,4;
 a  | rownum | c  | d  
----+--------+----+----
  2 |      1 |  1 |  2
  2 |      2 |  1 |  2
  3 |      2 |  2 |  3
  3 |      3 |  2 |  3
  4 |      3 |  3 |  4
  4 |      4 |  3 |  4
  5 |      4 |  4 |  5
  5 |      5 |  4 |  5
  6 |      5 |  5 |  6
  6 |      6 |  5 |  6
  7 |      6 |  6 |  7
  7 |      7 |  6 |  7
  8 |      7 |  7 |  8
  8 |      8 |  7 |  8
  9 |      8 |  8 |  9
  9 |      9 |  8 |  9
 10 |      9 |  9 | 10
 10 |     10 |  9 | 10
 11 |     10 | 10 | 11
(19 rows)

                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, (row_number() OVER (?)), bar_2.c, bar_2.d
   Merge Key: foo.a, (row_number() OVER (?)), bar_2.c, bar_2.d
   ->  Sort
         Output: foo.a, (row_number() OVER (?)), bar_2.c, bar_2.d
         Sort Key: foo.a, (row_number() OVER (?)), bar_2.c, bar_2.d
         ->  Sort
               Output: foo.a, (row_number() OVER (?)), bar_2.c, bar_2.d
               Sort Key: foo.a, (row_number() OVER (?)), bar_2.c, bar_2.d
               ->  Hash Join
                     Output: foo.a, (row_number() OVER (?)), bar_2.c, bar_2.d
                     Hash Cond: (foo.a = bar_2.d)
                     ->  PX Hash 1:6  (slice2)
                           Output: foo.a, (row_number() OVER (?))
                           Hash Key: foo.a
                           ->  Result
                                 Output: foo.a, (row_number() OVER (?))
                                 Filter: (((row_number() OVER (?)) >= 0) AND ((row_number() OVER (?)) <= 10))
                                 ->  Append
                                       ->  WindowAgg
                                             Output: foo.a, row_number() OVER (?)
                                             ->  PX Coordinator 6:1  (slice3; segments: 6)
                                                   Output: foo.a, foo.b
                                                   Merge Key: foo.b
                                                   ->  Sort
                                                         Output: foo.a, foo.b
                                                         Sort Key: foo.b
                                                         ->  Hash Left Join
                                                               Output: foo.a, foo.b
                                                               Hash Cond: (foo.b = bar.d)
                                                               ->  PX Hash 6:6  (slice4; segments: 6)
                                                                     Output: foo.a, foo.b
                                                                     Hash Key: foo.b
                                                                     ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                                                           Output: foo.a, foo.b
                                                               ->  Hash
                                                                     Output: bar.d
                                                                     ->  PX Hash 6:6  (slice5; segments: 6)
                                                                           Output: bar.d
                                                                           Hash Key: bar.d
                                                                           ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                                                                 Output: bar.d
                                       ->  WindowAgg
                                             Output: foo_1.b, row_number() OVER (?)
                                             ->  PX Coordinator 6:1  (slice6; segments: 6)
                                                   Output: foo_1.a, foo_1.b
                                                   Merge Key: foo_1.a
                                                   ->  Sort
                                                         Output: foo_1.a, foo_1.b
                                                         Sort Key: foo_1.a
                                                         ->  Hash Left Join
                                                               Output: foo_1.a, foo_1.b
                                                               Hash Cond: (foo_1.a = bar_1.c)
                                                               ->  PX Hash 6:6  (slice7; segments: 6)
                                                                     Output: foo_1.a, foo_1.b
                                                                     Hash Key: foo_1.a
                                                                     ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                                                           Output: foo_1.a, foo_1.b
                                                               ->  Hash
                                                                     Output: bar_1.c
                                                                     ->  PX Hash 6:6  (slice8; segments: 6)
                                                                           Output: bar_1.c
                                                                           Hash Key: bar_1.c
                                                                           ->  Partial Seq Scan on qp_with_functional_inlining.bar bar_1
                                                                                 Output: bar_1.c
                     ->  Hash
                           Output: bar_2.c, bar_2.d
                           ->  PX Hash 6:6  (slice9; segments: 6)
                                 Output: bar_2.c, bar_2.d
                                 Hash Key: bar_2.d
                                 ->  Partial Seq Scan on qp_with_functional_inlining.bar bar_2
                                       Output: bar_2.c, bar_2.d
 Optimizer: PolarDB PX Optimizer
(73 rows)

-- @description test19c :CTE with set operations [INTERSECT]
WITH ctemax(a,b) AS
(
    SELECT a,b FROM foo 
),
    cte(e) AS
(SELECT b FROM ctemax
INTERSECT
SELECT a FROM foo)
SELECT e FROM cte ORDER BY 1;
 e  
----
  2
  3
  4
  5
  6
  7
  8
  9
 10
(9 rows)

                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.b
   Merge Key: foo.b
   ->  Sort
         Output: foo.b
         Sort Key: foo.b
         ->  Sort
               Output: foo.b
               Sort Key: foo.b
               ->  Hash Join
                     Output: foo.b
                     Hash Cond: (foo.b = foo_1.a)
                     ->  GroupAggregate
                           Output: foo.b
                           Group Key: foo.b
                           ->  Sort
                                 Output: foo.b
                                 Sort Key: foo.b
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: foo.b
                                       Hash Key: foo.b
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                             Output: foo.b
                     ->  Hash
                           Output: foo_1.a
                           ->  GroupAggregate
                                 Output: foo_1.a
                                 Group Key: foo_1.a
                                 ->  Sort
                                       Output: foo_1.a
                                       Sort Key: foo_1.a
                                       ->  PX Hash 6:6  (slice3; segments: 6)
                                             Output: foo_1.a
                                             Hash Key: foo_1.a
                                             ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                                   Output: foo_1.a
 Optimizer: PolarDB PX Optimizer
(37 rows)

-- @description test19d :CTE with set operations [INTERSECT ALL]
WITH ctemax(a,b) AS( SELECT a,b FROM foo ),
    cte(e) AS(SELECT b FROM ctemax
              INTERSECT ALL
              SELECT a FROM foo)
SELECT e FROM cte ORDER BY 1;
 e  
----
  2
  3
  4
  5
  6
  7
  8
  9
 10
(9 rows)

                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.b
   Merge Key: foo.b
   ->  Sort
         Output: foo.b
         Sort Key: foo.b
         ->  Sort
               Output: foo.b
               Sort Key: foo.b
               ->  Hash Semi Join
                     Output: foo.b
                     Hash Cond: ((foo.b = foo_1.a) AND ((row_number() OVER (?)) = (row_number() OVER (?))))
                     ->  WindowAgg
                           Output: row_number() OVER (?), foo.b
                           ->  Sort
                                 Output: foo.b
                                 Sort Key: foo.b
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: foo.b
                                       Hash Key: foo.b
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                             Output: foo.b
                     ->  Hash
                           Output: (row_number() OVER (?)), foo_1.a
                           ->  WindowAgg
                                 Output: row_number() OVER (?), foo_1.a
                                 ->  Sort
                                       Output: foo_1.a
                                       Sort Key: foo_1.a
                                       ->  PX Hash 6:6  (slice3; segments: 6)
                                             Output: foo_1.a
                                             Hash Key: foo_1.a
                                             ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                                   Output: foo_1.a
 Optimizer: PolarDB PX Optimizer
(35 rows)

-- @description test19e :CTE with set operations [EXCEPT]
WITH ctemax(a,b) AS
(
SELECT a,b FROM foo
),
cte(e) AS
( SELECT b FROM ctemax
EXCEPT
SELECT a FROM foo)
SELECT e FROM cte ORDER BY 1;
 e  
----
 11
(1 row)

                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.b
   Merge Key: foo.b
   ->  Sort
         Output: foo.b
         Sort Key: foo.b
         ->  Sort
               Output: foo.b
               Sort Key: foo.b
               ->  GroupAggregate
                     Output: foo.b
                     Group Key: foo.b
                     ->  Sort
                           Output: foo.b
                           Sort Key: foo.b
                           ->  Hash Anti Join
                                 Output: foo.b
                                 Hash Cond: (foo.b = foo_1.a)
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: foo.b
                                       Hash Key: foo.b
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                             Output: foo.b
                                 ->  Hash
                                       Output: foo_1.a
                                       ->  PX Hash 6:6  (slice3; segments: 6)
                                             Output: foo_1.a
                                             Hash Key: foo_1.a
                                             ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                                   Output: foo_1.a
 Optimizer: PolarDB PX Optimizer
(31 rows)

-- @description test19f :CTE with set operations [EXCEPT ALL]
WITH ctemax(a,b) AS
(
SELECT a,b FROM foo
),
cte(e) AS
( SELECT b FROM ctemax
EXCEPT ALL
SELECT a FROM foo)
SELECT e FROM cte ORDER BY 1;
 e  
----
 11
(1 row)

                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.b
   Merge Key: foo.b
   ->  Sort
         Output: foo.b
         Sort Key: foo.b
         ->  Sort
               Output: foo.b
               Sort Key: foo.b
               ->  Hash Anti Join
                     Output: foo.b
                     Hash Cond: ((foo.b = foo_1.a) AND ((row_number() OVER (?)) = (row_number() OVER (?))))
                     ->  WindowAgg
                           Output: row_number() OVER (?), foo.b
                           ->  Sort
                                 Output: foo.b
                                 Sort Key: foo.b
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: foo.b
                                       Hash Key: foo.b
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                             Output: foo.b
                     ->  Hash
                           Output: (row_number() OVER (?)), foo_1.a
                           ->  WindowAgg
                                 Output: row_number() OVER (?), foo_1.a
                                 ->  Sort
                                       Output: foo_1.a
                                       Sort Key: foo_1.a
                                       ->  PX Hash 6:6  (slice3; segments: 6)
                                             Output: foo_1.a
                                             Hash Key: foo_1.a
                                             ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                                   Output: foo_1.a
 Optimizer: PolarDB PX Optimizer
(35 rows)

-- @description test20: Common name for CTE and table 
CREATE TABLE v as SELECT generate_series(1,10)a;
WITH v AS (SELECT c, d FROM bar, v WHERE c = v.a ) SELECT v1.c, v1.d FROM v v1, v v2 WHERE v1.c = v2.c AND v1.d <10  ORDER BY 1;
 c | d 
---+---
 1 | 2
 2 | 3
 3 | 4
 4 | 5
 5 | 6
 6 | 7
 7 | 8
 8 | 9
(8 rows)

                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref3.c, share0_ref3.d
   Merge Key: share0_ref3.c
   ->  Sequence
         Output: share0_ref3.c, share0_ref3.d
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.c, share0_ref1.d
               ->  Hash Join
                     Output: bar.c, bar.d
                     Hash Cond: (bar.c = v.a)
                     ->  Partial Seq Scan on qp_with_functional_inlining.bar
                           Output: bar.c, bar.d
                     ->  Hash
                           Output: v.a
                           ->  PX Broadcast 6:6  (slice2; segments: 6)
                                 Output: v.a
                                 ->  Partial Seq Scan on qp_with_functional_inlining.v
                                       Output: v.a
         ->  Sort
               Output: share0_ref3.c, share0_ref3.d
               Sort Key: share0_ref3.c
               ->  Hash Join
                     Output: share0_ref3.c, share0_ref3.d
                     Hash Cond: (share0_ref3.c = share0_ref2.c)
                     ->  Result
                           Output: share0_ref3.c, share0_ref3.d
                           Filter: (share0_ref3.d < 10)
                           ->  Shared Scan (Producer; slice1; share0)
                                 Output: share0_ref3.c, share0_ref3.d
                     ->  Hash
                           Output: share0_ref2.c
                           ->  PX Broadcast 6:6  (slice3; segments: 6)
                                 Output: share0_ref2.c
                                 ->  Result
                                       Output: share0_ref2.c
                                       ->  Shared Scan (Consumer; slice3; share0)
                                             Output: share0_ref2.c, share0_ref2.d
 Optimizer: PolarDB PX Optimizer
(38 rows)

DROP TABLE v;
-- @description test21a: Common name for CTEs and subquery alias
WITH v1 AS (SELECT a, b FROM foo WHERE a < 6), 
     v2 AS (SELECT * FROM v1 WHERE a < 3)
SELECT * 
FROM (
        SELECT * FROM v1 WHERE b < 5) v1,
       (SELECT * FROM v1) v2
WHERE v1.a =v2.b  ORDER BY 1;
 a | b | a | b 
---+---+---+---
 2 | 3 | 1 | 2
 3 | 4 | 2 | 3
(2 rows)

                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo_1.a, foo_1.b, foo.a, foo.b
   Merge Key: foo_1.a
   ->  Sort
         Output: foo_1.a, foo_1.b, foo.a, foo.b
         Sort Key: foo_1.a
         ->  Sort
               Output: foo_1.a, foo_1.b, foo.a, foo.b
               Sort Key: foo_1.a
               ->  Hash Join
                     Output: foo_1.a, foo_1.b, foo.a, foo.b
                     Hash Cond: (foo.b = foo_1.a)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: foo.a, foo.b
                           Hash Key: foo.b
                           ->  Result
                                 Output: foo.a, foo.b
                                 Filter: (foo.b < 6)
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                       Output: foo.a, foo.b
                                       Filter: (foo.a < 6)
                     ->  Hash
                           Output: foo_1.a, foo_1.b
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: foo_1.a, foo_1.b
                                 Hash Key: foo_1.a
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                       Output: foo_1.a, foo_1.b
                                       Filter: ((foo_1.a < 6) AND (foo_1.b < 5) AND (foo_1.a < 6))
 Optimizer: PolarDB PX Optimizer
(30 rows)

-- @description test21b: Common name for table , CTE and sub-query alias
WITH foo AS (SELECT a, b FROM foo WHERE a < 5), 
     bar AS (SELECT c, d FROM bar WHERE c < 4)
SELECT * 
FROM (
        SELECT * FROM foo WHERE b < 5) foo,
       (SELECT * FROM bar) bar
WHERE foo.a =bar.d ORDER BY 1;
 a | b | c | d 
---+---+---+---
 2 | 3 | 1 | 2
 3 | 4 | 2 | 3
(2 rows)

                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, foo.b, bar.c, bar.d
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, foo.b, bar.c, bar.d
         Sort Key: foo.a
         ->  Sort
               Output: foo.a, foo.b, bar.c, bar.d
               Sort Key: foo.a
               ->  Hash Join
                     Output: foo.a, foo.b, bar.c, bar.d
                     Hash Cond: (foo.a = bar.d)
                     ->  Result
                           Output: foo.a, foo.b
                           Filter: ((foo.b < 5) AND (foo.a < 5))
                           ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                 Output: foo.a, foo.b
                                 Filter: (foo.a < 5)
                     ->  Hash
                           Output: bar.c, bar.d
                           ->  PX Broadcast 6:6  (slice2; segments: 6)
                                 Output: bar.c, bar.d
                                 ->  Result
                                       Output: bar.c, bar.d
                                       Filter: (bar.d < 5)
                                       ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                             Output: bar.c, bar.d
                                             Filter: (bar.c < 4)
 Optimizer: PolarDB PX Optimizer
(29 rows)

-- @description test22: Nested sub-query with same CTE name
SELECT avg(a3),b3
FROM
(
	WITH foo(b1,a1) AS (SELECT a,b FROM foo where a >= 1)
SELECT b3,a3 FROM
	(
 		WITH foo(b2,a2) AS ( SELECT a1,b1 FROM foo where a1 >= 1 )
  		SELECT b3,a3 FROM
 		(
			WITH foo(b3,a3) AS ( SELECT a2,b2 FROM foo where a2 >= 1 )
 			SELECT s1.b3,s1.a3 FROM foo s1,foo s2
  		) foo2
) foo1
) foo0 
GROUP BY b3 ORDER BY 1,2;
         avg         | b3 
---------------------+----
  2.0000000000000000 |  1
  3.0000000000000000 |  2
  4.0000000000000000 |  3
  5.0000000000000000 |  4
  6.0000000000000000 |  5
  7.0000000000000000 |  6
  8.0000000000000000 |  7
  9.0000000000000000 |  8
 10.0000000000000000 |  9
 11.0000000000000000 | 10
(10 rows)

                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (avg(foo_1.b)), foo_1.a
   Merge Key: (avg(foo_1.b)), foo_1.a
   ->  Sort
         Output: (avg(foo_1.b)), foo_1.a
         Sort Key: (avg(foo_1.b)), foo_1.a
         ->  Finalize GroupAggregate
               Output: avg(foo_1.b), foo_1.a
               Group Key: foo_1.a
               ->  Sort
                     Output: foo_1.a, (PARTIAL avg(foo_1.b))
                     Sort Key: foo_1.a
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: foo_1.a, (PARTIAL avg(foo_1.b))
                           Hash Key: foo_1.a
                           ->  Partial HashAggregate
                                 Output: foo_1.a, PARTIAL avg(foo_1.b)
                                 Group Key: foo_1.a
                                 ->  Nested Loop
                                       Output: foo_1.a, foo_1.b
                                       Join Filter: true
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                             Output: foo_1.a, foo_1.b
                                             Filter: ((foo_1.a >= 1) AND (foo_1.b >= 1) AND (foo_1.a >= 1))
                                       ->  Materialize
                                             ->  PX Broadcast 6:6  (slice3; segments: 6)
                                                   ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                                         Filter: ((foo.a >= 1) AND (foo.b >= 1) AND (foo.a >= 1))
 Optimizer: PolarDB PX Optimizer
(29 rows)

-- @description test23: CTE with Percentile function
WITH v AS (SELECT a, b FROM foo WHERE b < 5) select median(a) from v;
psql:sql/polar-px-dev/qp_with_functional.sql:507: ERROR:  function median(integer) does not exist
LINE 1: ...TH v AS (SELECT a, b FROM foo WHERE b < 5) select median(a) ...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- @description test24a: CTE with CSQ [ANY]
WITH newfoo AS (SELECT * FROM foo WHERE foo.a = any (SELECT bar.d FROM bar WHERE bar.d = foo.a) ORDER BY 1,2)
SELECT foo.a,newfoo.b FROM foo,newfoo WHERE foo.a = newfoo.a ORDER BY 1;
 a  | b  
----+----
  2 |  3
  3 |  4
  4 |  5
  5 |  6
  6 |  7
  7 |  8
  8 |  9
  9 | 10
 10 | 11
(9 rows)

                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo_1.a, foo.b
   Merge Key: foo_1.a
   ->  Sort
         Output: foo_1.a, foo.b
         Sort Key: foo_1.a
         ->  Sort
               Output: foo_1.a, foo.b
               Sort Key: foo_1.a
               ->  Hash Join
                     Output: foo_1.a, foo.b
                     Hash Cond: (foo.a = foo_1.a)
                     ->  Sort
                           Output: foo.a, foo.b
                           Sort Key: foo.a, foo.b
                           ->  Hash Semi Join
                                 Output: foo.a, foo.b
                                 Hash Cond: ((foo.a = bar.d) AND (foo.a = bar.d))
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: foo.a, foo.b
                                       Hash Key: foo.a
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                             Output: foo.a, foo.b
                                 ->  Hash
                                       Output: bar.d
                                       ->  PX Hash 6:6  (slice3; segments: 6)
                                             Output: bar.d
                                             Hash Key: bar.d
                                             ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                                   Output: bar.d
                     ->  Hash
                           Output: foo_1.a
                           ->  PX Hash 6:6  (slice4; segments: 6)
                                 Output: foo_1.a
                                 Hash Key: foo_1.a
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                       Output: foo_1.a
 Optimizer: PolarDB PX Optimizer
(38 rows)

-- @description test24b: CTE with CSQ[EXISTS]  
WITH newfoo AS
	(
	     SELECT foo.* FROM foo WHERE EXISTS(SELECT bar.c FROM bar WHERE foo.b = bar.c) ORDER BY foo.b
)
SELECT
( SELECT max(CNT) FROM (SELECT count(*) CNT,nf1.b FROM newfoo nf1, newfoo nf2
WHERE nf1.a = nf2.a group by nf1.b) FOO
), * FROM newfoo ORDER BY 1,2,3;
 max | a | b  
-----+---+----
   1 | 1 |  2
   1 | 2 |  3
   1 | 3 |  4
   1 | 4 |  5
   1 | 5 |  6
   1 | 6 |  7
   1 | 7 |  8
   1 | 8 |  9
   1 | 9 | 10
(9 rows)

                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (max((count()))), share0_ref4.a, share0_ref4.b
   Merge Key: (max((count()))), share0_ref4.a, share0_ref4.b
   ->  Sequence
         Output: (max((count()))), share0_ref4.a, share0_ref4.b
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.a, share0_ref1.b
               ->  Sort
                     Output: foo.a, foo.b
                     Sort Key: foo.b
                     ->  Hash Semi Join
                           Output: foo.a, foo.b
                           Hash Cond: (foo.b = bar.c)
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: foo.a, foo.b
                                 Hash Key: foo.b
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                       Output: foo.a, foo.b
                           ->  Hash
                                 Output: bar.c
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: bar.c
                                       Hash Key: bar.c
                                       ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                             Output: bar.c
         ->  Sort
               Output: (max((count()))), share0_ref4.a, share0_ref4.b
               Sort Key: (max((count()))), share0_ref4.a, share0_ref4.b
               ->  Nested Loop Left Join
                     Output: (max((count()))), share0_ref4.a, share0_ref4.b
                     Join Filter: true
                     ->  Shared Scan (Producer; slice1; share0)
                           Output: share0_ref4.a, share0_ref4.b
                     ->  Materialize
                           Output: (max((count())))
                           ->  PX Broadcast 1:6  (slice4)
                                 Output: (max((count())))
                                 ->  Finalize Aggregate
                                       Output: max((count()))
                                       ->  PX Coordinator 6:1  (slice5; segments: 6)
                                             Output: (PARTIAL max((count())))
                                             ->  Partial Aggregate
                                                   Output: PARTIAL max((count()))
                                                   ->  GroupAggregate
                                                         Output: count(), share0_ref3.b
                                                         Group Key: share0_ref3.b
                                                         ->  Sort
                                                               Output: share0_ref3.b
                                                               Sort Key: share0_ref3.b
                                                               ->  PX Hash 6:6  (slice6; segments: 6)
                                                                     Output: share0_ref3.b
                                                                     Hash Key: share0_ref3.b
                                                                     ->  Hash Join
                                                                           Output: share0_ref3.b
                                                                           Hash Cond: (share0_ref3.a = share0_ref2.a)
                                                                           ->  PX Hash 6:6  (slice7; segments: 6)
                                                                                 Output: share0_ref3.a, share0_ref3.b
                                                                                 Hash Key: share0_ref3.a
                                                                                 ->  Shared Scan (Consumer; slice7; share0)
                                                                                       Output: share0_ref3.a, share0_ref3.b
                                                                           ->  Hash
                                                                                 Output: share0_ref2.a
                                                                                 ->  PX Hash 6:6  (slice8; segments: 6)
                                                                                       Output: share0_ref2.a
                                                                                       Hash Key: share0_ref2.a
                                                                                       ->  Result
                                                                                             Output: share0_ref2.a
                                                                                             ->  Shared Scan (Consumer; slice8; share0)
                                                                                                   Output: share0_ref2.a, share0_ref2.b
 Optimizer: PolarDB PX Optimizer
(70 rows)

-- @description test24c: CTE with CSQ [NOT EXISTS] 
WITH newfoo AS (
SELECT b FROM foo WHERE NOT EXISTS (SELECT * FROM bar WHERE d=a) LIMIT 1
)
SELECT foo.a,newfoo.b FROM foo,newfoo WHERE foo.a = newfoo.b ORDER BY 1;
 a | b 
---+---
 2 | 2
(1 row)

                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, foo_1.b
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, foo_1.b
         Sort Key: foo.a
         ->  Sort
               Output: foo.a, foo_1.b
               Sort Key: foo.a
               ->  Hash Join
                     Output: foo.a, foo_1.b
                     Hash Cond: (foo.a = foo_1.b)
                     ->  Partial Seq Scan on qp_with_functional_inlining.foo
                           Output: foo.a
                     ->  Hash
                           Output: foo_1.b
                           ->  PX Broadcast 1:6  (slice2)
                                 Output: foo_1.b
                                 ->  Limit
                                       Output: foo_1.b
                                       ->  PX Coordinator 6:1  (slice3; segments: 6)
                                             Output: foo_1.b
                                             ->  Limit
                                                   Output: foo_1.b
                                                   ->  Hash Anti Join
                                                         Output: foo_1.b
                                                         Hash Cond: (foo_1.a = bar.d)
                                                         ->  PX Hash 6:6  (slice4; segments: 6)
                                                               Output: foo_1.b, foo_1.a
                                                               Hash Key: foo_1.a
                                                               ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                                                     Output: foo_1.b, foo_1.a
                                                         ->  Hash
                                                               Output: bar.d
                                                               ->  PX Hash 6:6  (slice5; segments: 6)
                                                                     Output: bar.d
                                                                     Hash Key: bar.d
                                                                     ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                                                           Output: bar.d
 Optimizer: PolarDB PX Optimizer
(40 rows)

-- @description test24d: CTE with CSQ [NOT IN] 
WITH newfoo AS (
SELECT foo.a FROM foo group by foo.a having min(foo.a) not in (SELECT bar.c FROM bar WHERE foo.a = bar.d) ORDER BY foo.a
) 
    SELECT foo.a,newfoo.a FROM foo,newfoo WHERE foo.a = newfoo.a ORDER BY 1;
 a  | a  
----+----
  1 |  1
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(10 rows)

                                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, foo_1.a
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, foo_1.a
         Sort Key: foo.a
         ->  Sort
               Output: foo.a, foo_1.a
               Sort Key: foo.a
               ->  Hash Join
                     Output: foo.a, foo_1.a
                     Hash Cond: (foo.a = foo_1.a)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: foo.a
                           Hash Key: foo.a
                           ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                 Output: foo.a
                     ->  Hash
                           Output: foo_1.a
                           ->  Result
                                 Output: foo_1.a
                                 Filter: (SubPlan 1)
                                 ->  GroupAggregate
                                       Output: min(foo_1.a), foo_1.a
                                       Group Key: foo_1.a
                                       ->  Sort
                                             Output: foo_1.a
                                             Sort Key: foo_1.a
                                             ->  PX Hash 6:6  (slice3; segments: 6)
                                                   Output: foo_1.a
                                                   Hash Key: foo_1.a
                                                   ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                                         Output: foo_1.a
                                 SubPlan 1
                                   ->  Result
                                         Output: true
                                         Filter: ((CASE WHEN (sum((CASE WHEN ((min(foo_1.a)) = bar.c) THEN 1 ELSE 0 END)) IS NULL) THEN true WHEN (sum((CASE WHEN (bar.c IS NULL) THEN 1 ELSE 0 END)) > '0'::bigint) THEN NULL::boolean WHEN ((min(foo_1.a)) IS NULL) THEN NULL::boolean WHEN (sum((CASE WHEN ((min(foo_1.a)) = bar.c) THEN 1 ELSE 0 END)) = '0'::bigint) THEN true ELSE false END) = true)
                                         ->  Aggregate
                                               Output: CASE WHEN (sum((CASE WHEN ((min(foo_1.a)) = bar.c) THEN 1 ELSE 0 END)) IS NULL) THEN true WHEN (sum((CASE WHEN (bar.c IS NULL) THEN 1 ELSE 0 END)) > '0'::bigint) THEN NULL::boolean WHEN ((min(foo_1.a)) IS NULL) THEN NULL::boolean WHEN (sum((CASE WHEN ((min(foo_1.a)) = bar.c) THEN 1 ELSE 0 END)) = '0'::bigint) THEN true ELSE false END
                                               ->  Result
                                                     Output: CASE WHEN ((min(foo_1.a)) = bar.c) THEN 1 ELSE 0 END, CASE WHEN (bar.c IS NULL) THEN 1 ELSE 0 END
                                                     Filter: (foo_1.a = bar.d)
                                                     ->  Materialize
                                                           Output: bar.c, bar.d
                                                           ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                                 Output: bar.c, bar.d
                                                                 ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                                                       Output: bar.c, bar.d
 Optimizer: PolarDB PX Optimizer
(49 rows)

-- @description test25a: CTE with different column List [Multiple CTE]
WITH CTE("A","B") as
	(SELECT c , d FROM bar WHERE c > 1),
CTE2("A","B") as
(SELECT a,b FROM foo WHERE a >6)
SELECT "A","B" from CTE2 order by "A";
 A  | B  
----+----
  7 |  8
  8 |  9
  9 | 10
 10 | 11
(4 rows)

                              QUERY PLAN                               
-----------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   Merge Key: a
   ->  Sort
         Output: a, b
         Sort Key: foo.a
         ->  Sort
               Output: a, b
               Sort Key: foo.a
               ->  Partial Seq Scan on qp_with_functional_inlining.foo
                     Output: a, b
                     Filter: (foo.a > 6)
 Optimizer: PolarDB PX Optimizer
(13 rows)

-- @description test25b: CTE with different column List [Multiple CTE with dependency]
WITH CTE("A","B") as
(SELECT c , d FROM bar WHERE c > 1),
CTE2("A","B")  AS (SELECT "A","B" FROM CTE WHERE "A">6)
SELECT "A","B" from CTE2 order by "A";
 A  | B  
----+----
  7 |  8
  8 |  9
  9 | 10
 10 | 11
(4 rows)

                              QUERY PLAN                               
-----------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: c, d
   Merge Key: c
   ->  Sort
         Output: c, d
         Sort Key: bar.c
         ->  Sort
               Output: c, d
               Sort Key: bar.c
               ->  Partial Seq Scan on qp_with_functional_inlining.bar
                     Output: c, d
                     Filter: ((bar.c > 1) AND (bar.c > 6))
 Optimizer: PolarDB PX Optimizer
(13 rows)

-- @description test25c: Negative test - CTE with different column List , No quotes in column name
WITH CTE("A","B") as
(SELECT c , d FROM bar WHERE c > 1),
CTE2("A","B") as
(SELECT a,b FROM foo WHERE a >6)
SELECT A,B from CTE2 ORDER BY 1;
psql:sql/polar-px-dev/qp_with_functional.sql:553: ERROR:  column "a" does not exist
LINE 5: SELECT A,B from CTE2 ORDER BY 1;
               ^
-- @description test25d: Negative Case - CTE with different column List, Ambiguous Column reference
WITH CTE(a,b) as
(SELECT c , d FROM bar WHERE c > 1)
SELECT a,b FROM CTE,foo WHERE CTE.a = foo.b ORDER BY 1;
psql:sql/polar-px-dev/qp_with_functional.sql:558: ERROR:  column reference "a" is ambiguous
LINE 3: SELECT a,b FROM CTE,foo WHERE CTE.a = foo.b ORDER BY 1;
               ^
-- @description test26a: CTE with CTAS
WITH CTE(c,d) as 
(
	SELECT a,b FROM foo WHERE a > 1
) SELECT CTE.c,bar.d FROM  CTE,bar where CTE.c = bar.d ORDER BY 1;
 c  | d  
----+----
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(9 rows)

                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, bar.d
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, bar.d
         Sort Key: foo.a
         ->  Sort
               Output: foo.a, bar.d
               Sort Key: foo.a
               ->  Hash Join
                     Output: foo.a, bar.d
                     Hash Cond: (bar.d = foo.a)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: bar.d
                           Hash Key: bar.d
                           ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                 Output: bar.d
                                 Filter: (bar.d > 1)
                     ->  Hash
                           Output: foo.a
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: foo.a
                                 Hash Key: foo.a
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                       Output: foo.a
                                       Filter: ((foo.a > 1) AND (foo.a > 1))
 Optimizer: PolarDB PX Optimizer
(27 rows)

CREATE TABLE newfoo as 
(
	WITH CTE(c,d) as 
	(
		SELECT a,b FROM foo WHERE a > 1
	) SELECT CTE.c,bar.d FROM  CTE,bar where CTE.c = bar.d
);
SELECT * FROM newfoo ORDER BY 1;
 c  | d  
----+----
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(9 rows)

                             QUERY PLAN                             
--------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: c, d
   Merge Key: c
   ->  Sort
         Output: c, d
         Sort Key: newfoo.c
         ->  Partial Seq Scan on qp_with_functional_inlining.newfoo
               Output: c, d
 Optimizer: PolarDB PX Optimizer
(9 rows)

DROP TABLE newfoo;
-- @description test26b: CTE with CTAS, sub-query
WITH CTE(a,b) as 
(
        SELECT a,b FROM foo WHERE a > 1
) 
SELECT SUBFOO.c,CTE.a FROM 
(SELECT CTE.a,bar.c FROM CTE,bar WHERE CTE.a = bar.c) SUBFOO,
CTE WHERE SUBFOO.c = CTE.b ORDER BY 1;
 c  | a 
----+---
  3 | 2
  4 | 3
  5 | 4
  6 | 5
  7 | 6
  8 | 7
  9 | 8
 10 | 9
(8 rows)

                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: bar.c, foo.a
   Merge Key: bar.c
   ->  Sort
         Output: bar.c, foo.a
         Sort Key: bar.c
         ->  Sort
               Output: bar.c, foo.a
               Sort Key: bar.c
               ->  Hash Join
                     Output: bar.c, foo.a
                     Hash Cond: ((foo_1.a = bar.c) AND (foo.b = bar.c))
                     ->  Hash Join
                           Output: foo_1.a, foo.a, foo.b
                           Hash Cond: (foo.b = foo_1.a)
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: foo.a, foo.b
                                 Hash Key: foo.b
                                 ->  Result
                                       Output: foo.a, foo.b
                                       Filter: (foo.b > 1)
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                             Output: foo.a, foo.b
                                             Filter: (foo.a > 1)
                           ->  Hash
                                 Output: foo_1.a
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: foo_1.a
                                       Hash Key: foo_1.a
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                             Output: foo_1.a
                                             Filter: ((foo_1.a > 1) AND (foo_1.a > 1))
                     ->  Hash
                           Output: bar.c
                           ->  PX Hash 6:6  (slice4; segments: 6)
                                 Output: bar.c
                                 Hash Key: bar.c
                                 ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                       Output: bar.c
                                       Filter: (bar.c > 1)
 Optimizer: PolarDB PX Optimizer
(41 rows)

CREATE TABLE newfoo as 
(
	WITH CTE(a,b) as 
	(
		SELECT a,b FROM foo WHERE a > 1
	) 
	SELECT SUBFOO.c,CTE.a FROM 
		(
			SELECT CTE.a,bar.c FROM CTE,bar WHERE CTE.a = bar.c
		) SUBFOO,CTE WHERE SUBFOO.c = CTE.b
);
SELECT * FROM newfoo ORDER BY 1;
 c  | a 
----+---
  3 | 2
  4 | 3
  5 | 4
  6 | 5
  7 | 6
  8 | 7
  9 | 8
 10 | 9
(8 rows)

                             QUERY PLAN                             
--------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: c, a
   Merge Key: c
   ->  Sort
         Output: c, a
         Sort Key: newfoo.c
         ->  Partial Seq Scan on qp_with_functional_inlining.newfoo
               Output: c, a
 Optimizer: PolarDB PX Optimizer
(9 rows)

DROP TABLE newfoo;
-- @description test26c: CTE with CTAS , CTE and sub-query having same name
WITH CTE(a,b) as 
(
	SELECT a,b FROM foo WHERE a > 1
) 
SELECT CTE.* FROM 
( SELECT CTE.a,bar.c FROM CTE,bar WHERE CTE.a = bar.c) CTE ORDER BY 1;
 a  | c  
----+----
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(9 rows)

                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, bar.c
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, bar.c
         Sort Key: foo.a
         ->  Sort
               Output: foo.a, bar.c
               Sort Key: foo.a
               ->  Hash Join
                     Output: foo.a, bar.c
                     Hash Cond: (foo.a = bar.c)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: foo.a
                           Hash Key: foo.a
                           ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                 Output: foo.a
                                 Filter: ((foo.a > 1) AND (foo.a > 1))
                     ->  Hash
                           Output: bar.c
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: bar.c
                                 Hash Key: bar.c
                                 ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                       Output: bar.c
                                       Filter: (bar.c > 1)
 Optimizer: PolarDB PX Optimizer
(27 rows)

CREATE TABLE newfoo as 
(
	WITH CTE(a,b) as 
	(
		SELECT a,b FROM foo WHERE a > 1
	) 
	SELECT CTE.* FROM 
		(
			SELECT CTE.a,bar.c FROM CTE,bar WHERE CTE.a = bar.c
		) CTE
);
SELECT * FROM newfoo ORDER BY 1;
 a  | c  
----+----
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(9 rows)

                             QUERY PLAN                             
--------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, c
   Merge Key: a
   ->  Sort
         Output: a, c
         Sort Key: newfoo.a
         ->  Partial Seq Scan on qp_with_functional_inlining.newfoo
               Output: a, c
 Optimizer: PolarDB PX Optimizer
(9 rows)

DROP TABLE newfoo;
-- @description test27a: DML with CTE [INSERT]
CREATE TABLE newfoo (a int, b int);
WITH CTE(c,d) as 
(
	SELECT a,b FROM foo WHERE a > 1
) SELECT CTE.c,bar.d FROM  CTE,bar where CTE.c = bar.d ORDER BY 1;
 c  | d  
----+----
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(9 rows)

                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, bar.d
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, bar.d
         Sort Key: foo.a
         ->  Sort
               Output: foo.a, bar.d
               Sort Key: foo.a
               ->  Hash Join
                     Output: foo.a, bar.d
                     Hash Cond: (bar.d = foo.a)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: bar.d
                           Hash Key: bar.d
                           ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                 Output: bar.d
                                 Filter: (bar.d > 1)
                     ->  Hash
                           Output: foo.a
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: foo.a
                                 Hash Key: foo.a
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                       Output: foo.a
                                       Filter: ((foo.a > 1) AND (foo.a > 1))
 Optimizer: PolarDB PX Optimizer
(27 rows)

INSERT INTO newfoo
(
	WITH CTE(c,d) as 
	(
		SELECT a,b FROM foo WHERE a > 1
	) SELECT CTE.c,bar.d FROM  CTE,bar where CTE.c = bar.d
);
SELECT * FROM newfoo ORDER BY 1;
 a  | b  
----+----
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(9 rows)

                             QUERY PLAN                             
--------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   Merge Key: a
   ->  Sort
         Output: a, b
         Sort Key: newfoo.a
         ->  Partial Seq Scan on qp_with_functional_inlining.newfoo
               Output: a, b
 Optimizer: PolarDB PX Optimizer
(9 rows)

DROP TABLE newfoo;
-- @description test27b: DML with CTE [INSERT with CTE and sub-query alias]
CREATE TABLE newfoo (a int, b int);
WITH CTE(a,b) as 
	(
		SELECT a,b FROM foo WHERE a > 1
	) 
SELECT SUBFOO.c,CTE.a FROM 
		(
			SELECT CTE.a,bar.c FROM CTE,bar WHERE CTE.a = bar.c
) SUBFOO,CTE  WHERE SUBFOO.c = CTE.b ORDER BY 1;
 c  | a 
----+---
  3 | 2
  4 | 3
  5 | 4
  6 | 5
  7 | 6
  8 | 7
  9 | 8
 10 | 9
(8 rows)

                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: bar.c, foo.a
   Merge Key: bar.c
   ->  Sort
         Output: bar.c, foo.a
         Sort Key: bar.c
         ->  Sort
               Output: bar.c, foo.a
               Sort Key: bar.c
               ->  Hash Join
                     Output: bar.c, foo.a
                     Hash Cond: ((foo_1.a = bar.c) AND (foo.b = bar.c))
                     ->  Hash Join
                           Output: foo_1.a, foo.a, foo.b
                           Hash Cond: (foo.b = foo_1.a)
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: foo.a, foo.b
                                 Hash Key: foo.b
                                 ->  Result
                                       Output: foo.a, foo.b
                                       Filter: (foo.b > 1)
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                             Output: foo.a, foo.b
                                             Filter: (foo.a > 1)
                           ->  Hash
                                 Output: foo_1.a
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: foo_1.a
                                       Hash Key: foo_1.a
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                             Output: foo_1.a
                                             Filter: ((foo_1.a > 1) AND (foo_1.a > 1))
                     ->  Hash
                           Output: bar.c
                           ->  PX Hash 6:6  (slice4; segments: 6)
                                 Output: bar.c
                                 Hash Key: bar.c
                                 ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                       Output: bar.c
                                       Filter: (bar.c > 1)
 Optimizer: PolarDB PX Optimizer
(41 rows)

INSERT INTO newfoo
(
	WITH CTE(a,b) as 
	(
		SELECT a,b FROM foo WHERE a > 1
	) 
SELECT SUBFOO.c,CTE.a FROM 
		(
			SELECT CTE.a,bar.c FROM CTE,bar WHERE CTE.a = bar.c
		) SUBFOO,CTE  WHERE SUBFOO.c = CTE.b
);
SELECT * FROM newfoo ORDER BY 1;
 a  | b 
----+---
  3 | 2
  4 | 3
  5 | 4
  6 | 5
  7 | 6
  8 | 7
  9 | 8
 10 | 9
(8 rows)

                             QUERY PLAN                             
--------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   Merge Key: a
   ->  Sort
         Output: a, b
         Sort Key: newfoo.a
         ->  Partial Seq Scan on qp_with_functional_inlining.newfoo
               Output: a, b
 Optimizer: PolarDB PX Optimizer
(9 rows)

DROP TABLE newfoo;
-- @description test27c: DML with CTE [INSERT with CTE and sub-query alias having common name]
CREATE TABLE newfoo (a int, b int);
WITH CTE(a,b) as 
	(
		SELECT a,b FROM foo WHERE a > 1
	) 
SELECT CTE.* FROM ( SELECT CTE.a,bar.c FROM CTE,bar WHERE CTE.a = bar.c
) CTE ORDER BY 1;
 a  | c  
----+----
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(9 rows)

                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, bar.c
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, bar.c
         Sort Key: foo.a
         ->  Sort
               Output: foo.a, bar.c
               Sort Key: foo.a
               ->  Hash Join
                     Output: foo.a, bar.c
                     Hash Cond: (foo.a = bar.c)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: foo.a
                           Hash Key: foo.a
                           ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                 Output: foo.a
                                 Filter: ((foo.a > 1) AND (foo.a > 1))
                     ->  Hash
                           Output: bar.c
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: bar.c
                                 Hash Key: bar.c
                                 ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                       Output: bar.c
                                       Filter: (bar.c > 1)
 Optimizer: PolarDB PX Optimizer
(27 rows)

INSERT INTO newfoo
(
	WITH CTE(a,b) as 
	(
		SELECT a,b FROM foo WHERE a > 1
	) 
	SELECT CTE.* FROM 
		(
			SELECT CTE.a,bar.c FROM CTE,bar WHERE CTE.a = bar.c
		) CTE
);
SELECT * FROM newfoo ORDER BY 1;
 a  | b  
----+----
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(9 rows)

                             QUERY PLAN                             
--------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   Merge Key: a
   ->  Sort
         Output: a, b
         Sort Key: newfoo.a
         ->  Partial Seq Scan on qp_with_functional_inlining.newfoo
               Output: a, b
 Optimizer: PolarDB PX Optimizer
(9 rows)

DROP TABLE newfoo;
-- @description test27g: DML with CTE [ DELETE ]
CREATE TABLE newfoo (a int, b int);
INSERT INTO newfoo SELECT i as a, i+1 as b from generate_series(1,10)i;
SELECT * FROM newfoo ORDER BY 1;
 a  | b  
----+----
  1 |  2
  2 |  3
  3 |  4
  4 |  5
  5 |  6
  6 |  7
  7 |  8
  8 |  9
  9 | 10
 10 | 11
(10 rows)

                             QUERY PLAN                             
--------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   Merge Key: a
   ->  Sort
         Output: a, b
         Sort Key: newfoo.a
         ->  Partial Seq Scan on qp_with_functional_inlining.newfoo
               Output: a, b
 Optimizer: PolarDB PX Optimizer
(9 rows)

WITH CTE(c,d) as
(
    SELECT a,b FROM foo WHERE a > 1
) 
SELECT CTE.c,bar.d FROM  CTE,bar where CTE.c = bar.d
ORDER BY 1;
 c  | d  
----+----
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(9 rows)

                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, bar.d
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, bar.d
         Sort Key: foo.a
         ->  Sort
               Output: foo.a, bar.d
               Sort Key: foo.a
               ->  Hash Join
                     Output: foo.a, bar.d
                     Hash Cond: (bar.d = foo.a)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: bar.d
                           Hash Key: bar.d
                           ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                 Output: bar.d
                                 Filter: (bar.d > 1)
                     ->  Hash
                           Output: foo.a
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: foo.a
                                 Hash Key: foo.a
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                       Output: foo.a
                                       Filter: ((foo.a > 1) AND (foo.a > 1))
 Optimizer: PolarDB PX Optimizer
(27 rows)

DELETE FROM newfoo using(
WITH CTE(c,d) as
	(
	SELECT a,b FROM foo WHERE a > 1
	) 
	SELECT CTE.c,bar.d FROM  CTE,bar where CTE.c = bar.d
)sub;
SELECT * FROM newfoo;
 a | b 
---+---
(0 rows)

                          QUERY PLAN                          
--------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   ->  Partial Seq Scan on qp_with_functional_inlining.newfoo
         Output: a, b
 Optimizer: PolarDB PX Optimizer
(5 rows)

DROP TABLE newfoo;
-- @description test27h: DML with CTE [ DELETE with CTE and sub-query alias]
CREATE TABLE newfoo (a int, b int);
INSERT INTO newfoo SELECT i as a, i+1 as b from generate_series(1,10)i;
SELECT * FROM newfoo ORDER BY 1;
 a  | b  
----+----
  1 |  2
  2 |  3
  3 |  4
  4 |  5
  5 |  6
  6 |  7
  7 |  8
  8 |  9
  9 | 10
 10 | 11
(10 rows)

                             QUERY PLAN                             
--------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   Merge Key: a
   ->  Sort
         Output: a, b
         Sort Key: newfoo.a
         ->  Partial Seq Scan on qp_with_functional_inlining.newfoo
               Output: a, b
 Optimizer: PolarDB PX Optimizer
(9 rows)

WITH CTE(a,b) as 
(
    SELECT a,b FROM foo WHERE a > 1
) 
	SELECT SUBFOO.c,CTE.a FROM 
( SELECT CTE.a,bar.c FROM CTE,bar WHERE CTE.a = bar.c
) SUBFOO,CTE  WHERE SUBFOO.c = CTE.b ORDER BY 1;
 c  | a 
----+---
  3 | 2
  4 | 3
  5 | 4
  6 | 5
  7 | 6
  8 | 7
  9 | 8
 10 | 9
(8 rows)

                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: bar.c, foo.a
   Merge Key: bar.c
   ->  Sort
         Output: bar.c, foo.a
         Sort Key: bar.c
         ->  Sort
               Output: bar.c, foo.a
               Sort Key: bar.c
               ->  Hash Join
                     Output: bar.c, foo.a
                     Hash Cond: ((foo_1.a = bar.c) AND (foo.b = bar.c))
                     ->  Hash Join
                           Output: foo_1.a, foo.a, foo.b
                           Hash Cond: (foo.b = foo_1.a)
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: foo.a, foo.b
                                 Hash Key: foo.b
                                 ->  Result
                                       Output: foo.a, foo.b
                                       Filter: (foo.b > 1)
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                             Output: foo.a, foo.b
                                             Filter: (foo.a > 1)
                           ->  Hash
                                 Output: foo_1.a
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: foo_1.a
                                       Hash Key: foo_1.a
                                       ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                             Output: foo_1.a
                                             Filter: ((foo_1.a > 1) AND (foo_1.a > 1))
                     ->  Hash
                           Output: bar.c
                           ->  PX Hash 6:6  (slice4; segments: 6)
                                 Output: bar.c
                                 Hash Key: bar.c
                                 ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                       Output: bar.c
                                       Filter: (bar.c > 1)
 Optimizer: PolarDB PX Optimizer
(41 rows)

DELETE FROM newfoo using(
	WITH CTE(a,b) as 
	(
		SELECT a,b FROM foo WHERE a > 1
	) 
	SELECT SUBFOO.c,CTE.a FROM 
		(
			SELECT CTE.a,bar.c FROM CTE,bar WHERE CTE.a = bar.c
		) SUBFOO,CTE  WHERE SUBFOO.c = CTE.b
)sub;
SELECT * FROM newfoo;
 a | b 
---+---
(0 rows)

                          QUERY PLAN                          
--------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   ->  Partial Seq Scan on qp_with_functional_inlining.newfoo
         Output: a, b
 Optimizer: PolarDB PX Optimizer
(5 rows)

DROP TABLE newfoo;
-- @description test27i: DML with CTE [ DELETE with CTE and sub-query alias having common name]
CREATE TABLE newfoo (a int, b int);
INSERT INTO newfoo SELECT i as a, i+1 as b from generate_series(1,10)i;
SELECT * FROM newfoo ORDER BY 1;
 a  | b  
----+----
  1 |  2
  2 |  3
  3 |  4
  4 |  5
  5 |  6
  6 |  7
  7 |  8
  8 |  9
  9 | 10
 10 | 11
(10 rows)

                             QUERY PLAN                             
--------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   Merge Key: a
   ->  Sort
         Output: a, b
         Sort Key: newfoo.a
         ->  Partial Seq Scan on qp_with_functional_inlining.newfoo
               Output: a, b
 Optimizer: PolarDB PX Optimizer
(9 rows)

WITH CTE(a,b) as 
(
	SELECT a,b FROM foo WHERE a > 1
) 
SELECT CTE.* FROM 
( SELECT CTE.a,bar.c FROM CTE,bar WHERE CTE.a = bar.c
) CTE ORDER BY 1;
 a  | c  
----+----
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(9 rows)

                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, bar.c
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, bar.c
         Sort Key: foo.a
         ->  Sort
               Output: foo.a, bar.c
               Sort Key: foo.a
               ->  Hash Join
                     Output: foo.a, bar.c
                     Hash Cond: (foo.a = bar.c)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: foo.a
                           Hash Key: foo.a
                           ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                 Output: foo.a
                                 Filter: ((foo.a > 1) AND (foo.a > 1))
                     ->  Hash
                           Output: bar.c
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: bar.c
                                 Hash Key: bar.c
                                 ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                       Output: bar.c
                                       Filter: (bar.c > 1)
 Optimizer: PolarDB PX Optimizer
(27 rows)

DELETE FROM newfoo using(
	WITH CTE(a,b) as 
	(
		SELECT a,b FROM foo WHERE a > 1
	) 
	SELECT CTE.* FROM 
		(
	SELECT CTE.a,bar.c FROM CTE,bar WHERE CTE.a = bar.c
		) CTE
) sub;
SELECT * FROM newfoo;
 a | b 
---+---
(0 rows)

                          QUERY PLAN                          
--------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: a, b
   ->  Partial Seq Scan on qp_with_functional_inlining.newfoo
         Output: a, b
 Optimizer: PolarDB PX Optimizer
(5 rows)

DROP TABLE newfoo;
-- @description test28a: CTE with AO/CO tables
-- FIXME: This deadlocks with gp_cte_sharing=on, so disable that temporarily.
-- See https://github.com/greenplum-db/gpdb/issues/1967
begin;
set local gp_cte_sharing=off;
psql:sql/polar-px-dev/qp_with_functional.sql:788: ERROR:  unrecognized configuration parameter "gp_cte_sharing"
WITH v AS (SELECT a, b FROM foo_ao WHERE b < 5),
     w AS (SELECT c, d FROM bar_co WHERE c < 9)
SELECT v1.a, w1.c, w2.d
FROM v AS v1, v as v2, w AS w1, w AS w2
WHERE v1.a = v2.b
AND v1.a = w1.c
AND v1.b = w2.d ORDER BY 1;
psql:sql/polar-px-dev/qp_with_functional.sql:795: ERROR:  current transaction is aborted, commands ignored until end of transaction block
rollback;
-- @description test28b: CTE with AO/CO tables[ Multiple CTE with dependency]
WITH v AS (SELECT a, b FROM foo_ao WHERE b < 5),
     w AS (SELECT * FROM v WHERE a < 2)
SELECT w.a, bar_co.d 
FROM w,bar_co
WHERE w.a = bar_co.c ORDER BY 1;
psql:sql/polar-px-dev/qp_with_functional.sql:803: ERROR:  relation "foo_ao" does not exist
LINE 1: WITH v AS (SELECT a, b FROM foo_ao WHERE b < 5),
                                    ^
DROP TABLE IF EXISTS v;
psql:sql/polar-px-dev/qp_with_functional.sql:805: NOTICE:  table "v" does not exist, skipping
-- @description test29: Negative Test - Forward Reference
WITH v AS (SELECT c, d FROM bar, v WHERE c = v.a AND c < 2) SELECT v1.c, v1.d FROM v v1, v v2 WHERE v1.c = v2.c AND v1.d > 7;
psql:sql/polar-px-dev/qp_with_functional.sql:808: ERROR:  relation "v" does not exist
LINE 1: WITH v AS (SELECT c, d FROM bar, v WHERE c = v.a AND c < 2) ...
                                         ^
DETAIL:  There is a WITH item named "v", but it cannot be referenced from this part of the query.
HINT:  Use WITH RECURSIVE, or re-order the WITH items to remove forward references.
-- @description test8a: CTE defined in the HAVING clause
WITH w AS (SELECT a, b from foo where b < 5)
SELECT a, sum(b) FROM foo WHERE b > 1 GROUP BY a HAVING sum(b) < (SELECT d FROM bar, w WHERE c = w.a AND c > 2) ORDER BY 1;
 a | sum 
---+-----
 1 |   2
 2 |   3
(2 rows)

                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: foo.a, (sum(foo.b))
   Merge Key: foo.a
   ->  Sort
         Output: foo.a, (sum(foo.b))
         Sort Key: foo.a
         ->  Result
               Output: foo.a, (sum(foo.b))
               Filter: ((sum(foo.b)) < (SubPlan 1))
               ->  GroupAggregate
                     Output: foo.a, sum(foo.b), sum(foo.b)
                     Group Key: foo.a
                     ->  Sort
                           Output: foo.a, foo.b
                           Sort Key: foo.a
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: foo.a, foo.b
                                 Hash Key: foo.a
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                       Output: foo.a, foo.b
                                       Filter: (foo.b > 1)
               SubPlan 1
                 ->  Materialize
                       Output: bar.d
                       ->  PX Broadcast 6:6  (slice3; segments: 6)
                             Output: bar.d
                             ->  Hash Join
                                   Output: bar.d
                                   Hash Cond: (bar.c = foo_1.a)
                                   ->  PX Hash 6:6  (slice4; segments: 6)
                                         Output: bar.c, bar.d
                                         Hash Key: bar.c
                                         ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                               Output: bar.c, bar.d
                                               Filter: (bar.c > 2)
                                   ->  Hash
                                         Output: foo_1.a
                                         ->  PX Hash 6:6  (slice5; segments: 6)
                                               Output: foo_1.a
                                               Hash Key: foo_1.a
                                               ->  Result
                                                     Output: foo_1.a
                                                     Filter: (foo_1.a > 2)
                                                     ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                                           Output: foo_1.a
                                                           Filter: (foo_1.b < 5)
 Optimizer: PolarDB PX Optimizer
(47 rows)

-- @description MPP-15087: Executor: Nested loops in subquery scan for a CTE returns incorrect results
set enable_nestloop=on;
set enable_hashjoin=off;
set enable_mergejoin=off;
create table testtab(code char(3), n numeric);
insert into testtab values ('abc',1);
insert into testtab values ('xyz',2);
insert into testtab values ('def',3);
with cte as (
  select code, n, x 
  from testtab, (select 100 as x) d
)
select code from testtab t where 1= (select count(*) from cte where cte.code::text=t.code::text or cte.code::text = t.code::text);
 code 
------
 abc
 xyz
 def
(3 rows)

                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: testtab.code
   ->  Result
         Output: testtab.code
         Filter: (1 = COALESCE((count()), '0'::bigint))
         ->  Hash Left Join
               Output: (count()), testtab.code
               Hash Cond: ((testtab.code)::text = (testtab_1.code)::text)
               ->  PX Hash 6:6  (slice2; segments: 6)
                     Output: testtab.code
                     Hash Key: (testtab.code)::text
                     ->  Partial Seq Scan on qp_with_functional_inlining.testtab
                           Output: testtab.code
               ->  Hash
                     Output: testtab_1.code, (count())
                     ->  PX Hash 6:6  (slice3; segments: 6)
                           Output: testtab_1.code, (count())
                           Hash Key: (testtab_1.code)::text
                           ->  GroupAggregate
                                 Output: testtab_1.code, count()
                                 Group Key: testtab_1.code
                                 ->  Sort
                                       Output: testtab_1.code
                                       Sort Key: testtab_1.code
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: testtab_1.code
                                             Hash Key: testtab_1.code
                                             ->  Nested Loop
                                                   Output: testtab_1.code
                                                   Join Filter: true
                                                   ->  Partial Seq Scan on qp_with_functional_inlining.testtab testtab_1
                                                         Output: testtab_1.code
                                                   ->  Result
                                                         Output: 100
 Optimizer: PolarDB PX Optimizer
(35 rows)

with cte as (
  select count(*) from (
    select code, n, x
    from testtab, (select 100 as x) d
  ) FOO
)
select code from testtab t where 1= (select * from cte);
 code 
------
(0 rows)

                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: testtab_1.code
   ->  Nested Loop
         Output: testtab_1.code
         Join Filter: true
         ->  Partial Seq Scan on qp_with_functional_inlining.testtab testtab_1
               Output: testtab_1.code
         ->  Materialize
               ->  PX Broadcast 1:6  (slice2)
                     ->  Result
                           Filter: (1 = (count()))
                           ->  Aggregate
                                 Output: count()
                                 ->  PX Coordinator 6:1  (slice3; segments: 6)
                                       ->  Nested Loop
                                             Join Filter: true
                                             ->  Partial Seq Scan on qp_with_functional_inlining.testtab
                                             ->  Result
                                                   Output: true
 Optimizer: PolarDB PX Optimizer
(20 rows)

with cte as (
  select count(*) from (
    select code, n, x
    from testtab, (select 100 as x) d
  ) FOO
)
select code from testtab t where 1= (select count(*) from cte);
 code 
------
 abc
 xyz
 def
(3 rows)

                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: testtab_1.code
   ->  Nested Loop
         Output: testtab_1.code
         Join Filter: true
         ->  Partial Seq Scan on qp_with_functional_inlining.testtab testtab_1
               Output: testtab_1.code
         ->  Materialize
               ->  PX Broadcast 1:6  (slice2)
                     ->  Result
                           Filter: (1 = (count()))
                           ->  Aggregate
                                 Output: count()
                                 ->  Aggregate
                                       Output: count()
                                       ->  PX Coordinator 6:1  (slice3; segments: 6)
                                             ->  Nested Loop
                                                   Join Filter: true
                                                   ->  Partial Seq Scan on qp_with_functional_inlining.testtab
                                                   ->  Result
                                                         Output: true
 Optimizer: PolarDB PX Optimizer
(22 rows)

reset enable_nestloop;
reset enable_hashjoin;
reset enable_mergejoin;
-- @description MPP-19271: Unexpected internal error when we issue CTE with CSQ when we disable inlining of CTE
WITH cte AS (
    SELECT code, n, x from testtab t , (SELECT 100 as x) d ) 
SELECT code FROM testtab t WHERE (
    SELECT count(*) FROM cte WHERE cte.code::text=t.code::text
) = 1 ORDER BY 1;
 code 
------
 abc
 def
 xyz
(3 rows)

                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: testtab.code
   Merge Key: testtab.code
   ->  Sort
         Output: testtab.code
         Sort Key: testtab.code
         ->  Sort
               Output: testtab.code
               Sort Key: testtab.code
               ->  Result
                     Output: testtab.code
                     Filter: (COALESCE((count()), '0'::bigint) = 1)
                     ->  Hash Left Join
                           Output: (count()), testtab.code
                           Hash Cond: ((testtab.code)::text = (testtab_1.code)::text)
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: testtab.code
                                 Hash Key: (testtab.code)::text
                                 ->  Partial Seq Scan on qp_with_functional_inlining.testtab
                                       Output: testtab.code
                           ->  Hash
                                 Output: testtab_1.code, (count())
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: testtab_1.code, (count())
                                       Hash Key: (testtab_1.code)::text
                                       ->  GroupAggregate
                                             Output: testtab_1.code, count()
                                             Group Key: testtab_1.code
                                             ->  Sort
                                                   Output: testtab_1.code
                                                   Sort Key: testtab_1.code
                                                   ->  PX Hash 6:6  (slice4; segments: 6)
                                                         Output: testtab_1.code
                                                         Hash Key: testtab_1.code
                                                         ->  Nested Loop
                                                               Output: testtab_1.code
                                                               Join Filter: true
                                                               ->  Partial Seq Scan on qp_with_functional_inlining.testtab testtab_1
                                                                     Output: testtab_1.code
                                                               ->  Result
                                                                     Output: 100
 Optimizer: PolarDB PX Optimizer
(42 rows)

-- @description MPP-19436
WITH t AS (
 SELECT e.*,f.*
 FROM (SELECT * FROM foo WHERE a < 10) e
 LEFT OUTER JOIN (SELECT * FROM bar WHERE c < 10) f ON e.a = f.d ) 
SELECT t.a,t.d, count(*) over () AS window
FROM t 
GROUP BY t.a,t.d ORDER BY t.a,t.d LIMIT 2;
 a | d | window 
---+---+--------
 1 |   |      9
 2 | 2 |      9
(2 rows)

                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Sort
   Output: foo.a, bar.d, (count(*) OVER (?))
   Sort Key: foo.a, bar.d
   ->  Limit
         Output: foo.a, bar.d, (count(*) OVER (?))
         ->  Sort
               Output: foo.a, bar.d, (count(*) OVER (?))
               Sort Key: foo.a, bar.d
               ->  WindowAgg
                     Output: foo.a, bar.d, count(*) OVER (?)
                     ->  PX Coordinator 6:1  (slice1; segments: 6)
                           Output: foo.a, bar.d
                           ->  GroupAggregate
                                 Output: foo.a, bar.d
                                 Group Key: foo.a, bar.d
                                 ->  Sort
                                       Output: foo.a, bar.d
                                       Sort Key: foo.a, bar.d
                                       ->  Hash Left Join
                                             Output: foo.a, bar.d
                                             Hash Cond: (foo.a = bar.d)
                                             ->  PX Hash 6:6  (slice2; segments: 6)
                                                   Output: foo.a
                                                   Hash Key: foo.a
                                                   ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                                         Output: foo.a
                                                         Filter: (foo.a < 10)
                                             ->  Hash
                                                   Output: bar.d
                                                   ->  PX Hash 6:6  (slice3; segments: 6)
                                                         Output: bar.d
                                                         Hash Key: bar.d
                                                         ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                                               Output: bar.d
                                                               Filter: ((bar.c < 10) AND (bar.d < 10))
 Optimizer: PolarDB PX Optimizer
(36 rows)

WITH t(a,b,d) AS (
  SELECT foo.a,foo.b,bar.d FROM foo,bar WHERE foo.a = bar.d
)
SELECT t.b,avg(t.a), rank() OVER (PARTITION BY t.a ORDER BY t.a) FROM foo,t GROUP BY foo.a,foo.b,t.b,t.a ORDER BY 1,2,3 LIMIT 5;
 b |        avg         | rank 
---+--------------------+------
 3 | 2.0000000000000000 |    1
 3 | 2.0000000000000000 |    1
 3 | 2.0000000000000000 |    1
 3 | 2.0000000000000000 |    1
 3 | 2.0000000000000000 |    1
(5 rows)

                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: foo_1.b, (avg(foo_1.a)), (rank() OVER (?))
   Sort Key: foo_1.b, (avg(foo_1.a)), (rank() OVER (?))
   ->  Limit
         Output: foo_1.b, (avg(foo_1.a)), (rank() OVER (?))
         ->  PX Coordinator 6:1  (slice1; segments: 6)
               Output: foo_1.b, (avg(foo_1.a)), (rank() OVER (?))
               Merge Key: foo_1.b, (avg(foo_1.a)), (rank() OVER (?))
               ->  Limit
                     Output: foo_1.b, (avg(foo_1.a)), (rank() OVER (?))
                     ->  Result
                           Output: foo_1.b, (avg(foo_1.a)), (rank() OVER (?))
                           ->  Sort
                                 Output: foo_1.b, (avg(foo_1.a)), (rank() OVER (?)), foo_1.a
                                 Sort Key: foo_1.b, (avg(foo_1.a)), (rank() OVER (?))
                                 ->  WindowAgg
                                       Output: foo_1.b, (avg(foo_1.a)), rank() OVER (?), foo_1.a
                                       ->  Sort
                                             Output: foo_1.a, foo_1.b, (avg(foo_1.a))
                                             Sort Key: foo_1.a, foo_1.a
                                             ->  PX Hash 6:6  (slice2; segments: 6)
                                                   Output: foo_1.a, foo_1.b, (avg(foo_1.a))
                                                   Hash Key: foo_1.a
                                                   ->  GroupAggregate
                                                         Output: foo_1.a, foo_1.b, avg(foo_1.a)
                                                         Group Key: foo.a, foo.b, foo_1.b, foo_1.a
                                                         ->  Sort
                                                               Output: foo.a, foo.b, foo_1.a, foo_1.b
                                                               Sort Key: foo.a, foo.b, foo_1.b, foo_1.a
                                                               ->  PX Hash 6:6  (slice3; segments: 6)
                                                                     Output: foo.a, foo.b, foo_1.a, foo_1.b
                                                                     Hash Key: foo.a, foo.b, foo_1.b, foo_1.a
                                                                     ->  Nested Loop
                                                                           Output: foo.a, foo.b, foo_1.a, foo_1.b
                                                                           Join Filter: true
                                                                           ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                                                 Output: foo_1.a, foo_1.b
                                                                                 ->  Hash Join
                                                                                       Output: foo_1.a, foo_1.b
                                                                                       Hash Cond: ((foo_1.a = bar.d) AND (foo_1.a = bar.d))
                                                                                       ->  PX Hash 6:6  (slice5; segments: 6)
                                                                                             Output: foo_1.a, foo_1.b
                                                                                             Hash Key: foo_1.a
                                                                                             ->  Partial Seq Scan on qp_with_functional_inlining.foo foo_1
                                                                                                   Output: foo_1.a, foo_1.b
                                                                                       ->  Hash
                                                                                             Output: bar.d
                                                                                             ->  PX Hash 6:6  (slice6; segments: 6)
                                                                                                   Output: bar.d
                                                                                                   Hash Key: bar.d
                                                                                                   ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                                                                                         Output: bar.d
                                                                           ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                                                                 Output: foo.a, foo.b
 Optimizer: PolarDB PX Optimizer
(55 rows)

WITH t(a,b,d) AS (
  SELECT foo.a,foo.b,bar.d FROM foo,bar WHERE foo.a = bar.d
)
SELECT cup.*, SUM(t.d) OVER(PARTITION BY t.b)
FROM (
  SELECT bar.*, AVG(t.b) OVER(PARTITION BY t.a ORDER BY t.b desc) AS e FROM t,bar
) AS cup, t
WHERE cup.e < 10
GROUP BY cup.c,cup.d, cup.e ,t.d, t.b
ORDER BY 1,2,3,4
LIMIT 10;
 c | d |         e          | sum 
---+---+--------------------+-----
 1 | 2 | 3.0000000000000000 | 140
 1 | 2 | 3.0000000000000000 | 210
 1 | 2 | 3.0000000000000000 | 280
 1 | 2 | 3.0000000000000000 | 350
 1 | 2 | 3.0000000000000000 | 420
 1 | 2 | 3.0000000000000000 | 490
 1 | 2 | 3.0000000000000000 | 560
 1 | 2 | 3.0000000000000000 | 630
 1 | 2 | 3.0000000000000000 | 700
 1 | 2 | 4.0000000000000000 | 140
(10 rows)

                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), (sum(share0_ref2.d) OVER (?))
   Merge Key: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), (sum(share0_ref2.d) OVER (?))
   ->  Sort
         Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), (sum(share0_ref2.d) OVER (?))
         Sort Key: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), (sum(share0_ref2.d) OVER (?))
         ->  Sequence
               Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), (sum(share0_ref2.d) OVER (?))
               ->  Shared Scan (Producer; slice1; share0)
                     Output: share0_ref1.a, share0_ref1.b, share0_ref1.d
                     ->  Hash Join
                           Output: foo.a, foo.b, bar.d
                           Hash Cond: (foo.a = bar.d)
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: foo.a, foo.b
                                 Hash Key: foo.a
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                       Output: foo.a, foo.b
                           ->  Hash
                                 Output: bar.d
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: bar.d
                                       Hash Key: bar.d
                                       ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                             Output: bar.d
               ->  PX Hash 1:6  (slice4)
                     Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), (sum(share0_ref2.d) OVER (?))
                     ->  Limit
                           Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), (sum(share0_ref2.d) OVER (?))
                           ->  PX Coordinator 6:1  (slice5; segments: 6)
                                 Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), (sum(share0_ref2.d) OVER (?))
                                 Merge Key: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), (sum(share0_ref2.d) OVER (?))
                                 ->  Limit
                                       Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), (sum(share0_ref2.d) OVER (?))
                                       ->  Result
                                             Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), (sum(share0_ref2.d) OVER (?))
                                             ->  Sort
                                                   Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), (sum(share0_ref2.d) OVER (?)), share0_ref2.b
                                                   Sort Key: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), (sum(share0_ref2.d) OVER (?))
                                                   ->  WindowAgg
                                                         Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), sum(share0_ref2.d) OVER (?), share0_ref2.b
                                                         ->  Sort
                                                               Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), share0_ref2.b, share0_ref2.d
                                                               Sort Key: share0_ref2.b
                                                               ->  PX Hash 6:6  (slice6; segments: 6)
                                                                     Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), share0_ref2.b, share0_ref2.d
                                                                     Hash Key: share0_ref2.b
                                                                     ->  HashAggregate
                                                                           Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), share0_ref2.b, share0_ref2.d
                                                                           Group Key: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), share0_ref2.d, share0_ref2.b
                                                                           ->  PX Hash 6:6  (slice7; segments: 6)
                                                                                 Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), share0_ref2.b, share0_ref2.d
                                                                                 Hash Key: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), share0_ref2.d, share0_ref2.b
                                                                                 ->  Nested Loop
                                                                                       Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?)), share0_ref2.b, share0_ref2.d
                                                                                       Join Filter: true
                                                                                       ->  Result
                                                                                             Output: bar_1.c, bar_1.d, (avg(share0_ref3.b) OVER (?))
                                                                                             Filter: ((avg(share0_ref3.b) OVER (?)) < '10'::numeric)
                                                                                             ->  WindowAgg
                                                                                                   Output: avg(share0_ref3.b) OVER (?), share0_ref3.a, share0_ref3.b, bar_1.c, bar_1.d
                                                                                                   ->  Sort
                                                                                                         Output: share0_ref3.a, share0_ref3.b, bar_1.c, bar_1.d
                                                                                                         Sort Key: share0_ref3.a, share0_ref3.b DESC
                                                                                                         ->  PX Hash 6:6  (slice9; segments: 6)
                                                                                                               Output: share0_ref3.a, share0_ref3.b, bar_1.c, bar_1.d
                                                                                                               Hash Key: share0_ref3.a
                                                                                                               ->  Nested Loop
                                                                                                                     Output: share0_ref3.a, share0_ref3.b, bar_1.c, bar_1.d
                                                                                                                     Join Filter: true
                                                                                                                     ->  PX Broadcast 6:6  (slice10; segments: 6)
                                                                                                                           Output: share0_ref3.a, share0_ref3.b
                                                                                                                           ->  Result
                                                                                                                                 Output: share0_ref3.a, share0_ref3.b
                                                                                                                                 Filter: (share0_ref3.a = share0_ref3.d)
                                                                                                                                 ->  Shared Scan (Consumer; slice10; share0)
                                                                                                                                       Output: share0_ref3.a, share0_ref3.b, share0_ref3.d
                                                                                                                     ->  Partial Seq Scan on qp_with_functional_inlining.bar bar_1
                                                                                                                           Output: bar_1.c, bar_1.d
                                                                                       ->  Materialize
                                                                                             Output: share0_ref2.b, share0_ref2.d
                                                                                             ->  PX Broadcast 6:6  (slice8; segments: 6)
                                                                                                   Output: share0_ref2.b, share0_ref2.d
                                                                                                   ->  Result
                                                                                                         Output: share0_ref2.b, share0_ref2.d
                                                                                                         Filter: (share0_ref2.a = share0_ref2.d)
                                                                                                         ->  Shared Scan (Consumer; slice8; share0)
                                                                                                               Output: share0_ref2.a, share0_ref2.b, share0_ref2.d
 Optimizer: PolarDB PX Optimizer
(89 rows)

WITH t(a,b,d) AS (
  SELECT foo.a,foo.b,bar.d FROM foo,bar WHERE foo.a = bar.d
)
SELECT cup.*, SUM(t.d) FROM ( 
  SELECT bar.*, count(*) OVER() AS e FROM t,bar WHERE t.a = bar.c
) AS cup, t
GROUP BY cup.c,cup.d, cup.e,t.a
HAVING AVG(t.d) < 10 ORDER BY 1,2,3,4 LIMIT 10;
 c | d | e | sum 
---+---+---+-----
 2 | 3 | 9 |   2
 2 | 3 | 9 |   3
 2 | 3 | 9 |   4
 2 | 3 | 9 |   5
 2 | 3 | 9 |   6
 2 | 3 | 9 |   7
 2 | 3 | 9 |   8
 2 | 3 | 9 |   9
 3 | 4 | 9 |   2
 3 | 4 | 9 |   3
(10 rows)

                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: bar_1.c, bar_1.d, (count(*) OVER (?)), (sum(share0_ref3.d))
   Merge Key: bar_1.c, bar_1.d, (count(*) OVER (?)), (sum(share0_ref3.d))
   ->  Sort
         Output: bar_1.c, bar_1.d, (count(*) OVER (?)), (sum(share0_ref3.d))
         Sort Key: bar_1.c, bar_1.d, (count(*) OVER (?)), (sum(share0_ref3.d))
         ->  Sequence
               Output: bar_1.c, bar_1.d, (count(*) OVER (?)), (sum(share0_ref3.d))
               ->  Shared Scan (Producer; slice1; share0)
                     Output: share0_ref1.a, share0_ref1.b, share0_ref1.d
                     ->  Hash Join
                           Output: foo.a, foo.b, bar.d
                           Hash Cond: (foo.a = bar.d)
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: foo.a, foo.b
                                 Hash Key: foo.a
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                       Output: foo.a, foo.b
                           ->  Hash
                                 Output: bar.d
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: bar.d
                                       Hash Key: bar.d
                                       ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                             Output: bar.d
               ->  PX Hash 1:6  (slice4)
                     Output: bar_1.c, bar_1.d, (count(*) OVER (?)), (sum(share0_ref3.d))
                     ->  Limit
                           Output: bar_1.c, bar_1.d, (count(*) OVER (?)), (sum(share0_ref3.d))
                           ->  PX Coordinator 6:1  (slice5; segments: 6)
                                 Output: bar_1.c, bar_1.d, (count(*) OVER (?)), (sum(share0_ref3.d))
                                 Merge Key: bar_1.c, bar_1.d, (count(*) OVER (?)), (sum(share0_ref3.d))
                                 ->  Limit
                                       Output: bar_1.c, bar_1.d, (count(*) OVER (?)), (sum(share0_ref3.d))
                                       ->  Sort
                                             Output: bar_1.c, bar_1.d, (count(*) OVER (?)), (sum(share0_ref3.d))
                                             Sort Key: bar_1.c, bar_1.d, (count(*) OVER (?)), (sum(share0_ref3.d))
                                             ->  Result
                                                   Output: bar_1.c, bar_1.d, (count(*) OVER (?)), (sum(share0_ref3.d))
                                                   Filter: ((avg(share0_ref3.d)) < '10'::numeric)
                                                   ->  HashAggregate
                                                         Output: sum(share0_ref3.d), avg(share0_ref3.d), bar_1.c, bar_1.d, (count(*) OVER (?)), share0_ref3.a
                                                         Group Key: bar_1.c, bar_1.d, (count(*) OVER (?)), share0_ref3.a
                                                         ->  PX Hash 6:6  (slice6; segments: 6)
                                                               Output: bar_1.c, bar_1.d, (count(*) OVER (?)), share0_ref3.a, share0_ref3.d
                                                               Hash Key: bar_1.c, bar_1.d, (count(*) OVER (?)), share0_ref3.a
                                                               ->  Nested Loop
                                                                     Output: bar_1.c, bar_1.d, (count(*) OVER (?)), share0_ref3.a, share0_ref3.d
                                                                     Join Filter: true
                                                                     ->  PX Broadcast 6:6  (slice10; segments: 6)
                                                                           Output: share0_ref3.a, share0_ref3.d
                                                                           ->  Result
                                                                                 Output: share0_ref3.a, share0_ref3.d
                                                                                 Filter: (share0_ref3.a = share0_ref3.d)
                                                                                 ->  Shared Scan (Consumer; slice10; share0)
                                                                                       Output: share0_ref3.a, share0_ref3.b, share0_ref3.d
                                                                     ->  Materialize
                                                                           Output: bar_1.c, bar_1.d, (count(*) OVER (?))
                                                                           ->  PX Hash 1:6  (slice7)
                                                                                 Output: bar_1.c, bar_1.d, (count(*) OVER (?))
                                                                                 ->  WindowAgg
                                                                                       Output: bar_1.c, bar_1.d, count(*) OVER (?)
                                                                                       ->  PX Coordinator 6:1  (slice8; segments: 6)
                                                                                             Output: bar_1.c, bar_1.d
                                                                                             ->  Hash Join
                                                                                                   Output: bar_1.c, bar_1.d
                                                                                                   Hash Cond: ((share0_ref2.a = bar_1.c) AND (share0_ref2.d = bar_1.c))
                                                                                                   ->  Result
                                                                                                         Output: share0_ref2.a, share0_ref2.d
                                                                                                         Filter: (share0_ref2.a = share0_ref2.d)
                                                                                                         ->  Shared Scan (Consumer; slice8; share0)
                                                                                                               Output: share0_ref2.a, share0_ref2.b, share0_ref2.d
                                                                                                   ->  Hash
                                                                                                         Output: bar_1.c, bar_1.d
                                                                                                         ->  PX Hash 6:6  (slice9; segments: 6)
                                                                                                               Output: bar_1.c, bar_1.d
                                                                                                               Hash Key: bar_1.c
                                                                                                               ->  Partial Seq Scan on qp_with_functional_inlining.bar bar_1
                                                                                                                     Output: bar_1.c, bar_1.d
 Optimizer: PolarDB PX Optimizer
(80 rows)

WITH t(a,b,d) AS (
  SELECT foo.a,foo.b,bar.d FROM foo,bar WHERE foo.a = bar.d
)
SELECT cup.*, SUM(t.d) OVER(PARTITION BY t.b) FROM ( 
  SELECT bar.c as e,r.d
  FROM (
    SELECT t.d, avg(t.a) over() FROM t
  ) r, bar
) AS cup,
t WHERE cup.e < 10
GROUP BY cup.d, cup.e, t.d, t.b
ORDER BY 1,2,3 
LIMIT 10;
 e | d | sum 
---+---+-----
 1 | 2 | 162
 1 | 2 | 243
 1 | 2 | 324
 1 | 2 | 405
 1 | 2 | 486
 1 | 2 | 567
 1 | 2 | 648
 1 | 2 | 729
 1 | 2 | 810
 1 | 3 | 162
(10 rows)

                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: bar_1.c, share0_ref3.d, (sum(share0_ref2.d) OVER (?))
   Merge Key: bar_1.c, share0_ref3.d, (sum(share0_ref2.d) OVER (?))
   ->  Sort
         Output: bar_1.c, share0_ref3.d, (sum(share0_ref2.d) OVER (?))
         Sort Key: bar_1.c, share0_ref3.d, (sum(share0_ref2.d) OVER (?))
         ->  Sequence
               Output: bar_1.c, share0_ref3.d, (sum(share0_ref2.d) OVER (?))
               ->  Shared Scan (Producer; slice1; share0)
                     Output: share0_ref1.a, share0_ref1.b, share0_ref1.d
                     ->  Hash Join
                           Output: foo.a, foo.b, bar.d
                           Hash Cond: (foo.a = bar.d)
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: foo.a, foo.b
                                 Hash Key: foo.a
                                 ->  Partial Seq Scan on qp_with_functional_inlining.foo
                                       Output: foo.a, foo.b
                           ->  Hash
                                 Output: bar.d
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: bar.d
                                       Hash Key: bar.d
                                       ->  Partial Seq Scan on qp_with_functional_inlining.bar
                                             Output: bar.d
               ->  PX Hash 1:6  (slice4)
                     Output: bar_1.c, share0_ref3.d, (sum(share0_ref2.d) OVER (?))
                     ->  Limit
                           Output: bar_1.c, share0_ref3.d, (sum(share0_ref2.d) OVER (?))
                           ->  PX Coordinator 6:1  (slice5; segments: 6)
                                 Output: bar_1.c, share0_ref3.d, (sum(share0_ref2.d) OVER (?))
                                 Merge Key: bar_1.c, share0_ref3.d, (sum(share0_ref2.d) OVER (?))
                                 ->  Limit
                                       Output: bar_1.c, share0_ref3.d, (sum(share0_ref2.d) OVER (?))
                                       ->  Result
                                             Output: bar_1.c, share0_ref3.d, (sum(share0_ref2.d) OVER (?))
                                             ->  Sort
                                                   Output: bar_1.c, share0_ref3.d, (sum(share0_ref2.d) OVER (?)), share0_ref2.b
                                                   Sort Key: bar_1.c, share0_ref3.d, (sum(share0_ref2.d) OVER (?))
                                                   ->  WindowAgg
                                                         Output: bar_1.c, share0_ref3.d, sum(share0_ref2.d) OVER (?), share0_ref2.b
                                                         ->  Sort
                                                               Output: share0_ref3.d, bar_1.c, share0_ref2.b, share0_ref2.d
                                                               Sort Key: share0_ref2.b
                                                               ->  PX Hash 6:6  (slice6; segments: 6)
                                                                     Output: share0_ref3.d, bar_1.c, share0_ref2.b, share0_ref2.d
                                                                     Hash Key: share0_ref2.b
                                                                     ->  HashAggregate
                                                                           Output: share0_ref3.d, bar_1.c, share0_ref2.b, share0_ref2.d
                                                                           Group Key: share0_ref3.d, bar_1.c, share0_ref2.d, share0_ref2.b
                                                                           ->  PX Hash 6:6  (slice7; segments: 6)
                                                                                 Output: share0_ref3.d, bar_1.c, share0_ref2.b, share0_ref2.d
                                                                                 Hash Key: share0_ref3.d, bar_1.c, share0_ref2.d, share0_ref2.b
                                                                                 ->  Nested Loop
                                                                                       Output: share0_ref3.d, bar_1.c, share0_ref2.b, share0_ref2.d
                                                                                       Join Filter: true
                                                                                       ->  Nested Loop
                                                                                             Output: share0_ref3.d, bar_1.c
                                                                                             Join Filter: true
                                                                                             ->  PX Broadcast 6:6  (slice11; segments: 6)
                                                                                                   Output: bar_1.c
                                                                                                   ->  Partial Seq Scan on qp_with_functional_inlining.bar bar_1
                                                                                                         Output: bar_1.c
                                                                                                         Filter: (bar_1.c < 10)
                                                                                             ->  Materialize
                                                                                                   Output: share0_ref3.d
                                                                                                   ->  PX Hash 1:6  (slice9)
                                                                                                         Output: share0_ref3.d
                                                                                                         ->  WindowAgg
                                                                                                               Output: share0_ref3.d
                                                                                                               ->  PX Coordinator 6:1  (slice10; segments: 6)
                                                                                                                     Output: share0_ref3.a, share0_ref3.d
                                                                                                                     ->  Result
                                                                                                                           Output: share0_ref3.a, share0_ref3.d
                                                                                                                           Filter: (share0_ref3.a = share0_ref3.d)
                                                                                                                           ->  Shared Scan (Consumer; slice10; share0)
                                                                                                                                 Output: share0_ref3.a, share0_ref3.b, share0_ref3.d
                                                                                       ->  Materialize
                                                                                             Output: share0_ref2.b, share0_ref2.d
                                                                                             ->  PX Broadcast 6:6  (slice8; segments: 6)
                                                                                                   Output: share0_ref2.b, share0_ref2.d
                                                                                                   ->  Result
                                                                                                         Output: share0_ref2.b, share0_ref2.d
                                                                                                         Filter: (share0_ref2.a = share0_ref2.d)
                                                                                                         ->  Shared Scan (Consumer; slice8; share0)
                                                                                                               Output: share0_ref2.a, share0_ref2.b, share0_ref2.d
 Optimizer: PolarDB PX Optimizer
(87 rows)

-- @description MPP-19696
CREATE TABLE r(a int, b int);
INSERT INTO r SELECT i,i FROM generate_series(1,5)i;
WITH v1 AS (SELECT b FROM r), v2 as (SELECT b FROM v1) SELECT * FROM v2 WHERE b < 5 ORDER BY 1;
 b 
---
 1
 2
 3
 4
(4 rows)

                             QUERY PLAN                              
---------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: b
   Merge Key: b
   ->  Sort
         Output: b
         Sort Key: r.b
         ->  Sort
               Output: b
               Sort Key: r.b
               ->  Partial Seq Scan on qp_with_functional_inlining.r
                     Output: b
                     Filter: (r.b < 5)
 Optimizer: PolarDB PX Optimizer
(13 rows)

-- @description Mpp-19991
CREATE TABLE x AS SELECT generate_series(1,10);
CREATE TABLE y AS SELECT generate_series(1,10);
with v1 as (select * from x), v2 as (select * from y) select * from v1;
 generate_series 
-----------------
               1
               2
               3
               4
               5
               6
               7
               8
               9
              10
(10 rows)

                       QUERY PLAN                        
---------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: generate_series
   ->  Partial Seq Scan on qp_with_functional_inlining.x
         Output: generate_series
 Optimizer: PolarDB PX Optimizer
(5 rows)

