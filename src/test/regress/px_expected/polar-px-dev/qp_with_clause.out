--
-- PostgreSQL port of the MySQL "World" database.
--
-- The sample data used in the world database is Copyright Statistics 
-- Finland, http://www.stat.fi/worldinfigures.
--
-- Modified to use it with GPDB
/*--EXPLAIN_QUERY_BEGIN*/
set extra_float_digits=0;
--start_ignore
create schema qp_with_clause;
set search_path = qp_with_clause;
DROP TABLE IF EXISTS city cascade;
NOTICE:  table "city" does not exist, skipping
DROP TABLE IF EXISTS country cascade;
NOTICE:  table "country" does not exist, skipping
DROP TABLE IF EXISTS countrylanguage cascade;
NOTICE:  table "countrylanguage" does not exist, skipping
--end_ignore
BEGIN;
--SET client_encoding = 'LATIN1';
CREATE TABLE city (
    id integer NOT NULL,
    name text NOT NULL,
    countrycode character(3) NOT NULL,
    district text NOT NULL,
    population integer NOT NULL
);
CREATE TABLE country (
    code character(3) NOT NULL,
    name text NOT NULL,
    continent text NOT NULL,
    region text NOT NULL,
    surfacearea numeric(10,2) NOT NULL,
    indepyear smallint,
    population integer NOT NULL,
    lifeexpectancy real,
    gnp numeric(10,2),
    gnpold numeric(10,2),
    localname text NOT NULL,
    governmentform text NOT NULL,
    headofstate text,
    capital integer,
    code2 character(2) NOT NULL
);
CREATE TABLE countrylanguage (
    countrycode character(3) NOT NULL,
    "language" text NOT NULL,
    isofficial boolean NOT NULL,
    percentage real NOT NULL
);
COPY city (id, name, countrycode, district, population) FROM stdin;
--
-- Data for Name: country; Type: TABLE DATA; Schema: public; Owner: chriskl
--
COPY country (code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2) FROM stdin WITH NULL AS '';
--
-- Data for Name: countrylanguage; Type: TABLE DATA; Schema: public; Owner: chriskl
--
COPY countrylanguage (countrycode, "language", isofficial, percentage) FROM stdin;
ALTER TABLE ONLY city
    ADD CONSTRAINT city_pkey PRIMARY KEY (id);
ALTER TABLE ONLY country
    ADD CONSTRAINT country_pkey PRIMARY KEY (code);
ALTER TABLE ONLY countrylanguage
    ADD CONSTRAINT countrylanguage_pkey PRIMARY KEY (countrycode, "language");
COMMIT;
ANALYZE city;
ANALYZE country;
ANALYZE countrylanguage;
-- queries with one CTE that is referenced once
-- Using CTE in the FROM clause
--query1
with capitals as 
(select country.code,id,city.name from city,country 
 where city.countrycode = country.code AND city.id = country.capital) 
select * from 
capitals,countrylanguage
where capitals.code = countrylanguage.countrycode and isofficial='true'
order by capitals.code,countrylanguage.language;
 code |  id  |               name                | countrycode |    language    | isofficial | percentage 
------+------+-----------------------------------+-------------+----------------+------------+------------
 ABW  |  129 | Oranjestad                        | ABW         | Dutch          | t          |        5.3
 AFG  |    1 | Kabul                             | AFG         | Dari           | t          |       32.1
 AFG  |    1 | Kabul                             | AFG         | Pashto         | t          |       52.4
 AIA  |   62 | The Valley                        | AIA         | English        | t          |          0
 ALB  |   34 | Tirana                            | ALB         | Albaniana      | t          |       97.9
 AND  |   55 | Andorra la Vella                  | AND         | Catalan        | t          |       32.3
 ANT  |   33 | Willemstad                        | ANT         | Dutch          | t          |          0
 ANT  |   33 | Willemstad                        | ANT         | Papiamento     | t          |       86.2
 ARE  |   65 | Abu Dhabi                         | ARE         | Arabic         | t          |         42
 ARG  |   69 | Buenos Aires                      | ARG         | Spanish        | t          |       96.8
 ARM  |  126 | Yerevan                           | ARM         | Armenian       | t          |       93.4
 ASM  |   54 | Fagatogo                          | ASM         | English        | t          |        3.1
 ASM  |   54 | Fagatogo                          | ASM         | Samoan         | t          |       90.6
 ATG  |   63 | Saint Johns                       | ATG         | English        | t          |          0
 AUS  |  135 | Canberra                          | AUS         | English        | t          |       81.2
 AUT  | 1523 | Wien                              | AUT         | German         | t          |         92
 AZE  |  144 | Baku                              | AZE         | Azerbaijani    | t          |         89
 BDI  |  552 | Bujumbura                         | BDI         | French         | t          |          0
 BDI  |  552 | Bujumbura                         | BDI         | Kirundi        | t          |       98.1
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | Dutch          | t          |       59.2
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | French         | t          |       32.6
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | German         | t          |          1
 BGD  |  150 | Dhaka                             | BGD         | Bengali        | t          |       97.7
 BGR  |  539 | Sofija                            | BGR         | Bulgariana     | t          |       83.2
 BHR  |  149 | al-Manama                         | BHR         | Arabic         | t          |       67.7
 BIH  |  201 | Sarajevo                          | BIH         | Serbo-Croatian | t          |       99.2
 BLR  | 3520 | Minsk                             | BLR         | Belorussian    | t          |       65.6
 BLR  | 3520 | Minsk                             | BLR         | Russian        | t          |         32
 BLZ  |  185 | Belmopan                          | BLZ         | English        | t          |       50.8
 BMU  |  191 | Hamilton                          | BMU         | English        | t          |        100
 BOL  |  194 | La Paz                            | BOL         | Aimara         | t          |        3.2
 BOL  |  194 | La Paz                            | BOL         | Ketdua         | t          |        8.1
 BOL  |  194 | La Paz                            | BOL         | Spanish        | t          |       87.7
 BRA  |  211 | Brasilia                          | BRA         | Portuguese     | t          |       97.5
 BRB  |  174 | Bridgetown                        | BRB         | English        | t          |          0
 BRN  |  538 | Bandar Seri Begawan               | BRN         | Malay          | t          |       45.5
 BTN  |  192 | Thimphu                           | BTN         | Dzongkha       | t          |         50
 CAN  | 1822 | Ottawa                            | CAN         | English        | t          |       60.4
 CAN  | 1822 | Ottawa                            | CAN         | French         | t          |       23.4
 CCK  | 2317 | West Island                       | CCK         | English        | t          |          0
 CHE  | 3248 | Bern                              | CHE         | French         | t          |       19.2
 CHE  | 3248 | Bern                              | CHE         | German         | t          |       63.6
 CHE  | 3248 | Bern                              | CHE         | Italian        | t          |        7.7
 CHE  | 3248 | Bern                              | CHE         | Romansh        | t          |        0.6
 CHL  |  554 | Santiago de Chile                 | CHL         | Spanish        | t          |       89.7
 CHN  | 1891 | Peking                            | CHN         | Chinese        | t          |         92
 COK  |  583 | Avarua                            | COK         | Maori          | t          |          0
 COL  | 2257 | Santafe de Bogota                 | COL         | Spanish        | t          |         99
 COM  | 2295 | Moroni                            | COM         | Comorian       | t          |         75
 CPV  | 1859 | Praia                             | CPV         | Portuguese     | t          |          0
 CRI  |  584 | San Jose                          | CRI         | Spanish        | t          |       97.5
 CUB  | 2413 | La Habana                         | CUB         | Spanish        | t          |        100
 CXR  | 1791 | Flying Fish Cove                  | CXR         | English        | t          |          0
 CYM  |  553 | George Town                       | CYM         | English        | t          |          0
 CYP  | 2430 | Nicosia                           | CYP         | Greek          | t          |       74.1
 CYP  | 2430 | Nicosia                           | CYP         | Turkish        | t          |       22.4
 CZE  | 3339 | Praha                             | CZE         | Czech          | t          |       81.2
 DEU  | 3068 | Berlin                            | DEU         | German         | t          |       91.3
 DJI  |  585 | Djibouti                          | DJI         | Arabic         | t          |       10.6
 DNK  | 3315 | Kobenhavn                         | DNK         | Danish         | t          |       93.5
 DOM  |  587 | Santo Domingo de Guzman           | DOM         | Spanish        | t          |         98
 DZA  |   35 | Alger                             | DZA         | Arabic         | t          |         86
 ECU  |  594 | Quito                             | ECU         | Spanish        | t          |         93
 EGY  |  608 | Cairo                             | EGY         | Arabic         | t          |       98.8
 ERI  |  652 | Asmara                            | ERI         | Tigrinja       | t          |       49.1
 ESH  | 2453 | El-Aaiun                          | ESH         | Arabic         | t          |        100
 ESP  |  653 | Madrid                            | ESP         | Spanish        | t          |       74.4
 EST  | 3791 | Tallinn                           | EST         | Estonian       | t          |       65.3
 FIN  | 3236 | Helsinki [Helsingfors]            | FIN         | Finnish        | t          |       92.7
 FIN  | 3236 | Helsinki [Helsingfors]            | FIN         | Swedish        | t          |        5.7
 FJI  |  764 | Suva                              | FJI         | Fijian         | t          |       50.8
 FLK  |  763 | Stanley                           | FLK         | English        | t          |          0
 FRA  | 2974 | Paris                             | FRA         | French         | t          |       93.6
 FRO  |  901 | Torshavn                          | FRO         | Danish         | t          |          0
 FRO  |  901 | Torshavn                          | FRO         | Faroese        | t          |        100
 GBR  |  456 | London                            | GBR         | English        | t          |       97.3
 GEO  |  905 | Tbilisi                           | GEO         | Georgiana      | t          |       71.7
 GIB  |  915 | Gibraltar                         | GIB         | English        | t          |       88.9
 GLP  |  919 | Basse-Terre                       | GLP         | French         | t          |          0
 GNB  |  927 | Bissau                            | GNB         | Portuguese     | t          |        8.1
 GRC  | 2401 | Athenai                           | GRC         | Greek          | t          |       98.5
 GRL  |  917 | Nuuk                              | GRL         | Danish         | t          |       12.5
 GRL  |  917 | Nuuk                              | GRL         | Greenlandic    | t          |       87.5
 GTM  |  922 | Ciudad de Guatemala               | GTM         | Spanish        | t          |       64.7
 GUM  |  921 | Agaaa                             | GUM         | Chamorro       | t          |       29.6
 GUM  |  921 | Agaaa                             | GUM         | English        | t          |       37.5
 HND  |  933 | Tegucigalpa                       | HND         | Spanish        | t          |       97.2
 HRV  | 2409 | Zagreb                            | HRV         | Serbo-Croatian | t          |       95.9
 HTI  |  929 | Port-au-Prince                    | HTI         | French         | t          |          0
 HUN  | 3483 | Budapest                          | HUN         | Hungarian      | t          |       98.5
 IDN  |  939 | Jakarta                           | IDN         | Malay          | t          |       12.1
 IND  | 1109 | New Delhi                         | IND         | Hindi          | t          |       39.9
 IRL  | 1447 | Dublin                            | IRL         | English        | t          |       98.4
 IRL  | 1447 | Dublin                            | IRL         | Irish          | t          |        1.6
 IRN  | 1380 | Teheran                           | IRN         | Persian        | t          |       45.7
 IRQ  | 1365 | Baghdad                           | IRQ         | Arabic         | t          |       77.2
 ISL  | 1449 | Reykjavik                         | ISL         | Icelandic      | t          |       95.7
 ISR  | 1450 | Jerusalem                         | ISR         | Arabic         | t          |         18
 ISR  | 1450 | Jerusalem                         | ISR         | Hebrew         | t          |       63.1
 ITA  | 1464 | Roma                              | ITA         | Italian        | t          |       94.1
 JOR  | 1786 | Amman                             | JOR         | Arabic         | t          |       97.9
 JPN  | 1532 | Tokyo                             | JPN         | Japanese       | t          |       99.1
 KAZ  | 1864 | Astana                            | KAZ         | Kazakh         | t          |         46
 KGZ  | 2253 | Bishkek                           | KGZ         | Kirgiz         | t          |       59.7
 KGZ  | 2253 | Bishkek                           | KGZ         | Russian        | t          |       16.2
 KHM  | 1800 | Phnom Penh                        | KHM         | Khmer          | t          |       88.6
 KIR  | 2256 | Bairiki                           | KIR         | Kiribati       | t          |       98.9
 KNA  | 3064 | Basseterre                        | KNA         | English        | t          |          0
 KOR  | 2331 | Seoul                             | KOR         | Korean         | t          |       99.9
 KWT  | 2429 | Kuwait                            | KWT         | Arabic         | t          |       78.1
 LAO  | 2432 | Vientiane                         | LAO         | Lao            | t          |       67.2
 LBN  | 2438 | Beirut                            | LBN         | Arabic         | t          |         93
 LBY  | 2441 | Tripoli                           | LBY         | Arabic         | t          |         96
 LCA  | 3065 | Castries                          | LCA         | English        | t          |         20
 LIE  | 2446 | Vaduz                             | LIE         | German         | t          |         89
 LKA  | 3217 | Colombo                           | LKA         | Singali        | t          |       60.3
 LKA  | 3217 | Colombo                           | LKA         | Tamil          | t          |       19.6
 LSO  | 2437 | Maseru                            | LSO         | English        | t          |          0
 LSO  | 2437 | Maseru                            | LSO         | Sotho          | t          |         85
 LTU  | 2447 | Vilnius                           | LTU         | Lithuanian     | t          |       81.6
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | French         | t          |        4.2
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | German         | t          |        2.3
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | Luxembourgish  | t          |       64.4
 LVA  | 2434 | Riga                              | LVA         | Latvian        | t          |       55.1
 MAC  | 2454 | Macao                             | MAC         | Portuguese     | t          |        2.3
 MAR  | 2486 | Rabat                             | MAR         | Arabic         | t          |         65
 MCO  | 2695 | Monaco-Ville                      | MCO         | French         | t          |       41.9
 MDA  | 2690 | Chisinau                          | MDA         | Romanian       | t          |       61.9
 MDG  | 2455 | Antananarivo                      | MDG         | French         | t          |          0
 MDG  | 2455 | Antananarivo                      | MDG         | Malagasy       | t          |       98.9
 MDV  | 2463 | Male                              | MDV         | Dhivehi        | t          |        100
 MEX  | 2515 | Ciudad de Mexico                  | MEX         | Spanish        | t          |       92.1
 MHL  | 2507 | Dalap-Uliga-Darrit                | MHL         | English        | t          |          0
 MHL  | 2507 | Dalap-Uliga-Darrit                | MHL         | Marshallese    | t          |       96.8
 MKD  | 2460 | Skopje                            | MKD         | Macedonian     | t          |       66.5
 MLT  | 2484 | Valletta                          | MLT         | English        | t          |        2.1
 MLT  | 2484 | Valletta                          | MLT         | Maltese        | t          |       95.8
 MMR  | 2710 | Rangoon (Yangon)                  | MMR         | Burmese        | t          |         69
 MNG  | 2696 | Ulan Bator                        | MNG         | Mongolian      | t          |       78.8
 MNP  | 2913 | Garapan                           | MNP         | English        | t          |        4.8
 MSR  | 2697 | Plymouth                          | MSR         | English        | t          |          0
 MTQ  | 2508 | Fort-de-France                    | MTQ         | French         | t          |          0
 MWI  | 2462 | Lilongwe                          | MWI         | Chichewa       | t          |       58.3
 MYS  | 2464 | Kuala Lumpur                      | MYS         | Malay          | t          |       58.4
 MYT  | 2514 | Mamoutzou                         | MYT         | French         | t          |       20.3
 NCL  | 3493 | Noumea                            | NCL         | French         | t          |       34.3
 NFK  | 2806 | Kingston                          | NFK         | English        | t          |          0
 NIC  | 2734 | Managua                           | NIC         | Spanish        | t          |       97.6
 NIU  | 2805 | Alofi                             | NIU         | English        | t          |          0
 NLD  |    5 | Amsterdam                         | NLD         | Dutch          | t          |       95.6
 NOR  | 2807 | Oslo                              | NOR         | Norwegian      | t          |       96.6
 NPL  | 2729 | Kathmandu                         | NPL         | Nepali         | t          |       50.4
 NRU  | 2728 | Yaren                             | NRU         | English        | t          |        7.5
 NRU  | 2728 | Yaren                             | NRU         | Nauru          | t          |       57.5
 NZL  | 3499 | Wellington                        | NZL         | English        | t          |         87
 OMN  | 2821 | Masqat                            | OMN         | Arabic         | t          |       76.7
 PAK  | 2831 | Islamabad                         | PAK         | Urdu           | t          |        7.6
 PAN  | 2882 | Ciudad de Panama                  | PAN         | Spanish        | t          |       76.8
 PER  | 2890 | Lima                              | PER         | Aimara         | t          |        2.3
 PER  | 2890 | Lima                              | PER         | Ketdua         | t          |       16.4
 PER  | 2890 | Lima                              | PER         | Spanish        | t          |       79.8
 PHL  |  766 | Manila                            | PHL         | Pilipino       | t          |       29.3
 PLW  | 2881 | Koror                             | PLW         | English        | t          |        3.2
 PLW  | 2881 | Koror                             | PLW         | Palau          | t          |       82.2
 POL  | 2928 | Warszawa                          | POL         | Polish         | t          |       97.6
 PRI  | 2919 | San Juan                          | PRI         | Spanish        | t          |       51.3
 PRK  | 2318 | Pyongyang                         | PRK         | Korean         | t          |       99.9
 PRT  | 2914 | Lisboa                            | PRT         | Portuguese     | t          |         99
 PRY  | 2885 | Asuncion                          | PRY         | Guarani        | t          |       40.1
 PRY  | 2885 | Asuncion                          | PRY         | Spanish        | t          |       55.1
 PYF  | 3016 | Papeete                           | PYF         | French         | t          |       40.8
 QAT  | 2973 | Doha                              | QAT         | Arabic         | t          |       40.7
 ROM  | 3018 | Bucuresti                         | ROM         | Romani         | t          |        0.7
 ROM  | 3018 | Bucuresti                         | ROM         | Romanian       | t          |       90.7
 RUS  | 3580 | Moscow                            | RUS         | Russian        | t          |       86.6
 RWA  | 3047 | Kigali                            | RWA         | French         | t          |          0
 RWA  | 3047 | Kigali                            | RWA         | Rwanda         | t          |        100
 SAU  | 3173 | Riyadh                            | SAU         | Arabic         | t          |         95
 SDN  | 3225 | Khartum                           | SDN         | Arabic         | t          |       49.4
 SEN  | 3198 | Dakar                             | SEN         | Wolof          | t          |       48.1
 SGP  | 3208 | Singapore                         | SGP         | Chinese        | t          |       77.1
 SGP  | 3208 | Singapore                         | SGP         | Malay          | t          |       14.1
 SGP  | 3208 | Singapore                         | SGP         | Tamil          | t          |        7.4
 SHN  | 3063 | Jamestown                         | SHN         | English        | t          |          0
 SJM  |  938 | Longyearbyen                      | SJM         | Norwegian      | t          |          0
 SLV  |  645 | San Salvador                      | SLV         | Spanish        | t          |        100
 SMR  | 3171 | San Marino                        | SMR         | Italian        | t          |        100
 SOM  | 3214 | Mogadishu                         | SOM         | Arabic         | t          |          0
 SOM  | 3214 | Mogadishu                         | SOM         | Somali         | t          |       98.3
 SPM  | 3067 | Saint-Pierre                      | SPM         | French         | t          |          0
 SVK  | 3209 | Bratislava                        | SVK         | Slovak         | t          |       85.6
 SVN  | 3212 | Ljubljana                         | SVN         | Slovene        | t          |       87.9
 SWE  | 3048 | Stockholm                         | SWE         | Swedish        | t          |       89.5
 SWZ  | 3244 | Mbabane                           | SWZ         | Swazi          | t          |       89.9
 SYC  | 3206 | Victoria                          | SYC         | English        | t          |        3.8
 SYC  | 3206 | Victoria                          | SYC         | French         | t          |        1.3
 SYR  | 3250 | Damascus                          | SYR         | Arabic         | t          |         90
 TCA  | 3423 | Cockburn Town                     | TCA         | English        | t          |          0
 TCD  | 3337 | NDjamena                          | TCD         | Arabic         | t          |       12.3
 TGO  | 3332 | Lome                              | TGO         | Ewe            | t          |       23.2
 TGO  | 3332 | Lome                              | TGO         | Kabye          | t          |       13.8
 THA  | 3320 | Bangkok                           | THA         | Thai           | t          |       52.6
 TJK  | 3261 | Dushanbe                          | TJK         | Tadzhik        | t          |       62.2
 TKL  | 3333 | Fakaofo                           | TKL         | English        | t          |          0
 TKM  | 3419 | Ashgabat                          | TKM         | Turkmenian     | t          |       76.7
 TMP  | 1522 | Dili                              | TMP         | Portuguese     | t          |          0
 TON  | 3334 | Nukualofa                         | TON         | English        | t          |          0
 TON  | 3334 | Nukualofa                         | TON         | Tongan         | t          |       98.3
 TUN  | 3349 | Tunis                             | TUN         | Arabic         | t          |       69.9
 TUR  | 3358 | Ankara                            | TUR         | Turkish        | t          |       87.6
 TUV  | 3424 | Funafuti                          | TUV         | English        | t          |          0
 TUV  | 3424 | Funafuti                          | TUV         | Tuvalu         | t          |       92.5
 TZA  | 3306 | Dodoma                            | TZA         | Swahili        | t          |        8.8
 UKR  | 3426 | Kyiv                              | UKR         | Ukrainian      | t          |       64.7
 URY  | 3492 | Montevideo                        | URY         | Spanish        | t          |       95.7
 USA  | 3813 | Washington                        | USA         | English        | t          |       86.2
 UZB  | 3503 | Toskent                           | UZB         | Uzbek          | t          |       72.6
 VAT  | 3538 | Citta del Vaticano                | VAT         | Italian        | t          |          0
 VCT  | 3066 | Kingstown                         | VCT         | English        | t          |          0
 VEN  | 3539 | Caracas                           | VEN         | Spanish        | t          |       96.9
 VGB  |  537 | Road Town                         | VGB         | English        | t          |          0
 VIR  | 4067 | Charlotte Amalie                  | VIR         | English        | t          |       81.7
 VNM  | 3770 | Hanoi                             | VNM         | Vietnamese     | t          |       86.8
 VUT  | 3537 | Port-Vila                         | VUT         | Bislama        | t          |       56.6
 VUT  | 3537 | Port-Vila                         | VUT         | English        | t          |       28.3
 VUT  | 3537 | Port-Vila                         | VUT         | French         | t          |       14.2
 WSM  | 3169 | Apia                              | WSM         | English        | t          |        0.6
 WSM  | 3169 | Apia                              | WSM         | Samoan         | t          |       47.5
 YEM  | 1780 | Sanaa                             | YEM         | Arabic         | t          |       99.6
 YUG  | 1792 | Beograd                           | YUG         | Serbo-Croatian | t          |       75.2
 ZAF  |  716 | Pretoria                          | ZAF         | Afrikaans      | t          |       14.3
 ZAF  |  716 | Pretoria                          | ZAF         | English        | t          |        8.5
 ZAF  |  716 | Pretoria                          | ZAF         | Xhosa          | t          |       17.7
 ZAF  |  716 | Pretoria                          | ZAF         | Zulu           | t          |       22.7
 ZWE  | 4068 | Harare                            | ZWE         | English        | t          |        2.2
(235 rows)

                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
   Merge Key: country.code, countrylanguage.language
   ->  Sort
         Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
         Sort Key: country.code, countrylanguage.language
         ->  Sort
               Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
               Sort Key: country.code, countrylanguage.language
               ->  Hash Join
                     Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           Hash Key: countrylanguage.countrycode
                           ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                 Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                 Filter: countrylanguage.isofficial
                     ->  Hash
                           Output: country.code, city.id, city.name
                           ->  Hash Join
                                 Output: country.code, city.id, city.name
                                 Hash Cond: ((city.countrycode = country.code) AND (city.id = country.capital))
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: city.id, city.name, city.countrycode
                                       Hash Key: city.countrycode
                                       ->  Partial Seq Scan on qp_with_clause.city
                                             Output: city.id, city.name, city.countrycode
                                 ->  Hash
                                       Output: country.code, country.capital
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: country.code, country.capital
                                             Hash Key: country.code
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.capital
 Optimizer: PolarDB PX Optimizer
(36 rows)

--query2
with lang_total as
( select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code)
 
select lang_count,country.code,country.name,country.continent,country.region,country.population
 from country left outer join lang_total
 on (lang_total.code = country.code)
 where country.indepyear > 1970 and lang_total.lang_count >=1 and lang_total.lang_count >=1
  order by lang_total.lang_count desc;
 lang_count | code |              name               | continent |     region      | population 
------------+------+---------------------------------+-----------+-----------------+------------
         12 | RUS  | Russian Federation              | Europe    | Eastern Europe  |  146934000
          6 | FSM  | Micronesia, Federated States of | Oceania   | Micronesia      |     119000
          4 | AZE  | Azerbaijan                      | Asia      | Middle East     |    7734000
          1 | BIH  | Bosnia and Herzegovina          | Europe    | Southern Europe |    3972000
(4 rows)

                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
   Merge Key: (count())
   ->  Sort
         Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
         Sort Key: (count()) DESC
         ->  Sort
               Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
               Sort Key: (count()) DESC
               ->  Nested Loop
                     Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
                     Join Filter: true
                     ->  PX Broadcast 6:6  (slice2; segments: 6)
                           Output: (count()), country.code
                           ->  Result
                                 Output: (count()), country.code
                                 Filter: (((count()) >= 1) AND (country.code = countrylanguage.countrycode))
                                 ->  GroupAggregate
                                       Output: count(), country.code, countrylanguage.countrycode
                                       Group Key: country.code, countrylanguage.countrycode
                                       ->  Sort
                                             Output: country.code, countrylanguage.countrycode
                                             Sort Key: country.code, countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice3; segments: 6)
                                                   Output: country.code, countrylanguage.countrycode
                                                   Hash Key: country.code, countrylanguage.countrycode
                                                   ->  Nested Loop
                                                         Output: country.code, countrylanguage.countrycode
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                               Output: country.code
                                                               ->  Partial Seq Scan on qp_with_clause.country
                                                                     Output: country.code
                                                                     Filter: (country.governmentform = 'Federal Republic'::text)
                                                         ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage
                                                               Output: countrylanguage.countrycode
                                                               Index Cond: (countrylanguage.countrycode = country.code)
                     ->  Partial Index Scan using country_pkey on qp_with_clause.country country_1
                           Output: country_1.code, country_1.name, country_1.continent, country_1.region, country_1.indepyear, country_1.population
                           Index Cond: (country_1.code = country.code)
                           Filter: (country_1.indepyear > 1970)
 Optimizer: PolarDB PX Optimizer
(42 rows)

-- Using CTE in the WHERE clause
--query3
with lang_total as
( select lang_count,countrycode from
  (
  (
   select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code)
 
   UNION ALL
 
  (
   select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Monarchy')
  group by country.code,countrylanguage.countrycode order by country.code)
 
 ) FOO1
)
select * from
(
select count(*) as cnt,country.code,country.name 
from
country,countrylanguage
where country.code=countrylanguage.countrycode group by country.code,country.name) AS FOO
where foo.cnt = (select max(lang_count) from lang_total) order by foo.code;
 cnt | code |        name        
-----+------+--------------------
  12 | CAN  | Canada
  12 | CHN  | China
  12 | IND  | India
  12 | RUS  | Russian Federation
  12 | USA  | United States
(5 rows)

                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (count()), country.code, country.name
   Merge Key: country.code
   ->  Sort
         Output: (count()), country.code, country.name
         Sort Key: country.code
         ->  Sort
               Output: (count()), country.code, country.name
               Sort Key: country.code
               ->  Hash Join
                     Output: (count()), country.code, country.name
                     Hash Cond: ((count()) = (max((count()))))
                     ->  HashAggregate
                           Output: count(), country.code, country.name
                           Group Key: country.code, country.name
                           ->  Hash Join
                                 Output: country.code, country.name
                                 Hash Cond: (country.code = countrylanguage.countrycode)
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: country.code, country.name
                                       Hash Key: country.code
                                       ->  Partial Seq Scan on qp_with_clause.country
                                             Output: country.code, country.name
                                 ->  Hash
                                       Output: countrylanguage.countrycode
                                       ->  PX Hash 6:6  (slice3; segments: 6)
                                             Output: countrylanguage.countrycode
                                             Hash Key: countrylanguage.countrycode
                                             ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                   Output: countrylanguage.countrycode
                     ->  Hash
                           Output: (max((count())))
                           ->  PX Broadcast 1:6  (slice4)
                                 Output: (max((count())))
                                 ->  Finalize Aggregate
                                       Output: max((count()))
                                       ->  PX Coordinator 6:1  (slice5; segments: 6)
                                             Output: (PARTIAL max((count())))
                                             ->  Partial Aggregate
                                                   Output: PARTIAL max((count()))
                                                   ->  Append
                                                         ->  GroupAggregate
                                                               Output: count()
                                                               Group Key: country_1.code, countrylanguage_1.countrycode
                                                               ->  Sort
                                                                     Output: countrylanguage_1.countrycode, country_1.code
                                                                     Sort Key: country_1.code, countrylanguage_1.countrycode
                                                                     ->  PX Hash 6:6  (slice6; segments: 6)
                                                                           Output: countrylanguage_1.countrycode, country_1.code
                                                                           Hash Key: country_1.code, countrylanguage_1.countrycode
                                                                           ->  Nested Loop
                                                                                 Output: countrylanguage_1.countrycode, country_1.code
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice7; segments: 6)
                                                                                       Output: country_1.code
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                             Output: country_1.code
                                                                                             Filter: (country_1.governmentform = 'Federal Republic'::text)
                                                                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                                                                       Output: countrylanguage_1.countrycode
                                                                                       Index Cond: (countrylanguage_1.countrycode = country_1.code)
                                                         ->  GroupAggregate
                                                               Output: count()
                                                               Group Key: country_2.code, countrylanguage_2.countrycode
                                                               ->  Sort
                                                                     Output: country_2.code, countrylanguage_2.countrycode
                                                                     Sort Key: country_2.code, countrylanguage_2.countrycode
                                                                     ->  PX Hash 6:6  (slice8; segments: 6)
                                                                           Output: country_2.code, countrylanguage_2.countrycode
                                                                           Hash Key: country_2.code, countrylanguage_2.countrycode
                                                                           ->  Nested Loop
                                                                                 Output: country_2.code, countrylanguage_2.countrycode
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                                                       Output: country_2.code
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                                             Output: country_2.code
                                                                                             Filter: (country_2.governmentform = 'Monarchy'::text)
                                                                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                                                                       Output: countrylanguage_2.countrycode
                                                                                       Index Cond: (countrylanguage_2.countrycode = country_2.code)
 Optimizer: PolarDB PX Optimizer
(82 rows)

--query4
with diversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country,
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country.code and country.gnp > 100000)
 select diversecountries.name,city.name,diversecountries.CNT
 from diversecountries,city where city.id = diversecountries.capital;
        name        |       name       | cnt 
--------------------+------------------+-----
 Denmark            | Kobenhavn        |   7
 India              | New Delhi        |  12
 Russian Federation | Moscow           |  12
 Iran               | Teheran          |  10
 Australia          | Canberra         |   8
 China              | Peking           |  12
 South Africa       | Pretoria         |  11
 Austria            | Wien             |   8
 Myanmar            | Rangoon (Yangon) |   8
 United States      | Washington       |  12
 Canada             | Ottawa           |  12
 Italy              | Roma             |   8
(12 rows)

                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.name, city.name, (count())
   ->  Nested Loop
         Output: country.name, city.name, (count())
         Join Filter: true
         ->  PX Broadcast 6:6  (slice2; segments: 6)
               Output: country.name, country.capital, (count())
               ->  Hash Join
                     Output: country.name, country.capital, (count())
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  Result
                           Output: (count()), countrylanguage.countrycode
                           Filter: ((count()) > 6)
                           ->  HashAggregate
                                 Output: count(), count(), countrylanguage.countrycode
                                 Group Key: countrylanguage.countrycode
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: countrylanguage.countrycode
                                       Hash Key: countrylanguage.countrycode
                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                             Output: countrylanguage.countrycode
                     ->  Hash
                           Output: country.code, country.name, country.capital
                           ->  PX Hash 6:6  (slice4; segments: 6)
                                 Output: country.code, country.name, country.capital
                                 Hash Key: country.code
                                 ->  Partial Seq Scan on qp_with_clause.country
                                       Output: country.code, country.name, country.capital
                                       Filter: (country.gnp > '100000'::numeric)
         ->  Partial Index Scan using city_pkey on qp_with_clause.city
               Output: city.name
               Index Cond: (city.id = country.capital)
 Optimizer: PolarDB PX Optimizer
(33 rows)

--query5 -Using a CTE in the select list
with bigcities as
(
select city.id,city.name,city.population,city.countrycode
from city                                                                                                                                                  
where city.population >= 0.5 * (select population from country where country.code=city.countrycode)
)
select
(select max(bigcities.population) from bigcities where bigcities.countrycode='QAT') as MAX_POP,                                                           
(select avg(bigcities.population) from bigcities) AS WORLD_AVG,
 city.name,city.population
 from                                                                                                                                
 city where city.countrycode='QAT';
 max_pop |      world_avg      | name | population 
---------+---------------------+------+------------
  355000 | 376916.466666666667 | Doha |     355000
(1 row)

                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (max(share0_ref3.population)), (avg(share0_ref2.population)), city_1.name, city_1.population
   ->  Sequence
         Output: (max(share0_ref3.population)), (avg(share0_ref2.population)), city_1.name, city_1.population
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.id, share0_ref1.name, share0_ref1.population, share0_ref1.countrycode
               ->  Partial Seq Scan on qp_with_clause.city
                     Output: city.id, city.name, city.population, city.countrycode
                     Filter: ((city.population)::numeric >= (0.5 * ((SubPlan 1))::numeric))
                     SubPlan 1
                       ->  Result
                             Output: country.population
                             Filter: (country.code = city.countrycode)
                             ->  Materialize
                                   Output: country.code, country.population
                                   ->  PX Broadcast 6:6  (slice2; segments: 6)
                                         Output: country.code, country.population
                                         ->  Partial Seq Scan on qp_with_clause.country
                                               Output: country.code, country.population
         ->  Nested Loop Left Join
               Output: (max(share0_ref3.population)), (avg(share0_ref2.population)), city_1.name, city_1.population
               Join Filter: true
               ->  Nested Loop Left Join
                     Output: city_1.name, city_1.population, (max(share0_ref3.population))
                     Join Filter: true
                     ->  Partial Seq Scan on qp_with_clause.city city_1
                           Output: city_1.name, city_1.population
                           Filter: (city_1.countrycode = 'QAT'::bpchar)
                     ->  Materialize
                           Output: (max(share0_ref3.population))
                           ->  PX Broadcast 1:6  (slice5)
                                 Output: (max(share0_ref3.population))
                                 ->  Finalize Aggregate
                                       Output: max(share0_ref3.population)
                                       ->  PX Coordinator 6:1  (slice6; segments: 6)
                                             Output: (PARTIAL max(share0_ref3.population))
                                             ->  Partial Aggregate
                                                   Output: PARTIAL max(share0_ref3.population)
                                                   ->  Result
                                                         Output: share0_ref3.population
                                                         Filter: (share0_ref3.countrycode = 'QAT'::bpchar)
                                                         ->  Shared Scan (Consumer; slice6; share0)
                                                               Output: share0_ref3.id, share0_ref3.name, share0_ref3.population, share0_ref3.countrycode
               ->  Materialize
                     Output: (avg(share0_ref2.population))
                     ->  PX Broadcast 1:6  (slice3)
                           Output: (avg(share0_ref2.population))
                           ->  Finalize Aggregate
                                 Output: avg(share0_ref2.population)
                                 ->  PX Coordinator 6:1  (slice4; segments: 6)
                                       Output: (PARTIAL avg(share0_ref2.population))
                                       ->  Partial Aggregate
                                             Output: PARTIAL avg(share0_ref2.population)
                                             ->  Shared Scan (Consumer; slice4; share0)
                                                   Output: share0_ref2.id, share0_ref2.name, share0_ref2.population, share0_ref2.countrycode
 Optimizer: PolarDB PX Optimizer
(56 rows)

--query6 using CTE in the select list with a qual
with diversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country, 
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country.code and country.gnp > 100000)
select * from
(
select
(select max(CNT) from diversecountries where  diversecountries.code = country.code) CNT,country.name COUNTRY,city.name CAPITAL
from country,city where country.capital = city.id) FOO where FOO.CNT is not null;
 cnt |      country       |     capital      
-----+--------------------+------------------
   8 | Australia          | Canberra
  11 | South Africa       | Pretoria
  12 | India              | New Delhi
  10 | Iran               | Teheran
   8 | Italy              | Roma
   8 | Austria            | Wien
  12 | Canada             | Ottawa
  12 | China              | Peking
   8 | Myanmar            | Rangoon (Yangon)
   7 | Denmark            | Kobenhavn
  12 | Russian Federation | Moscow
  12 | United States      | Washington
(12 rows)

                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (max((count()))), country.name, city.name
   ->  Result
         Output: (max((count()))), country.name, city.name
         Filter: (NOT ((max((count()))) IS NULL))
         ->  Hash Left Join
               Output: (max((count()))), country.name, city.name
               Hash Cond: (country.code = country_1.code)
               ->  PX Hash 6:6  (slice2; segments: 6)
                     Output: country.code, country.name, city.name
                     Hash Key: country.code
                     ->  Hash Join
                           Output: country.code, country.name, city.name
                           Hash Cond: (city.id = country.capital)
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: city.id, city.name
                                 Hash Key: city.id
                                 ->  Partial Seq Scan on qp_with_clause.city
                                       Output: city.id, city.name
                           ->  Hash
                                 Output: country.code, country.name, country.capital
                                 ->  PX Hash 6:6  (slice4; segments: 6)
                                       Output: country.code, country.name, country.capital
                                       Hash Key: country.capital
                                       ->  Partial Seq Scan on qp_with_clause.country
                                             Output: country.code, country.name, country.capital
               ->  Hash
                     Output: (max((count()))), country_1.code
                     ->  HashAggregate
                           Output: max((count())), country_1.code
                           Group Key: country_1.code
                           ->  Hash Join
                                 Output: country_1.code, (count())
                                 Hash Cond: (countrylanguage.countrycode = country_1.code)
                                 ->  Result
                                       Output: (count()), countrylanguage.countrycode
                                       Filter: ((count()) > 6)
                                       ->  HashAggregate
                                             Output: count(), count(), countrylanguage.countrycode
                                             Group Key: countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice5; segments: 6)
                                                   Output: countrylanguage.countrycode
                                                   Hash Key: countrylanguage.countrycode
                                                   ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                         Output: countrylanguage.countrycode
                                 ->  Hash
                                       Output: country_1.code
                                       ->  PX Hash 6:6  (slice6; segments: 6)
                                             Output: country_1.code
                                             Hash Key: country_1.code
                                             ->  Partial Seq Scan on qp_with_clause.country country_1
                                                   Output: country_1.code
                                                   Filter: (country_1.gnp > '100000'::numeric)
 Optimizer: PolarDB PX Optimizer
(54 rows)

--queries Using a CTE in the HAVING clause
with notdiversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country,
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) < 3) d
 where d.countrycode = country.code and country.gnp > 100000)
select country.name COUNTRY,city.name CAPITAL,count(*) LANGCNT from
country,city,countrylanguage
where country.code = countrylanguage.countrycode and country.capital = city.id
group by country.name,city.name
HAVING count(*) NOT IN (select CNT from notdiversecountries where notdiversecountries.name = country.name)
order by country.name
LIMIT 10;
       country       |     capital      | langcnt 
---------------------+------------------+---------
 Afghanistan         | Kabul            |       5
 Albania             | Tirana           |       3
 Algeria             | Alger            |       2
 American Samoa      | Fagatogo         |       3
 Andorra             | Andorra la Vella |       4
 Angola              | Luanda           |       9
 Anguilla            | The Valley       |       1
 Antigua and Barbuda | Saint Johns      |       2
 Argentina           | Buenos Aires     |       3
 Armenia             | Yerevan          |       2
(10 rows)

                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: country.name, city.name, (count())
   Sort Key: country.name
   ->  Limit
         Output: country.name, city.name, (count())
         ->  PX Coordinator 6:1  (slice1; segments: 6)
               Output: country.name, city.name, (count())
               Merge Key: country.name
               ->  Limit
                     Output: country.name, city.name, (count())
                     ->  Result
                           Output: country.name, city.name, (count())
                           ->  Sort
                                 Output: country.name, city.name, (count()), (count())
                                 Sort Key: country.name
                                 ->  Result
                                       Output: country.name, city.name, (count()), (count())
                                       Filter: (SubPlan 1)
                                       ->  HashAggregate
                                             Output: country.name, city.name, count(), count()
                                             Group Key: country.name, city.name
                                             ->  PX Hash 6:6  (slice2; segments: 6)
                                                   Output: country.name, city.name
                                                   Hash Key: country.name, city.name
                                                   ->  Hash Join
                                                         Output: country.name, city.name
                                                         Hash Cond: (country.code = countrylanguage.countrycode)
                                                         ->  PX Hash 6:6  (slice3; segments: 6)
                                                               Output: country.code, country.name, city.name
                                                               Hash Key: country.code
                                                               ->  Hash Join
                                                                     Output: country.code, country.name, city.name
                                                                     Hash Cond: (city.id = country.capital)
                                                                     ->  PX Hash 6:6  (slice4; segments: 6)
                                                                           Output: city.id, city.name
                                                                           Hash Key: city.id
                                                                           ->  Partial Seq Scan on qp_with_clause.city
                                                                                 Output: city.id, city.name
                                                                     ->  Hash
                                                                           Output: country.code, country.name, country.capital
                                                                           ->  PX Hash 6:6  (slice5; segments: 6)
                                                                                 Output: country.code, country.name, country.capital
                                                                                 Hash Key: country.capital
                                                                                 ->  Partial Seq Scan on qp_with_clause.country
                                                                                       Output: country.code, country.name, country.capital
                                                         ->  Hash
                                                               Output: countrylanguage.countrycode
                                                               ->  PX Hash 6:6  (slice6; segments: 6)
                                                                     Output: countrylanguage.countrycode
                                                                     Hash Key: countrylanguage.countrycode
                                                                     ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                                           Output: countrylanguage.countrycode
                                       SubPlan 1
                                         ->  Result
                                               Output: true
                                               Filter: ((CASE WHEN (sum((CASE WHEN ((count()) = (count())) THEN 1 ELSE 0 END)) IS NULL) THEN true WHEN (sum((CASE WHEN ((count()) IS NULL) THEN 1 ELSE 0 END)) > '0'::bigint) THEN NULL::boolean WHEN ((count()) IS NULL) THEN NULL::boolean WHEN (sum((CASE WHEN ((count()) = (count())) THEN 1 ELSE 0 END)) = '0'::bigint) THEN true ELSE false END) = true)
                                               ->  Aggregate
                                                     Output: CASE WHEN (sum((CASE WHEN ((count()) = (count())) THEN 1 ELSE 0 END)) IS NULL) THEN true WHEN (sum((CASE WHEN ((count()) IS NULL) THEN 1 ELSE 0 END)) > '0'::bigint) THEN NULL::boolean WHEN ((count()) IS NULL) THEN NULL::boolean WHEN (sum((CASE WHEN ((count()) = (count())) THEN 1 ELSE 0 END)) = '0'::bigint) THEN true ELSE false END
                                                     ->  Result
                                                           Output: CASE WHEN ((count()) = (count())) THEN 1 ELSE 0 END, CASE WHEN ((count()) IS NULL) THEN 1 ELSE 0 END
                                                           Filter: (country_1.name = country.name)
                                                           ->  Materialize
                                                                 Output: country_1.name, (count())
                                                                 ->  PX Broadcast 6:6  (slice7; segments: 6)
                                                                       Output: country_1.name, (count())
                                                                       ->  Hash Join
                                                                             Output: country_1.name, (count())
                                                                             Hash Cond: (countrylanguage_1.countrycode = country_1.code)
                                                                             ->  Result
                                                                                   Output: (count()), countrylanguage_1.countrycode
                                                                                   Filter: ((count()) < 3)
                                                                                   ->  HashAggregate
                                                                                         Output: count(), count(), countrylanguage_1.countrycode
                                                                                         Group Key: countrylanguage_1.countrycode
                                                                                         ->  PX Hash 6:6  (slice8; segments: 6)
                                                                                               Output: countrylanguage_1.countrycode
                                                                                               Hash Key: countrylanguage_1.countrycode
                                                                                               ->  Partial Seq Scan on qp_with_clause.countrylanguage countrylanguage_1
                                                                                                     Output: countrylanguage_1.countrycode
                                                                             ->  Hash
                                                                                   Output: country_1.code, country_1.name
                                                                                   ->  PX Hash 6:6  (slice9; segments: 6)
                                                                                         Output: country_1.code, country_1.name
                                                                                         Hash Key: country_1.code
                                                                                         ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                               Output: country_1.code, country_1.name
                                                                                               Filter: (country_1.gnp > '100000'::numeric)
 Optimizer: PolarDB PX Optimizer
(88 rows)

with somecheapasiandiversecountries as
(
 select FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,count(*) ASIAN_COUNT from
 (
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Southeast Asia'
 and country.continent = 'Asia'
 
 UNION ALL
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Eastern Asia'
 and country.continent = 'Asia'
 UNION ALL
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Middle East'
 and country.continent = 'Asia'
 ) FOO, countrylanguage
 where FOO.code = countrylanguage.countrycode
 group by FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,countrylanguage.countrycode
 HAVING count(*) >=
 (select min(CNT) FROM
   (select count(*) CNT,country.code from countrylanguage,country
    where countrylanguage.countrycode=country.code
    and country.continent = 'Asia'
    and country.region = 'Southern and Central Asia'
    group by country.code
   ) FOO1
 )
)
select FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,count(*) COMPARED_WITH_CHEAP_ASIAN_CNT
from
(
select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
from country,city
where country.capital = city.id 
and country.continent = 'North America'
UNION ALL
select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
from country,city
where country.capital =	city.id	
and country.continent =	'South America'
) FOO,countrylanguage
where FOO.code = countrylanguage.countrycode
group by FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate
HAVING count(*)  >=
 (select min(ASIAN_COUNT) FROM
   (select ASIAN_COUNT FROM somecheapasiandiversecountries,country
    where somecheapasiandiversecountries.code = country.code
    and country.gnp >= country.gnpold
   ) ASIANCOUNT
 )
order by COUNTRY;
 code |             country              |         capital         |            headofstate            | compared_with_cheap_asian_cnt 
------+----------------------------------+-------------------------+-----------------------------------+-------------------------------
 ATG  | Antigua and Barbuda              | Saint Johns             | Elisabeth II                      |                             2
 ARG  | Argentina                        | Buenos Aires            | Fernando de la Rua                |                             3
 ABW  | Aruba                            | Oranjestad              | Beatrix                           |                             4
 BHS  | Bahamas                          | Nassau                  | Elisabeth II                      |                             2
 BRB  | Barbados                         | Bridgetown              | Elisabeth II                      |                             2
 BLZ  | Belize                           | Belmopan                | Elisabeth II                      |                             4
 BOL  | Bolivia                          | La Paz                  | Hugo Banzer Suarez                |                             4
 BRA  | Brazil                           | Brasilia                | Fernando Henrique Cardoso         |                             5
 CAN  | Canada                           | Ottawa                  | Elisabeth II                      |                            12
 CHL  | Chile                            | Santiago de Chile       | Ricardo Lagos Escobar             |                             4
 COL  | Colombia                         | Santafe de Bogota       | Andres Pastrana Arango            |                             5
 CRI  | Costa Rica                       | San Jose                | Miguel Angel Rodriguez Echeverria |                             4
 DMA  | Dominica                         | Roseau                  | Vernon Shaw                       |                             2
 DOM  | Dominican Republic               | Santo Domingo de Guzman | Hipolito Mejia Dominguez          |                             2
 ECU  | Ecuador                          | Quito                   | Gustavo Noboa Bejarano            |                             2
 SLV  | El Salvador                      | San Salvador            | Francisco Guillermo Flores Perez  |                             2
 GUF  | French Guiana                    | Cayenne                 | Jacques Chirac                    |                             2
 GRL  | Greenland                        | Nuuk                    | Margrethe II                      |                             2
 GLP  | Guadeloupe                       | Basse-Terre             | Jacques Chirac                    |                             2
 GTM  | Guatemala                        | Ciudad de Guatemala     | Alfonso Portillo Cabrera          |                             5
 GUY  | Guyana                           | Georgetown              | Bharrat Jagdeo                    |                             3
 HTI  | Haiti                            | Port-au-Prince          | Jean-Bertrand Aristide            |                             2
 HND  | Honduras                         | Tegucigalpa             | Carlos Roberto Flores Facusse     |                             4
 JAM  | Jamaica                          | Kingston                | Elisabeth II                      |                             2
 MTQ  | Martinique                       | Fort-de-France          | Jacques Chirac                    |                             2
 MEX  | Mexico                           | Ciudad de Mexico        | Vicente Fox Quesada               |                             6
 ANT  | Netherlands Antilles             | Willemstad              | Beatrix                           |                             3
 NIC  | Nicaragua                        | Managua                 | Arnoldo Aleman Lacayo             |                             4
 PAN  | Panama                           | Ciudad de Panama        | Mireya Elisa Moscoso Rodriguez    |                             6
 PRY  | Paraguay                         | Asuncion                | Luis Angel Gonzalez Macchi        |                             4
 PER  | Peru                             | Lima                    | Valentin Paniagua Corazao         |                             3
 PRI  | Puerto Rico                      | San Juan                | George W. Bush                    |                             2
 KNA  | Saint Kitts and Nevis            | Basseterre              | Elisabeth II                      |                             2
 LCA  | Saint Lucia                      | Castries                | Elisabeth II                      |                             2
 VCT  | Saint Vincent and the Grenadines | Kingstown               | Elisabeth II                      |                             2
 SUR  | Suriname                         | Paramaribo              | Ronald Venetiaan                  |                             2
 TTO  | Trinidad and Tobago              | Port-of-Spain           | Arthur N. R. Robinson             |                             3
 USA  | United States                    | Washington              | George W. Bush                    |                            12
 VEN  | Venezuela                        | Caracas                 | Hugo Chavez Frias                 |                             3
 VIR  | Virgin Islands, U.S.             | Charlotte Amalie        | George W. Bush                    |                             3
(40 rows)

                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, country.name, city.name, country.headofstate, (count())
   Merge Key: country.name
   ->  Sort
         Output: country.code, country.name, city.name, country.headofstate, (count())
         Sort Key: country.name
         ->  Sort
               Output: country.code, country.name, city.name, country.headofstate, (count())
               Sort Key: country.name
               ->  Nested Loop
                     Output: country.code, country.name, city.name, country.headofstate, (count())
                     Join Filter: ((count()) >= (min((count()))))
                     ->  PX Broadcast 1:6  (slice7)
                           Output: (min((count())))
                           ->  Finalize Aggregate
                                 Output: min((count()))
                                 ->  PX Coordinator 6:1  (slice8; segments: 6)
                                       Output: (PARTIAL min((count())))
                                       ->  Partial Aggregate
                                             Output: PARTIAL min((count()))
                                             ->  Nested Loop
                                                   Output: (count())
                                                   Join Filter: true
                                                   ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                         Output: country_2.code, (count())
                                                         ->  Nested Loop
                                                               Output: country_2.code, (count())
                                                               Join Filter: ((count()) >= (min((count()))))
                                                               ->  PX Broadcast 1:6  (slice15)
                                                                     Output: (min((count())))
                                                                     ->  Finalize Aggregate
                                                                           Output: min((count()))
                                                                           ->  PX Coordinator 6:1  (slice16; segments: 6)
                                                                                 Output: (PARTIAL min((count())))
                                                                                 ->  Partial Aggregate
                                                                                       Output: PARTIAL min((count()))
                                                                                       ->  Finalize GroupAggregate
                                                                                             Output: count(), country_5.code
                                                                                             Group Key: country_5.code
                                                                                             ->  Sort
                                                                                                   Output: country_5.code, (PARTIAL count())
                                                                                                   Sort Key: country_5.code
                                                                                                   ->  PX Hash 6:6  (slice17; segments: 6)
                                                                                                         Output: country_5.code, (PARTIAL count())
                                                                                                         Hash Key: country_5.code
                                                                                                         ->  Partial GroupAggregate
                                                                                                               Output: country_5.code, PARTIAL count()
                                                                                                               Group Key: country_5.code
                                                                                                               ->  Sort
                                                                                                                     Output: country_5.code
                                                                                                                     Sort Key: country_5.code
                                                                                                                     ->  Nested Loop
                                                                                                                           Output: country_5.code
                                                                                                                           Join Filter: true
                                                                                                                           ->  PX Broadcast 6:6  (slice18; segments: 6)
                                                                                                                                 Output: country_5.code
                                                                                                                                 ->  Partial Seq Scan on qp_with_clause.country country_5
                                                                                                                                       Output: country_5.code
                                                                                                                                       Filter: ((country_5.continent = 'Asia'::text) AND (country_5.region = 'Southern and Central Asia'::text))
                                                                                                                           ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                                                                                                                 Index Cond: (countrylanguage_2.countrycode = country_5.code)
                                                               ->  Materialize
                                                                     Output: (count()), (count()), country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                     ->  HashAggregate
                                                                           Output: count(), count(), country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                           Group Key: country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                           ->  Hash Join
                                                                                 Output: country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                                 Hash Cond: (countrylanguage_1.countrycode = country_2.code)
                                                                                 ->  PX Hash 6:6  (slice10; segments: 6)
                                                                                       Output: countrylanguage_1.countrycode
                                                                                       Hash Key: countrylanguage_1.countrycode
                                                                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage countrylanguage_1
                                                                                             Output: countrylanguage_1.countrycode
                                                                                 ->  Hash
                                                                                       Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                       ->  PX Hash 6:6  (slice11; segments: 6)
                                                                                             Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                             Hash Key: country_2.code
                                                                                             ->  Append
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice12; segments: 6)
                                                                                                               Output: country_2.code, country_2.name, country_2.headofstate, country_2.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                                                                     Output: country_2.code, country_2.name, country_2.headofstate, country_2.capital
                                                                                                                     Filter: ((country_2.gnp < '10000'::numeric) AND (country_2.region = 'Southeast Asia'::text) AND (country_2.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_2
                                                                                                               Output: city_2.name
                                                                                                               Index Cond: (city_2.id = country_2.capital)
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_3.code, country_3.name, city_3.name, country_3.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice13; segments: 6)
                                                                                                               Output: country_3.code, country_3.name, country_3.headofstate, country_3.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_3
                                                                                                                     Output: country_3.code, country_3.name, country_3.headofstate, country_3.capital
                                                                                                                     Filter: ((country_3.gnp < '10000'::numeric) AND (country_3.region = 'Eastern Asia'::text) AND (country_3.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_3
                                                                                                               Output: city_3.name
                                                                                                               Index Cond: (city_3.id = country_3.capital)
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_4.code, country_4.name, city_4.name, country_4.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice14; segments: 6)
                                                                                                               Output: country_4.code, country_4.name, country_4.headofstate, country_4.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_4
                                                                                                                     Output: country_4.code, country_4.name, country_4.headofstate, country_4.capital
                                                                                                                     Filter: ((country_4.gnp < '10000'::numeric) AND (country_4.region = 'Middle East'::text) AND (country_4.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_4
                                                                                                               Output: city_4.name
                                                                                                               Index Cond: (city_4.id = country_4.capital)
                                                   ->  Partial Index Scan using country_pkey on qp_with_clause.country country_6
                                                         Output: country_6.gnp, country_6.gnpold
                                                         Index Cond: (country_6.code = country_2.code)
                                                         Filter: (country_6.gnp >= country_6.gnpold)
                     ->  HashAggregate
                           Output: count(), count(), country.code, country.name, country.headofstate, city.name
                           Group Key: country.name, country.code, city.name, country.headofstate
                           ->  Materialize
                                 Output: country.code, country.name, country.headofstate, city.name
                                 ->  Hash Join
                                       Output: country.code, country.name, country.headofstate, city.name
                                       Hash Cond: (country.code = countrylanguage.countrycode)
                                       ->  Append
                                             ->  PX Hash 6:6  (slice2; segments: 6)
                                                   Output: country.code, country.name, city.name, country.headofstate
                                                   Hash Key: country.code
                                                   ->  Nested Loop
                                                         Output: country.code, country.name, city.name, country.headofstate
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice3; segments: 6)
                                                               Output: country.code, country.name, country.headofstate, country.capital
                                                               ->  Partial Seq Scan on qp_with_clause.country
                                                                     Output: country.code, country.name, country.headofstate, country.capital
                                                                     Filter: (country.continent = 'North America'::text)
                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                                               Output: city.name
                                                               Index Cond: (city.id = country.capital)
                                             ->  PX Hash 6:6  (slice4; segments: 6)
                                                   Output: country_1.code, country_1.name, city_1.name, country_1.headofstate
                                                   Hash Key: country_1.code
                                                   ->  Nested Loop
                                                         Output: country_1.code, country_1.name, city_1.name, country_1.headofstate
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                               Output: country_1.code, country_1.name, country_1.headofstate, country_1.capital
                                                               ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                     Output: country_1.code, country_1.name, country_1.headofstate, country_1.capital
                                                                     Filter: (country_1.continent = 'South America'::text)
                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                               Output: city_1.name
                                                               Index Cond: (city_1.id = country_1.capital)
                                       ->  Hash
                                             Output: countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice6; segments: 6)
                                                   Output: countrylanguage.countrycode
                                                   Hash Key: countrylanguage.countrycode
                                                   ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                         Output: countrylanguage.countrycode
 Optimizer: PolarDB PX Optimizer
(162 rows)

 
 
-- ensure select includes with clause in it's syntax
-- query 1 using the same name for the CTE as a table. Main query should reference the CTE
with country as 
(select country.code,country.name COUNTRY, city.name CAPITAL, language, isofficial, percentage
 FROM country,city,countrylanguage
 WHERE country.code = countrylanguage.countrycode
 and country.capital = city.id
 and country.continent = 'Europe')
select * from
(select * from country where isofficial='True') e1,
(select * from country where percentage > 50) e2
where e1.code = e2.code order by e2.COUNTRY,e1.language LIMIT 20;
 code |        country         |        capital         |    language    | isofficial | percentage | code |        country         |        capital         |    language    | isofficial | percentage 
------+------------------------+------------------------+----------------+------------+------------+------+------------------------+------------------------+----------------+------------+------------
 ALB  | Albania                | Tirana                 | Albaniana      | t          |       97.9 | ALB  | Albania                | Tirana                 | Albaniana      | t          |       97.9
 AUT  | Austria                | Wien                   | German         | t          |         92 | AUT  | Austria                | Wien                   | German         | t          |         92
 BLR  | Belarus                | Minsk                  | Belorussian    | t          |       65.6 | BLR  | Belarus                | Minsk                  | Belorussian    | t          |       65.6
 BLR  | Belarus                | Minsk                  | Russian        | t          |         32 | BLR  | Belarus                | Minsk                  | Belorussian    | t          |       65.6
 BEL  | Belgium                | Bruxelles [Brussel]    | Dutch          | t          |       59.2 | BEL  | Belgium                | Bruxelles [Brussel]    | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel]    | French         | t          |       32.6 | BEL  | Belgium                | Bruxelles [Brussel]    | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel]    | German         | t          |          1 | BEL  | Belgium                | Bruxelles [Brussel]    | Dutch          | t          |       59.2
 BIH  | Bosnia and Herzegovina | Sarajevo               | Serbo-Croatian | t          |       99.2 | BIH  | Bosnia and Herzegovina | Sarajevo               | Serbo-Croatian | t          |       99.2
 BGR  | Bulgaria               | Sofija                 | Bulgariana     | t          |       83.2 | BGR  | Bulgaria               | Sofija                 | Bulgariana     | t          |       83.2
 HRV  | Croatia                | Zagreb                 | Serbo-Croatian | t          |       95.9 | HRV  | Croatia                | Zagreb                 | Serbo-Croatian | t          |       95.9
 CZE  | Czech Republic         | Praha                  | Czech          | t          |       81.2 | CZE  | Czech Republic         | Praha                  | Czech          | t          |       81.2
 DNK  | Denmark                | Kobenhavn              | Danish         | t          |       93.5 | DNK  | Denmark                | Kobenhavn              | Danish         | t          |       93.5
 EST  | Estonia                | Tallinn                | Estonian       | t          |       65.3 | EST  | Estonia                | Tallinn                | Estonian       | t          |       65.3
 FRO  | Faroe Islands          | Torshavn               | Danish         | t          |          0 | FRO  | Faroe Islands          | Torshavn               | Faroese        | t          |        100
 FRO  | Faroe Islands          | Torshavn               | Faroese        | t          |        100 | FRO  | Faroe Islands          | Torshavn               | Faroese        | t          |        100
 FIN  | Finland                | Helsinki [Helsingfors] | Finnish        | t          |       92.7 | FIN  | Finland                | Helsinki [Helsingfors] | Finnish        | t          |       92.7
 FIN  | Finland                | Helsinki [Helsingfors] | Swedish        | t          |        5.7 | FIN  | Finland                | Helsinki [Helsingfors] | Finnish        | t          |       92.7
 FRA  | France                 | Paris                  | French         | t          |       93.6 | FRA  | France                 | Paris                  | French         | t          |       93.6
 DEU  | Germany                | Berlin                 | German         | t          |       91.3 | DEU  | Germany                | Berlin                 | German         | t          |       91.3
 GIB  | Gibraltar              | Gibraltar              | English        | t          |       88.9 | GIB  | Gibraltar              | Gibraltar              | English        | t          |       88.9
(20 rows)

                                                                                                                                                   QUERY PLAN                                                                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
   Merge Key: share0_ref2.name, share0_ref3.language
   ->  Sort
         Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
         Sort Key: share0_ref2.name, share0_ref3.language
         ->  Sequence
               Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
               ->  Shared Scan (Producer; slice1; share0)
                     Output: share0_ref1.code, share0_ref1.name, share0_ref1.name_1, share0_ref1.language, share0_ref1.isofficial, share0_ref1.percentage
                     ->  Hash Join
                           Output: country.code, country.name, city.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           Hash Cond: (countrylanguage.countrycode = country.code)
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                 Hash Key: countrylanguage.countrycode
                                 ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                       Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                       Filter: (countrylanguage.isofficial OR (countrylanguage.percentage > '50'::double precision))
                           ->  Hash
                                 Output: country.code, country.name, city.name
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: country.code, country.name, city.name
                                       Hash Key: country.code
                                       ->  Nested Loop
                                             Output: country.code, country.name, city.name
                                             Join Filter: true
                                             ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                   Output: country.code, country.name, country.capital
                                                   ->  Partial Seq Scan on qp_with_clause.country
                                                         Output: country.code, country.name, country.capital
                                                         Filter: (country.continent = 'Europe'::text)
                                             ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                                   Output: city.name
                                                   Index Cond: (city.id = country.capital)
               ->  PX Hash 1:6  (slice5)
                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                     ->  Limit
                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                           ->  PX Coordinator 6:1  (slice6; segments: 6)
                                 Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                                 Merge Key: share0_ref2.name, share0_ref3.language
                                 ->  Sort
                                       Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                                       Sort Key: share0_ref2.name, share0_ref3.language
                                       ->  Hash Join
                                             Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                                             Hash Cond: (share0_ref3.code = share0_ref2.code)
                                             ->  Result
                                                   Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                                                   Filter: share0_ref3.isofficial
                                                   ->  Shared Scan (Consumer; slice6; share0)
                                                         Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                                             ->  Hash
                                                   Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                                                   ->  Result
                                                         Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                                                         Filter: (share0_ref2.percentage > '50'::double precision)
                                                         ->  Shared Scan (Consumer; slice6; share0)
                                                               Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
 Optimizer: PolarDB PX Optimizer
(61 rows)

-- query 2 using multiple CTEs with same names as tables. 
with country as 
(select country.code,country.name COUNTRY, city.name CAPITAL, language, isofficial, percentage
 FROM country,city,countrylanguage
 WHERE country.code = countrylanguage.countrycode
 and country.capital = city.id
 and country.continent = 'Europe'),
countrylanguage(code1,country1,capital1,language1,isofficial1,percentage1,code2,country2,capital2,language2,isofficial2,percentage2) as
(
select * from
(select * from country where isofficial='True') e1,
(select * from country where percentage > 50) e2
where e1.code = e2.code order by e2.COUNTRY,e1.language
)
select code1,country1,capital1,language1,isofficial1,percentage1,country.COUNTRY from country,countrylanguage where country.code = countrylanguage.code1
and country.percentage = countrylanguage.percentage1
order by COUNTRY,percentage1 LIMIT 20;-- queries using same name for CTEs and the subquery aliases in the main query
 code1 |        country1        |        capital1        |   language1    | isofficial1 | percentage1 |        country         
-------+------------------------+------------------------+----------------+-------------+-------------+------------------------
 ALB   | Albania                | Tirana                 | Albaniana      | t           |        97.9 | Albania
 AUT   | Austria                | Wien                   | German         | t           |          92 | Austria
 BLR   | Belarus                | Minsk                  | Russian        | t           |          32 | Belarus
 BLR   | Belarus                | Minsk                  | Belorussian    | t           |        65.6 | Belarus
 BEL   | Belgium                | Bruxelles [Brussel]    | German         | t           |           1 | Belgium
 BEL   | Belgium                | Bruxelles [Brussel]    | French         | t           |        32.6 | Belgium
 BEL   | Belgium                | Bruxelles [Brussel]    | Dutch          | t           |        59.2 | Belgium
 BIH   | Bosnia and Herzegovina | Sarajevo               | Serbo-Croatian | t           |        99.2 | Bosnia and Herzegovina
 BGR   | Bulgaria               | Sofija                 | Bulgariana     | t           |        83.2 | Bulgaria
 HRV   | Croatia                | Zagreb                 | Serbo-Croatian | t           |        95.9 | Croatia
 CZE   | Czech Republic         | Praha                  | Czech          | t           |        81.2 | Czech Republic
 DNK   | Denmark                | Kobenhavn              | Danish         | t           |        93.5 | Denmark
 EST   | Estonia                | Tallinn                | Estonian       | t           |        65.3 | Estonia
 FRO   | Faroe Islands          | Torshavn               | Danish         | t           |           0 | Faroe Islands
 FRO   | Faroe Islands          | Torshavn               | Faroese        | t           |         100 | Faroe Islands
 FIN   | Finland                | Helsinki [Helsingfors] | Swedish        | t           |         5.7 | Finland
 FIN   | Finland                | Helsinki [Helsingfors] | Finnish        | t           |        92.7 | Finland
 FRA   | France                 | Paris                  | French         | t           |        93.6 | France
 DEU   | Germany                | Berlin                 | German         | t           |        91.3 | Germany
 GIB   | Gibraltar              | Gibraltar              | English        | t           |        88.9 | Gibraltar
(20 rows)

                                                                                                                  QUERY PLAN                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref4.name
   Merge Key: share0_ref4.name, share0_ref3.percentage
   ->  Sort
         Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref4.name
         Sort Key: share0_ref4.name, share0_ref3.percentage
         ->  Sequence
               Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref4.name
               ->  Shared Scan (Producer; slice1; share0)
                     Output: share0_ref1.code, share0_ref1.name, share0_ref1.name_1, share0_ref1.language, share0_ref1.isofficial, share0_ref1.percentage
                     ->  Hash Join
                           Output: country.code, country.name, city.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           Hash Cond: (countrylanguage.countrycode = country.code)
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                 Hash Key: countrylanguage.countrycode
                                 ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                       Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           ->  Hash
                                 Output: country.code, country.name, city.name
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: country.code, country.name, city.name
                                       Hash Key: country.code
                                       ->  Nested Loop
                                             Output: country.code, country.name, city.name
                                             Join Filter: true
                                             ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                   Output: country.code, country.name, country.capital
                                                   ->  Partial Seq Scan on qp_with_clause.country
                                                         Output: country.code, country.name, country.capital
                                                         Filter: (country.continent = 'Europe'::text)
                                             ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                                   Output: city.name
                                                   Index Cond: (city.id = country.capital)
               ->  PX Hash 1:6  (slice5)
                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref4.name
                     ->  Limit
                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref4.name
                           ->  PX Coordinator 6:1  (slice6; segments: 6)
                                 Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref4.name
                                 Merge Key: share0_ref4.name, share0_ref3.percentage
                                 ->  Sort
                                       Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref4.name
                                       Sort Key: share0_ref4.name, share0_ref3.percentage
                                       ->  Hash Join
                                             Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref4.name
                                             Hash Cond: ((share0_ref4.code = share0_ref3.code) AND (share0_ref4.percentage = share0_ref3.percentage))
                                             ->  Shared Scan (Consumer; slice6; share0)
                                                   Output: share0_ref4.code, share0_ref4.name, share0_ref4.name_1, share0_ref4.language, share0_ref4.isofficial, share0_ref4.percentage
                                             ->  Hash
                                                   Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                                                   ->  Result
                                                         Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                                                         Filter: (share0_ref3.code = share0_ref2.code)
                                                         ->  Sort
                                                               Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name
                                                               Sort Key: share0_ref2.name, share0_ref3.language
                                                               ->  Hash Join
                                                                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name
                                                                     Hash Cond: (share0_ref3.code = share0_ref2.code)
                                                                     ->  Result
                                                                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                                                                           Filter: share0_ref3.isofficial
                                                                           ->  Shared Scan (Consumer; slice6; share0)
                                                                                 Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                                                                     ->  Hash
                                                                           Output: share0_ref2.code, share0_ref2.name
                                                                           ->  Result
                                                                                 Output: share0_ref2.code, share0_ref2.name
                                                                                 Filter: (share0_ref2.percentage > '50'::double precision)
                                                                                 ->  Shared Scan (Consumer; slice6; share0)
                                                                                       Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
 Optimizer: PolarDB PX Optimizer
(73 rows)

-- query1
with c1 as 
(select country.code,country.name COUNTRY, city.name CAPITAL, language, isofficial, percentage
 FROM country,city,countrylanguage
 WHERE country.code = countrylanguage.countrycode
 and country.capital = city.id
 and country.continent = 'Europe'),
c2 as
(select country.code,country.name COUNTRY, city.name CAPITAL, language, isofficial, percentage
 FROM country,city,countrylanguage
 WHERE country.code = countrylanguage.countrycode
 and country.capital = city.id
 and country.continent = 'Asia')
select * from
(select * from c1 where isofficial='True') c1,
(select * from c2 where percentage > 50) c2
where c1.percentage = c2.percentage order by c2.COUNTRY,c1.language;
 code |    country    |  capital   |    language    | isofficial | percentage | code |  country   | capital |    language    | isofficial | percentage 
------+---------------+------------+----------------+------------+------------+------+------------+---------+----------------+------------+------------
 LIE  | Liechtenstein | Vaduz      | German         | t          |         89 | AZE  | Azerbaijan | Baku    | Azerbaijani    | t          |         89
 AUT  | Austria       | Wien       | German         | t          |         92 | CHN  | China      | Peking  | Chinese        | t          |         92
 ALB  | Albania       | Tirana     | Albaniana      | t          |       97.9 | JOR  | Jordan     | Amman   | Arabic         | t          |       97.9
 SVK  | Slovakia      | Bratislava | Slovak         | t          |       85.6 | MAC  | Macao      | Macao   | Canton Chinese | f          |       85.6
 FRO  | Faroe Islands | Torshavn   | Faroese        | t          |        100 | MDV  | Maldives   | Male    | Dhivehi        | t          |        100
 SMR  | San Marino    | San Marino | Italian        | t          |        100 | MDV  | Maldives   | Male    | Dhivehi        | t          |        100
 HRV  | Croatia       | Zagreb     | Serbo-Croatian | t          |       95.9 | PSE  | Palestine  | Gaza    | Arabic         | f          |       95.9
(7 rows)

                                                                                                                                        QUERY PLAN                                                                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country_1.code, country_1.name, city_1.name, countrylanguage_1.language, countrylanguage_1.isofficial, countrylanguage_1.percentage, country.code, country.name, city.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
   Merge Key: country.name, countrylanguage_1.language
   ->  Sort
         Output: country_1.code, country_1.name, city_1.name, countrylanguage_1.language, countrylanguage_1.isofficial, countrylanguage_1.percentage, country.code, country.name, city.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
         Sort Key: country.name, countrylanguage_1.language
         ->  Sort
               Output: country_1.code, country_1.name, city_1.name, countrylanguage_1.language, countrylanguage_1.isofficial, countrylanguage_1.percentage, country.code, country.name, city.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
               Sort Key: country.name, countrylanguage_1.language
               ->  Hash Join
                     Output: country_1.code, country_1.name, city_1.name, countrylanguage_1.language, countrylanguage_1.isofficial, countrylanguage_1.percentage, country.code, country.name, city.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                     Hash Cond: (countrylanguage.percentage = countrylanguage_1.percentage)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: country.code, country.name, city.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           Hash Key: countrylanguage.percentage
                           ->  Nested Loop
                                 Output: country.code, country.name, city.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice3; segments: 6)
                                       Output: country.code, country.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage, country.capital
                                       ->  Nested Loop
                                             Output: country.code, country.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage, country.capital
                                             Join Filter: true
                                             ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                   Output: country.code, country.name, country.capital
                                                   ->  Partial Seq Scan on qp_with_clause.country
                                                         Output: country.code, country.name, country.capital
                                                         Filter: (country.continent = 'Asia'::text)
                                             ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage
                                                   Output: countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                                   Index Cond: (countrylanguage.countrycode = country.code)
                                                   Filter: (countrylanguage.percentage > '50'::double precision)
                                 ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                       Output: city.name
                                       Index Cond: (city.id = country.capital)
                     ->  Hash
                           Output: country_1.code, country_1.name, city_1.name, countrylanguage_1.language, countrylanguage_1.isofficial, countrylanguage_1.percentage
                           ->  PX Hash 6:6  (slice5; segments: 6)
                                 Output: country_1.code, country_1.name, city_1.name, countrylanguage_1.language, countrylanguage_1.isofficial, countrylanguage_1.percentage
                                 Hash Key: countrylanguage_1.percentage
                                 ->  Nested Loop
                                       Output: country_1.code, country_1.name, city_1.name, countrylanguage_1.language, countrylanguage_1.isofficial, countrylanguage_1.percentage
                                       Join Filter: true
                                       ->  PX Broadcast 6:6  (slice6; segments: 6)
                                             Output: country_1.code, country_1.name, countrylanguage_1.language, countrylanguage_1.isofficial, countrylanguage_1.percentage, country_1.capital
                                             ->  Nested Loop
                                                   Output: country_1.code, country_1.name, countrylanguage_1.language, countrylanguage_1.isofficial, countrylanguage_1.percentage, country_1.capital
                                                   Join Filter: true
                                                   ->  PX Broadcast 6:6  (slice7; segments: 6)
                                                         Output: country_1.code, country_1.name, country_1.capital
                                                         ->  Partial Seq Scan on qp_with_clause.country country_1
                                                               Output: country_1.code, country_1.name, country_1.capital
                                                               Filter: (country_1.continent = 'Europe'::text)
                                                   ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                                         Output: countrylanguage_1.language, countrylanguage_1.isofficial, countrylanguage_1.percentage
                                                         Index Cond: (countrylanguage_1.countrycode = country_1.code)
                                                         Filter: (countrylanguage_1.isofficial AND (countrylanguage_1.percentage > '50'::double precision))
                                       ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                             Output: city_1.name
                                             Index Cond: (city_1.id = country_1.capital)
 Optimizer: PolarDB PX Optimizer
(61 rows)

-- query2 using same names as tables 
with country as 
(select country.code,country.name COUNTRY, city.name CAPITAL, language, isofficial, percentage
 FROM country,city,countrylanguage
 WHERE country.code = countrylanguage.countrycode
 and country.capital = city.id
 and country.continent = 'Europe'),
countrylanguage as
(select country.code,country.COUNTRY,country.language,country.isofficial,country.percentage
 FROM country,countrylanguage
 WHERE country.code = countrylanguage.countrycode
)
select * from
(select * from country where isofficial='True') country,
(select * from countrylanguage where percentage > 50) countrylanguage
where country.percentage = countrylanguage.percentage order by countrylanguage.COUNTRY,country.language LIMIT 40;
 code |        country         |       capital       |    language    | isofficial | percentage | code |        country         |    language    | isofficial | percentage 
------+------------------------+---------------------+----------------+------------+------------+------+------------------------+----------------+------------+------------
 ALB  | Albania                | Tirana              | Albaniana      | t          |       97.9 | ALB  | Albania                | Albaniana      | t          |       97.9
 ALB  | Albania                | Tirana              | Albaniana      | t          |       97.9 | ALB  | Albania                | Albaniana      | t          |       97.9
 ALB  | Albania                | Tirana              | Albaniana      | t          |       97.9 | ALB  | Albania                | Albaniana      | t          |       97.9
 AUT  | Austria                | Wien                | German         | t          |         92 | AUT  | Austria                | German         | t          |         92
 AUT  | Austria                | Wien                | German         | t          |         92 | AUT  | Austria                | German         | t          |         92
 AUT  | Austria                | Wien                | German         | t          |         92 | AUT  | Austria                | German         | t          |         92
 AUT  | Austria                | Wien                | German         | t          |         92 | AUT  | Austria                | German         | t          |         92
 AUT  | Austria                | Wien                | German         | t          |         92 | AUT  | Austria                | German         | t          |         92
 AUT  | Austria                | Wien                | German         | t          |         92 | AUT  | Austria                | German         | t          |         92
 AUT  | Austria                | Wien                | German         | t          |         92 | AUT  | Austria                | German         | t          |         92
 AUT  | Austria                | Wien                | German         | t          |         92 | AUT  | Austria                | German         | t          |         92
 BLR  | Belarus                | Minsk               | Belorussian    | t          |       65.6 | BLR  | Belarus                | Belorussian    | t          |       65.6
 BLR  | Belarus                | Minsk               | Belorussian    | t          |       65.6 | BLR  | Belarus                | Belorussian    | t          |       65.6
 BLR  | Belarus                | Minsk               | Belorussian    | t          |       65.6 | BLR  | Belarus                | Belorussian    | t          |       65.6
 BLR  | Belarus                | Minsk               | Belorussian    | t          |       65.6 | BLR  | Belarus                | Belorussian    | t          |       65.6
 BEL  | Belgium                | Bruxelles [Brussel] | Dutch          | t          |       59.2 | BEL  | Belgium                | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel] | Dutch          | t          |       59.2 | BEL  | Belgium                | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel] | Dutch          | t          |       59.2 | BEL  | Belgium                | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel] | Dutch          | t          |       59.2 | BEL  | Belgium                | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel] | Dutch          | t          |       59.2 | BEL  | Belgium                | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel] | Dutch          | t          |       59.2 | BEL  | Belgium                | Dutch          | t          |       59.2
 BIH  | Bosnia and Herzegovina | Sarajevo            | Serbo-Croatian | t          |       99.2 | BIH  | Bosnia and Herzegovina | Serbo-Croatian | t          |       99.2
 BGR  | Bulgaria               | Sofija              | Bulgariana     | t          |       83.2 | BGR  | Bulgaria               | Bulgariana     | t          |       83.2
 BGR  | Bulgaria               | Sofija              | Bulgariana     | t          |       83.2 | BGR  | Bulgaria               | Bulgariana     | t          |       83.2
 BGR  | Bulgaria               | Sofija              | Bulgariana     | t          |       83.2 | BGR  | Bulgaria               | Bulgariana     | t          |       83.2
 BGR  | Bulgaria               | Sofija              | Bulgariana     | t          |       83.2 | BGR  | Bulgaria               | Bulgariana     | t          |       83.2
 HRV  | Croatia                | Zagreb              | Serbo-Croatian | t          |       95.9 | HRV  | Croatia                | Serbo-Croatian | t          |       95.9
 HRV  | Croatia                | Zagreb              | Serbo-Croatian | t          |       95.9 | HRV  | Croatia                | Serbo-Croatian | t          |       95.9
 CZE  | Czech Republic         | Praha               | Czech          | t          |       81.2 | CZE  | Czech Republic         | Czech          | t          |       81.2
 CZE  | Czech Republic         | Praha               | Czech          | t          |       81.2 | CZE  | Czech Republic         | Czech          | t          |       81.2
 CZE  | Czech Republic         | Praha               | Czech          | t          |       81.2 | CZE  | Czech Republic         | Czech          | t          |       81.2
 CZE  | Czech Republic         | Praha               | Czech          | t          |       81.2 | CZE  | Czech Republic         | Czech          | t          |       81.2
 CZE  | Czech Republic         | Praha               | Czech          | t          |       81.2 | CZE  | Czech Republic         | Czech          | t          |       81.2
 CZE  | Czech Republic         | Praha               | Czech          | t          |       81.2 | CZE  | Czech Republic         | Czech          | t          |       81.2
 CZE  | Czech Republic         | Praha               | Czech          | t          |       81.2 | CZE  | Czech Republic         | Czech          | t          |       81.2
 CZE  | Czech Republic         | Praha               | Czech          | t          |       81.2 | CZE  | Czech Republic         | Czech          | t          |       81.2
 DNK  | Denmark                | Kobenhavn           | Danish         | t          |       93.5 | DNK  | Denmark                | Danish         | t          |       93.5
 DNK  | Denmark                | Kobenhavn           | Danish         | t          |       93.5 | DNK  | Denmark                | Danish         | t          |       93.5
 DNK  | Denmark                | Kobenhavn           | Danish         | t          |       93.5 | DNK  | Denmark                | Danish         | t          |       93.5
 DNK  | Denmark                | Kobenhavn           | Danish         | t          |       93.5 | DNK  | Denmark                | Danish         | t          |       93.5
(40 rows)

                                                                                                                                         QUERY PLAN                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage, share0_ref3.code, share0_ref3.name, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
   Merge Key: share0_ref3.name, share0_ref2.language
   ->  Sort
         Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage, share0_ref3.code, share0_ref3.name, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
         Sort Key: share0_ref3.name, share0_ref2.language
         ->  Sequence
               Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage, share0_ref3.code, share0_ref3.name, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
               ->  Shared Scan (Producer; slice1; share0)
                     Output: share0_ref1.code, share0_ref1.name, share0_ref1.name_1, share0_ref1.language, share0_ref1.isofficial, share0_ref1.percentage
                     ->  Hash Join
                           Output: country.code, country.name, city.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           Hash Cond: (countrylanguage.countrycode = country.code)
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                 Hash Key: countrylanguage.countrycode
                                 ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                       Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           ->  Hash
                                 Output: country.code, country.name, city.name
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: country.code, country.name, city.name
                                       Hash Key: country.code
                                       ->  Nested Loop
                                             Output: country.code, country.name, city.name
                                             Join Filter: true
                                             ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                   Output: country.code, country.name, country.capital
                                                   ->  Partial Seq Scan on qp_with_clause.country
                                                         Output: country.code, country.name, country.capital
                                                         Filter: (country.continent = 'Europe'::text)
                                             ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                                   Output: city.name
                                                   Index Cond: (city.id = country.capital)
               ->  PX Hash 1:6  (slice5)
                     Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage, share0_ref3.code, share0_ref3.name, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                     ->  Limit
                           Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage, share0_ref3.code, share0_ref3.name, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                           ->  PX Coordinator 6:1  (slice6; segments: 6)
                                 Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage, share0_ref3.code, share0_ref3.name, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                                 Merge Key: share0_ref3.name, share0_ref2.language
                                 ->  Sort
                                       Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage, share0_ref3.code, share0_ref3.name, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                                       Sort Key: share0_ref3.name, share0_ref2.language
                                       ->  Hash Join
                                             Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage, share0_ref3.code, share0_ref3.name, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                                             Hash Cond: (share0_ref3.percentage = share0_ref2.percentage)
                                             ->  PX Hash 6:6  (slice7; segments: 6)
                                                   Output: share0_ref3.code, share0_ref3.name, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                                                   Hash Key: share0_ref3.percentage
                                                   ->  Nested Loop
                                                         Output: share0_ref3.code, share0_ref3.name, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice8; segments: 6)
                                                               Output: share0_ref3.code, share0_ref3.name, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                                                               ->  Result
                                                                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                                                                     Filter: (share0_ref3.percentage > '50'::double precision)
                                                                     ->  Shared Scan (Consumer; slice8; share0)
                                                                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                                                         ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                                               Index Cond: (countrylanguage_1.countrycode = share0_ref3.code)
                                             ->  Hash
                                                   Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                                                   ->  PX Hash 6:6  (slice9; segments: 6)
                                                         Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                                                         Hash Key: share0_ref2.percentage
                                                         ->  Result
                                                               Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                                                               Filter: (share0_ref2.isofficial AND (share0_ref2.percentage > '50'::double precision))
                                                               ->  Shared Scan (Consumer; slice9; share0)
                                                                     Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
 Optimizer: PolarDB PX Optimizer
(73 rows)

-- Using the same name for the CTE at every subquery-level 
select avg(population12),CITY12
from
(
with city(CITY1,POPULATION1) as (select city.name,city.population from city where city.population >= 100)
select CITY12,POPULATION12 from 
(
  with city(CITY2,POPULATION2) as ( select city1,population1 from city where population1 >= 1000 )
  select CITY12,POPULATION12 from 
  (
     with city(CITY3,POPULATION3) as (select city2,population2 from city where population2 >= 10000)
     select CITY12,POPULATION12 from
     (
       with city(CITY4,POPULATION4) as (select city3,population3 from  city where population3 >= 20000)
       select CITY12,POPULATION12 from
       (
        with city(CITY5,POPULATION5) as (select city4,population4 from  city where population4 >= 50000)
        select CITY12,POPULATION12 from
        (
         with city(CITY6,POPULATION6) as (select city5,population5 from  city where population5 >= 80000)
         select CITY12,POPULATION12 from
         (
          with city(CITY7,POPULATION7) as (select city6,population6 from  city where population6 >= 150000)
          select CITY12,POPULATION12 from
          (
           with city(CITY8,POPULATION8) as (select city7,population7 from  city where population7 >= 200000)
           select CITY12,POPULATION12 from
           (
            with city(CITY9,POPULATION9) as (select city8,population8 from city where population8 >= 250000)
            select CITY12,POPULATION12 from
            (
             with city(CITY10,POPULATION10) as (select city9,population9 from  city where population9 >= 300000)
             select city12,population12 from
             (
              with city(CITY11,POPULATION11) as (select city10,population10 from city where population10 >= 6500000)
              select CITY12,POPULATION12 from
              (
               with city(CITY12,POPULATION12) as (select city11,population11 from city where population11 >= 7000000)
               select s1.city12,s1.population12 from city s1,city s2
              ) FOO11
             ) FOO10
            ) FOO9
           ) FOO8
          ) FOO7
         ) FOO6
        ) FOO5
       ) FOO4
     )FOO3
  ) FOO2
) FOO1
) FOO0 group by city12 order by city12;-- negative cases where queries have duplicate names in CTEs
          avg          |      city12      
-----------------------+------------------
  8591309.000000000000 | Ciudad de Mexico
  7206704.000000000000 | Delhi
  8787958.000000000000 | Istanbul
  9604900.000000000000 | Jakarta
  9269265.000000000000 | Karachi
  7285000.000000000000 | London
  8389200.000000000000 | Moscow
 10500000.000000000000 | Mumbai (Bombay)
  8008278.000000000000 | New York
  7472000.000000000000 | Peking
  9968485.000000000000 | Sao Paulo
  9981619.000000000000 | Seoul
  9696300.000000000000 | Shanghai
  7980230.000000000000 | Tokyo
(14 rows)

                                                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (avg(share11_ref3.population)), share11_ref3.name
   Merge Key: share11_ref3.name
   ->  Finalize GroupAggregate
         Output: avg(share11_ref3.population), share11_ref3.name
         Group Key: share11_ref3.name
         ->  Sort
               Output: share11_ref3.name, (PARTIAL avg(share11_ref3.population))
               Sort Key: share11_ref3.name
               ->  PX Hash 6:6  (slice2; segments: 6)
                     Output: share11_ref3.name, (PARTIAL avg(share11_ref3.population))
                     Hash Key: share11_ref3.name
                     ->  Partial HashAggregate
                           Output: share11_ref3.name, PARTIAL avg(share11_ref3.population)
                           Group Key: share11_ref3.name
                           ->  Sequence
                                 Output: share11_ref3.name, share11_ref3.population
                                 ->  Shared Scan (Producer; slice2; share11)
                                       Output: share11_ref1.name, share11_ref1.population
                                       ->  Partial Seq Scan on qp_with_clause.city
                                             Output: city.name, city.population
                                             Filter: ((city.population >= 100) AND (city.population >= 1000) AND (city.population >= 10000) AND (city.population >= 20000) AND (city.population >= 50000) AND (city.population >= 80000) AND (city.population >= 150000) AND (city.population >= 200000) AND (city.population >= 250000) AND (city.population >= 300000) AND (city.population >= 6500000) AND (city.population >= 7000000))
                                 ->  Nested Loop
                                       Output: share11_ref3.name, share11_ref3.population
                                       Join Filter: true
                                       ->  Shared Scan (Producer; slice2; share11)
                                             Output: share11_ref3.name, share11_ref3.population
                                       ->  Materialize
                                             ->  PX Broadcast 6:6  (slice3; segments: 6)
                                                   ->  Result
                                                         ->  Shared Scan (Consumer; slice3; share11)
                                                               Output: share11_ref2.name, share11_ref2.population
 Optimizer: PolarDB PX Optimizer
(33 rows)

-- Tests for duplicate column aliases
with capitals as 
(select country.code,id,city.name,city.countrycode as code from city,country 
 where city.countrycode = country.code AND city.id = country.capital) 
select * from capitals where id < 100;
 code | id |       name       | code 
------+----+------------------+------
 AFG  |  1 | Kabul            | AFG
 NLD  |  5 | Amsterdam        | NLD
 ANT  | 33 | Willemstad       | ANT
 ALB  | 34 | Tirana           | ALB
 DZA  | 35 | Alger            | DZA
 ASM  | 54 | Fagatogo         | ASM
 AND  | 55 | Andorra la Vella | AND
 AGO  | 56 | Luanda           | AGO
 AIA  | 62 | The Valley       | AIA
 ATG  | 63 | Saint Johns      | ATG
 ARE  | 65 | Abu Dhabi        | ARE
 ARG  | 69 | Buenos Aires     | ARG
(12 rows)

                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, city.id, city.name, city.countrycode
   ->  Hash Join
         Output: country.code, city.id, city.name, city.countrycode
         Hash Cond: ((city.countrycode = country.code) AND (city.id = country.capital))
         ->  PX Hash 6:6  (slice2; segments: 6)
               Output: city.id, city.name, city.countrycode
               Hash Key: city.countrycode, city.id
               ->  Partial Index Scan using city_pkey on qp_with_clause.city
                     Output: city.id, city.name, city.countrycode
                     Index Cond: (city.id < 100)
         ->  Hash
               Output: country.code, country.capital
               ->  PX Hash 6:6  (slice3; segments: 6)
                     Output: country.code, country.capital
                     Hash Key: country.code, country.capital
                     ->  Partial Seq Scan on qp_with_clause.country
                           Output: country.code, country.capital
 Optimizer: PolarDB PX Optimizer
(19 rows)

with allofficiallanguages as 
(select countrylanguage.countrycode,city.countrycode,language from
 city,countrylanguage where countrylanguage.countrycode = city.countrycode and isofficial = 'True')
select * from allofficiallanguages where language like 'A%';
 countrycode | countrycode |  language   
-------------+-------------+-------------
 ALB         | ALB         | Albaniana
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 DZA         | DZA         | Arabic
 ARE         | ARE         | Arabic
 ARE         | ARE         | Arabic
 ARE         | ARE         | Arabic
 ARE         | ARE         | Arabic
 ARE         | ARE         | Arabic
 ARM         | ARM         | Armenian
 ARM         | ARM         | Armenian
 ARM         | ARM         | Armenian
 AZE         | AZE         | Azerbaijani
 AZE         | AZE         | Azerbaijani
 AZE         | AZE         | Azerbaijani
 AZE         | AZE         | Azerbaijani
 BHR         | BHR         | Arabic
 BOL         | BOL         | Aimara
 BOL         | BOL         | Aimara
 BOL         | BOL         | Aimara
 BOL         | BOL         | Aimara
 BOL         | BOL         | Aimara
 BOL         | BOL         | Aimara
 BOL         | BOL         | Aimara
 BOL         | BOL         | Aimara
 DJI         | DJI         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 EGY         | EGY         | Arabic
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 ZAF         | ZAF         | Afrikaans
 IRQ         | IRQ         | Arabic
 IRQ         | IRQ         | Arabic
 IRQ         | IRQ         | Arabic
 IRQ         | IRQ         | Arabic
 IRQ         | IRQ         | Arabic
 IRQ         | IRQ         | Arabic
 IRQ         | IRQ         | Arabic
 IRQ         | IRQ         | Arabic
 IRQ         | IRQ         | Arabic
 IRQ         | IRQ         | Arabic
 IRQ         | IRQ         | Arabic
 IRQ         | IRQ         | Arabic
 IRQ         | IRQ         | Arabic
 IRQ         | IRQ         | Arabic
 IRQ         | IRQ         | Arabic
 ISR         | ISR         | Arabic
 ISR         | ISR         | Arabic
 ISR         | ISR         | Arabic
 ISR         | ISR         | Arabic
 ISR         | ISR         | Arabic
 ISR         | ISR         | Arabic
 ISR         | ISR         | Arabic
 ISR         | ISR         | Arabic
 ISR         | ISR         | Arabic
 ISR         | ISR         | Arabic
 ISR         | ISR         | Arabic
 ISR         | ISR         | Arabic
 ISR         | ISR         | Arabic
 ISR         | ISR         | Arabic
 YEM         | YEM         | Arabic
 YEM         | YEM         | Arabic
 YEM         | YEM         | Arabic
 YEM         | YEM         | Arabic
 YEM         | YEM         | Arabic
 YEM         | YEM         | Arabic
 JOR         | JOR         | Arabic
 JOR         | JOR         | Arabic
 JOR         | JOR         | Arabic
 JOR         | JOR         | Arabic
 JOR         | JOR         | Arabic
 KWT         | KWT         | Arabic
 KWT         | KWT         | Arabic
 KWT         | KWT         | Arabic
 LBN         | LBN         | Arabic
 LBN         | LBN         | Arabic
 LBY         | LBY         | Arabic
 LBY         | LBY         | Arabic
 LBY         | LBY         | Arabic
 LBY         | LBY         | Arabic
 ESH         | ESH         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 MAR         | MAR         | Arabic
 OMN         | OMN         | Arabic
 OMN         | OMN         | Arabic
 OMN         | OMN         | Arabic
 OMN         | OMN         | Arabic
 OMN         | OMN         | Arabic
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 PER         | PER         | Aimara
 QAT         | QAT         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SAU         | SAU         | Arabic
 SOM         | SOM         | Arabic
 SOM         | SOM         | Arabic
 SOM         | SOM         | Arabic
 SDN         | SDN         | Arabic
 SDN         | SDN         | Arabic
 SDN         | SDN         | Arabic
 SDN         | SDN         | Arabic
 SDN         | SDN         | Arabic
 SDN         | SDN         | Arabic
 SDN         | SDN         | Arabic
 SDN         | SDN         | Arabic
 SDN         | SDN         | Arabic
 SDN         | SDN         | Arabic
 SDN         | SDN         | Arabic
 SDN         | SDN         | Arabic
 SYR         | SYR         | Arabic
 SYR         | SYR         | Arabic
 SYR         | SYR         | Arabic
 SYR         | SYR         | Arabic
 SYR         | SYR         | Arabic
 SYR         | SYR         | Arabic
 SYR         | SYR         | Arabic
 SYR         | SYR         | Arabic
 SYR         | SYR         | Arabic
 SYR         | SYR         | Arabic
 SYR         | SYR         | Arabic
 TCD         | TCD         | Arabic
 TCD         | TCD         | Arabic
 TUN         | TUN         | Arabic
 TUN         | TUN         | Arabic
 TUN         | TUN         | Arabic
 TUN         | TUN         | Arabic
 TUN         | TUN         | Arabic
 TUN         | TUN         | Arabic
 TUN         | TUN         | Arabic
 TUN         | TUN         | Arabic
(282 rows)

                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: countrylanguage.countrycode, city.countrycode, countrylanguage.language
   ->  Hash Join
         Output: countrylanguage.countrycode, city.countrycode, countrylanguage.language
         Hash Cond: (city.countrycode = countrylanguage.countrycode)
         ->  PX Hash 6:6  (slice2; segments: 6)
               Output: city.countrycode
               Hash Key: city.countrycode
               ->  Partial Seq Scan on qp_with_clause.city
                     Output: city.countrycode
         ->  Hash
               Output: countrylanguage.countrycode, countrylanguage.language
               ->  PX Hash 6:6  (slice3; segments: 6)
                     Output: countrylanguage.countrycode, countrylanguage.language
                     Hash Key: countrylanguage.countrycode
                     ->  Partial Seq Scan on qp_with_clause.countrylanguage
                           Output: countrylanguage.countrycode, countrylanguage.language
                           Filter: (countrylanguage.isofficial AND (countrylanguage.language ~~ 'A%'::text))
 Optimizer: PolarDB PX Optimizer
(19 rows)

with capitals(code,id,name,code) as 
(select country.code,id,city.name,city.countrycode from city,country 
 where city.countrycode = country.code AND city.id = country.capital) 
select * from capitals where id < 100;
 code | id |       name       | code 
------+----+------------------+------
 AFG  |  1 | Kabul            | AFG
 NLD  |  5 | Amsterdam        | NLD
 ANT  | 33 | Willemstad       | ANT
 ALB  | 34 | Tirana           | ALB
 DZA  | 35 | Alger            | DZA
 ASM  | 54 | Fagatogo         | ASM
 AND  | 55 | Andorra la Vella | AND
 AGO  | 56 | Luanda           | AGO
 AIA  | 62 | The Valley       | AIA
 ATG  | 63 | Saint Johns      | ATG
 ARE  | 65 | Abu Dhabi        | ARE
 ARG  | 69 | Buenos Aires     | ARG
(12 rows)

                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, city.id, city.name, city.countrycode
   ->  Hash Join
         Output: country.code, city.id, city.name, city.countrycode
         Hash Cond: ((city.countrycode = country.code) AND (city.id = country.capital))
         ->  PX Hash 6:6  (slice2; segments: 6)
               Output: city.id, city.name, city.countrycode
               Hash Key: city.countrycode, city.id
               ->  Partial Index Scan using city_pkey on qp_with_clause.city
                     Output: city.id, city.name, city.countrycode
                     Index Cond: (city.id < 100)
         ->  Hash
               Output: country.code, country.capital
               ->  PX Hash 6:6  (slice3; segments: 6)
                     Output: country.code, country.capital
                     Hash Key: country.code, country.capital
                     ->  Partial Seq Scan on qp_with_clause.country
                           Output: country.code, country.capital
 Optimizer: PolarDB PX Optimizer
(19 rows)

-- query1 CTE referencing itself
with lang_total as
( select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode 
  HAVING count(*) > (select max(lang_count) from lang_total)
)
select count(*) from lang_total;
ERROR:  relation "lang_total" does not exist
LINE 5:   HAVING count(*) > (select max(lang_count) from lang_total)
                                                         ^
DETAIL:  There is a WITH item named "lang_total", but it cannot be referenced from this part of the query.
HINT:  Use WITH RECURSIVE, or re-order the WITH items to remove forward references.
--query2 CTE forward referencing another CTE
with capitals as 
(select country.code,id,city.name from city,country 
 where city.countrycode = country.code AND city.id = country.capital),
lang_total as
( select count(*) as lang_count,country.code,alleuropeanlanguages.code
  from country join alleuropeanlanguages on (country.code=alleuropeanlanguages.code and governmentform='Federal Republic')
  group by country.code,alleuropeanlanguages.code order by country.code),
alleuropeanlanguages as 
(select country.code,country.name COUNTRY, city.name CAPITAL, language, isofficial, percentage
 FROM country,city,countrylanguage
 WHERE country.code = countrylanguage.countrycode
 and country.capital = city.id
 and country.continent = 'Europe')
select * from alleuropeanlanguages;-- negative cases with mismatching column list provided for CTEs
ERROR:  relation "alleuropeanlanguages" does not exist
LINE 6:   from country join alleuropeanlanguages on (country.code=al...
                            ^
DETAIL:  There is a WITH item named "alleuropeanlanguages", but it cannot be referenced from this part of the query.
HINT:  Use WITH RECURSIVE, or re-order the WITH items to remove forward references.
--query1
with capitals(code,id) as 
(select country.code,id,city.name from city,country 
 where city.countrycode = country.code AND city.id = country.capital)
select * from capitals;
 code |  id  |               name                
------+------+-----------------------------------
 AFG  |    1 | Kabul
 NLD  |    5 | Amsterdam
 ANT  |   33 | Willemstad
 ALB  |   34 | Tirana
 DZA  |   35 | Alger
 ASM  |   54 | Fagatogo
 AND  |   55 | Andorra la Vella
 AGO  |   56 | Luanda
 AIA  |   62 | The Valley
 ATG  |   63 | Saint Johns
 ARE  |   65 | Abu Dhabi
 ARG  |   69 | Buenos Aires
 ARM  |  126 | Yerevan
 ABW  |  129 | Oranjestad
 AUS  |  135 | Canberra
 AZE  |  144 | Baku
 BHS  |  148 | Nassau
 BHR  |  149 | al-Manama
 BGD  |  150 | Dhaka
 BRB  |  174 | Bridgetown
 BEL  |  179 | Bruxelles [Brussel]
 BLZ  |  185 | Belmopan
 BEN  |  187 | Porto-Novo
 BMU  |  191 | Hamilton
 BTN  |  192 | Thimphu
 BOL  |  194 | La Paz
 BIH  |  201 | Sarajevo
 BWA  |  204 | Gaborone
 BRA  |  211 | Brasilia
 GBR  |  456 | London
 VGB  |  537 | Road Town
 BRN  |  538 | Bandar Seri Begawan
 BGR  |  539 | Sofija
 BFA  |  549 | Ouagadougou
 BDI  |  552 | Bujumbura
 CYM  |  553 | George Town
 CHL  |  554 | Santiago de Chile
 COK  |  583 | Avarua
 CRI  |  584 | San Jose
 DJI  |  585 | Djibouti
 DMA  |  586 | Roseau
 DOM  |  587 | Santo Domingo de Guzman
 ECU  |  594 | Quito
 EGY  |  608 | Cairo
 SLV  |  645 | San Salvador
 ERI  |  652 | Asmara
 ESP  |  653 | Madrid
 ZAF  |  716 | Pretoria
 ETH  |  756 | Addis Abeba
 FLK  |  763 | Stanley
 FJI  |  764 | Suva
 PHL  |  766 | Manila
 FRO  |  901 | Torshavn
 GAB  |  902 | Libreville
 GMB  |  904 | Banjul
 GEO  |  905 | Tbilisi
 GHA  |  910 | Accra
 GIB  |  915 | Gibraltar
 GRD  |  916 | Saint Georges
 GRL  |  917 | Nuuk
 GLP  |  919 | Basse-Terre
 GUM  |  921 | Agaaa
 GTM  |  922 | Ciudad de Guatemala
 GIN  |  926 | Conakry
 GNB  |  927 | Bissau
 GUY  |  928 | Georgetown
 HTI  |  929 | Port-au-Prince
 HND  |  933 | Tegucigalpa
 SJM  |  938 | Longyearbyen
 IDN  |  939 | Jakarta
 IND  | 1109 | New Delhi
 IRQ  | 1365 | Baghdad
 IRN  | 1380 | Teheran
 IRL  | 1447 | Dublin
 ISL  | 1449 | Reykjavik
 ISR  | 1450 | Jerusalem
 ITA  | 1464 | Roma
 TMP  | 1522 | Dili
 AUT  | 1523 | Wien
 JAM  | 1530 | Kingston
 JPN  | 1532 | Tokyo
 YEM  | 1780 | Sanaa
 JOR  | 1786 | Amman
 CXR  | 1791 | Flying Fish Cove
 YUG  | 1792 | Beograd
 KHM  | 1800 | Phnom Penh
 CMR  | 1804 | Yaounde
 CAN  | 1822 | Ottawa
 CPV  | 1859 | Praia
 KAZ  | 1864 | Astana
 KEN  | 1881 | Nairobi
 CAF  | 1889 | Bangui
 CHN  | 1891 | Peking
 KGZ  | 2253 | Bishkek
 KIR  | 2256 | Bairiki
 COL  | 2257 | Santafe de Bogota
 COM  | 2295 | Moroni
 COG  | 2296 | Brazzaville
 COD  | 2298 | Kinshasa
 CCK  | 2317 | West Island
 PRK  | 2318 | Pyongyang
 KOR  | 2331 | Seoul
 GRC  | 2401 | Athenai
 HRV  | 2409 | Zagreb
 CUB  | 2413 | La Habana
 KWT  | 2429 | Kuwait
 CYP  | 2430 | Nicosia
 LAO  | 2432 | Vientiane
 LVA  | 2434 | Riga
 LSO  | 2437 | Maseru
 LBN  | 2438 | Beirut
 LBR  | 2440 | Monrovia
 LBY  | 2441 | Tripoli
 LIE  | 2446 | Vaduz
 LTU  | 2447 | Vilnius
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg]
 ESH  | 2453 | El-Aaiun
 MAC  | 2454 | Macao
 MDG  | 2455 | Antananarivo
 MKD  | 2460 | Skopje
 MWI  | 2462 | Lilongwe
 MDV  | 2463 | Male
 MYS  | 2464 | Kuala Lumpur
 MLI  | 2482 | Bamako
 MLT  | 2484 | Valletta
 MAR  | 2486 | Rabat
 MHL  | 2507 | Dalap-Uliga-Darrit
 MTQ  | 2508 | Fort-de-France
 MRT  | 2509 | Nouakchott
 MUS  | 2511 | Port-Louis
 MYT  | 2514 | Mamoutzou
 MEX  | 2515 | Ciudad de Mexico
 FSM  | 2689 | Palikir
 MDA  | 2690 | Chisinau
 MCO  | 2695 | Monaco-Ville
 MNG  | 2696 | Ulan Bator
 MSR  | 2697 | Plymouth
 MOZ  | 2698 | Maputo
 MMR  | 2710 | Rangoon (Yangon)
 NAM  | 2726 | Windhoek
 NRU  | 2728 | Yaren
 NPL  | 2729 | Kathmandu
 NIC  | 2734 | Managua
 NER  | 2738 | Niamey
 NGA  | 2754 | Abuja
 NIU  | 2805 | Alofi
 NFK  | 2806 | Kingston
 NOR  | 2807 | Oslo
 CIV  | 2814 | Yamoussoukro
 OMN  | 2821 | Masqat
 PAK  | 2831 | Islamabad
 PLW  | 2881 | Koror
 PAN  | 2882 | Ciudad de Panama
 PNG  | 2884 | Port Moresby
 PRY  | 2885 | Asuncion
 PER  | 2890 | Lima
 PCN  | 2912 | Adamstown
 MNP  | 2913 | Garapan
 PRT  | 2914 | Lisboa
 PRI  | 2919 | San Juan
 POL  | 2928 | Warszawa
 GNQ  | 2972 | Malabo
 QAT  | 2973 | Doha
 FRA  | 2974 | Paris
 GUF  | 3014 | Cayenne
 PYF  | 3016 | Papeete
 REU  | 3017 | Saint-Denis
 ROM  | 3018 | Bucuresti
 RWA  | 3047 | Kigali
 SWE  | 3048 | Stockholm
 SHN  | 3063 | Jamestown
 KNA  | 3064 | Basseterre
 LCA  | 3065 | Castries
 VCT  | 3066 | Kingstown
 SPM  | 3067 | Saint-Pierre
 DEU  | 3068 | Berlin
 SLB  | 3161 | Honiara
 ZMB  | 3162 | Lusaka
 WSM  | 3169 | Apia
 SMR  | 3171 | San Marino
 STP  | 3172 | Sao Tome
 SAU  | 3173 | Riyadh
 SEN  | 3198 | Dakar
 SYC  | 3206 | Victoria
 SLE  | 3207 | Freetown
 SGP  | 3208 | Singapore
 SVK  | 3209 | Bratislava
 SVN  | 3212 | Ljubljana
 SOM  | 3214 | Mogadishu
 LKA  | 3217 | Colombo
 SDN  | 3225 | Khartum
 FIN  | 3236 | Helsinki [Helsingfors]
 SUR  | 3243 | Paramaribo
 SWZ  | 3244 | Mbabane
 CHE  | 3248 | Bern
 SYR  | 3250 | Damascus
 TJK  | 3261 | Dushanbe
 TZA  | 3306 | Dodoma
 DNK  | 3315 | Kobenhavn
 THA  | 3320 | Bangkok
 TGO  | 3332 | Lome
 TKL  | 3333 | Fakaofo
 TON  | 3334 | Nukualofa
 TTO  | 3336 | Port-of-Spain
 TCD  | 3337 | NDjamena
 CZE  | 3339 | Praha
 TUN  | 3349 | Tunis
 TUR  | 3358 | Ankara
 TKM  | 3419 | Ashgabat
 TCA  | 3423 | Cockburn Town
 TUV  | 3424 | Funafuti
 UGA  | 3425 | Kampala
 UKR  | 3426 | Kyiv
 HUN  | 3483 | Budapest
 URY  | 3492 | Montevideo
 NCL  | 3493 | Noumea
 NZL  | 3499 | Wellington
 UZB  | 3503 | Toskent
 BLR  | 3520 | Minsk
 WLF  | 3536 | Mata-Utu
 VUT  | 3537 | Port-Vila
 VAT  | 3538 | Citta del Vaticano
 VEN  | 3539 | Caracas
 RUS  | 3580 | Moscow
 VNM  | 3770 | Hanoi
 EST  | 3791 | Tallinn
 USA  | 3813 | Washington
 VIR  | 4067 | Charlotte Amalie
 ZWE  | 4068 | Harare
 PSE  | 4074 | Gaza
(230 rows)

                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, city.id, city.name
   ->  Hash Join
         Output: country.code, city.id, city.name
         Hash Cond: ((city.countrycode = country.code) AND (city.id = country.capital))
         ->  PX Hash 6:6  (slice2; segments: 6)
               Output: city.id, city.name, city.countrycode
               Hash Key: city.countrycode, city.id
               ->  Partial Seq Scan on qp_with_clause.city
                     Output: city.id, city.name, city.countrycode
         ->  Hash
               Output: country.code, country.capital
               ->  PX Hash 6:6  (slice3; segments: 6)
                     Output: country.code, country.capital
                     Hash Key: country.code, country.capital
                     ->  Partial Seq Scan on qp_with_clause.country
                           Output: country.code, country.capital
 Optimizer: PolarDB PX Optimizer
(18 rows)

--query 2
with lang_total(lang_count,code,countrycode,name) as
( select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code)
select * from lang_total;
ERROR:  WITH query "lang_total" has 3 columns available but 4 columns specified
LINE 1: with lang_total(lang_count,code,countrycode,name) as
             ^
-- queries with CTEs using hash joins
set enable_nestloop=off;
set enable_hashjoin=on;
set enable_mergejoin=off;
--query1
with capitals as 
(select country.code,id,city.name from city,country 
 where city.countrycode = country.code AND city.id = country.capital) 
select * from 
capitals,countrylanguage
where capitals.code = countrylanguage.countrycode and isofficial='true'
order by capitals.code,countrylanguage.language;
 code |  id  |               name                | countrycode |    language    | isofficial | percentage 
------+------+-----------------------------------+-------------+----------------+------------+------------
 ABW  |  129 | Oranjestad                        | ABW         | Dutch          | t          |        5.3
 AFG  |    1 | Kabul                             | AFG         | Dari           | t          |       32.1
 AFG  |    1 | Kabul                             | AFG         | Pashto         | t          |       52.4
 AIA  |   62 | The Valley                        | AIA         | English        | t          |          0
 ALB  |   34 | Tirana                            | ALB         | Albaniana      | t          |       97.9
 AND  |   55 | Andorra la Vella                  | AND         | Catalan        | t          |       32.3
 ANT  |   33 | Willemstad                        | ANT         | Dutch          | t          |          0
 ANT  |   33 | Willemstad                        | ANT         | Papiamento     | t          |       86.2
 ARE  |   65 | Abu Dhabi                         | ARE         | Arabic         | t          |         42
 ARG  |   69 | Buenos Aires                      | ARG         | Spanish        | t          |       96.8
 ARM  |  126 | Yerevan                           | ARM         | Armenian       | t          |       93.4
 ASM  |   54 | Fagatogo                          | ASM         | English        | t          |        3.1
 ASM  |   54 | Fagatogo                          | ASM         | Samoan         | t          |       90.6
 ATG  |   63 | Saint Johns                       | ATG         | English        | t          |          0
 AUS  |  135 | Canberra                          | AUS         | English        | t          |       81.2
 AUT  | 1523 | Wien                              | AUT         | German         | t          |         92
 AZE  |  144 | Baku                              | AZE         | Azerbaijani    | t          |         89
 BDI  |  552 | Bujumbura                         | BDI         | French         | t          |          0
 BDI  |  552 | Bujumbura                         | BDI         | Kirundi        | t          |       98.1
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | Dutch          | t          |       59.2
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | French         | t          |       32.6
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | German         | t          |          1
 BGD  |  150 | Dhaka                             | BGD         | Bengali        | t          |       97.7
 BGR  |  539 | Sofija                            | BGR         | Bulgariana     | t          |       83.2
 BHR  |  149 | al-Manama                         | BHR         | Arabic         | t          |       67.7
 BIH  |  201 | Sarajevo                          | BIH         | Serbo-Croatian | t          |       99.2
 BLR  | 3520 | Minsk                             | BLR         | Belorussian    | t          |       65.6
 BLR  | 3520 | Minsk                             | BLR         | Russian        | t          |         32
 BLZ  |  185 | Belmopan                          | BLZ         | English        | t          |       50.8
 BMU  |  191 | Hamilton                          | BMU         | English        | t          |        100
 BOL  |  194 | La Paz                            | BOL         | Aimara         | t          |        3.2
 BOL  |  194 | La Paz                            | BOL         | Ketdua         | t          |        8.1
 BOL  |  194 | La Paz                            | BOL         | Spanish        | t          |       87.7
 BRA  |  211 | Brasilia                          | BRA         | Portuguese     | t          |       97.5
 BRB  |  174 | Bridgetown                        | BRB         | English        | t          |          0
 BRN  |  538 | Bandar Seri Begawan               | BRN         | Malay          | t          |       45.5
 BTN  |  192 | Thimphu                           | BTN         | Dzongkha       | t          |         50
 CAN  | 1822 | Ottawa                            | CAN         | English        | t          |       60.4
 CAN  | 1822 | Ottawa                            | CAN         | French         | t          |       23.4
 CCK  | 2317 | West Island                       | CCK         | English        | t          |          0
 CHE  | 3248 | Bern                              | CHE         | French         | t          |       19.2
 CHE  | 3248 | Bern                              | CHE         | German         | t          |       63.6
 CHE  | 3248 | Bern                              | CHE         | Italian        | t          |        7.7
 CHE  | 3248 | Bern                              | CHE         | Romansh        | t          |        0.6
 CHL  |  554 | Santiago de Chile                 | CHL         | Spanish        | t          |       89.7
 CHN  | 1891 | Peking                            | CHN         | Chinese        | t          |         92
 COK  |  583 | Avarua                            | COK         | Maori          | t          |          0
 COL  | 2257 | Santafe de Bogota                 | COL         | Spanish        | t          |         99
 COM  | 2295 | Moroni                            | COM         | Comorian       | t          |         75
 CPV  | 1859 | Praia                             | CPV         | Portuguese     | t          |          0
 CRI  |  584 | San Jose                          | CRI         | Spanish        | t          |       97.5
 CUB  | 2413 | La Habana                         | CUB         | Spanish        | t          |        100
 CXR  | 1791 | Flying Fish Cove                  | CXR         | English        | t          |          0
 CYM  |  553 | George Town                       | CYM         | English        | t          |          0
 CYP  | 2430 | Nicosia                           | CYP         | Greek          | t          |       74.1
 CYP  | 2430 | Nicosia                           | CYP         | Turkish        | t          |       22.4
 CZE  | 3339 | Praha                             | CZE         | Czech          | t          |       81.2
 DEU  | 3068 | Berlin                            | DEU         | German         | t          |       91.3
 DJI  |  585 | Djibouti                          | DJI         | Arabic         | t          |       10.6
 DNK  | 3315 | Kobenhavn                         | DNK         | Danish         | t          |       93.5
 DOM  |  587 | Santo Domingo de Guzman           | DOM         | Spanish        | t          |         98
 DZA  |   35 | Alger                             | DZA         | Arabic         | t          |         86
 ECU  |  594 | Quito                             | ECU         | Spanish        | t          |         93
 EGY  |  608 | Cairo                             | EGY         | Arabic         | t          |       98.8
 ERI  |  652 | Asmara                            | ERI         | Tigrinja       | t          |       49.1
 ESH  | 2453 | El-Aaiun                          | ESH         | Arabic         | t          |        100
 ESP  |  653 | Madrid                            | ESP         | Spanish        | t          |       74.4
 EST  | 3791 | Tallinn                           | EST         | Estonian       | t          |       65.3
 FIN  | 3236 | Helsinki [Helsingfors]            | FIN         | Finnish        | t          |       92.7
 FIN  | 3236 | Helsinki [Helsingfors]            | FIN         | Swedish        | t          |        5.7
 FJI  |  764 | Suva                              | FJI         | Fijian         | t          |       50.8
 FLK  |  763 | Stanley                           | FLK         | English        | t          |          0
 FRA  | 2974 | Paris                             | FRA         | French         | t          |       93.6
 FRO  |  901 | Torshavn                          | FRO         | Danish         | t          |          0
 FRO  |  901 | Torshavn                          | FRO         | Faroese        | t          |        100
 GBR  |  456 | London                            | GBR         | English        | t          |       97.3
 GEO  |  905 | Tbilisi                           | GEO         | Georgiana      | t          |       71.7
 GIB  |  915 | Gibraltar                         | GIB         | English        | t          |       88.9
 GLP  |  919 | Basse-Terre                       | GLP         | French         | t          |          0
 GNB  |  927 | Bissau                            | GNB         | Portuguese     | t          |        8.1
 GRC  | 2401 | Athenai                           | GRC         | Greek          | t          |       98.5
 GRL  |  917 | Nuuk                              | GRL         | Danish         | t          |       12.5
 GRL  |  917 | Nuuk                              | GRL         | Greenlandic    | t          |       87.5
 GTM  |  922 | Ciudad de Guatemala               | GTM         | Spanish        | t          |       64.7
 GUM  |  921 | Agaaa                             | GUM         | Chamorro       | t          |       29.6
 GUM  |  921 | Agaaa                             | GUM         | English        | t          |       37.5
 HND  |  933 | Tegucigalpa                       | HND         | Spanish        | t          |       97.2
 HRV  | 2409 | Zagreb                            | HRV         | Serbo-Croatian | t          |       95.9
 HTI  |  929 | Port-au-Prince                    | HTI         | French         | t          |          0
 HUN  | 3483 | Budapest                          | HUN         | Hungarian      | t          |       98.5
 IDN  |  939 | Jakarta                           | IDN         | Malay          | t          |       12.1
 IND  | 1109 | New Delhi                         | IND         | Hindi          | t          |       39.9
 IRL  | 1447 | Dublin                            | IRL         | English        | t          |       98.4
 IRL  | 1447 | Dublin                            | IRL         | Irish          | t          |        1.6
 IRN  | 1380 | Teheran                           | IRN         | Persian        | t          |       45.7
 IRQ  | 1365 | Baghdad                           | IRQ         | Arabic         | t          |       77.2
 ISL  | 1449 | Reykjavik                         | ISL         | Icelandic      | t          |       95.7
 ISR  | 1450 | Jerusalem                         | ISR         | Arabic         | t          |         18
 ISR  | 1450 | Jerusalem                         | ISR         | Hebrew         | t          |       63.1
 ITA  | 1464 | Roma                              | ITA         | Italian        | t          |       94.1
 JOR  | 1786 | Amman                             | JOR         | Arabic         | t          |       97.9
 JPN  | 1532 | Tokyo                             | JPN         | Japanese       | t          |       99.1
 KAZ  | 1864 | Astana                            | KAZ         | Kazakh         | t          |         46
 KGZ  | 2253 | Bishkek                           | KGZ         | Kirgiz         | t          |       59.7
 KGZ  | 2253 | Bishkek                           | KGZ         | Russian        | t          |       16.2
 KHM  | 1800 | Phnom Penh                        | KHM         | Khmer          | t          |       88.6
 KIR  | 2256 | Bairiki                           | KIR         | Kiribati       | t          |       98.9
 KNA  | 3064 | Basseterre                        | KNA         | English        | t          |          0
 KOR  | 2331 | Seoul                             | KOR         | Korean         | t          |       99.9
 KWT  | 2429 | Kuwait                            | KWT         | Arabic         | t          |       78.1
 LAO  | 2432 | Vientiane                         | LAO         | Lao            | t          |       67.2
 LBN  | 2438 | Beirut                            | LBN         | Arabic         | t          |         93
 LBY  | 2441 | Tripoli                           | LBY         | Arabic         | t          |         96
 LCA  | 3065 | Castries                          | LCA         | English        | t          |         20
 LIE  | 2446 | Vaduz                             | LIE         | German         | t          |         89
 LKA  | 3217 | Colombo                           | LKA         | Singali        | t          |       60.3
 LKA  | 3217 | Colombo                           | LKA         | Tamil          | t          |       19.6
 LSO  | 2437 | Maseru                            | LSO         | English        | t          |          0
 LSO  | 2437 | Maseru                            | LSO         | Sotho          | t          |         85
 LTU  | 2447 | Vilnius                           | LTU         | Lithuanian     | t          |       81.6
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | French         | t          |        4.2
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | German         | t          |        2.3
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | Luxembourgish  | t          |       64.4
 LVA  | 2434 | Riga                              | LVA         | Latvian        | t          |       55.1
 MAC  | 2454 | Macao                             | MAC         | Portuguese     | t          |        2.3
 MAR  | 2486 | Rabat                             | MAR         | Arabic         | t          |         65
 MCO  | 2695 | Monaco-Ville                      | MCO         | French         | t          |       41.9
 MDA  | 2690 | Chisinau                          | MDA         | Romanian       | t          |       61.9
 MDG  | 2455 | Antananarivo                      | MDG         | French         | t          |          0
 MDG  | 2455 | Antananarivo                      | MDG         | Malagasy       | t          |       98.9
 MDV  | 2463 | Male                              | MDV         | Dhivehi        | t          |        100
 MEX  | 2515 | Ciudad de Mexico                  | MEX         | Spanish        | t          |       92.1
 MHL  | 2507 | Dalap-Uliga-Darrit                | MHL         | English        | t          |          0
 MHL  | 2507 | Dalap-Uliga-Darrit                | MHL         | Marshallese    | t          |       96.8
 MKD  | 2460 | Skopje                            | MKD         | Macedonian     | t          |       66.5
 MLT  | 2484 | Valletta                          | MLT         | English        | t          |        2.1
 MLT  | 2484 | Valletta                          | MLT         | Maltese        | t          |       95.8
 MMR  | 2710 | Rangoon (Yangon)                  | MMR         | Burmese        | t          |         69
 MNG  | 2696 | Ulan Bator                        | MNG         | Mongolian      | t          |       78.8
 MNP  | 2913 | Garapan                           | MNP         | English        | t          |        4.8
 MSR  | 2697 | Plymouth                          | MSR         | English        | t          |          0
 MTQ  | 2508 | Fort-de-France                    | MTQ         | French         | t          |          0
 MWI  | 2462 | Lilongwe                          | MWI         | Chichewa       | t          |       58.3
 MYS  | 2464 | Kuala Lumpur                      | MYS         | Malay          | t          |       58.4
 MYT  | 2514 | Mamoutzou                         | MYT         | French         | t          |       20.3
 NCL  | 3493 | Noumea                            | NCL         | French         | t          |       34.3
 NFK  | 2806 | Kingston                          | NFK         | English        | t          |          0
 NIC  | 2734 | Managua                           | NIC         | Spanish        | t          |       97.6
 NIU  | 2805 | Alofi                             | NIU         | English        | t          |          0
 NLD  |    5 | Amsterdam                         | NLD         | Dutch          | t          |       95.6
 NOR  | 2807 | Oslo                              | NOR         | Norwegian      | t          |       96.6
 NPL  | 2729 | Kathmandu                         | NPL         | Nepali         | t          |       50.4
 NRU  | 2728 | Yaren                             | NRU         | English        | t          |        7.5
 NRU  | 2728 | Yaren                             | NRU         | Nauru          | t          |       57.5
 NZL  | 3499 | Wellington                        | NZL         | English        | t          |         87
 OMN  | 2821 | Masqat                            | OMN         | Arabic         | t          |       76.7
 PAK  | 2831 | Islamabad                         | PAK         | Urdu           | t          |        7.6
 PAN  | 2882 | Ciudad de Panama                  | PAN         | Spanish        | t          |       76.8
 PER  | 2890 | Lima                              | PER         | Aimara         | t          |        2.3
 PER  | 2890 | Lima                              | PER         | Ketdua         | t          |       16.4
 PER  | 2890 | Lima                              | PER         | Spanish        | t          |       79.8
 PHL  |  766 | Manila                            | PHL         | Pilipino       | t          |       29.3
 PLW  | 2881 | Koror                             | PLW         | English        | t          |        3.2
 PLW  | 2881 | Koror                             | PLW         | Palau          | t          |       82.2
 POL  | 2928 | Warszawa                          | POL         | Polish         | t          |       97.6
 PRI  | 2919 | San Juan                          | PRI         | Spanish        | t          |       51.3
 PRK  | 2318 | Pyongyang                         | PRK         | Korean         | t          |       99.9
 PRT  | 2914 | Lisboa                            | PRT         | Portuguese     | t          |         99
 PRY  | 2885 | Asuncion                          | PRY         | Guarani        | t          |       40.1
 PRY  | 2885 | Asuncion                          | PRY         | Spanish        | t          |       55.1
 PYF  | 3016 | Papeete                           | PYF         | French         | t          |       40.8
 QAT  | 2973 | Doha                              | QAT         | Arabic         | t          |       40.7
 ROM  | 3018 | Bucuresti                         | ROM         | Romani         | t          |        0.7
 ROM  | 3018 | Bucuresti                         | ROM         | Romanian       | t          |       90.7
 RUS  | 3580 | Moscow                            | RUS         | Russian        | t          |       86.6
 RWA  | 3047 | Kigali                            | RWA         | French         | t          |          0
 RWA  | 3047 | Kigali                            | RWA         | Rwanda         | t          |        100
 SAU  | 3173 | Riyadh                            | SAU         | Arabic         | t          |         95
 SDN  | 3225 | Khartum                           | SDN         | Arabic         | t          |       49.4
 SEN  | 3198 | Dakar                             | SEN         | Wolof          | t          |       48.1
 SGP  | 3208 | Singapore                         | SGP         | Chinese        | t          |       77.1
 SGP  | 3208 | Singapore                         | SGP         | Malay          | t          |       14.1
 SGP  | 3208 | Singapore                         | SGP         | Tamil          | t          |        7.4
 SHN  | 3063 | Jamestown                         | SHN         | English        | t          |          0
 SJM  |  938 | Longyearbyen                      | SJM         | Norwegian      | t          |          0
 SLV  |  645 | San Salvador                      | SLV         | Spanish        | t          |        100
 SMR  | 3171 | San Marino                        | SMR         | Italian        | t          |        100
 SOM  | 3214 | Mogadishu                         | SOM         | Arabic         | t          |          0
 SOM  | 3214 | Mogadishu                         | SOM         | Somali         | t          |       98.3
 SPM  | 3067 | Saint-Pierre                      | SPM         | French         | t          |          0
 SVK  | 3209 | Bratislava                        | SVK         | Slovak         | t          |       85.6
 SVN  | 3212 | Ljubljana                         | SVN         | Slovene        | t          |       87.9
 SWE  | 3048 | Stockholm                         | SWE         | Swedish        | t          |       89.5
 SWZ  | 3244 | Mbabane                           | SWZ         | Swazi          | t          |       89.9
 SYC  | 3206 | Victoria                          | SYC         | English        | t          |        3.8
 SYC  | 3206 | Victoria                          | SYC         | French         | t          |        1.3
 SYR  | 3250 | Damascus                          | SYR         | Arabic         | t          |         90
 TCA  | 3423 | Cockburn Town                     | TCA         | English        | t          |          0
 TCD  | 3337 | NDjamena                          | TCD         | Arabic         | t          |       12.3
 TGO  | 3332 | Lome                              | TGO         | Ewe            | t          |       23.2
 TGO  | 3332 | Lome                              | TGO         | Kabye          | t          |       13.8
 THA  | 3320 | Bangkok                           | THA         | Thai           | t          |       52.6
 TJK  | 3261 | Dushanbe                          | TJK         | Tadzhik        | t          |       62.2
 TKL  | 3333 | Fakaofo                           | TKL         | English        | t          |          0
 TKM  | 3419 | Ashgabat                          | TKM         | Turkmenian     | t          |       76.7
 TMP  | 1522 | Dili                              | TMP         | Portuguese     | t          |          0
 TON  | 3334 | Nukualofa                         | TON         | English        | t          |          0
 TON  | 3334 | Nukualofa                         | TON         | Tongan         | t          |       98.3
 TUN  | 3349 | Tunis                             | TUN         | Arabic         | t          |       69.9
 TUR  | 3358 | Ankara                            | TUR         | Turkish        | t          |       87.6
 TUV  | 3424 | Funafuti                          | TUV         | English        | t          |          0
 TUV  | 3424 | Funafuti                          | TUV         | Tuvalu         | t          |       92.5
 TZA  | 3306 | Dodoma                            | TZA         | Swahili        | t          |        8.8
 UKR  | 3426 | Kyiv                              | UKR         | Ukrainian      | t          |       64.7
 URY  | 3492 | Montevideo                        | URY         | Spanish        | t          |       95.7
 USA  | 3813 | Washington                        | USA         | English        | t          |       86.2
 UZB  | 3503 | Toskent                           | UZB         | Uzbek          | t          |       72.6
 VAT  | 3538 | Citta del Vaticano                | VAT         | Italian        | t          |          0
 VCT  | 3066 | Kingstown                         | VCT         | English        | t          |          0
 VEN  | 3539 | Caracas                           | VEN         | Spanish        | t          |       96.9
 VGB  |  537 | Road Town                         | VGB         | English        | t          |          0
 VIR  | 4067 | Charlotte Amalie                  | VIR         | English        | t          |       81.7
 VNM  | 3770 | Hanoi                             | VNM         | Vietnamese     | t          |       86.8
 VUT  | 3537 | Port-Vila                         | VUT         | Bislama        | t          |       56.6
 VUT  | 3537 | Port-Vila                         | VUT         | English        | t          |       28.3
 VUT  | 3537 | Port-Vila                         | VUT         | French         | t          |       14.2
 WSM  | 3169 | Apia                              | WSM         | English        | t          |        0.6
 WSM  | 3169 | Apia                              | WSM         | Samoan         | t          |       47.5
 YEM  | 1780 | Sanaa                             | YEM         | Arabic         | t          |       99.6
 YUG  | 1792 | Beograd                           | YUG         | Serbo-Croatian | t          |       75.2
 ZAF  |  716 | Pretoria                          | ZAF         | Afrikaans      | t          |       14.3
 ZAF  |  716 | Pretoria                          | ZAF         | English        | t          |        8.5
 ZAF  |  716 | Pretoria                          | ZAF         | Xhosa          | t          |       17.7
 ZAF  |  716 | Pretoria                          | ZAF         | Zulu           | t          |       22.7
 ZWE  | 4068 | Harare                            | ZWE         | English        | t          |        2.2
(235 rows)

                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
   Merge Key: country.code, countrylanguage.language
   ->  Sort
         Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
         Sort Key: country.code, countrylanguage.language
         ->  Sort
               Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
               Sort Key: country.code, countrylanguage.language
               ->  Hash Join
                     Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           Hash Key: countrylanguage.countrycode
                           ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                 Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                 Filter: countrylanguage.isofficial
                     ->  Hash
                           Output: country.code, city.id, city.name
                           ->  Hash Join
                                 Output: country.code, city.id, city.name
                                 Hash Cond: ((city.countrycode = country.code) AND (city.id = country.capital))
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: city.id, city.name, city.countrycode
                                       Hash Key: city.countrycode
                                       ->  Partial Seq Scan on qp_with_clause.city
                                             Output: city.id, city.name, city.countrycode
                                 ->  Hash
                                       Output: country.code, country.capital
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: country.code, country.capital
                                             Hash Key: country.code
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.capital
 Optimizer: PolarDB PX Optimizer
(36 rows)

--query2
with lang_total as
( select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code)
 
select lang_count,country.code,country.name,country.continent,country.region,country.population
 from country left outer join lang_total
 on (lang_total.code = country.code)
 where country.indepyear > 1970 and lang_total.lang_count >=1 and lang_total.lang_count >=1
  order by lang_total.lang_count desc;
 lang_count | code |              name               | continent |     region      | population 
------------+------+---------------------------------+-----------+-----------------+------------
         12 | RUS  | Russian Federation              | Europe    | Eastern Europe  |  146934000
          6 | FSM  | Micronesia, Federated States of | Oceania   | Micronesia      |     119000
          4 | AZE  | Azerbaijan                      | Asia      | Middle East     |    7734000
          1 | BIH  | Bosnia and Herzegovina          | Europe    | Southern Europe |    3972000
(4 rows)

                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
   Merge Key: (count())
   ->  Sort
         Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
         Sort Key: (count()) DESC
         ->  Sort
               Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
               Sort Key: (count()) DESC
               ->  Nested Loop
                     Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
                     Join Filter: true
                     ->  PX Broadcast 6:6  (slice2; segments: 6)
                           Output: (count()), country.code
                           ->  Result
                                 Output: (count()), country.code
                                 Filter: (((count()) >= 1) AND (country.code = countrylanguage.countrycode))
                                 ->  GroupAggregate
                                       Output: count(), country.code, countrylanguage.countrycode
                                       Group Key: country.code, countrylanguage.countrycode
                                       ->  Sort
                                             Output: country.code, countrylanguage.countrycode
                                             Sort Key: country.code, countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice3; segments: 6)
                                                   Output: country.code, countrylanguage.countrycode
                                                   Hash Key: country.code, countrylanguage.countrycode
                                                   ->  Nested Loop
                                                         Output: country.code, countrylanguage.countrycode
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                               Output: country.code
                                                               ->  Partial Seq Scan on qp_with_clause.country
                                                                     Output: country.code
                                                                     Filter: (country.governmentform = 'Federal Republic'::text)
                                                         ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage
                                                               Output: countrylanguage.countrycode
                                                               Index Cond: (countrylanguage.countrycode = country.code)
                     ->  Partial Index Scan using country_pkey on qp_with_clause.country country_1
                           Output: country_1.code, country_1.name, country_1.continent, country_1.region, country_1.indepyear, country_1.population
                           Index Cond: (country_1.code = country.code)
                           Filter: (country_1.indepyear > 1970)
 Optimizer: PolarDB PX Optimizer
(42 rows)

-- Using CTE in the WHERE clause
--query3
with lang_total as
( select lang_count,countrycode from
  (
  (
   select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code)
 
   UNION ALL
 
  (
   select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Monarchy')
  group by country.code,countrylanguage.countrycode order by country.code)
 
 ) FOO1
)
select * from
(
select count(*) as cnt,country.code,country.name 
from
country,countrylanguage
where country.code=countrylanguage.countrycode group by country.code,country.name) AS FOO
where foo.cnt = (select max(lang_count) from lang_total) order by foo.code;
 cnt | code |        name        
-----+------+--------------------
  12 | CAN  | Canada
  12 | CHN  | China
  12 | IND  | India
  12 | RUS  | Russian Federation
  12 | USA  | United States
(5 rows)

                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (count()), country.code, country.name
   Merge Key: country.code
   ->  Sort
         Output: (count()), country.code, country.name
         Sort Key: country.code
         ->  Sort
               Output: (count()), country.code, country.name
               Sort Key: country.code
               ->  Hash Join
                     Output: (count()), country.code, country.name
                     Hash Cond: ((count()) = (max((count()))))
                     ->  HashAggregate
                           Output: count(), country.code, country.name
                           Group Key: country.code, country.name
                           ->  Hash Join
                                 Output: country.code, country.name
                                 Hash Cond: (country.code = countrylanguage.countrycode)
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: country.code, country.name
                                       Hash Key: country.code
                                       ->  Partial Seq Scan on qp_with_clause.country
                                             Output: country.code, country.name
                                 ->  Hash
                                       Output: countrylanguage.countrycode
                                       ->  PX Hash 6:6  (slice3; segments: 6)
                                             Output: countrylanguage.countrycode
                                             Hash Key: countrylanguage.countrycode
                                             ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                   Output: countrylanguage.countrycode
                     ->  Hash
                           Output: (max((count())))
                           ->  PX Broadcast 1:6  (slice4)
                                 Output: (max((count())))
                                 ->  Finalize Aggregate
                                       Output: max((count()))
                                       ->  PX Coordinator 6:1  (slice5; segments: 6)
                                             Output: (PARTIAL max((count())))
                                             ->  Partial Aggregate
                                                   Output: PARTIAL max((count()))
                                                   ->  Append
                                                         ->  GroupAggregate
                                                               Output: count()
                                                               Group Key: country_1.code, countrylanguage_1.countrycode
                                                               ->  Sort
                                                                     Output: countrylanguage_1.countrycode, country_1.code
                                                                     Sort Key: country_1.code, countrylanguage_1.countrycode
                                                                     ->  PX Hash 6:6  (slice6; segments: 6)
                                                                           Output: countrylanguage_1.countrycode, country_1.code
                                                                           Hash Key: country_1.code, countrylanguage_1.countrycode
                                                                           ->  Nested Loop
                                                                                 Output: countrylanguage_1.countrycode, country_1.code
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice7; segments: 6)
                                                                                       Output: country_1.code
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                             Output: country_1.code
                                                                                             Filter: (country_1.governmentform = 'Federal Republic'::text)
                                                                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                                                                       Output: countrylanguage_1.countrycode
                                                                                       Index Cond: (countrylanguage_1.countrycode = country_1.code)
                                                         ->  GroupAggregate
                                                               Output: count()
                                                               Group Key: country_2.code, countrylanguage_2.countrycode
                                                               ->  Sort
                                                                     Output: country_2.code, countrylanguage_2.countrycode
                                                                     Sort Key: country_2.code, countrylanguage_2.countrycode
                                                                     ->  PX Hash 6:6  (slice8; segments: 6)
                                                                           Output: country_2.code, countrylanguage_2.countrycode
                                                                           Hash Key: country_2.code, countrylanguage_2.countrycode
                                                                           ->  Nested Loop
                                                                                 Output: country_2.code, countrylanguage_2.countrycode
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                                                       Output: country_2.code
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                                             Output: country_2.code
                                                                                             Filter: (country_2.governmentform = 'Monarchy'::text)
                                                                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                                                                       Output: countrylanguage_2.countrycode
                                                                                       Index Cond: (countrylanguage_2.countrycode = country_2.code)
 Optimizer: PolarDB PX Optimizer
(82 rows)

--query4
with diversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country,
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country.code and country.gnp > 100000)
 select diversecountries.name,city.name,diversecountries.CNT
 from diversecountries,city where city.id = diversecountries.capital
 order by diversecountries.name;
        name        |       name       | cnt 
--------------------+------------------+-----
 Australia          | Canberra         |   8
 Austria            | Wien             |   8
 Canada             | Ottawa           |  12
 China              | Peking           |  12
 Denmark            | Kobenhavn        |   7
 India              | New Delhi        |  12
 Iran               | Teheran          |  10
 Italy              | Roma             |   8
 Myanmar            | Rangoon (Yangon) |   8
 Russian Federation | Moscow           |  12
 South Africa       | Pretoria         |  11
 United States      | Washington       |  12
(12 rows)

                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.name, city.name, (count())
   Merge Key: country.name
   ->  Sort
         Output: country.name, city.name, (count())
         Sort Key: country.name
         ->  Sort
               Output: country.name, city.name, (count())
               Sort Key: country.name
               ->  Nested Loop
                     Output: country.name, city.name, (count())
                     Join Filter: true
                     ->  PX Broadcast 6:6  (slice2; segments: 6)
                           Output: country.name, country.capital, (count())
                           ->  Hash Join
                                 Output: country.name, country.capital, (count())
                                 Hash Cond: (countrylanguage.countrycode = country.code)
                                 ->  Result
                                       Output: (count()), countrylanguage.countrycode
                                       Filter: ((count()) > 6)
                                       ->  HashAggregate
                                             Output: count(), count(), countrylanguage.countrycode
                                             Group Key: countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice3; segments: 6)
                                                   Output: countrylanguage.countrycode
                                                   Hash Key: countrylanguage.countrycode
                                                   ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                         Output: countrylanguage.countrycode
                                 ->  Hash
                                       Output: country.code, country.name, country.capital
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: country.code, country.name, country.capital
                                             Hash Key: country.code
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.capital
                                                   Filter: (country.gnp > '100000'::numeric)
                     ->  Partial Index Scan using city_pkey on qp_with_clause.city
                           Output: city.name
                           Index Cond: (city.id = country.capital)
 Optimizer: PolarDB PX Optimizer
(40 rows)

-- query 5
with somecheapasiandiversecountries as
(
 select FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,count(*) ASIAN_COUNT from
 (
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Southeast Asia'
 and country.continent = 'Asia'
 
 UNION ALL
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Eastern Asia'
 and country.continent = 'Asia'
 UNION ALL
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Middle East'
 and country.continent = 'Asia'
 ) FOO, countrylanguage
 where FOO.code = countrylanguage.countrycode
 group by FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,countrylanguage.countrycode
 HAVING count(*) >=
 (select min(CNT) FROM
   (select count(*) CNT,country.code from countrylanguage,country
    where countrylanguage.countrycode=country.code
    and country.continent = 'Asia'
    and country.region = 'Southern and Central Asia'
    group by country.code
   ) FOO1
 )
)
select FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,count(*) COMPARED_WITH_CHEAP_ASIAN_CNT
from
(
select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
from country,city
where country.capital = city.id 
and country.continent = 'North America'
UNION ALL
select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
from country,city
where country.capital =	city.id	
and country.continent =	'South America'
) FOO,countrylanguage
where FOO.code = countrylanguage.countrycode
group by FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate
HAVING count(*)  >=
 (select min(ASIAN_COUNT) FROM
   (select ASIAN_COUNT FROM somecheapasiandiversecountries,country
    where somecheapasiandiversecountries.code = country.code
    and country.gnp >= country.gnpold
   ) ASIANCOUNT
 )
order by COUNTRY;
 code |             country              |         capital         |            headofstate            | compared_with_cheap_asian_cnt 
------+----------------------------------+-------------------------+-----------------------------------+-------------------------------
 ATG  | Antigua and Barbuda              | Saint Johns             | Elisabeth II                      |                             2
 ARG  | Argentina                        | Buenos Aires            | Fernando de la Rua                |                             3
 ABW  | Aruba                            | Oranjestad              | Beatrix                           |                             4
 BHS  | Bahamas                          | Nassau                  | Elisabeth II                      |                             2
 BRB  | Barbados                         | Bridgetown              | Elisabeth II                      |                             2
 BLZ  | Belize                           | Belmopan                | Elisabeth II                      |                             4
 BOL  | Bolivia                          | La Paz                  | Hugo Banzer Suarez                |                             4
 BRA  | Brazil                           | Brasilia                | Fernando Henrique Cardoso         |                             5
 CAN  | Canada                           | Ottawa                  | Elisabeth II                      |                            12
 CHL  | Chile                            | Santiago de Chile       | Ricardo Lagos Escobar             |                             4
 COL  | Colombia                         | Santafe de Bogota       | Andres Pastrana Arango            |                             5
 CRI  | Costa Rica                       | San Jose                | Miguel Angel Rodriguez Echeverria |                             4
 DMA  | Dominica                         | Roseau                  | Vernon Shaw                       |                             2
 DOM  | Dominican Republic               | Santo Domingo de Guzman | Hipolito Mejia Dominguez          |                             2
 ECU  | Ecuador                          | Quito                   | Gustavo Noboa Bejarano            |                             2
 SLV  | El Salvador                      | San Salvador            | Francisco Guillermo Flores Perez  |                             2
 GUF  | French Guiana                    | Cayenne                 | Jacques Chirac                    |                             2
 GRL  | Greenland                        | Nuuk                    | Margrethe II                      |                             2
 GLP  | Guadeloupe                       | Basse-Terre             | Jacques Chirac                    |                             2
 GTM  | Guatemala                        | Ciudad de Guatemala     | Alfonso Portillo Cabrera          |                             5
 GUY  | Guyana                           | Georgetown              | Bharrat Jagdeo                    |                             3
 HTI  | Haiti                            | Port-au-Prince          | Jean-Bertrand Aristide            |                             2
 HND  | Honduras                         | Tegucigalpa             | Carlos Roberto Flores Facusse     |                             4
 JAM  | Jamaica                          | Kingston                | Elisabeth II                      |                             2
 MTQ  | Martinique                       | Fort-de-France          | Jacques Chirac                    |                             2
 MEX  | Mexico                           | Ciudad de Mexico        | Vicente Fox Quesada               |                             6
 ANT  | Netherlands Antilles             | Willemstad              | Beatrix                           |                             3
 NIC  | Nicaragua                        | Managua                 | Arnoldo Aleman Lacayo             |                             4
 PAN  | Panama                           | Ciudad de Panama        | Mireya Elisa Moscoso Rodriguez    |                             6
 PRY  | Paraguay                         | Asuncion                | Luis Angel Gonzalez Macchi        |                             4
 PER  | Peru                             | Lima                    | Valentin Paniagua Corazao         |                             3
 PRI  | Puerto Rico                      | San Juan                | George W. Bush                    |                             2
 KNA  | Saint Kitts and Nevis            | Basseterre              | Elisabeth II                      |                             2
 LCA  | Saint Lucia                      | Castries                | Elisabeth II                      |                             2
 VCT  | Saint Vincent and the Grenadines | Kingstown               | Elisabeth II                      |                             2
 SUR  | Suriname                         | Paramaribo              | Ronald Venetiaan                  |                             2
 TTO  | Trinidad and Tobago              | Port-of-Spain           | Arthur N. R. Robinson             |                             3
 USA  | United States                    | Washington              | George W. Bush                    |                            12
 VEN  | Venezuela                        | Caracas                 | Hugo Chavez Frias                 |                             3
 VIR  | Virgin Islands, U.S.             | Charlotte Amalie        | George W. Bush                    |                             3
(40 rows)

                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, country.name, city.name, country.headofstate, (count())
   Merge Key: country.name
   ->  Sort
         Output: country.code, country.name, city.name, country.headofstate, (count())
         Sort Key: country.name
         ->  Sort
               Output: country.code, country.name, city.name, country.headofstate, (count())
               Sort Key: country.name
               ->  Nested Loop
                     Output: country.code, country.name, city.name, country.headofstate, (count())
                     Join Filter: ((count()) >= (min((count()))))
                     ->  PX Broadcast 1:6  (slice7)
                           Output: (min((count())))
                           ->  Finalize Aggregate
                                 Output: min((count()))
                                 ->  PX Coordinator 6:1  (slice8; segments: 6)
                                       Output: (PARTIAL min((count())))
                                       ->  Partial Aggregate
                                             Output: PARTIAL min((count()))
                                             ->  Nested Loop
                                                   Output: (count())
                                                   Join Filter: true
                                                   ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                         Output: country_2.code, (count())
                                                         ->  Nested Loop
                                                               Output: country_2.code, (count())
                                                               Join Filter: ((count()) >= (min((count()))))
                                                               ->  PX Broadcast 1:6  (slice15)
                                                                     Output: (min((count())))
                                                                     ->  Finalize Aggregate
                                                                           Output: min((count()))
                                                                           ->  PX Coordinator 6:1  (slice16; segments: 6)
                                                                                 Output: (PARTIAL min((count())))
                                                                                 ->  Partial Aggregate
                                                                                       Output: PARTIAL min((count()))
                                                                                       ->  Finalize GroupAggregate
                                                                                             Output: count(), country_5.code
                                                                                             Group Key: country_5.code
                                                                                             ->  Sort
                                                                                                   Output: country_5.code, (PARTIAL count())
                                                                                                   Sort Key: country_5.code
                                                                                                   ->  PX Hash 6:6  (slice17; segments: 6)
                                                                                                         Output: country_5.code, (PARTIAL count())
                                                                                                         Hash Key: country_5.code
                                                                                                         ->  Partial GroupAggregate
                                                                                                               Output: country_5.code, PARTIAL count()
                                                                                                               Group Key: country_5.code
                                                                                                               ->  Sort
                                                                                                                     Output: country_5.code
                                                                                                                     Sort Key: country_5.code
                                                                                                                     ->  Nested Loop
                                                                                                                           Output: country_5.code
                                                                                                                           Join Filter: true
                                                                                                                           ->  PX Broadcast 6:6  (slice18; segments: 6)
                                                                                                                                 Output: country_5.code
                                                                                                                                 ->  Partial Seq Scan on qp_with_clause.country country_5
                                                                                                                                       Output: country_5.code
                                                                                                                                       Filter: ((country_5.continent = 'Asia'::text) AND (country_5.region = 'Southern and Central Asia'::text))
                                                                                                                           ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                                                                                                                 Index Cond: (countrylanguage_2.countrycode = country_5.code)
                                                               ->  Materialize
                                                                     Output: (count()), (count()), country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                     ->  HashAggregate
                                                                           Output: count(), count(), country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                           Group Key: country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                           ->  Hash Join
                                                                                 Output: country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                                 Hash Cond: (countrylanguage_1.countrycode = country_2.code)
                                                                                 ->  PX Hash 6:6  (slice10; segments: 6)
                                                                                       Output: countrylanguage_1.countrycode
                                                                                       Hash Key: countrylanguage_1.countrycode
                                                                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage countrylanguage_1
                                                                                             Output: countrylanguage_1.countrycode
                                                                                 ->  Hash
                                                                                       Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                       ->  PX Hash 6:6  (slice11; segments: 6)
                                                                                             Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                             Hash Key: country_2.code
                                                                                             ->  Append
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice12; segments: 6)
                                                                                                               Output: country_2.code, country_2.name, country_2.headofstate, country_2.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                                                                     Output: country_2.code, country_2.name, country_2.headofstate, country_2.capital
                                                                                                                     Filter: ((country_2.gnp < '10000'::numeric) AND (country_2.region = 'Southeast Asia'::text) AND (country_2.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_2
                                                                                                               Output: city_2.name
                                                                                                               Index Cond: (city_2.id = country_2.capital)
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_3.code, country_3.name, city_3.name, country_3.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice13; segments: 6)
                                                                                                               Output: country_3.code, country_3.name, country_3.headofstate, country_3.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_3
                                                                                                                     Output: country_3.code, country_3.name, country_3.headofstate, country_3.capital
                                                                                                                     Filter: ((country_3.gnp < '10000'::numeric) AND (country_3.region = 'Eastern Asia'::text) AND (country_3.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_3
                                                                                                               Output: city_3.name
                                                                                                               Index Cond: (city_3.id = country_3.capital)
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_4.code, country_4.name, city_4.name, country_4.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice14; segments: 6)
                                                                                                               Output: country_4.code, country_4.name, country_4.headofstate, country_4.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_4
                                                                                                                     Output: country_4.code, country_4.name, country_4.headofstate, country_4.capital
                                                                                                                     Filter: ((country_4.gnp < '10000'::numeric) AND (country_4.region = 'Middle East'::text) AND (country_4.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_4
                                                                                                               Output: city_4.name
                                                                                                               Index Cond: (city_4.id = country_4.capital)
                                                   ->  Partial Index Scan using country_pkey on qp_with_clause.country country_6
                                                         Output: country_6.gnp, country_6.gnpold
                                                         Index Cond: (country_6.code = country_2.code)
                                                         Filter: (country_6.gnp >= country_6.gnpold)
                     ->  HashAggregate
                           Output: count(), count(), country.code, country.name, country.headofstate, city.name
                           Group Key: country.name, country.code, city.name, country.headofstate
                           ->  Materialize
                                 Output: country.code, country.name, country.headofstate, city.name
                                 ->  Hash Join
                                       Output: country.code, country.name, country.headofstate, city.name
                                       Hash Cond: (country.code = countrylanguage.countrycode)
                                       ->  Append
                                             ->  PX Hash 6:6  (slice2; segments: 6)
                                                   Output: country.code, country.name, city.name, country.headofstate
                                                   Hash Key: country.code
                                                   ->  Nested Loop
                                                         Output: country.code, country.name, city.name, country.headofstate
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice3; segments: 6)
                                                               Output: country.code, country.name, country.headofstate, country.capital
                                                               ->  Partial Seq Scan on qp_with_clause.country
                                                                     Output: country.code, country.name, country.headofstate, country.capital
                                                                     Filter: (country.continent = 'North America'::text)
                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                                               Output: city.name
                                                               Index Cond: (city.id = country.capital)
                                             ->  PX Hash 6:6  (slice4; segments: 6)
                                                   Output: country_1.code, country_1.name, city_1.name, country_1.headofstate
                                                   Hash Key: country_1.code
                                                   ->  Nested Loop
                                                         Output: country_1.code, country_1.name, city_1.name, country_1.headofstate
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                               Output: country_1.code, country_1.name, country_1.headofstate, country_1.capital
                                                               ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                     Output: country_1.code, country_1.name, country_1.headofstate, country_1.capital
                                                                     Filter: (country_1.continent = 'South America'::text)
                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                               Output: city_1.name
                                                               Index Cond: (city_1.id = country_1.capital)
                                       ->  Hash
                                             Output: countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice6; segments: 6)
                                                   Output: countrylanguage.countrycode
                                                   Hash Key: countrylanguage.countrycode
                                                   ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                         Output: countrylanguage.countrycode
 Optimizer: PolarDB PX Optimizer
(162 rows)

-- query 6 
 
select count(*) from
( select r.* from
  ( with fact as 
     (
      select country.name as COUNTRY,country.code,city.name as CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,AGG1.region
      from      
         (select
         sum(case when (city.population >= 0.5 * country.population) then country.population else city.population end) as S_POPULATION,
         sum(case when (gnp >= gnpold) then gnp else gnpold end) as S_GNP,
         avg(case when (lifeexpectancy > 60) then 50 else lifeexpectancy end) as AVG_LIFE,country.region
         from country,city  
         where governmentform != 'Constitutional Monarchy'
         and country.capital = city.id
         and indepyear > 0
         group by country.region) AGG1
         ,country,city
         where country.capital = city.id
         and country.region = AGG1.region
      )
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'South America'
     
     UNION ALL
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'North America'
     
     UNION ALL
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'Caribbean'
 ) as r
 left join
  (
   select 'ARG' as CODE UNION ALL
   select 'BOL' as CODE UNION ALL
   select 'BRA' as CODE UNION ALL
   select 'PER' as CODE UNION ALL
   select 'URY' as CODE UNION ALL
   select 'IND' as CODE  UNION ALL
   select 'LCA' as CODE UNION ALL
   select 'VCT' as CODE
   ) as r1
on r.code = r1.code) AS FOO;
 count 
-------
    43
(1 row)

                                                                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count()
   ->  Hash Left Join
         Hash Cond: ((share0_ref2.code)::text = ('ARG'::text))
         ->  PX Coordinator 6:1  (slice1; segments: 6)
               Output: share0_ref2.code
               ->  Sequence
                     Output: share0_ref2.code
                     ->  Shared Scan (Producer; slice1; share0)
                           Output: share0_ref1.name, share0_ref1.code, share0_ref1.name_1, share0_ref1.s_population, share0_ref1.s_gnp, share0_ref1.avg_life, share0_ref1.region
                           ->  Hash Join
                                 Output: country.name, country.code, city.name, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)), country_1.region
                                 Hash Cond: (country.region = country_1.region)
                                 ->  Nested Loop
                                       Output: country.code, country.name, country.region, city.name
                                       Join Filter: true
                                       ->  PX Broadcast 6:6  (slice2; segments: 6)
                                             Output: country.code, country.name, country.region, country.capital
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.region, country.capital
                                                   Filter: (country.region = ANY ('{Caribbean,"North America","South America"}'::text[]))
                                       ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                             Output: city.name
                                             Index Cond: (city.id = country.capital)
                                 ->  Hash
                                       Output: country_1.region, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                       ->  PX Broadcast 6:6  (slice3; segments: 6)
                                             Output: country_1.region, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                             ->  Finalize GroupAggregate
                                                   Output: country_1.region, sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END), sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END), avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)
                                                   Group Key: country_1.region
                                                   ->  Sort
                                                         Output: country_1.region, (PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                                         Sort Key: country_1.region
                                                         ->  PX Hash 6:6  (slice4; segments: 6)
                                                               Output: country_1.region, (PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                                               Hash Key: country_1.region
                                                               ->  Partial HashAggregate
                                                                     Output: country_1.region, PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END), PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END), PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)
                                                                     Group Key: country_1.region
                                                                     ->  Nested Loop
                                                                           Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, city_1.population
                                                                           Join Filter: true
                                                                           ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                                                 Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, country_1.capital
                                                                                 ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                       Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, country_1.capital
                                                                                       Filter: ((country_1.governmentform <> 'Constitutional Monarchy'::text) AND (country_1.indepyear > 0) AND ((country_1.region = 'South America'::text) OR (country_1.region = 'North America'::text) OR (country_1.region = 'Caribbean'::text)) AND (country_1.region = ANY ('{Caribbean,"North America","South America"}'::text[])))
                                                                           ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                                                 Output: city_1.population
                                                                                 Index Cond: (city_1.id = country_1.capital)
                     ->  Append
                           ->  Nested Loop
                                 Output: share0_ref2.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice6; segments: 6)
                                       Output: share0_ref2.code
                                       ->  Result
                                             Output: share0_ref2.code
                                             Filter: (share0_ref2.region = 'South America'::text)
                                             ->  Shared Scan (Consumer; slice6; share0)
                                                   Output: share0_ref2.name, share0_ref2.code, share0_ref2.name_1, share0_ref2.s_population, share0_ref2.s_gnp, share0_ref2.avg_life, share0_ref2.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage
                                       Output: countrylanguage.isofficial
                                       Index Cond: (countrylanguage.countrycode = share0_ref2.code)
                                       Filter: countrylanguage.isofficial
                           ->  Nested Loop
                                 Output: share0_ref3.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice7; segments: 6)
                                       Output: share0_ref3.code
                                       ->  Result
                                             Output: share0_ref3.code
                                             Filter: (share0_ref3.region = 'North America'::text)
                                             ->  Shared Scan (Consumer; slice7; share0)
                                                   Output: share0_ref3.name, share0_ref3.code, share0_ref3.name_1, share0_ref3.s_population, share0_ref3.s_gnp, share0_ref3.avg_life, share0_ref3.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                       Output: countrylanguage_1.isofficial
                                       Index Cond: (countrylanguage_1.countrycode = share0_ref3.code)
                                       Filter: countrylanguage_1.isofficial
                           ->  Nested Loop
                                 Output: share0_ref4.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice8; segments: 6)
                                       Output: share0_ref4.code
                                       ->  Result
                                             Output: share0_ref4.code
                                             Filter: (share0_ref4.region = 'Caribbean'::text)
                                             ->  Shared Scan (Consumer; slice8; share0)
                                                   Output: share0_ref4.name, share0_ref4.code, share0_ref4.name_1, share0_ref4.s_population, share0_ref4.s_gnp, share0_ref4.avg_life, share0_ref4.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                       Output: countrylanguage_2.isofficial
                                       Index Cond: (countrylanguage_2.countrycode = share0_ref4.code)
                                       Filter: countrylanguage_2.isofficial
         ->  Hash
               Output: ('ARG'::text)
               ->  Append
                     ->  Result
                           Output: 'ARG'::text
                     ->  Result
                           Output: 'BOL'::text
                     ->  Result
                           Output: 'BRA'::text
                     ->  Result
                           Output: 'PER'::text
                     ->  Result
                           Output: 'URY'::text
                     ->  Result
                           Output: 'IND'::text
                     ->  Result
                           Output: 'LCA'::text
                     ->  Result
                           Output: 'VCT'::text
 Optimizer: PolarDB PX Optimizer
(114 rows)

-- query7
with alleuropeanlanguages as 
(select country.code,country.name COUNTRY, city.name CAPITAL, language, isofficial, percentage
 FROM country,city,countrylanguage
 WHERE country.code = countrylanguage.countrycode
 and country.capital = city.id
 and country.continent = 'Europe')
select * from
(select * from alleuropeanlanguages where isofficial='True') e1,
(select * from alleuropeanlanguages where percentage > 50) e2
where e1.code = e2.code order by e2.COUNTRY,e1.language;
 code |        country         |              capital              |    language    | isofficial | percentage | code |        country         |              capital              |    language    | isofficial | percentage 
------+------------------------+-----------------------------------+----------------+------------+------------+------+------------------------+-----------------------------------+----------------+------------+------------
 ALB  | Albania                | Tirana                            | Albaniana      | t          |       97.9 | ALB  | Albania                | Tirana                            | Albaniana      | t          |       97.9
 AUT  | Austria                | Wien                              | German         | t          |         92 | AUT  | Austria                | Wien                              | German         | t          |         92
 BLR  | Belarus                | Minsk                             | Belorussian    | t          |       65.6 | BLR  | Belarus                | Minsk                             | Belorussian    | t          |       65.6
 BLR  | Belarus                | Minsk                             | Russian        | t          |         32 | BLR  | Belarus                | Minsk                             | Belorussian    | t          |       65.6
 BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2 | BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel]               | French         | t          |       32.6 | BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel]               | German         | t          |          1 | BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2
 BIH  | Bosnia and Herzegovina | Sarajevo                          | Serbo-Croatian | t          |       99.2 | BIH  | Bosnia and Herzegovina | Sarajevo                          | Serbo-Croatian | t          |       99.2
 BGR  | Bulgaria               | Sofija                            | Bulgariana     | t          |       83.2 | BGR  | Bulgaria               | Sofija                            | Bulgariana     | t          |       83.2
 HRV  | Croatia                | Zagreb                            | Serbo-Croatian | t          |       95.9 | HRV  | Croatia                | Zagreb                            | Serbo-Croatian | t          |       95.9
 CZE  | Czech Republic         | Praha                             | Czech          | t          |       81.2 | CZE  | Czech Republic         | Praha                             | Czech          | t          |       81.2
 DNK  | Denmark                | Kobenhavn                         | Danish         | t          |       93.5 | DNK  | Denmark                | Kobenhavn                         | Danish         | t          |       93.5
 EST  | Estonia                | Tallinn                           | Estonian       | t          |       65.3 | EST  | Estonia                | Tallinn                           | Estonian       | t          |       65.3
 FRO  | Faroe Islands          | Torshavn                          | Danish         | t          |          0 | FRO  | Faroe Islands          | Torshavn                          | Faroese        | t          |        100
 FRO  | Faroe Islands          | Torshavn                          | Faroese        | t          |        100 | FRO  | Faroe Islands          | Torshavn                          | Faroese        | t          |        100
 FIN  | Finland                | Helsinki [Helsingfors]            | Finnish        | t          |       92.7 | FIN  | Finland                | Helsinki [Helsingfors]            | Finnish        | t          |       92.7
 FIN  | Finland                | Helsinki [Helsingfors]            | Swedish        | t          |        5.7 | FIN  | Finland                | Helsinki [Helsingfors]            | Finnish        | t          |       92.7
 FRA  | France                 | Paris                             | French         | t          |       93.6 | FRA  | France                 | Paris                             | French         | t          |       93.6
 DEU  | Germany                | Berlin                            | German         | t          |       91.3 | DEU  | Germany                | Berlin                            | German         | t          |       91.3
 GIB  | Gibraltar              | Gibraltar                         | English        | t          |       88.9 | GIB  | Gibraltar              | Gibraltar                         | English        | t          |       88.9
 GRC  | Greece                 | Athenai                           | Greek          | t          |       98.5 | GRC  | Greece                 | Athenai                           | Greek          | t          |       98.5
 HUN  | Hungary                | Budapest                          | Hungarian      | t          |       98.5 | HUN  | Hungary                | Budapest                          | Hungarian      | t          |       98.5
 ISL  | Iceland                | Reykjavik                         | Icelandic      | t          |       95.7 | ISL  | Iceland                | Reykjavik                         | Icelandic      | t          |       95.7
 IRL  | Ireland                | Dublin                            | English        | t          |       98.4 | IRL  | Ireland                | Dublin                            | English        | t          |       98.4
 IRL  | Ireland                | Dublin                            | Irish          | t          |        1.6 | IRL  | Ireland                | Dublin                            | English        | t          |       98.4
 ITA  | Italy                  | Roma                              | Italian        | t          |       94.1 | ITA  | Italy                  | Roma                              | Italian        | t          |       94.1
 LVA  | Latvia                 | Riga                              | Latvian        | t          |       55.1 | LVA  | Latvia                 | Riga                              | Latvian        | t          |       55.1
 LIE  | Liechtenstein          | Vaduz                             | German         | t          |         89 | LIE  | Liechtenstein          | Vaduz                             | German         | t          |         89
 LTU  | Lithuania              | Vilnius                           | Lithuanian     | t          |       81.6 | LTU  | Lithuania              | Vilnius                           | Lithuanian     | t          |       81.6
 LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | French         | t          |        4.2 | LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4
 LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | German         | t          |        2.3 | LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4
 LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4 | LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4
 MKD  | Macedonia              | Skopje                            | Macedonian     | t          |       66.5 | MKD  | Macedonia              | Skopje                            | Macedonian     | t          |       66.5
 MLT  | Malta                  | Valletta                          | English        | t          |        2.1 | MLT  | Malta                  | Valletta                          | Maltese        | t          |       95.8
 MLT  | Malta                  | Valletta                          | Maltese        | t          |       95.8 | MLT  | Malta                  | Valletta                          | Maltese        | t          |       95.8
 MDA  | Moldova                | Chisinau                          | Romanian       | t          |       61.9 | MDA  | Moldova                | Chisinau                          | Romanian       | t          |       61.9
 NLD  | Netherlands            | Amsterdam                         | Dutch          | t          |       95.6 | NLD  | Netherlands            | Amsterdam                         | Dutch          | t          |       95.6
 NOR  | Norway                 | Oslo                              | Norwegian      | t          |       96.6 | NOR  | Norway                 | Oslo                              | Norwegian      | t          |       96.6
 POL  | Poland                 | Warszawa                          | Polish         | t          |       97.6 | POL  | Poland                 | Warszawa                          | Polish         | t          |       97.6
 PRT  | Portugal               | Lisboa                            | Portuguese     | t          |         99 | PRT  | Portugal               | Lisboa                            | Portuguese     | t          |         99
 ROM  | Romania                | Bucuresti                         | Romani         | t          |        0.7 | ROM  | Romania                | Bucuresti                         | Romanian       | t          |       90.7
 ROM  | Romania                | Bucuresti                         | Romanian       | t          |       90.7 | ROM  | Romania                | Bucuresti                         | Romanian       | t          |       90.7
 RUS  | Russian Federation     | Moscow                            | Russian        | t          |       86.6 | RUS  | Russian Federation     | Moscow                            | Russian        | t          |       86.6
 SMR  | San Marino             | San Marino                        | Italian        | t          |        100 | SMR  | San Marino             | San Marino                        | Italian        | t          |        100
 SVK  | Slovakia               | Bratislava                        | Slovak         | t          |       85.6 | SVK  | Slovakia               | Bratislava                        | Slovak         | t          |       85.6
 SVN  | Slovenia               | Ljubljana                         | Slovene        | t          |       87.9 | SVN  | Slovenia               | Ljubljana                         | Slovene        | t          |       87.9
 ESP  | Spain                  | Madrid                            | Spanish        | t          |       74.4 | ESP  | Spain                  | Madrid                            | Spanish        | t          |       74.4
 SWE  | Sweden                 | Stockholm                         | Swedish        | t          |       89.5 | SWE  | Sweden                 | Stockholm                         | Swedish        | t          |       89.5
 CHE  | Switzerland            | Bern                              | French         | t          |       19.2 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 CHE  | Switzerland            | Bern                              | German         | t          |       63.6 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 CHE  | Switzerland            | Bern                              | Italian        | t          |        7.7 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 CHE  | Switzerland            | Bern                              | Romansh        | t          |        0.6 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 UKR  | Ukraine                | Kyiv                              | Ukrainian      | t          |       64.7 | UKR  | Ukraine                | Kyiv                              | Ukrainian      | t          |       64.7
 GBR  | United Kingdom         | London                            | English        | t          |       97.3 | GBR  | United Kingdom         | London                            | English        | t          |       97.3
 YUG  | Yugoslavia             | Beograd                           | Serbo-Croatian | t          |       75.2 | YUG  | Yugoslavia             | Beograd                           | Serbo-Croatian | t          |       75.2
(55 rows)

                                                                                                                                       QUERY PLAN                                                                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
   Merge Key: share0_ref2.name, share0_ref3.language
   ->  Sequence
         Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.code, share0_ref1.name, share0_ref1.name_1, share0_ref1.language, share0_ref1.isofficial, share0_ref1.percentage
               ->  Hash Join
                     Output: country.code, country.name, city.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           Hash Key: countrylanguage.countrycode
                           ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                 Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                 Filter: (countrylanguage.isofficial OR (countrylanguage.percentage > '50'::double precision))
                     ->  Hash
                           Output: country.code, country.name, city.name
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name, city.name
                                 Hash Key: country.code
                                 ->  Nested Loop
                                       Output: country.code, country.name, city.name
                                       Join Filter: true
                                       ->  PX Broadcast 6:6  (slice4; segments: 6)
                                             Output: country.code, country.name, country.capital
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.capital
                                                   Filter: (country.continent = 'Europe'::text)
                                       ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                             Output: city.name
                                             Index Cond: (city.id = country.capital)
         ->  Sort
               Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
               Sort Key: share0_ref2.name, share0_ref3.language
               ->  Hash Join
                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                     Hash Cond: (share0_ref3.code = share0_ref2.code)
                     ->  Result
                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                           Filter: share0_ref3.isofficial
                           ->  Shared Scan (Producer; slice1; share0)
                                 Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                     ->  Hash
                           Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                           ->  Result
                                 Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                                 Filter: (share0_ref2.percentage > '50'::double precision)
                                 ->  Shared Scan (Producer; slice1; share0)
                                       Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
 Optimizer: PolarDB PX Optimizer
(51 rows)

-- query8
with allcountrystats as 
( select country.code,country.name,count(distinct city.id) CITY_CNT,
  count(distinct countrylanguage.language) LANG_CNT
  from country,city,countrylanguage
  where country.code = city.countrycode
  and country.code = countrylanguage.countrycode
  group by country.code,country.name
)
select sum(FOO.CITY_CNT) REGION_CITY_CNT,sum(FOO.LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > 1
and country.continent = 'Asia'
UNION ALL
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > 1
and country.continent = 'North America'
UNION ALL
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > (select  max(CITY_CNT/LANG_CNT)  from allcountrystats,country where allcountrystats.code = country.code AND country.continent='Europe')
) FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region;
 region_city_cnt | region_lang_cnt |          region           
-----------------+-----------------+---------------------------
             840 |             192 | Caribbean
            2824 |             112 | Central America
            8250 |             252 | Eastern Asia
            2664 |             396 | Middle East
            1625 |             125 | North America
            3500 |              70 | South America
            3179 |             528 | Southeast Asia
           12278 |             896 | Southern and Central Asia
(8 rows)

--query 9
with diversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country,
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country.code and country.gnp > 100000)
select d1.code,d1.name,d1.capital,city.name CAPITAL_CITY,d1.CNT,d2.CNT
from
diversecountries d1 left join country
ON (d1.code = country.code AND d1.CNT < 8)
left join diversecountries d2
ON (country.code = d2.code AND d2.CNT > 8)
INNER JOIN city
ON(d1.capital = city.id)
ORDER BY d1.name;
 code |        name        | capital |   capital_city   | cnt | cnt 
------+--------------------+---------+------------------+-----+-----
 AUS  | Australia          |     135 | Canberra         |   8 |    
 AUT  | Austria            |    1523 | Wien             |   8 |    
 CAN  | Canada             |    1822 | Ottawa           |  12 |    
 CHN  | China              |    1891 | Peking           |  12 |    
 DNK  | Denmark            |    3315 | Kobenhavn        |   7 |    
 IND  | India              |    1109 | New Delhi        |  12 |    
 IRN  | Iran               |    1380 | Teheran          |  10 |    
 ITA  | Italy              |    1464 | Roma             |   8 |    
 MMR  | Myanmar            |    2710 | Rangoon (Yangon) |   8 |    
 RUS  | Russian Federation |    3580 | Moscow           |  12 |    
 ZAF  | South Africa       |     716 | Pretoria         |  11 |    
 USA  | United States      |    3813 | Washington       |  12 |    
(12 rows)

                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
   Merge Key: share0_ref3.name
   ->  Sequence
         Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.code, share0_ref1.name, share0_ref1.capital, share0_ref1.cnt
               ->  Hash Join
                     Output: country.code, country.name, country.capital, (count())
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  Result
                           Output: countrylanguage.countrycode, (count())
                           Filter: ((count()) > 6)
                           ->  HashAggregate
                                 Output: count(), count(), countrylanguage.countrycode
                                 Group Key: countrylanguage.countrycode
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: countrylanguage.countrycode
                                       Hash Key: countrylanguage.countrycode
                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                             Output: countrylanguage.countrycode
                     ->  Hash
                           Output: country.code, country.name, country.capital
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name, country.capital
                                 Hash Key: country.code
                                 ->  Partial Seq Scan on qp_with_clause.country
                                       Output: country.code, country.name, country.capital
                                       Filter: (country.gnp > '100000'::numeric)
         ->  Sort
               Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
               Sort Key: share0_ref3.name
               ->  Hash Left Join
                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
                     Hash Cond: (country_1.code = share0_ref2.code)
                     ->  PX Hash 6:6  (slice4; segments: 6)
                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code, city.name
                           Hash Key: country_1.code
                           ->  Nested Loop
                                 Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code, city.name
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice5; segments: 6)
                                       Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code
                                       ->  Nested Loop Left Join
                                             Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code
                                             Join Filter: true
                                             ->  Shared Scan (Consumer; slice5; share0)
                                                   Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt
                                             ->  Full Index Scan using country_pkey on qp_with_clause.country country_1
                                                   Output: country_1.code
                                                   Index Cond: (country_1.code = share0_ref3.code)
                                                   Filter: (share0_ref3.cnt < 8)
                                 ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                       Output: city.name
                                       Index Cond: (city.id = share0_ref3.capital)
                     ->  Hash
                           Output: share0_ref2.code, share0_ref2.cnt
                           ->  Result
                                 Output: share0_ref2.code, share0_ref2.cnt
                                 Filter: (share0_ref2.cnt > 8)
                                 ->  Shared Scan (Producer; slice1; share0)
                                       Output: share0_ref2.code, share0_ref2.name, share0_ref2.capital, share0_ref2.cnt
 Optimizer: PolarDB PX Optimizer
(63 rows)

--query 10 , multiple ctes, joins
with longlivingregions as 
(
select FOO.*,count(distinct language) as "lang_count"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       avg(lifeexpectancy) as "REGION_LIFETIME",region
     from
      country
     group by region
    ) FOO,countrylanguage,country
where
   country.code = countrylanguage.countrycode
   and FOO.region = country.region
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP",foo."REGION_LIFETIME"),
denseregions as 
(
select FOO.*,count(distinct language) as "lang_count",
       sum(surfacearea) as "REGION_SURFACE_AREA"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       region
     from
      country
     group by region
    ) FOO,countrylanguage,country
where
   country.code = countrylanguage.countrycode
   and FOO.region = country.region
   and FOO."REGION_POP" != 0
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP"
order by sum(surfacearea)/foo."REGION_POP" desc),
allcountrystats as 
( select country.code,country.name,count(distinct city.id) CITY_CNT,
  count(distinct countrylanguage.language) LANG_CNT
  from country,city,countrylanguage
  where country.code = city.countrycode
  and country.code = countrylanguage.countrycode
  group by country.code,country.name
)
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear between 1800 and 1850
UNION ALL
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear between 1850 and 1900
UNION ALL
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear > 1900
order by name
LIMIT 50;
 city_cnt | lang_cnt |                 name                  | REGION_LIFETIME  | REGION_POP | lang_count | REGION_GNP |          region           
----------+----------+---------------------------------------+------------------+------------+------------+------------+---------------------------
        4 |        5 | Afghanistan                           | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        1 |        3 | Albania                               | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
       18 |        2 | Algeria                               | 65.3857127598354 |  173266000 |         14 |  243870.00 | Northern Africa
        5 |        9 | Angola                                | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        1 |        2 | Antigua and Barbuda                   | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       57 |        3 | Argentina                             | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        3 |        2 | Armenia                               | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       14 |        8 | Australia                             | 78.8000030517578 |   22753100 |         11 |  405851.00 | Australia and New Zealand
        6 |        8 | Austria                               | 78.2555567423503 |  183247600 |         21 | 4673272.00 | Western Europe
        4 |        4 | Azerbaijan                            | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
        1 |        2 | Bahamas                               | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        1 |        2 | Bahrain                               | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       24 |        7 | Bangladesh                            | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        1 |        2 | Barbados                              | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       16 |        4 | Belarus                               | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        9 |        6 | Belgium                               | 78.2555567423503 |  183247600 |         21 | 4673272.00 | Western Europe
        2 |        4 | Belize                                | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
        4 |        7 | Benin                                 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        3 | Bhutan                                | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        8 |        4 | Bolivia                               | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        3 |        1 | Bosnia and Herzegovina                | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
        2 |        5 | Botswana                              | 44.8199996948242 |   46886000 |         21 |  126931.00 | Southern Africa
      250 |        5 | Brazil                                | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        1 |        4 | Brunei                                | 64.4000001387163 |  518541000 |         47 |  642643.00 | Southeast Asia
       10 |        4 | Bulgaria                              | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        3 |        6 | Burkina Faso                          | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        3 | Burundi                               | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        3 |        4 | Cambodia                              | 64.4000001387163 |  518541000 |         47 |  642643.00 | Southeast Asia
        7 |        8 | Cameroon                              | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       49 |       12 | Canada                                | 75.8199996948242 |  309632000 |         18 | 9111890.00 | North America
        1 |        2 | Cape Verde                            | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        6 | Central African Republic              | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        2 |        8 | Chad                                  | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       29 |        4 | Chile                                 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
       38 |        5 | Colombia                              | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        1 |        5 | Comoros                               | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        2 |        6 | Congo                                 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       18 |       10 | Congo, The Democratic Republic of the | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        1 |        4 | Costa Rica                            | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
        5 |        5 | Cote deIvoire                         | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        4 |        2 | Croatia                               | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
       14 |        1 | Cuba                                  | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        2 |        2 | Cyprus                                | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       10 |        8 | Czech Republic                        | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        1 |        3 | Djibouti                              | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        1 |        2 | Dominica                              | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        6 |        2 | Dominican Republic                    | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       15 |        2 | Ecuador                               | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
       37 |        2 | Egypt                                 | 65.3857127598354 |  173266000 |         14 |  243870.00 | Northern Africa
        7 |        2 | El Salvador                           | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
(50 rows)

--query 11
with allcitystats as 
( select city.name CITY,city.id,country.name COUNTRY,city.district,city.population as CITY_POP
  from
  city,country
  where city.countrycode = country.code
),
alldistrictstats as 
( select allcitystats.district,allcitystats.COUNTRY,sum(CITY_POP) DISTRICT_POP,
  count(CITY) as D_CITY_CNT
  from allcitystats
  group by allcitystats.district,allcitystats.COUNTRY
  order by district,COUNTRY
),
allcountrystats as 
( select alldistrictstats.COUNTRY,country.code,sum(D_CITY_CNT) C_CITY_CNT,
  count(distinct countrylanguage.language) C_LANG_CNT
  from alldistrictstats,country,countrylanguage
  where alldistrictstats.COUNTRY = country.name
  and country.code = countrylanguage.countrycode
  group by COUNTRY,code
),
asian_region_stats as 
(
select sum(FOO.C_CITY_CNT) REGION_CITY_CNT,sum(FOO.C_LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountrystats.code,allcountrystats.COUNTRY,C_CITY_CNT,C_LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and C_CITY_CNT/C_LANG_CNT > 1
and country.continent = 'Asia') FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region
)
select * from
(
select REGION_CITY_CNT as CITY_CNT,REGION_LANG_CNT as LANG_CNT, region as IDENTIFIER from asian_region_stats
UNION ALL
(
select sum(FOO.C_CITY_CNT) CITY_CNT,sum(FOO.C_LANG_CNT) LANG_CNT,FOO.region as IDENTIFIER
FROM
(
select allcountrystats.code,allcountrystats.COUNTRY,C_CITY_CNT,C_LANG_CNT,country.region,allcitystats.CITY CAPITAL
from allcountrystats,country,allcitystats
where allcountrystats.code = country.code
and country.capital = allcitystats.id
and C_CITY_CNT/C_LANG_CNT > 1
and country.continent = 'Europe') FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region
)
) FOO1
order by FOO1.lang_cnt,FOO1.identifier;
 city_cnt | lang_cnt |        identifier         
----------+----------+---------------------------
      494 |       10 | British Islands
      159 |       48 | Baltic Countries
    36060 |      132 | Eastern Asia
     1295 |      161 | Nordic Countries
     9414 |      369 | Western Europe
    11880 |      450 | Southern Europe
    32900 |      610 | Eastern Europe
    29161 |      616 | Southeast Asia
     8568 |      792 | Middle East
    80388 |     1092 | Southern and Central Asia
(10 rows)

                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
   Merge Key: (sum(share2_ref2.c_lang_cnt)), country_3.region
   ->  Sequence
         Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.name, share0_ref1.id, share0_ref1.name_1, share0_ref1.district, share0_ref1.population
               ->  Hash Join
                     Output: city.name, city.id, country.name, city.district, city.population
                     Hash Cond: (city.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: city.id, city.name, city.countrycode, city.district, city.population
                           Hash Key: city.countrycode
                           ->  Partial Seq Scan on qp_with_clause.city
                                 Output: city.id, city.name, city.countrycode, city.district, city.population
                     ->  Hash
                           Output: country.code, country.name
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name
                                 Hash Key: country.code
                                 ->  Partial Seq Scan on qp_with_clause.country
                                       Output: country.code, country.name
         ->  Sequence
               Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
               ->  Shared Scan (Producer; slice1; share2)
                     Output: share2_ref1.name, share2_ref1.code, share2_ref1.c_city_cnt, share2_ref1.c_lang_cnt
                     ->  GroupAggregate
                           Output: share0_ref2.name_1, country_1.code, sum((count(share0_ref2.name))), count(DISTINCT countrylanguage.language)
                           Group Key: share0_ref2.name_1, country_1.code
                           ->  Sort
                                 Output: share0_ref2.name_1, (count(share0_ref2.name)), country_1.code, countrylanguage.language
                                 Sort Key: share0_ref2.name_1, country_1.code
                                 ->  Hash Join
                                       Output: share0_ref2.name_1, (count(share0_ref2.name)), country_1.code, countrylanguage.language
                                       Hash Cond: (share0_ref2.name_1 = country_1.name)
                                       ->  Sort
                                             Output: share0_ref2.district, share0_ref2.name_1, (count(share0_ref2.name))
                                             Sort Key: share0_ref2.district, share0_ref2.name_1
                                             ->  PX Hash 6:6  (slice4; segments: 6)
                                                   Output: share0_ref2.district, share0_ref2.name_1, (count(share0_ref2.name))
                                                   Hash Key: share0_ref2.name_1
                                                   ->  HashAggregate
                                                         Output: share0_ref2.district, share0_ref2.name_1, count(share0_ref2.name)
                                                         Group Key: share0_ref2.district, share0_ref2.name_1
                                                         ->  PX Hash 6:6  (slice5; segments: 6)
                                                               Output: share0_ref2.district, share0_ref2.name_1, share0_ref2.name, share0_ref2.population
                                                               Hash Key: share0_ref2.district, share0_ref2.name_1
                                                               ->  Result
                                                                     Output: share0_ref2.district, share0_ref2.name_1, share0_ref2.name, share0_ref2.population
                                                                     ->  Shared Scan (Consumer; slice5; share0)
                                                                           Output: share0_ref2.name, share0_ref2.id, share0_ref2.name_1, share0_ref2.district, share0_ref2.population
                                       ->  Hash
                                             Output: country_1.code, country_1.name, countrylanguage.language
                                             ->  PX Hash 6:6  (slice6; segments: 6)
                                                   Output: country_1.code, country_1.name, countrylanguage.language
                                                   Hash Key: country_1.name
                                                   ->  Hash Join
                                                         Output: country_1.code, country_1.name, countrylanguage.language
                                                         Hash Cond: (countrylanguage.countrycode = country_1.code)
                                                         ->  PX Hash 6:6  (slice7; segments: 6)
                                                               Output: countrylanguage.countrycode, countrylanguage.language
                                                               Hash Key: countrylanguage.countrycode
                                                               ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                                     Output: countrylanguage.countrycode, countrylanguage.language
                                                         ->  Hash
                                                               Output: country_1.code, country_1.name
                                                               ->  PX Hash 6:6  (slice8; segments: 6)
                                                                     Output: country_1.code, country_1.name
                                                                     Hash Key: country_1.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                           Output: country_1.code, country_1.name
               ->  Sort
                     Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
                     Sort Key: (sum(share2_ref2.c_lang_cnt)), country_3.region
                     ->  Append
                           ->  Sort
                                 Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
                                 Sort Key: country_3.region
                                 ->  HashAggregate
                                       Output: sum(share2_ref2.c_city_cnt), sum(share2_ref2.c_lang_cnt), country_3.region
                                       Group Key: country_3.region
                                       ->  Hash Join
                                             Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                             Hash Cond: (country_2.region = country_3.region)
                                             ->  PX Hash 6:6  (slice9; segments: 6)
                                                   Output: country_2.region
                                                   Hash Key: country_2.region
                                                   ->  Hash Join
                                                         Output: country_2.region
                                                         Hash Cond: (share2_ref3.code = country_2.code)
                                                         ->  PX Hash 6:6  (slice10; segments: 6)
                                                               Output: share2_ref3.code
                                                               Hash Key: share2_ref3.code
                                                               ->  Result
                                                                     Output: share2_ref3.code
                                                                     ->  Shared Scan (Consumer; slice10; share2)
                                                                           Output: share2_ref3.name, share2_ref3.code, share2_ref3.c_city_cnt, share2_ref3.c_lang_cnt
                                                         ->  Hash
                                                               Output: country_2.code, country_2.region
                                                               ->  PX Hash 6:6  (slice11; segments: 6)
                                                                     Output: country_2.code, country_2.region
                                                                     Hash Key: country_2.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                           Output: country_2.code, country_2.region
                                             ->  Hash
                                                   Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                   ->  PX Hash 6:6  (slice12; segments: 6)
                                                         Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                         Hash Key: country_3.region
                                                         ->  Hash Join
                                                               Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                               Hash Cond: (share2_ref2.code = country_3.code)
                                                               ->  PX Hash 6:6  (slice13; segments: 6)
                                                                     Output: share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                                     Hash Key: share2_ref2.code
                                                                     ->  Result
                                                                           Output: share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                                           Filter: ((share2_ref2.c_city_cnt / (share2_ref2.c_lang_cnt)::numeric) > '1'::numeric)
                                                                           ->  Shared Scan (Consumer; slice13; share2)
                                                                                 Output: share2_ref2.name, share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                               ->  Hash
                                                                     Output: country_3.region, country_3.code
                                                                     ->  PX Hash 6:6  (slice14; segments: 6)
                                                                           Output: country_3.region, country_3.code
                                                                           Hash Key: country_3.code
                                                                           ->  Nested Loop
                                                                                 Output: country_3.region, country_3.code
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice15; segments: 6)
                                                                                       Output: country_3.region, country_3.code, country_3.capital
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_3
                                                                                             Output: country_3.region, country_3.code, country_3.capital
                                                                                             Filter: (country_3.continent = 'Asia'::text)
                                                                                 ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                                                       Index Cond: (city_1.id = country_3.capital)
                           ->  Sort
                                 Output: (sum(share2_ref4.c_city_cnt)), (sum(share2_ref4.c_lang_cnt)), country_5.region
                                 Sort Key: country_5.region
                                 ->  HashAggregate
                                       Output: sum(share2_ref4.c_city_cnt), sum(share2_ref4.c_lang_cnt), country_5.region
                                       Group Key: country_5.region
                                       ->  Hash Join
                                             Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                             Hash Cond: (country_4.region = country_5.region)
                                             ->  PX Hash 6:6  (slice16; segments: 6)
                                                   Output: country_4.region
                                                   Hash Key: country_4.region
                                                   ->  Hash Join
                                                         Output: country_4.region
                                                         Hash Cond: (share2_ref5.code = country_4.code)
                                                         ->  PX Hash 6:6  (slice17; segments: 6)
                                                               Output: share2_ref5.code
                                                               Hash Key: share2_ref5.code
                                                               ->  Result
                                                                     Output: share2_ref5.code
                                                                     ->  Shared Scan (Consumer; slice17; share2)
                                                                           Output: share2_ref5.name, share2_ref5.code, share2_ref5.c_city_cnt, share2_ref5.c_lang_cnt
                                                         ->  Hash
                                                               Output: country_4.code, country_4.region
                                                               ->  PX Hash 6:6  (slice18; segments: 6)
                                                                     Output: country_4.code, country_4.region
                                                                     Hash Key: country_4.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_4
                                                                           Output: country_4.code, country_4.region
                                             ->  Hash
                                                   Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                   ->  PX Hash 6:6  (slice19; segments: 6)
                                                         Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                         Hash Key: country_5.region
                                                         ->  Hash Join
                                                               Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                               Hash Cond: (share2_ref4.code = country_5.code)
                                                               ->  Result
                                                                     Output: share2_ref4.code, share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt
                                                                     Filter: ((share2_ref4.c_city_cnt / (share2_ref4.c_lang_cnt)::numeric) > '1'::numeric)
                                                                     ->  Shared Scan (Consumer; slice19; share2)
                                                                           Output: share2_ref4.name, share2_ref4.code, share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt
                                                               ->  Hash
                                                                     Output: country_5.code, country_5.region
                                                                     ->  PX Broadcast 6:6  (slice20; segments: 6)
                                                                           Output: country_5.code, country_5.region
                                                                           ->  Hash Join
                                                                                 Output: country_5.code, country_5.region
                                                                                 Hash Cond: (share0_ref3.id = country_5.capital)
                                                                                 ->  PX Hash 6:6  (slice21; segments: 6)
                                                                                       Output: share0_ref3.id
                                                                                       Hash Key: share0_ref3.id
                                                                                       ->  Result
                                                                                             Output: share0_ref3.id
                                                                                             ->  Shared Scan (Consumer; slice21; share0)
                                                                                                   Output: share0_ref3.name, share0_ref3.id, share0_ref3.name_1, share0_ref3.district, share0_ref3.population
                                                                                 ->  Hash
                                                                                       Output: country_5.code, country_5.region, country_5.capital
                                                                                       ->  PX Hash 6:6  (slice22; segments: 6)
                                                                                             Output: country_5.code, country_5.region, country_5.capital
                                                                                             Hash Key: country_5.capital
                                                                                             ->  Partial Seq Scan on qp_with_clause.country country_5
                                                                                                   Output: country_5.code, country_5.region, country_5.capital
                                                                                                   Filter: (country_5.continent = 'Europe'::text)
 Optimizer: PolarDB PX Optimizer
(200 rows)

-- queries with CTEs using merge joins
set enable_nestloop=off;
set enable_hashjoin=off;
set enable_mergejoin=on;
--query1
with capitals as 
(select country.code,id,city.name from city,country 
 where city.countrycode = country.code AND city.id = country.capital) 
select * from 
capitals,countrylanguage
where capitals.code = countrylanguage.countrycode and isofficial='true'
order by capitals.code,countrylanguage.language;
 code |  id  |               name                | countrycode |    language    | isofficial | percentage 
------+------+-----------------------------------+-------------+----------------+------------+------------
 ABW  |  129 | Oranjestad                        | ABW         | Dutch          | t          |        5.3
 AFG  |    1 | Kabul                             | AFG         | Dari           | t          |       32.1
 AFG  |    1 | Kabul                             | AFG         | Pashto         | t          |       52.4
 AIA  |   62 | The Valley                        | AIA         | English        | t          |          0
 ALB  |   34 | Tirana                            | ALB         | Albaniana      | t          |       97.9
 AND  |   55 | Andorra la Vella                  | AND         | Catalan        | t          |       32.3
 ANT  |   33 | Willemstad                        | ANT         | Dutch          | t          |          0
 ANT  |   33 | Willemstad                        | ANT         | Papiamento     | t          |       86.2
 ARE  |   65 | Abu Dhabi                         | ARE         | Arabic         | t          |         42
 ARG  |   69 | Buenos Aires                      | ARG         | Spanish        | t          |       96.8
 ARM  |  126 | Yerevan                           | ARM         | Armenian       | t          |       93.4
 ASM  |   54 | Fagatogo                          | ASM         | English        | t          |        3.1
 ASM  |   54 | Fagatogo                          | ASM         | Samoan         | t          |       90.6
 ATG  |   63 | Saint Johns                       | ATG         | English        | t          |          0
 AUS  |  135 | Canberra                          | AUS         | English        | t          |       81.2
 AUT  | 1523 | Wien                              | AUT         | German         | t          |         92
 AZE  |  144 | Baku                              | AZE         | Azerbaijani    | t          |         89
 BDI  |  552 | Bujumbura                         | BDI         | French         | t          |          0
 BDI  |  552 | Bujumbura                         | BDI         | Kirundi        | t          |       98.1
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | Dutch          | t          |       59.2
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | French         | t          |       32.6
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | German         | t          |          1
 BGD  |  150 | Dhaka                             | BGD         | Bengali        | t          |       97.7
 BGR  |  539 | Sofija                            | BGR         | Bulgariana     | t          |       83.2
 BHR  |  149 | al-Manama                         | BHR         | Arabic         | t          |       67.7
 BIH  |  201 | Sarajevo                          | BIH         | Serbo-Croatian | t          |       99.2
 BLR  | 3520 | Minsk                             | BLR         | Belorussian    | t          |       65.6
 BLR  | 3520 | Minsk                             | BLR         | Russian        | t          |         32
 BLZ  |  185 | Belmopan                          | BLZ         | English        | t          |       50.8
 BMU  |  191 | Hamilton                          | BMU         | English        | t          |        100
 BOL  |  194 | La Paz                            | BOL         | Aimara         | t          |        3.2
 BOL  |  194 | La Paz                            | BOL         | Ketdua         | t          |        8.1
 BOL  |  194 | La Paz                            | BOL         | Spanish        | t          |       87.7
 BRA  |  211 | Brasilia                          | BRA         | Portuguese     | t          |       97.5
 BRB  |  174 | Bridgetown                        | BRB         | English        | t          |          0
 BRN  |  538 | Bandar Seri Begawan               | BRN         | Malay          | t          |       45.5
 BTN  |  192 | Thimphu                           | BTN         | Dzongkha       | t          |         50
 CAN  | 1822 | Ottawa                            | CAN         | English        | t          |       60.4
 CAN  | 1822 | Ottawa                            | CAN         | French         | t          |       23.4
 CCK  | 2317 | West Island                       | CCK         | English        | t          |          0
 CHE  | 3248 | Bern                              | CHE         | French         | t          |       19.2
 CHE  | 3248 | Bern                              | CHE         | German         | t          |       63.6
 CHE  | 3248 | Bern                              | CHE         | Italian        | t          |        7.7
 CHE  | 3248 | Bern                              | CHE         | Romansh        | t          |        0.6
 CHL  |  554 | Santiago de Chile                 | CHL         | Spanish        | t          |       89.7
 CHN  | 1891 | Peking                            | CHN         | Chinese        | t          |         92
 COK  |  583 | Avarua                            | COK         | Maori          | t          |          0
 COL  | 2257 | Santafe de Bogota                 | COL         | Spanish        | t          |         99
 COM  | 2295 | Moroni                            | COM         | Comorian       | t          |         75
 CPV  | 1859 | Praia                             | CPV         | Portuguese     | t          |          0
 CRI  |  584 | San Jose                          | CRI         | Spanish        | t          |       97.5
 CUB  | 2413 | La Habana                         | CUB         | Spanish        | t          |        100
 CXR  | 1791 | Flying Fish Cove                  | CXR         | English        | t          |          0
 CYM  |  553 | George Town                       | CYM         | English        | t          |          0
 CYP  | 2430 | Nicosia                           | CYP         | Greek          | t          |       74.1
 CYP  | 2430 | Nicosia                           | CYP         | Turkish        | t          |       22.4
 CZE  | 3339 | Praha                             | CZE         | Czech          | t          |       81.2
 DEU  | 3068 | Berlin                            | DEU         | German         | t          |       91.3
 DJI  |  585 | Djibouti                          | DJI         | Arabic         | t          |       10.6
 DNK  | 3315 | Kobenhavn                         | DNK         | Danish         | t          |       93.5
 DOM  |  587 | Santo Domingo de Guzman           | DOM         | Spanish        | t          |         98
 DZA  |   35 | Alger                             | DZA         | Arabic         | t          |         86
 ECU  |  594 | Quito                             | ECU         | Spanish        | t          |         93
 EGY  |  608 | Cairo                             | EGY         | Arabic         | t          |       98.8
 ERI  |  652 | Asmara                            | ERI         | Tigrinja       | t          |       49.1
 ESH  | 2453 | El-Aaiun                          | ESH         | Arabic         | t          |        100
 ESP  |  653 | Madrid                            | ESP         | Spanish        | t          |       74.4
 EST  | 3791 | Tallinn                           | EST         | Estonian       | t          |       65.3
 FIN  | 3236 | Helsinki [Helsingfors]            | FIN         | Finnish        | t          |       92.7
 FIN  | 3236 | Helsinki [Helsingfors]            | FIN         | Swedish        | t          |        5.7
 FJI  |  764 | Suva                              | FJI         | Fijian         | t          |       50.8
 FLK  |  763 | Stanley                           | FLK         | English        | t          |          0
 FRA  | 2974 | Paris                             | FRA         | French         | t          |       93.6
 FRO  |  901 | Torshavn                          | FRO         | Danish         | t          |          0
 FRO  |  901 | Torshavn                          | FRO         | Faroese        | t          |        100
 GBR  |  456 | London                            | GBR         | English        | t          |       97.3
 GEO  |  905 | Tbilisi                           | GEO         | Georgiana      | t          |       71.7
 GIB  |  915 | Gibraltar                         | GIB         | English        | t          |       88.9
 GLP  |  919 | Basse-Terre                       | GLP         | French         | t          |          0
 GNB  |  927 | Bissau                            | GNB         | Portuguese     | t          |        8.1
 GRC  | 2401 | Athenai                           | GRC         | Greek          | t          |       98.5
 GRL  |  917 | Nuuk                              | GRL         | Danish         | t          |       12.5
 GRL  |  917 | Nuuk                              | GRL         | Greenlandic    | t          |       87.5
 GTM  |  922 | Ciudad de Guatemala               | GTM         | Spanish        | t          |       64.7
 GUM  |  921 | Agaaa                             | GUM         | Chamorro       | t          |       29.6
 GUM  |  921 | Agaaa                             | GUM         | English        | t          |       37.5
 HND  |  933 | Tegucigalpa                       | HND         | Spanish        | t          |       97.2
 HRV  | 2409 | Zagreb                            | HRV         | Serbo-Croatian | t          |       95.9
 HTI  |  929 | Port-au-Prince                    | HTI         | French         | t          |          0
 HUN  | 3483 | Budapest                          | HUN         | Hungarian      | t          |       98.5
 IDN  |  939 | Jakarta                           | IDN         | Malay          | t          |       12.1
 IND  | 1109 | New Delhi                         | IND         | Hindi          | t          |       39.9
 IRL  | 1447 | Dublin                            | IRL         | English        | t          |       98.4
 IRL  | 1447 | Dublin                            | IRL         | Irish          | t          |        1.6
 IRN  | 1380 | Teheran                           | IRN         | Persian        | t          |       45.7
 IRQ  | 1365 | Baghdad                           | IRQ         | Arabic         | t          |       77.2
 ISL  | 1449 | Reykjavik                         | ISL         | Icelandic      | t          |       95.7
 ISR  | 1450 | Jerusalem                         | ISR         | Arabic         | t          |         18
 ISR  | 1450 | Jerusalem                         | ISR         | Hebrew         | t          |       63.1
 ITA  | 1464 | Roma                              | ITA         | Italian        | t          |       94.1
 JOR  | 1786 | Amman                             | JOR         | Arabic         | t          |       97.9
 JPN  | 1532 | Tokyo                             | JPN         | Japanese       | t          |       99.1
 KAZ  | 1864 | Astana                            | KAZ         | Kazakh         | t          |         46
 KGZ  | 2253 | Bishkek                           | KGZ         | Kirgiz         | t          |       59.7
 KGZ  | 2253 | Bishkek                           | KGZ         | Russian        | t          |       16.2
 KHM  | 1800 | Phnom Penh                        | KHM         | Khmer          | t          |       88.6
 KIR  | 2256 | Bairiki                           | KIR         | Kiribati       | t          |       98.9
 KNA  | 3064 | Basseterre                        | KNA         | English        | t          |          0
 KOR  | 2331 | Seoul                             | KOR         | Korean         | t          |       99.9
 KWT  | 2429 | Kuwait                            | KWT         | Arabic         | t          |       78.1
 LAO  | 2432 | Vientiane                         | LAO         | Lao            | t          |       67.2
 LBN  | 2438 | Beirut                            | LBN         | Arabic         | t          |         93
 LBY  | 2441 | Tripoli                           | LBY         | Arabic         | t          |         96
 LCA  | 3065 | Castries                          | LCA         | English        | t          |         20
 LIE  | 2446 | Vaduz                             | LIE         | German         | t          |         89
 LKA  | 3217 | Colombo                           | LKA         | Singali        | t          |       60.3
 LKA  | 3217 | Colombo                           | LKA         | Tamil          | t          |       19.6
 LSO  | 2437 | Maseru                            | LSO         | English        | t          |          0
 LSO  | 2437 | Maseru                            | LSO         | Sotho          | t          |         85
 LTU  | 2447 | Vilnius                           | LTU         | Lithuanian     | t          |       81.6
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | French         | t          |        4.2
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | German         | t          |        2.3
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | Luxembourgish  | t          |       64.4
 LVA  | 2434 | Riga                              | LVA         | Latvian        | t          |       55.1
 MAC  | 2454 | Macao                             | MAC         | Portuguese     | t          |        2.3
 MAR  | 2486 | Rabat                             | MAR         | Arabic         | t          |         65
 MCO  | 2695 | Monaco-Ville                      | MCO         | French         | t          |       41.9
 MDA  | 2690 | Chisinau                          | MDA         | Romanian       | t          |       61.9
 MDG  | 2455 | Antananarivo                      | MDG         | French         | t          |          0
 MDG  | 2455 | Antananarivo                      | MDG         | Malagasy       | t          |       98.9
 MDV  | 2463 | Male                              | MDV         | Dhivehi        | t          |        100
 MEX  | 2515 | Ciudad de Mexico                  | MEX         | Spanish        | t          |       92.1
 MHL  | 2507 | Dalap-Uliga-Darrit                | MHL         | English        | t          |          0
 MHL  | 2507 | Dalap-Uliga-Darrit                | MHL         | Marshallese    | t          |       96.8
 MKD  | 2460 | Skopje                            | MKD         | Macedonian     | t          |       66.5
 MLT  | 2484 | Valletta                          | MLT         | English        | t          |        2.1
 MLT  | 2484 | Valletta                          | MLT         | Maltese        | t          |       95.8
 MMR  | 2710 | Rangoon (Yangon)                  | MMR         | Burmese        | t          |         69
 MNG  | 2696 | Ulan Bator                        | MNG         | Mongolian      | t          |       78.8
 MNP  | 2913 | Garapan                           | MNP         | English        | t          |        4.8
 MSR  | 2697 | Plymouth                          | MSR         | English        | t          |          0
 MTQ  | 2508 | Fort-de-France                    | MTQ         | French         | t          |          0
 MWI  | 2462 | Lilongwe                          | MWI         | Chichewa       | t          |       58.3
 MYS  | 2464 | Kuala Lumpur                      | MYS         | Malay          | t          |       58.4
 MYT  | 2514 | Mamoutzou                         | MYT         | French         | t          |       20.3
 NCL  | 3493 | Noumea                            | NCL         | French         | t          |       34.3
 NFK  | 2806 | Kingston                          | NFK         | English        | t          |          0
 NIC  | 2734 | Managua                           | NIC         | Spanish        | t          |       97.6
 NIU  | 2805 | Alofi                             | NIU         | English        | t          |          0
 NLD  |    5 | Amsterdam                         | NLD         | Dutch          | t          |       95.6
 NOR  | 2807 | Oslo                              | NOR         | Norwegian      | t          |       96.6
 NPL  | 2729 | Kathmandu                         | NPL         | Nepali         | t          |       50.4
 NRU  | 2728 | Yaren                             | NRU         | English        | t          |        7.5
 NRU  | 2728 | Yaren                             | NRU         | Nauru          | t          |       57.5
 NZL  | 3499 | Wellington                        | NZL         | English        | t          |         87
 OMN  | 2821 | Masqat                            | OMN         | Arabic         | t          |       76.7
 PAK  | 2831 | Islamabad                         | PAK         | Urdu           | t          |        7.6
 PAN  | 2882 | Ciudad de Panama                  | PAN         | Spanish        | t          |       76.8
 PER  | 2890 | Lima                              | PER         | Aimara         | t          |        2.3
 PER  | 2890 | Lima                              | PER         | Ketdua         | t          |       16.4
 PER  | 2890 | Lima                              | PER         | Spanish        | t          |       79.8
 PHL  |  766 | Manila                            | PHL         | Pilipino       | t          |       29.3
 PLW  | 2881 | Koror                             | PLW         | English        | t          |        3.2
 PLW  | 2881 | Koror                             | PLW         | Palau          | t          |       82.2
 POL  | 2928 | Warszawa                          | POL         | Polish         | t          |       97.6
 PRI  | 2919 | San Juan                          | PRI         | Spanish        | t          |       51.3
 PRK  | 2318 | Pyongyang                         | PRK         | Korean         | t          |       99.9
 PRT  | 2914 | Lisboa                            | PRT         | Portuguese     | t          |         99
 PRY  | 2885 | Asuncion                          | PRY         | Guarani        | t          |       40.1
 PRY  | 2885 | Asuncion                          | PRY         | Spanish        | t          |       55.1
 PYF  | 3016 | Papeete                           | PYF         | French         | t          |       40.8
 QAT  | 2973 | Doha                              | QAT         | Arabic         | t          |       40.7
 ROM  | 3018 | Bucuresti                         | ROM         | Romani         | t          |        0.7
 ROM  | 3018 | Bucuresti                         | ROM         | Romanian       | t          |       90.7
 RUS  | 3580 | Moscow                            | RUS         | Russian        | t          |       86.6
 RWA  | 3047 | Kigali                            | RWA         | French         | t          |          0
 RWA  | 3047 | Kigali                            | RWA         | Rwanda         | t          |        100
 SAU  | 3173 | Riyadh                            | SAU         | Arabic         | t          |         95
 SDN  | 3225 | Khartum                           | SDN         | Arabic         | t          |       49.4
 SEN  | 3198 | Dakar                             | SEN         | Wolof          | t          |       48.1
 SGP  | 3208 | Singapore                         | SGP         | Chinese        | t          |       77.1
 SGP  | 3208 | Singapore                         | SGP         | Malay          | t          |       14.1
 SGP  | 3208 | Singapore                         | SGP         | Tamil          | t          |        7.4
 SHN  | 3063 | Jamestown                         | SHN         | English        | t          |          0
 SJM  |  938 | Longyearbyen                      | SJM         | Norwegian      | t          |          0
 SLV  |  645 | San Salvador                      | SLV         | Spanish        | t          |        100
 SMR  | 3171 | San Marino                        | SMR         | Italian        | t          |        100
 SOM  | 3214 | Mogadishu                         | SOM         | Arabic         | t          |          0
 SOM  | 3214 | Mogadishu                         | SOM         | Somali         | t          |       98.3
 SPM  | 3067 | Saint-Pierre                      | SPM         | French         | t          |          0
 SVK  | 3209 | Bratislava                        | SVK         | Slovak         | t          |       85.6
 SVN  | 3212 | Ljubljana                         | SVN         | Slovene        | t          |       87.9
 SWE  | 3048 | Stockholm                         | SWE         | Swedish        | t          |       89.5
 SWZ  | 3244 | Mbabane                           | SWZ         | Swazi          | t          |       89.9
 SYC  | 3206 | Victoria                          | SYC         | English        | t          |        3.8
 SYC  | 3206 | Victoria                          | SYC         | French         | t          |        1.3
 SYR  | 3250 | Damascus                          | SYR         | Arabic         | t          |         90
 TCA  | 3423 | Cockburn Town                     | TCA         | English        | t          |          0
 TCD  | 3337 | NDjamena                          | TCD         | Arabic         | t          |       12.3
 TGO  | 3332 | Lome                              | TGO         | Ewe            | t          |       23.2
 TGO  | 3332 | Lome                              | TGO         | Kabye          | t          |       13.8
 THA  | 3320 | Bangkok                           | THA         | Thai           | t          |       52.6
 TJK  | 3261 | Dushanbe                          | TJK         | Tadzhik        | t          |       62.2
 TKL  | 3333 | Fakaofo                           | TKL         | English        | t          |          0
 TKM  | 3419 | Ashgabat                          | TKM         | Turkmenian     | t          |       76.7
 TMP  | 1522 | Dili                              | TMP         | Portuguese     | t          |          0
 TON  | 3334 | Nukualofa                         | TON         | English        | t          |          0
 TON  | 3334 | Nukualofa                         | TON         | Tongan         | t          |       98.3
 TUN  | 3349 | Tunis                             | TUN         | Arabic         | t          |       69.9
 TUR  | 3358 | Ankara                            | TUR         | Turkish        | t          |       87.6
 TUV  | 3424 | Funafuti                          | TUV         | English        | t          |          0
 TUV  | 3424 | Funafuti                          | TUV         | Tuvalu         | t          |       92.5
 TZA  | 3306 | Dodoma                            | TZA         | Swahili        | t          |        8.8
 UKR  | 3426 | Kyiv                              | UKR         | Ukrainian      | t          |       64.7
 URY  | 3492 | Montevideo                        | URY         | Spanish        | t          |       95.7
 USA  | 3813 | Washington                        | USA         | English        | t          |       86.2
 UZB  | 3503 | Toskent                           | UZB         | Uzbek          | t          |       72.6
 VAT  | 3538 | Citta del Vaticano                | VAT         | Italian        | t          |          0
 VCT  | 3066 | Kingstown                         | VCT         | English        | t          |          0
 VEN  | 3539 | Caracas                           | VEN         | Spanish        | t          |       96.9
 VGB  |  537 | Road Town                         | VGB         | English        | t          |          0
 VIR  | 4067 | Charlotte Amalie                  | VIR         | English        | t          |       81.7
 VNM  | 3770 | Hanoi                             | VNM         | Vietnamese     | t          |       86.8
 VUT  | 3537 | Port-Vila                         | VUT         | Bislama        | t          |       56.6
 VUT  | 3537 | Port-Vila                         | VUT         | English        | t          |       28.3
 VUT  | 3537 | Port-Vila                         | VUT         | French         | t          |       14.2
 WSM  | 3169 | Apia                              | WSM         | English        | t          |        0.6
 WSM  | 3169 | Apia                              | WSM         | Samoan         | t          |       47.5
 YEM  | 1780 | Sanaa                             | YEM         | Arabic         | t          |       99.6
 YUG  | 1792 | Beograd                           | YUG         | Serbo-Croatian | t          |       75.2
 ZAF  |  716 | Pretoria                          | ZAF         | Afrikaans      | t          |       14.3
 ZAF  |  716 | Pretoria                          | ZAF         | English        | t          |        8.5
 ZAF  |  716 | Pretoria                          | ZAF         | Xhosa          | t          |       17.7
 ZAF  |  716 | Pretoria                          | ZAF         | Zulu           | t          |       22.7
 ZWE  | 4068 | Harare                            | ZWE         | English        | t          |        2.2
(235 rows)

                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
   Merge Key: country.code, countrylanguage.language
   ->  Sort
         Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
         Sort Key: country.code, countrylanguage.language
         ->  Sort
               Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
               Sort Key: country.code, countrylanguage.language
               ->  Hash Join
                     Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           Hash Key: countrylanguage.countrycode
                           ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                 Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                 Filter: countrylanguage.isofficial
                     ->  Hash
                           Output: country.code, city.id, city.name
                           ->  Hash Join
                                 Output: country.code, city.id, city.name
                                 Hash Cond: ((city.countrycode = country.code) AND (city.id = country.capital))
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: city.id, city.name, city.countrycode
                                       Hash Key: city.countrycode
                                       ->  Partial Seq Scan on qp_with_clause.city
                                             Output: city.id, city.name, city.countrycode
                                 ->  Hash
                                       Output: country.code, country.capital
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: country.code, country.capital
                                             Hash Key: country.code
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.capital
 Optimizer: PolarDB PX Optimizer
(36 rows)

--query2
with lang_total as
( select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code)
 
select lang_count,country.code,country.name,country.continent,country.region,country.population
 from country left outer join lang_total
 on (lang_total.code = country.code)
 where country.indepyear > 1970 and lang_total.lang_count >=1 and lang_total.lang_count >=1
  order by lang_total.lang_count desc;
 lang_count | code |              name               | continent |     region      | population 
------------+------+---------------------------------+-----------+-----------------+------------
         12 | RUS  | Russian Federation              | Europe    | Eastern Europe  |  146934000
          6 | FSM  | Micronesia, Federated States of | Oceania   | Micronesia      |     119000
          4 | AZE  | Azerbaijan                      | Asia      | Middle East     |    7734000
          1 | BIH  | Bosnia and Herzegovina          | Europe    | Southern Europe |    3972000
(4 rows)

                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
   Merge Key: (count())
   ->  Sort
         Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
         Sort Key: (count()) DESC
         ->  Sort
               Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
               Sort Key: (count()) DESC
               ->  Nested Loop
                     Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
                     Join Filter: true
                     ->  PX Broadcast 6:6  (slice2; segments: 6)
                           Output: (count()), country.code
                           ->  Result
                                 Output: (count()), country.code
                                 Filter: (((count()) >= 1) AND (country.code = countrylanguage.countrycode))
                                 ->  GroupAggregate
                                       Output: count(), country.code, countrylanguage.countrycode
                                       Group Key: country.code, countrylanguage.countrycode
                                       ->  Sort
                                             Output: country.code, countrylanguage.countrycode
                                             Sort Key: country.code, countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice3; segments: 6)
                                                   Output: country.code, countrylanguage.countrycode
                                                   Hash Key: country.code, countrylanguage.countrycode
                                                   ->  Nested Loop
                                                         Output: country.code, countrylanguage.countrycode
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                               Output: country.code
                                                               ->  Partial Seq Scan on qp_with_clause.country
                                                                     Output: country.code
                                                                     Filter: (country.governmentform = 'Federal Republic'::text)
                                                         ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage
                                                               Output: countrylanguage.countrycode
                                                               Index Cond: (countrylanguage.countrycode = country.code)
                     ->  Partial Index Scan using country_pkey on qp_with_clause.country country_1
                           Output: country_1.code, country_1.name, country_1.continent, country_1.region, country_1.indepyear, country_1.population
                           Index Cond: (country_1.code = country.code)
                           Filter: (country_1.indepyear > 1970)
 Optimizer: PolarDB PX Optimizer
(42 rows)

-- Using CTE in the WHERE clause
--query3
with lang_total as
( select lang_count,countrycode from
  (
  (
   select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code)
 
   UNION ALL
 
  (
   select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Monarchy')
  group by country.code,countrylanguage.countrycode order by country.code)
 
 ) FOO1
)
select * from
(
select count(*) as cnt,country.code,country.name 
from
country,countrylanguage
where country.code=countrylanguage.countrycode group by country.code,country.name) AS FOO
where foo.cnt = (select max(lang_count) from lang_total) order by foo.code;
 cnt | code |        name        
-----+------+--------------------
  12 | CAN  | Canada
  12 | CHN  | China
  12 | IND  | India
  12 | RUS  | Russian Federation
  12 | USA  | United States
(5 rows)

                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (count()), country.code, country.name
   Merge Key: country.code
   ->  Sort
         Output: (count()), country.code, country.name
         Sort Key: country.code
         ->  Sort
               Output: (count()), country.code, country.name
               Sort Key: country.code
               ->  Hash Join
                     Output: (count()), country.code, country.name
                     Hash Cond: ((count()) = (max((count()))))
                     ->  HashAggregate
                           Output: count(), country.code, country.name
                           Group Key: country.code, country.name
                           ->  Hash Join
                                 Output: country.code, country.name
                                 Hash Cond: (country.code = countrylanguage.countrycode)
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: country.code, country.name
                                       Hash Key: country.code
                                       ->  Partial Seq Scan on qp_with_clause.country
                                             Output: country.code, country.name
                                 ->  Hash
                                       Output: countrylanguage.countrycode
                                       ->  PX Hash 6:6  (slice3; segments: 6)
                                             Output: countrylanguage.countrycode
                                             Hash Key: countrylanguage.countrycode
                                             ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                   Output: countrylanguage.countrycode
                     ->  Hash
                           Output: (max((count())))
                           ->  PX Broadcast 1:6  (slice4)
                                 Output: (max((count())))
                                 ->  Finalize Aggregate
                                       Output: max((count()))
                                       ->  PX Coordinator 6:1  (slice5; segments: 6)
                                             Output: (PARTIAL max((count())))
                                             ->  Partial Aggregate
                                                   Output: PARTIAL max((count()))
                                                   ->  Append
                                                         ->  GroupAggregate
                                                               Output: count()
                                                               Group Key: country_1.code, countrylanguage_1.countrycode
                                                               ->  Sort
                                                                     Output: countrylanguage_1.countrycode, country_1.code
                                                                     Sort Key: country_1.code, countrylanguage_1.countrycode
                                                                     ->  PX Hash 6:6  (slice6; segments: 6)
                                                                           Output: countrylanguage_1.countrycode, country_1.code
                                                                           Hash Key: country_1.code, countrylanguage_1.countrycode
                                                                           ->  Nested Loop
                                                                                 Output: countrylanguage_1.countrycode, country_1.code
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice7; segments: 6)
                                                                                       Output: country_1.code
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                             Output: country_1.code
                                                                                             Filter: (country_1.governmentform = 'Federal Republic'::text)
                                                                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                                                                       Output: countrylanguage_1.countrycode
                                                                                       Index Cond: (countrylanguage_1.countrycode = country_1.code)
                                                         ->  GroupAggregate
                                                               Output: count()
                                                               Group Key: country_2.code, countrylanguage_2.countrycode
                                                               ->  Sort
                                                                     Output: country_2.code, countrylanguage_2.countrycode
                                                                     Sort Key: country_2.code, countrylanguage_2.countrycode
                                                                     ->  PX Hash 6:6  (slice8; segments: 6)
                                                                           Output: country_2.code, countrylanguage_2.countrycode
                                                                           Hash Key: country_2.code, countrylanguage_2.countrycode
                                                                           ->  Nested Loop
                                                                                 Output: country_2.code, countrylanguage_2.countrycode
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                                                       Output: country_2.code
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                                             Output: country_2.code
                                                                                             Filter: (country_2.governmentform = 'Monarchy'::text)
                                                                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                                                                       Output: countrylanguage_2.countrycode
                                                                                       Index Cond: (countrylanguage_2.countrycode = country_2.code)
 Optimizer: PolarDB PX Optimizer
(82 rows)

--query4
with diversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country,
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country.code and country.gnp > 100000)
 select diversecountries.name,city.name,diversecountries.CNT
 from diversecountries,city where city.id = diversecountries.capital
 order by diversecountries.name;
        name        |       name       | cnt 
--------------------+------------------+-----
 Australia          | Canberra         |   8
 Austria            | Wien             |   8
 Canada             | Ottawa           |  12
 China              | Peking           |  12
 Denmark            | Kobenhavn        |   7
 India              | New Delhi        |  12
 Iran               | Teheran          |  10
 Italy              | Roma             |   8
 Myanmar            | Rangoon (Yangon) |   8
 Russian Federation | Moscow           |  12
 South Africa       | Pretoria         |  11
 United States      | Washington       |  12
(12 rows)

                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.name, city.name, (count())
   Merge Key: country.name
   ->  Sort
         Output: country.name, city.name, (count())
         Sort Key: country.name
         ->  Sort
               Output: country.name, city.name, (count())
               Sort Key: country.name
               ->  Nested Loop
                     Output: country.name, city.name, (count())
                     Join Filter: true
                     ->  PX Broadcast 6:6  (slice2; segments: 6)
                           Output: country.name, country.capital, (count())
                           ->  Hash Join
                                 Output: country.name, country.capital, (count())
                                 Hash Cond: (countrylanguage.countrycode = country.code)
                                 ->  Result
                                       Output: (count()), countrylanguage.countrycode
                                       Filter: ((count()) > 6)
                                       ->  HashAggregate
                                             Output: count(), count(), countrylanguage.countrycode
                                             Group Key: countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice3; segments: 6)
                                                   Output: countrylanguage.countrycode
                                                   Hash Key: countrylanguage.countrycode
                                                   ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                         Output: countrylanguage.countrycode
                                 ->  Hash
                                       Output: country.code, country.name, country.capital
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: country.code, country.name, country.capital
                                             Hash Key: country.code
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.capital
                                                   Filter: (country.gnp > '100000'::numeric)
                     ->  Partial Index Scan using city_pkey on qp_with_clause.city
                           Output: city.name
                           Index Cond: (city.id = country.capital)
 Optimizer: PolarDB PX Optimizer
(40 rows)

-- query 5
with somecheapasiandiversecountries as
(
 select FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,count(*) ASIAN_COUNT from
 (
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Southeast Asia'
 and country.continent = 'Asia'
 
 UNION ALL
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Eastern Asia'
 and country.continent = 'Asia'
 UNION ALL
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Middle East'
 and country.continent = 'Asia'
 ) FOO, countrylanguage
 where FOO.code = countrylanguage.countrycode
 group by FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,countrylanguage.countrycode
 HAVING count(*) >=
 (select min(CNT) FROM
   (select count(*) CNT,country.code from countrylanguage,country
    where countrylanguage.countrycode=country.code
    and country.continent = 'Asia'
    and country.region = 'Southern and Central Asia'
    group by country.code
   ) FOO1
 )
)
select FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,count(*) COMPARED_WITH_CHEAP_ASIAN_CNT
from
(
select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
from country,city
where country.capital = city.id 
and country.continent = 'North America'
UNION ALL
select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
from country,city
where country.capital =	city.id	
and country.continent =	'South America'
) FOO,countrylanguage
where FOO.code = countrylanguage.countrycode
group by FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate
HAVING count(*)  >=
 (select min(ASIAN_COUNT) FROM
   (select ASIAN_COUNT FROM somecheapasiandiversecountries,country
    where somecheapasiandiversecountries.code = country.code
    and country.gnp >= country.gnpold
   ) ASIANCOUNT
 )
order by COUNTRY;
 code |             country              |         capital         |            headofstate            | compared_with_cheap_asian_cnt 
------+----------------------------------+-------------------------+-----------------------------------+-------------------------------
 ATG  | Antigua and Barbuda              | Saint Johns             | Elisabeth II                      |                             2
 ARG  | Argentina                        | Buenos Aires            | Fernando de la Rua                |                             3
 ABW  | Aruba                            | Oranjestad              | Beatrix                           |                             4
 BHS  | Bahamas                          | Nassau                  | Elisabeth II                      |                             2
 BRB  | Barbados                         | Bridgetown              | Elisabeth II                      |                             2
 BLZ  | Belize                           | Belmopan                | Elisabeth II                      |                             4
 BOL  | Bolivia                          | La Paz                  | Hugo Banzer Suarez                |                             4
 BRA  | Brazil                           | Brasilia                | Fernando Henrique Cardoso         |                             5
 CAN  | Canada                           | Ottawa                  | Elisabeth II                      |                            12
 CHL  | Chile                            | Santiago de Chile       | Ricardo Lagos Escobar             |                             4
 COL  | Colombia                         | Santafe de Bogota       | Andres Pastrana Arango            |                             5
 CRI  | Costa Rica                       | San Jose                | Miguel Angel Rodriguez Echeverria |                             4
 DMA  | Dominica                         | Roseau                  | Vernon Shaw                       |                             2
 DOM  | Dominican Republic               | Santo Domingo de Guzman | Hipolito Mejia Dominguez          |                             2
 ECU  | Ecuador                          | Quito                   | Gustavo Noboa Bejarano            |                             2
 SLV  | El Salvador                      | San Salvador            | Francisco Guillermo Flores Perez  |                             2
 GUF  | French Guiana                    | Cayenne                 | Jacques Chirac                    |                             2
 GRL  | Greenland                        | Nuuk                    | Margrethe II                      |                             2
 GLP  | Guadeloupe                       | Basse-Terre             | Jacques Chirac                    |                             2
 GTM  | Guatemala                        | Ciudad de Guatemala     | Alfonso Portillo Cabrera          |                             5
 GUY  | Guyana                           | Georgetown              | Bharrat Jagdeo                    |                             3
 HTI  | Haiti                            | Port-au-Prince          | Jean-Bertrand Aristide            |                             2
 HND  | Honduras                         | Tegucigalpa             | Carlos Roberto Flores Facusse     |                             4
 JAM  | Jamaica                          | Kingston                | Elisabeth II                      |                             2
 MTQ  | Martinique                       | Fort-de-France          | Jacques Chirac                    |                             2
 MEX  | Mexico                           | Ciudad de Mexico        | Vicente Fox Quesada               |                             6
 ANT  | Netherlands Antilles             | Willemstad              | Beatrix                           |                             3
 NIC  | Nicaragua                        | Managua                 | Arnoldo Aleman Lacayo             |                             4
 PAN  | Panama                           | Ciudad de Panama        | Mireya Elisa Moscoso Rodriguez    |                             6
 PRY  | Paraguay                         | Asuncion                | Luis Angel Gonzalez Macchi        |                             4
 PER  | Peru                             | Lima                    | Valentin Paniagua Corazao         |                             3
 PRI  | Puerto Rico                      | San Juan                | George W. Bush                    |                             2
 KNA  | Saint Kitts and Nevis            | Basseterre              | Elisabeth II                      |                             2
 LCA  | Saint Lucia                      | Castries                | Elisabeth II                      |                             2
 VCT  | Saint Vincent and the Grenadines | Kingstown               | Elisabeth II                      |                             2
 SUR  | Suriname                         | Paramaribo              | Ronald Venetiaan                  |                             2
 TTO  | Trinidad and Tobago              | Port-of-Spain           | Arthur N. R. Robinson             |                             3
 USA  | United States                    | Washington              | George W. Bush                    |                            12
 VEN  | Venezuela                        | Caracas                 | Hugo Chavez Frias                 |                             3
 VIR  | Virgin Islands, U.S.             | Charlotte Amalie        | George W. Bush                    |                             3
(40 rows)

                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, country.name, city.name, country.headofstate, (count())
   Merge Key: country.name
   ->  Sort
         Output: country.code, country.name, city.name, country.headofstate, (count())
         Sort Key: country.name
         ->  Sort
               Output: country.code, country.name, city.name, country.headofstate, (count())
               Sort Key: country.name
               ->  Nested Loop
                     Output: country.code, country.name, city.name, country.headofstate, (count())
                     Join Filter: ((count()) >= (min((count()))))
                     ->  PX Broadcast 1:6  (slice7)
                           Output: (min((count())))
                           ->  Finalize Aggregate
                                 Output: min((count()))
                                 ->  PX Coordinator 6:1  (slice8; segments: 6)
                                       Output: (PARTIAL min((count())))
                                       ->  Partial Aggregate
                                             Output: PARTIAL min((count()))
                                             ->  Nested Loop
                                                   Output: (count())
                                                   Join Filter: true
                                                   ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                         Output: country_2.code, (count())
                                                         ->  Nested Loop
                                                               Output: country_2.code, (count())
                                                               Join Filter: ((count()) >= (min((count()))))
                                                               ->  PX Broadcast 1:6  (slice15)
                                                                     Output: (min((count())))
                                                                     ->  Finalize Aggregate
                                                                           Output: min((count()))
                                                                           ->  PX Coordinator 6:1  (slice16; segments: 6)
                                                                                 Output: (PARTIAL min((count())))
                                                                                 ->  Partial Aggregate
                                                                                       Output: PARTIAL min((count()))
                                                                                       ->  Finalize GroupAggregate
                                                                                             Output: count(), country_5.code
                                                                                             Group Key: country_5.code
                                                                                             ->  Sort
                                                                                                   Output: country_5.code, (PARTIAL count())
                                                                                                   Sort Key: country_5.code
                                                                                                   ->  PX Hash 6:6  (slice17; segments: 6)
                                                                                                         Output: country_5.code, (PARTIAL count())
                                                                                                         Hash Key: country_5.code
                                                                                                         ->  Partial GroupAggregate
                                                                                                               Output: country_5.code, PARTIAL count()
                                                                                                               Group Key: country_5.code
                                                                                                               ->  Sort
                                                                                                                     Output: country_5.code
                                                                                                                     Sort Key: country_5.code
                                                                                                                     ->  Nested Loop
                                                                                                                           Output: country_5.code
                                                                                                                           Join Filter: true
                                                                                                                           ->  PX Broadcast 6:6  (slice18; segments: 6)
                                                                                                                                 Output: country_5.code
                                                                                                                                 ->  Partial Seq Scan on qp_with_clause.country country_5
                                                                                                                                       Output: country_5.code
                                                                                                                                       Filter: ((country_5.continent = 'Asia'::text) AND (country_5.region = 'Southern and Central Asia'::text))
                                                                                                                           ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                                                                                                                 Index Cond: (countrylanguage_2.countrycode = country_5.code)
                                                               ->  Materialize
                                                                     Output: (count()), (count()), country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                     ->  HashAggregate
                                                                           Output: count(), count(), country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                           Group Key: country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                           ->  Hash Join
                                                                                 Output: country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                                 Hash Cond: (countrylanguage_1.countrycode = country_2.code)
                                                                                 ->  PX Hash 6:6  (slice10; segments: 6)
                                                                                       Output: countrylanguage_1.countrycode
                                                                                       Hash Key: countrylanguage_1.countrycode
                                                                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage countrylanguage_1
                                                                                             Output: countrylanguage_1.countrycode
                                                                                 ->  Hash
                                                                                       Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                       ->  PX Hash 6:6  (slice11; segments: 6)
                                                                                             Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                             Hash Key: country_2.code
                                                                                             ->  Append
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice12; segments: 6)
                                                                                                               Output: country_2.code, country_2.name, country_2.headofstate, country_2.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                                                                     Output: country_2.code, country_2.name, country_2.headofstate, country_2.capital
                                                                                                                     Filter: ((country_2.gnp < '10000'::numeric) AND (country_2.region = 'Southeast Asia'::text) AND (country_2.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_2
                                                                                                               Output: city_2.name
                                                                                                               Index Cond: (city_2.id = country_2.capital)
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_3.code, country_3.name, city_3.name, country_3.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice13; segments: 6)
                                                                                                               Output: country_3.code, country_3.name, country_3.headofstate, country_3.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_3
                                                                                                                     Output: country_3.code, country_3.name, country_3.headofstate, country_3.capital
                                                                                                                     Filter: ((country_3.gnp < '10000'::numeric) AND (country_3.region = 'Eastern Asia'::text) AND (country_3.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_3
                                                                                                               Output: city_3.name
                                                                                                               Index Cond: (city_3.id = country_3.capital)
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_4.code, country_4.name, city_4.name, country_4.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice14; segments: 6)
                                                                                                               Output: country_4.code, country_4.name, country_4.headofstate, country_4.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_4
                                                                                                                     Output: country_4.code, country_4.name, country_4.headofstate, country_4.capital
                                                                                                                     Filter: ((country_4.gnp < '10000'::numeric) AND (country_4.region = 'Middle East'::text) AND (country_4.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_4
                                                                                                               Output: city_4.name
                                                                                                               Index Cond: (city_4.id = country_4.capital)
                                                   ->  Partial Index Scan using country_pkey on qp_with_clause.country country_6
                                                         Output: country_6.gnp, country_6.gnpold
                                                         Index Cond: (country_6.code = country_2.code)
                                                         Filter: (country_6.gnp >= country_6.gnpold)
                     ->  HashAggregate
                           Output: count(), count(), country.code, country.name, country.headofstate, city.name
                           Group Key: country.name, country.code, city.name, country.headofstate
                           ->  Materialize
                                 Output: country.code, country.name, country.headofstate, city.name
                                 ->  Hash Join
                                       Output: country.code, country.name, country.headofstate, city.name
                                       Hash Cond: (country.code = countrylanguage.countrycode)
                                       ->  Append
                                             ->  PX Hash 6:6  (slice2; segments: 6)
                                                   Output: country.code, country.name, city.name, country.headofstate
                                                   Hash Key: country.code
                                                   ->  Nested Loop
                                                         Output: country.code, country.name, city.name, country.headofstate
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice3; segments: 6)
                                                               Output: country.code, country.name, country.headofstate, country.capital
                                                               ->  Partial Seq Scan on qp_with_clause.country
                                                                     Output: country.code, country.name, country.headofstate, country.capital
                                                                     Filter: (country.continent = 'North America'::text)
                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                                               Output: city.name
                                                               Index Cond: (city.id = country.capital)
                                             ->  PX Hash 6:6  (slice4; segments: 6)
                                                   Output: country_1.code, country_1.name, city_1.name, country_1.headofstate
                                                   Hash Key: country_1.code
                                                   ->  Nested Loop
                                                         Output: country_1.code, country_1.name, city_1.name, country_1.headofstate
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                               Output: country_1.code, country_1.name, country_1.headofstate, country_1.capital
                                                               ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                     Output: country_1.code, country_1.name, country_1.headofstate, country_1.capital
                                                                     Filter: (country_1.continent = 'South America'::text)
                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                               Output: city_1.name
                                                               Index Cond: (city_1.id = country_1.capital)
                                       ->  Hash
                                             Output: countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice6; segments: 6)
                                                   Output: countrylanguage.countrycode
                                                   Hash Key: countrylanguage.countrycode
                                                   ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                         Output: countrylanguage.countrycode
 Optimizer: PolarDB PX Optimizer
(162 rows)

-- query 6 
 
select count(*) from
( select r.* from
  ( with fact as 
     (
      select country.name as COUNTRY,country.code,city.name as CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,AGG1.region
      from      
         (select
         sum(case when (city.population >= 0.5 * country.population) then country.population else city.population end) as S_POPULATION,
         sum(case when (gnp >= gnpold) then gnp else gnpold end) as S_GNP,
         avg(case when (lifeexpectancy > 60) then 50 else lifeexpectancy end) as AVG_LIFE,country.region
         from country,city  
         where governmentform != 'Constitutional Monarchy'
         and country.capital = city.id
         and indepyear > 0
         group by country.region) AGG1
         ,country,city
         where country.capital = city.id
         and country.region = AGG1.region
      )
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'South America'
     
     UNION ALL
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'North America'
     
     UNION ALL
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'Caribbean'
 ) as r
 left join
  (
   select 'ARG' as CODE UNION ALL
   select 'BOL' as CODE UNION ALL
   select 'BRA' as CODE UNION ALL
   select 'PER' as CODE UNION ALL
   select 'URY' as CODE UNION ALL
   select 'IND' as CODE  UNION ALL
   select 'LCA' as CODE UNION ALL
   select 'VCT' as CODE
   ) as r1
on r.code = r1.code) AS FOO;
 count 
-------
    43
(1 row)

                                                                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count()
   ->  Hash Left Join
         Hash Cond: ((share0_ref2.code)::text = ('ARG'::text))
         ->  PX Coordinator 6:1  (slice1; segments: 6)
               Output: share0_ref2.code
               ->  Sequence
                     Output: share0_ref2.code
                     ->  Shared Scan (Producer; slice1; share0)
                           Output: share0_ref1.name, share0_ref1.code, share0_ref1.name_1, share0_ref1.s_population, share0_ref1.s_gnp, share0_ref1.avg_life, share0_ref1.region
                           ->  Hash Join
                                 Output: country.name, country.code, city.name, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)), country_1.region
                                 Hash Cond: (country.region = country_1.region)
                                 ->  Nested Loop
                                       Output: country.code, country.name, country.region, city.name
                                       Join Filter: true
                                       ->  PX Broadcast 6:6  (slice2; segments: 6)
                                             Output: country.code, country.name, country.region, country.capital
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.region, country.capital
                                                   Filter: (country.region = ANY ('{Caribbean,"North America","South America"}'::text[]))
                                       ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                             Output: city.name
                                             Index Cond: (city.id = country.capital)
                                 ->  Hash
                                       Output: country_1.region, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                       ->  PX Broadcast 6:6  (slice3; segments: 6)
                                             Output: country_1.region, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                             ->  Finalize GroupAggregate
                                                   Output: country_1.region, sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END), sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END), avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)
                                                   Group Key: country_1.region
                                                   ->  Sort
                                                         Output: country_1.region, (PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                                         Sort Key: country_1.region
                                                         ->  PX Hash 6:6  (slice4; segments: 6)
                                                               Output: country_1.region, (PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                                               Hash Key: country_1.region
                                                               ->  Partial HashAggregate
                                                                     Output: country_1.region, PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END), PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END), PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)
                                                                     Group Key: country_1.region
                                                                     ->  Nested Loop
                                                                           Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, city_1.population
                                                                           Join Filter: true
                                                                           ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                                                 Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, country_1.capital
                                                                                 ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                       Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, country_1.capital
                                                                                       Filter: ((country_1.governmentform <> 'Constitutional Monarchy'::text) AND (country_1.indepyear > 0) AND ((country_1.region = 'South America'::text) OR (country_1.region = 'North America'::text) OR (country_1.region = 'Caribbean'::text)) AND (country_1.region = ANY ('{Caribbean,"North America","South America"}'::text[])))
                                                                           ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                                                 Output: city_1.population
                                                                                 Index Cond: (city_1.id = country_1.capital)
                     ->  Append
                           ->  Nested Loop
                                 Output: share0_ref2.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice6; segments: 6)
                                       Output: share0_ref2.code
                                       ->  Result
                                             Output: share0_ref2.code
                                             Filter: (share0_ref2.region = 'South America'::text)
                                             ->  Shared Scan (Consumer; slice6; share0)
                                                   Output: share0_ref2.name, share0_ref2.code, share0_ref2.name_1, share0_ref2.s_population, share0_ref2.s_gnp, share0_ref2.avg_life, share0_ref2.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage
                                       Output: countrylanguage.isofficial
                                       Index Cond: (countrylanguage.countrycode = share0_ref2.code)
                                       Filter: countrylanguage.isofficial
                           ->  Nested Loop
                                 Output: share0_ref3.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice7; segments: 6)
                                       Output: share0_ref3.code
                                       ->  Result
                                             Output: share0_ref3.code
                                             Filter: (share0_ref3.region = 'North America'::text)
                                             ->  Shared Scan (Consumer; slice7; share0)
                                                   Output: share0_ref3.name, share0_ref3.code, share0_ref3.name_1, share0_ref3.s_population, share0_ref3.s_gnp, share0_ref3.avg_life, share0_ref3.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                       Output: countrylanguage_1.isofficial
                                       Index Cond: (countrylanguage_1.countrycode = share0_ref3.code)
                                       Filter: countrylanguage_1.isofficial
                           ->  Nested Loop
                                 Output: share0_ref4.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice8; segments: 6)
                                       Output: share0_ref4.code
                                       ->  Result
                                             Output: share0_ref4.code
                                             Filter: (share0_ref4.region = 'Caribbean'::text)
                                             ->  Shared Scan (Consumer; slice8; share0)
                                                   Output: share0_ref4.name, share0_ref4.code, share0_ref4.name_1, share0_ref4.s_population, share0_ref4.s_gnp, share0_ref4.avg_life, share0_ref4.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                       Output: countrylanguage_2.isofficial
                                       Index Cond: (countrylanguage_2.countrycode = share0_ref4.code)
                                       Filter: countrylanguage_2.isofficial
         ->  Hash
               Output: ('ARG'::text)
               ->  Append
                     ->  Result
                           Output: 'ARG'::text
                     ->  Result
                           Output: 'BOL'::text
                     ->  Result
                           Output: 'BRA'::text
                     ->  Result
                           Output: 'PER'::text
                     ->  Result
                           Output: 'URY'::text
                     ->  Result
                           Output: 'IND'::text
                     ->  Result
                           Output: 'LCA'::text
                     ->  Result
                           Output: 'VCT'::text
 Optimizer: PolarDB PX Optimizer
(114 rows)

-- query7
with alleuropeanlanguages as 
(select country.code,country.name COUNTRY, city.name CAPITAL, language, isofficial, percentage
 FROM country,city,countrylanguage
 WHERE country.code = countrylanguage.countrycode
 and country.capital = city.id
 and country.continent = 'Europe')
select * from
(select * from alleuropeanlanguages where isofficial='True') e1,
(select * from alleuropeanlanguages where percentage > 50) e2
where e1.code = e2.code order by e2.COUNTRY,e1.language;
 code |        country         |              capital              |    language    | isofficial | percentage | code |        country         |              capital              |    language    | isofficial | percentage 
------+------------------------+-----------------------------------+----------------+------------+------------+------+------------------------+-----------------------------------+----------------+------------+------------
 ALB  | Albania                | Tirana                            | Albaniana      | t          |       97.9 | ALB  | Albania                | Tirana                            | Albaniana      | t          |       97.9
 AUT  | Austria                | Wien                              | German         | t          |         92 | AUT  | Austria                | Wien                              | German         | t          |         92
 BLR  | Belarus                | Minsk                             | Belorussian    | t          |       65.6 | BLR  | Belarus                | Minsk                             | Belorussian    | t          |       65.6
 BLR  | Belarus                | Minsk                             | Russian        | t          |         32 | BLR  | Belarus                | Minsk                             | Belorussian    | t          |       65.6
 BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2 | BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel]               | French         | t          |       32.6 | BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel]               | German         | t          |          1 | BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2
 BIH  | Bosnia and Herzegovina | Sarajevo                          | Serbo-Croatian | t          |       99.2 | BIH  | Bosnia and Herzegovina | Sarajevo                          | Serbo-Croatian | t          |       99.2
 BGR  | Bulgaria               | Sofija                            | Bulgariana     | t          |       83.2 | BGR  | Bulgaria               | Sofija                            | Bulgariana     | t          |       83.2
 HRV  | Croatia                | Zagreb                            | Serbo-Croatian | t          |       95.9 | HRV  | Croatia                | Zagreb                            | Serbo-Croatian | t          |       95.9
 CZE  | Czech Republic         | Praha                             | Czech          | t          |       81.2 | CZE  | Czech Republic         | Praha                             | Czech          | t          |       81.2
 DNK  | Denmark                | Kobenhavn                         | Danish         | t          |       93.5 | DNK  | Denmark                | Kobenhavn                         | Danish         | t          |       93.5
 EST  | Estonia                | Tallinn                           | Estonian       | t          |       65.3 | EST  | Estonia                | Tallinn                           | Estonian       | t          |       65.3
 FRO  | Faroe Islands          | Torshavn                          | Danish         | t          |          0 | FRO  | Faroe Islands          | Torshavn                          | Faroese        | t          |        100
 FRO  | Faroe Islands          | Torshavn                          | Faroese        | t          |        100 | FRO  | Faroe Islands          | Torshavn                          | Faroese        | t          |        100
 FIN  | Finland                | Helsinki [Helsingfors]            | Finnish        | t          |       92.7 | FIN  | Finland                | Helsinki [Helsingfors]            | Finnish        | t          |       92.7
 FIN  | Finland                | Helsinki [Helsingfors]            | Swedish        | t          |        5.7 | FIN  | Finland                | Helsinki [Helsingfors]            | Finnish        | t          |       92.7
 FRA  | France                 | Paris                             | French         | t          |       93.6 | FRA  | France                 | Paris                             | French         | t          |       93.6
 DEU  | Germany                | Berlin                            | German         | t          |       91.3 | DEU  | Germany                | Berlin                            | German         | t          |       91.3
 GIB  | Gibraltar              | Gibraltar                         | English        | t          |       88.9 | GIB  | Gibraltar              | Gibraltar                         | English        | t          |       88.9
 GRC  | Greece                 | Athenai                           | Greek          | t          |       98.5 | GRC  | Greece                 | Athenai                           | Greek          | t          |       98.5
 HUN  | Hungary                | Budapest                          | Hungarian      | t          |       98.5 | HUN  | Hungary                | Budapest                          | Hungarian      | t          |       98.5
 ISL  | Iceland                | Reykjavik                         | Icelandic      | t          |       95.7 | ISL  | Iceland                | Reykjavik                         | Icelandic      | t          |       95.7
 IRL  | Ireland                | Dublin                            | English        | t          |       98.4 | IRL  | Ireland                | Dublin                            | English        | t          |       98.4
 IRL  | Ireland                | Dublin                            | Irish          | t          |        1.6 | IRL  | Ireland                | Dublin                            | English        | t          |       98.4
 ITA  | Italy                  | Roma                              | Italian        | t          |       94.1 | ITA  | Italy                  | Roma                              | Italian        | t          |       94.1
 LVA  | Latvia                 | Riga                              | Latvian        | t          |       55.1 | LVA  | Latvia                 | Riga                              | Latvian        | t          |       55.1
 LIE  | Liechtenstein          | Vaduz                             | German         | t          |         89 | LIE  | Liechtenstein          | Vaduz                             | German         | t          |         89
 LTU  | Lithuania              | Vilnius                           | Lithuanian     | t          |       81.6 | LTU  | Lithuania              | Vilnius                           | Lithuanian     | t          |       81.6
 LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | French         | t          |        4.2 | LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4
 LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | German         | t          |        2.3 | LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4
 LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4 | LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4
 MKD  | Macedonia              | Skopje                            | Macedonian     | t          |       66.5 | MKD  | Macedonia              | Skopje                            | Macedonian     | t          |       66.5
 MLT  | Malta                  | Valletta                          | English        | t          |        2.1 | MLT  | Malta                  | Valletta                          | Maltese        | t          |       95.8
 MLT  | Malta                  | Valletta                          | Maltese        | t          |       95.8 | MLT  | Malta                  | Valletta                          | Maltese        | t          |       95.8
 MDA  | Moldova                | Chisinau                          | Romanian       | t          |       61.9 | MDA  | Moldova                | Chisinau                          | Romanian       | t          |       61.9
 NLD  | Netherlands            | Amsterdam                         | Dutch          | t          |       95.6 | NLD  | Netherlands            | Amsterdam                         | Dutch          | t          |       95.6
 NOR  | Norway                 | Oslo                              | Norwegian      | t          |       96.6 | NOR  | Norway                 | Oslo                              | Norwegian      | t          |       96.6
 POL  | Poland                 | Warszawa                          | Polish         | t          |       97.6 | POL  | Poland                 | Warszawa                          | Polish         | t          |       97.6
 PRT  | Portugal               | Lisboa                            | Portuguese     | t          |         99 | PRT  | Portugal               | Lisboa                            | Portuguese     | t          |         99
 ROM  | Romania                | Bucuresti                         | Romani         | t          |        0.7 | ROM  | Romania                | Bucuresti                         | Romanian       | t          |       90.7
 ROM  | Romania                | Bucuresti                         | Romanian       | t          |       90.7 | ROM  | Romania                | Bucuresti                         | Romanian       | t          |       90.7
 RUS  | Russian Federation     | Moscow                            | Russian        | t          |       86.6 | RUS  | Russian Federation     | Moscow                            | Russian        | t          |       86.6
 SMR  | San Marino             | San Marino                        | Italian        | t          |        100 | SMR  | San Marino             | San Marino                        | Italian        | t          |        100
 SVK  | Slovakia               | Bratislava                        | Slovak         | t          |       85.6 | SVK  | Slovakia               | Bratislava                        | Slovak         | t          |       85.6
 SVN  | Slovenia               | Ljubljana                         | Slovene        | t          |       87.9 | SVN  | Slovenia               | Ljubljana                         | Slovene        | t          |       87.9
 ESP  | Spain                  | Madrid                            | Spanish        | t          |       74.4 | ESP  | Spain                  | Madrid                            | Spanish        | t          |       74.4
 SWE  | Sweden                 | Stockholm                         | Swedish        | t          |       89.5 | SWE  | Sweden                 | Stockholm                         | Swedish        | t          |       89.5
 CHE  | Switzerland            | Bern                              | French         | t          |       19.2 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 CHE  | Switzerland            | Bern                              | German         | t          |       63.6 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 CHE  | Switzerland            | Bern                              | Italian        | t          |        7.7 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 CHE  | Switzerland            | Bern                              | Romansh        | t          |        0.6 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 UKR  | Ukraine                | Kyiv                              | Ukrainian      | t          |       64.7 | UKR  | Ukraine                | Kyiv                              | Ukrainian      | t          |       64.7
 GBR  | United Kingdom         | London                            | English        | t          |       97.3 | GBR  | United Kingdom         | London                            | English        | t          |       97.3
 YUG  | Yugoslavia             | Beograd                           | Serbo-Croatian | t          |       75.2 | YUG  | Yugoslavia             | Beograd                           | Serbo-Croatian | t          |       75.2
(55 rows)

                                                                                                                                       QUERY PLAN                                                                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
   Merge Key: share0_ref2.name, share0_ref3.language
   ->  Sequence
         Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.code, share0_ref1.name, share0_ref1.name_1, share0_ref1.language, share0_ref1.isofficial, share0_ref1.percentage
               ->  Hash Join
                     Output: country.code, country.name, city.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           Hash Key: countrylanguage.countrycode
                           ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                 Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                 Filter: (countrylanguage.isofficial OR (countrylanguage.percentage > '50'::double precision))
                     ->  Hash
                           Output: country.code, country.name, city.name
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name, city.name
                                 Hash Key: country.code
                                 ->  Nested Loop
                                       Output: country.code, country.name, city.name
                                       Join Filter: true
                                       ->  PX Broadcast 6:6  (slice4; segments: 6)
                                             Output: country.code, country.name, country.capital
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.capital
                                                   Filter: (country.continent = 'Europe'::text)
                                       ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                             Output: city.name
                                             Index Cond: (city.id = country.capital)
         ->  Sort
               Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
               Sort Key: share0_ref2.name, share0_ref3.language
               ->  Hash Join
                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                     Hash Cond: (share0_ref3.code = share0_ref2.code)
                     ->  Result
                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                           Filter: share0_ref3.isofficial
                           ->  Shared Scan (Producer; slice1; share0)
                                 Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                     ->  Hash
                           Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                           ->  Result
                                 Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                                 Filter: (share0_ref2.percentage > '50'::double precision)
                                 ->  Shared Scan (Producer; slice1; share0)
                                       Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
 Optimizer: PolarDB PX Optimizer
(51 rows)

-- query8
with allcountrystats as 
( select country.code,country.name,count(distinct city.id) CITY_CNT,
  count(distinct countrylanguage.language) LANG_CNT
  from country,city,countrylanguage
  where country.code = city.countrycode
  and country.code = countrylanguage.countrycode
  group by country.code,country.name
)
select sum(FOO.CITY_CNT) REGION_CITY_CNT,sum(FOO.LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > 1
and country.continent = 'Asia'
UNION ALL
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > 1
and country.continent = 'North America'
UNION ALL
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > (select  max(CITY_CNT/LANG_CNT)  from allcountrystats,country where allcountrystats.code = country.code AND country.continent='Europe')
) FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region;
 region_city_cnt | region_lang_cnt |          region           
-----------------+-----------------+---------------------------
             840 |             192 | Caribbean
            2824 |             112 | Central America
            8250 |             252 | Eastern Asia
            2664 |             396 | Middle East
            1625 |             125 | North America
            3500 |              70 | South America
            3179 |             528 | Southeast Asia
           12278 |             896 | Southern and Central Asia
(8 rows)

--query 9
with diversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country,
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country.code and country.gnp > 100000)
select d1.code,d1.name,d1.capital,city.name CAPITAL_CITY,d1.CNT,d2.CNT
from
diversecountries d1 left join country
ON (d1.code = country.code AND d1.CNT < 8)
left join diversecountries d2
ON (country.code = d2.code AND d2.CNT > 8)
INNER JOIN city
ON(d1.capital = city.id)
ORDER BY d1.name;
 code |        name        | capital |   capital_city   | cnt | cnt 
------+--------------------+---------+------------------+-----+-----
 AUS  | Australia          |     135 | Canberra         |   8 |    
 AUT  | Austria            |    1523 | Wien             |   8 |    
 CAN  | Canada             |    1822 | Ottawa           |  12 |    
 CHN  | China              |    1891 | Peking           |  12 |    
 DNK  | Denmark            |    3315 | Kobenhavn        |   7 |    
 IND  | India              |    1109 | New Delhi        |  12 |    
 IRN  | Iran               |    1380 | Teheran          |  10 |    
 ITA  | Italy              |    1464 | Roma             |   8 |    
 MMR  | Myanmar            |    2710 | Rangoon (Yangon) |   8 |    
 RUS  | Russian Federation |    3580 | Moscow           |  12 |    
 ZAF  | South Africa       |     716 | Pretoria         |  11 |    
 USA  | United States      |    3813 | Washington       |  12 |    
(12 rows)

                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
   Merge Key: share0_ref3.name
   ->  Sequence
         Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.code, share0_ref1.name, share0_ref1.capital, share0_ref1.cnt
               ->  Hash Join
                     Output: country.code, country.name, country.capital, (count())
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  Result
                           Output: countrylanguage.countrycode, (count())
                           Filter: ((count()) > 6)
                           ->  HashAggregate
                                 Output: count(), count(), countrylanguage.countrycode
                                 Group Key: countrylanguage.countrycode
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: countrylanguage.countrycode
                                       Hash Key: countrylanguage.countrycode
                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                             Output: countrylanguage.countrycode
                     ->  Hash
                           Output: country.code, country.name, country.capital
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name, country.capital
                                 Hash Key: country.code
                                 ->  Partial Seq Scan on qp_with_clause.country
                                       Output: country.code, country.name, country.capital
                                       Filter: (country.gnp > '100000'::numeric)
         ->  Sort
               Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
               Sort Key: share0_ref3.name
               ->  Hash Left Join
                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
                     Hash Cond: (country_1.code = share0_ref2.code)
                     ->  PX Hash 6:6  (slice4; segments: 6)
                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code, city.name
                           Hash Key: country_1.code
                           ->  Nested Loop
                                 Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code, city.name
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice5; segments: 6)
                                       Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code
                                       ->  Nested Loop Left Join
                                             Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code
                                             Join Filter: true
                                             ->  Shared Scan (Consumer; slice5; share0)
                                                   Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt
                                             ->  Full Index Scan using country_pkey on qp_with_clause.country country_1
                                                   Output: country_1.code
                                                   Index Cond: (country_1.code = share0_ref3.code)
                                                   Filter: (share0_ref3.cnt < 8)
                                 ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                       Output: city.name
                                       Index Cond: (city.id = share0_ref3.capital)
                     ->  Hash
                           Output: share0_ref2.code, share0_ref2.cnt
                           ->  Result
                                 Output: share0_ref2.code, share0_ref2.cnt
                                 Filter: (share0_ref2.cnt > 8)
                                 ->  Shared Scan (Producer; slice1; share0)
                                       Output: share0_ref2.code, share0_ref2.name, share0_ref2.capital, share0_ref2.cnt
 Optimizer: PolarDB PX Optimizer
(63 rows)

--query 10 , multiple ctes, joins
with longlivingregions as 
(
select FOO.*,count(distinct language) as "lang_count"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       avg(lifeexpectancy) as "REGION_LIFETIME",region
     from
      country
     group by region
    ) FOO,countrylanguage,country
where
   country.code = countrylanguage.countrycode
   and FOO.region = country.region
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP",foo."REGION_LIFETIME"),
denseregions as 
(
select FOO.*,count(distinct language) as "lang_count",
       sum(surfacearea) as "REGION_SURFACE_AREA"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       region
     from
      country
     group by region
    ) FOO,countrylanguage,country
where
   country.code = countrylanguage.countrycode
   and FOO.region = country.region
   and FOO."REGION_POP" != 0
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP"
order by sum(surfacearea)/foo."REGION_POP" desc),
allcountrystats as 
( select country.code,country.name,count(distinct city.id) CITY_CNT,
  count(distinct countrylanguage.language) LANG_CNT
  from country,city,countrylanguage
  where country.code = city.countrycode
  and country.code = countrylanguage.countrycode
  group by country.code,country.name
)
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear between 1800 and 1850
UNION ALL
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear between 1850 and 1900
UNION ALL
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear > 1900
order by name
LIMIT 50;
 city_cnt | lang_cnt |                 name                  | REGION_SURFACE_AREA | REGION_LIFETIME  | REGION_POP | lang_count | REGION_GNP |          region           
----------+----------+---------------------------------------+---------------------+------------------+------------+------------+------------+---------------------------
        4 |        5 | Afghanistan                           |         90749795.00 | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        1 |        3 | Albania                               |          5845195.40 | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
       18 |        2 | Algeria                               |         36993520.00 | 65.3857127598354 |  173266000 |         14 |  243870.00 | Northern Africa
        5 |        9 | Angola                                |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        1 |        2 | Antigua and Barbuda                   |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       57 |        3 | Argentina                             |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        3 |        2 | Armenia                               |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       14 |        8 | Australia                             |         62471162.00 | 78.8000030517578 |   22753100 |         11 |  405851.00 | Australia and New Zealand
        6 |        8 | Austria                               |          6649768.00 | 78.2555567423503 |  183247600 |         21 | 4673272.00 | Western Europe
        4 |        4 | Azerbaijan                            |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
        1 |        2 | Bahamas                               |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        1 |        2 | Bahrain                               |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       24 |        7 | Bangladesh                            |         90749795.00 | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        1 |        2 | Barbados                              |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       16 |        4 | Belarus                               |        214731845.00 | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        9 |        6 | Belgium                               |          6649768.00 | 78.2555567423503 |  183247600 |         21 | 4673272.00 | Western Europe
        2 |        4 | Belize                                |         14052371.00 | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
        4 |        7 | Benin                                 |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        3 | Bhutan                                |         90749795.00 | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        8 |        4 | Bolivia                               |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        3 |        1 | Bosnia and Herzegovina                |          5845195.40 | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
        2 |        5 | Botswana                              |         23060186.00 | 44.8199996948242 |   46886000 |         21 |  126931.00 | Southern Africa
      250 |        5 | Brazil                                |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        1 |        4 | Brunei                                |         35322186.00 | 64.4000001387163 |  518541000 |         47 |  642643.00 | Southeast Asia
       10 |        4 | Bulgaria                              |        214731845.00 | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        3 |        6 | Burkina Faso                          |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        3 | Burundi                               |         43631319.00 | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        3 |        4 | Cambodia                              |         35322186.00 | 64.4000001387163 |  518541000 |         47 |  642643.00 | Southeast Asia
        7 |        8 | Cameroon                              |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       49 |       12 | Canada                                |        236342035.00 | 75.8199996948242 |  309632000 |         18 | 9111890.00 | North America
        1 |        2 | Cape Verde                            |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        6 | Central African Republic              |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        2 |        8 | Chad                                  |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       29 |        4 | Chile                                 |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
       38 |        5 | Colombia                              |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        1 |        5 | Comoros                               |         43631319.00 | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        2 |        6 | Congo                                 |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       18 |       10 | Congo, The Democratic Republic of the |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        1 |        4 | Costa Rica                            |         14052371.00 | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
        5 |        5 | Cote deIvoire                         |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        4 |        2 | Croatia                               |          5845195.40 | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
       14 |        1 | Cuba                                  |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        2 |        2 | Cyprus                                |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       10 |        8 | Czech Republic                        |        214731845.00 | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        1 |        3 | Djibouti                              |         43631319.00 | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        1 |        2 | Dominica                              |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        6 |        2 | Dominican Republic                    |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       15 |        2 | Ecuador                               |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
       37 |        2 | Egypt                                 |         36993520.00 | 65.3857127598354 |  173266000 |         14 |  243870.00 | Northern Africa
        7 |        2 | El Salvador                           |         14052371.00 | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
(50 rows)

--query 11
with allcitystats as 
( select city.name CITY,city.id,country.name COUNTRY,city.district,city.population as CITY_POP
  from
  city,country
  where city.countrycode = country.code
),
alldistrictstats as 
( select allcitystats.district,allcitystats.COUNTRY,sum(CITY_POP) DISTRICT_POP,
  count(CITY) as D_CITY_CNT
  from allcitystats
  group by allcitystats.district,allcitystats.COUNTRY
  order by district,COUNTRY
),
allcountrystats as 
( select alldistrictstats.COUNTRY,country.code,sum(D_CITY_CNT) C_CITY_CNT,
  count(distinct countrylanguage.language) C_LANG_CNT
  from alldistrictstats,country,countrylanguage
  where alldistrictstats.COUNTRY = country.name
  and country.code = countrylanguage.countrycode
  group by COUNTRY,code
),
asian_region_stats as 
(
select sum(FOO.C_CITY_CNT) REGION_CITY_CNT,sum(FOO.C_LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountrystats.code,allcountrystats.COUNTRY,C_CITY_CNT,C_LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and C_CITY_CNT/C_LANG_CNT > 1
and country.continent = 'Asia') FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region
)
select * from
(
select REGION_CITY_CNT as CITY_CNT,REGION_LANG_CNT as LANG_CNT, region as IDENTIFIER from asian_region_stats
UNION ALL
(
select sum(FOO.C_CITY_CNT) CITY_CNT,sum(FOO.C_LANG_CNT) LANG_CNT,FOO.region as IDENTIFIER
FROM
(
select allcountrystats.code,allcountrystats.COUNTRY,C_CITY_CNT,C_LANG_CNT,country.region,allcitystats.CITY CAPITAL
from allcountrystats,country,allcitystats
where allcountrystats.code = country.code
and country.capital = allcitystats.id
and C_CITY_CNT/C_LANG_CNT > 1
and country.continent = 'Europe') FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region
)
) FOO1
order by FOO1.lang_cnt,FOO1.identifier;
 city_cnt | lang_cnt |        identifier         
----------+----------+---------------------------
      494 |       10 | British Islands
      159 |       48 | Baltic Countries
    36060 |      132 | Eastern Asia
     1295 |      161 | Nordic Countries
     9414 |      369 | Western Europe
    11880 |      450 | Southern Europe
    32900 |      610 | Eastern Europe
    29161 |      616 | Southeast Asia
     8568 |      792 | Middle East
    80388 |     1092 | Southern and Central Asia
(10 rows)

                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
   Merge Key: (sum(share2_ref2.c_lang_cnt)), country_3.region
   ->  Sequence
         Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.name, share0_ref1.id, share0_ref1.name_1, share0_ref1.district, share0_ref1.population
               ->  Hash Join
                     Output: city.name, city.id, country.name, city.district, city.population
                     Hash Cond: (city.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: city.id, city.name, city.countrycode, city.district, city.population
                           Hash Key: city.countrycode
                           ->  Partial Seq Scan on qp_with_clause.city
                                 Output: city.id, city.name, city.countrycode, city.district, city.population
                     ->  Hash
                           Output: country.code, country.name
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name
                                 Hash Key: country.code
                                 ->  Partial Seq Scan on qp_with_clause.country
                                       Output: country.code, country.name
         ->  Sequence
               Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
               ->  Shared Scan (Producer; slice1; share2)
                     Output: share2_ref1.name, share2_ref1.code, share2_ref1.c_city_cnt, share2_ref1.c_lang_cnt
                     ->  GroupAggregate
                           Output: share0_ref2.name_1, country_1.code, sum((count(share0_ref2.name))), count(DISTINCT countrylanguage.language)
                           Group Key: share0_ref2.name_1, country_1.code
                           ->  Sort
                                 Output: share0_ref2.name_1, (count(share0_ref2.name)), country_1.code, countrylanguage.language
                                 Sort Key: share0_ref2.name_1, country_1.code
                                 ->  Hash Join
                                       Output: share0_ref2.name_1, (count(share0_ref2.name)), country_1.code, countrylanguage.language
                                       Hash Cond: (share0_ref2.name_1 = country_1.name)
                                       ->  Sort
                                             Output: share0_ref2.district, share0_ref2.name_1, (count(share0_ref2.name))
                                             Sort Key: share0_ref2.district, share0_ref2.name_1
                                             ->  PX Hash 6:6  (slice4; segments: 6)
                                                   Output: share0_ref2.district, share0_ref2.name_1, (count(share0_ref2.name))
                                                   Hash Key: share0_ref2.name_1
                                                   ->  HashAggregate
                                                         Output: share0_ref2.district, share0_ref2.name_1, count(share0_ref2.name)
                                                         Group Key: share0_ref2.district, share0_ref2.name_1
                                                         ->  PX Hash 6:6  (slice5; segments: 6)
                                                               Output: share0_ref2.district, share0_ref2.name_1, share0_ref2.name, share0_ref2.population
                                                               Hash Key: share0_ref2.district, share0_ref2.name_1
                                                               ->  Result
                                                                     Output: share0_ref2.district, share0_ref2.name_1, share0_ref2.name, share0_ref2.population
                                                                     ->  Shared Scan (Consumer; slice5; share0)
                                                                           Output: share0_ref2.name, share0_ref2.id, share0_ref2.name_1, share0_ref2.district, share0_ref2.population
                                       ->  Hash
                                             Output: country_1.code, country_1.name, countrylanguage.language
                                             ->  PX Hash 6:6  (slice6; segments: 6)
                                                   Output: country_1.code, country_1.name, countrylanguage.language
                                                   Hash Key: country_1.name
                                                   ->  Hash Join
                                                         Output: country_1.code, country_1.name, countrylanguage.language
                                                         Hash Cond: (countrylanguage.countrycode = country_1.code)
                                                         ->  PX Hash 6:6  (slice7; segments: 6)
                                                               Output: countrylanguage.countrycode, countrylanguage.language
                                                               Hash Key: countrylanguage.countrycode
                                                               ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                                     Output: countrylanguage.countrycode, countrylanguage.language
                                                         ->  Hash
                                                               Output: country_1.code, country_1.name
                                                               ->  PX Hash 6:6  (slice8; segments: 6)
                                                                     Output: country_1.code, country_1.name
                                                                     Hash Key: country_1.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                           Output: country_1.code, country_1.name
               ->  Sort
                     Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
                     Sort Key: (sum(share2_ref2.c_lang_cnt)), country_3.region
                     ->  Append
                           ->  Sort
                                 Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
                                 Sort Key: country_3.region
                                 ->  HashAggregate
                                       Output: sum(share2_ref2.c_city_cnt), sum(share2_ref2.c_lang_cnt), country_3.region
                                       Group Key: country_3.region
                                       ->  Hash Join
                                             Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                             Hash Cond: (country_2.region = country_3.region)
                                             ->  PX Hash 6:6  (slice9; segments: 6)
                                                   Output: country_2.region
                                                   Hash Key: country_2.region
                                                   ->  Hash Join
                                                         Output: country_2.region
                                                         Hash Cond: (share2_ref3.code = country_2.code)
                                                         ->  PX Hash 6:6  (slice10; segments: 6)
                                                               Output: share2_ref3.code
                                                               Hash Key: share2_ref3.code
                                                               ->  Result
                                                                     Output: share2_ref3.code
                                                                     ->  Shared Scan (Consumer; slice10; share2)
                                                                           Output: share2_ref3.name, share2_ref3.code, share2_ref3.c_city_cnt, share2_ref3.c_lang_cnt
                                                         ->  Hash
                                                               Output: country_2.code, country_2.region
                                                               ->  PX Hash 6:6  (slice11; segments: 6)
                                                                     Output: country_2.code, country_2.region
                                                                     Hash Key: country_2.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                           Output: country_2.code, country_2.region
                                             ->  Hash
                                                   Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                   ->  PX Hash 6:6  (slice12; segments: 6)
                                                         Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                         Hash Key: country_3.region
                                                         ->  Hash Join
                                                               Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                               Hash Cond: (share2_ref2.code = country_3.code)
                                                               ->  PX Hash 6:6  (slice13; segments: 6)
                                                                     Output: share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                                     Hash Key: share2_ref2.code
                                                                     ->  Result
                                                                           Output: share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                                           Filter: ((share2_ref2.c_city_cnt / (share2_ref2.c_lang_cnt)::numeric) > '1'::numeric)
                                                                           ->  Shared Scan (Consumer; slice13; share2)
                                                                                 Output: share2_ref2.name, share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                               ->  Hash
                                                                     Output: country_3.region, country_3.code
                                                                     ->  PX Hash 6:6  (slice14; segments: 6)
                                                                           Output: country_3.region, country_3.code
                                                                           Hash Key: country_3.code
                                                                           ->  Nested Loop
                                                                                 Output: country_3.region, country_3.code
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice15; segments: 6)
                                                                                       Output: country_3.region, country_3.code, country_3.capital
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_3
                                                                                             Output: country_3.region, country_3.code, country_3.capital
                                                                                             Filter: (country_3.continent = 'Asia'::text)
                                                                                 ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                                                       Index Cond: (city_1.id = country_3.capital)
                           ->  Sort
                                 Output: (sum(share2_ref4.c_city_cnt)), (sum(share2_ref4.c_lang_cnt)), country_5.region
                                 Sort Key: country_5.region
                                 ->  HashAggregate
                                       Output: sum(share2_ref4.c_city_cnt), sum(share2_ref4.c_lang_cnt), country_5.region
                                       Group Key: country_5.region
                                       ->  Hash Join
                                             Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                             Hash Cond: (country_4.region = country_5.region)
                                             ->  PX Hash 6:6  (slice16; segments: 6)
                                                   Output: country_4.region
                                                   Hash Key: country_4.region
                                                   ->  Hash Join
                                                         Output: country_4.region
                                                         Hash Cond: (share2_ref5.code = country_4.code)
                                                         ->  PX Hash 6:6  (slice17; segments: 6)
                                                               Output: share2_ref5.code
                                                               Hash Key: share2_ref5.code
                                                               ->  Result
                                                                     Output: share2_ref5.code
                                                                     ->  Shared Scan (Consumer; slice17; share2)
                                                                           Output: share2_ref5.name, share2_ref5.code, share2_ref5.c_city_cnt, share2_ref5.c_lang_cnt
                                                         ->  Hash
                                                               Output: country_4.code, country_4.region
                                                               ->  PX Hash 6:6  (slice18; segments: 6)
                                                                     Output: country_4.code, country_4.region
                                                                     Hash Key: country_4.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_4
                                                                           Output: country_4.code, country_4.region
                                             ->  Hash
                                                   Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                   ->  PX Hash 6:6  (slice19; segments: 6)
                                                         Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                         Hash Key: country_5.region
                                                         ->  Hash Join
                                                               Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                               Hash Cond: (share2_ref4.code = country_5.code)
                                                               ->  Result
                                                                     Output: share2_ref4.code, share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt
                                                                     Filter: ((share2_ref4.c_city_cnt / (share2_ref4.c_lang_cnt)::numeric) > '1'::numeric)
                                                                     ->  Shared Scan (Consumer; slice19; share2)
                                                                           Output: share2_ref4.name, share2_ref4.code, share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt
                                                               ->  Hash
                                                                     Output: country_5.code, country_5.region
                                                                     ->  PX Broadcast 6:6  (slice20; segments: 6)
                                                                           Output: country_5.code, country_5.region
                                                                           ->  Hash Join
                                                                                 Output: country_5.code, country_5.region
                                                                                 Hash Cond: (share0_ref3.id = country_5.capital)
                                                                                 ->  PX Hash 6:6  (slice21; segments: 6)
                                                                                       Output: share0_ref3.id
                                                                                       Hash Key: share0_ref3.id
                                                                                       ->  Result
                                                                                             Output: share0_ref3.id
                                                                                             ->  Shared Scan (Consumer; slice21; share0)
                                                                                                   Output: share0_ref3.name, share0_ref3.id, share0_ref3.name_1, share0_ref3.district, share0_ref3.population
                                                                                 ->  Hash
                                                                                       Output: country_5.code, country_5.region, country_5.capital
                                                                                       ->  PX Hash 6:6  (slice22; segments: 6)
                                                                                             Output: country_5.code, country_5.region, country_5.capital
                                                                                             Hash Key: country_5.capital
                                                                                             ->  Partial Seq Scan on qp_with_clause.country country_5
                                                                                                   Output: country_5.code, country_5.region, country_5.capital
                                                                                                   Filter: (country_5.continent = 'Europe'::text)
 Optimizer: PolarDB PX Optimizer
(200 rows)

-- queries with a single CTE used more than once in different parts of the main query
-- query1
-- This kind of query is their only use case for CTE. We don't error, we give correct
-- results,use shared scan here and we are good!
select count(*) from
( select r.* from
  ( with fact as 
     (
      select country.name as COUNTRY,country.code,city.name as CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,AGG1.region
      from      
         (select
         sum(case when (city.population >= 0.5 * country.population) then country.population else city.population end) as S_POPULATION,
         sum(case when (gnp >= gnpold) then gnp else gnpold end) as S_GNP,
         avg(case when (lifeexpectancy > 60) then 50 else lifeexpectancy end) as AVG_LIFE,country.region
         from country,city  
         where governmentform != 'Constitutional Monarchy'
         and country.capital = city.id
         and indepyear > 0
         group by country.region) AGG1
         ,country,city
         where country.capital = city.id
         and country.region = AGG1.region
      )
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'South America'
     
     UNION ALL
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'North America'
     
     UNION ALL
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'Caribbean'
 ) as r
 left join
  (
   select 'ARG' as CODE UNION ALL
   select 'BOL' as CODE UNION ALL
   select 'BRA' as CODE UNION ALL
   select 'PER' as CODE UNION ALL
   select 'URY' as CODE UNION ALL
   select 'IND' as CODE  UNION ALL
   select 'LCA' as CODE UNION ALL
   select 'VCT' as CODE
   ) as r1
on r.code = r1.code) AS FOO;
 count 
-------
    43
(1 row)

                                                                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count()
   ->  Hash Left Join
         Hash Cond: ((share0_ref2.code)::text = ('ARG'::text))
         ->  PX Coordinator 6:1  (slice1; segments: 6)
               Output: share0_ref2.code
               ->  Sequence
                     Output: share0_ref2.code
                     ->  Shared Scan (Producer; slice1; share0)
                           Output: share0_ref1.name, share0_ref1.code, share0_ref1.name_1, share0_ref1.s_population, share0_ref1.s_gnp, share0_ref1.avg_life, share0_ref1.region
                           ->  Hash Join
                                 Output: country.name, country.code, city.name, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)), country_1.region
                                 Hash Cond: (country.region = country_1.region)
                                 ->  Nested Loop
                                       Output: country.code, country.name, country.region, city.name
                                       Join Filter: true
                                       ->  PX Broadcast 6:6  (slice2; segments: 6)
                                             Output: country.code, country.name, country.region, country.capital
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.region, country.capital
                                                   Filter: (country.region = ANY ('{Caribbean,"North America","South America"}'::text[]))
                                       ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                             Output: city.name
                                             Index Cond: (city.id = country.capital)
                                 ->  Hash
                                       Output: country_1.region, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                       ->  PX Broadcast 6:6  (slice3; segments: 6)
                                             Output: country_1.region, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                             ->  Finalize GroupAggregate
                                                   Output: country_1.region, sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END), sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END), avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)
                                                   Group Key: country_1.region
                                                   ->  Sort
                                                         Output: country_1.region, (PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                                         Sort Key: country_1.region
                                                         ->  PX Hash 6:6  (slice4; segments: 6)
                                                               Output: country_1.region, (PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                                               Hash Key: country_1.region
                                                               ->  Partial HashAggregate
                                                                     Output: country_1.region, PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END), PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END), PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)
                                                                     Group Key: country_1.region
                                                                     ->  Nested Loop
                                                                           Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, city_1.population
                                                                           Join Filter: true
                                                                           ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                                                 Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, country_1.capital
                                                                                 ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                       Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, country_1.capital
                                                                                       Filter: ((country_1.governmentform <> 'Constitutional Monarchy'::text) AND (country_1.indepyear > 0) AND ((country_1.region = 'South America'::text) OR (country_1.region = 'North America'::text) OR (country_1.region = 'Caribbean'::text)) AND (country_1.region = ANY ('{Caribbean,"North America","South America"}'::text[])))
                                                                           ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                                                 Output: city_1.population
                                                                                 Index Cond: (city_1.id = country_1.capital)
                     ->  Append
                           ->  Nested Loop
                                 Output: share0_ref2.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice6; segments: 6)
                                       Output: share0_ref2.code
                                       ->  Result
                                             Output: share0_ref2.code
                                             Filter: (share0_ref2.region = 'South America'::text)
                                             ->  Shared Scan (Consumer; slice6; share0)
                                                   Output: share0_ref2.name, share0_ref2.code, share0_ref2.name_1, share0_ref2.s_population, share0_ref2.s_gnp, share0_ref2.avg_life, share0_ref2.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage
                                       Output: countrylanguage.isofficial
                                       Index Cond: (countrylanguage.countrycode = share0_ref2.code)
                                       Filter: countrylanguage.isofficial
                           ->  Nested Loop
                                 Output: share0_ref3.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice7; segments: 6)
                                       Output: share0_ref3.code
                                       ->  Result
                                             Output: share0_ref3.code
                                             Filter: (share0_ref3.region = 'North America'::text)
                                             ->  Shared Scan (Consumer; slice7; share0)
                                                   Output: share0_ref3.name, share0_ref3.code, share0_ref3.name_1, share0_ref3.s_population, share0_ref3.s_gnp, share0_ref3.avg_life, share0_ref3.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                       Output: countrylanguage_1.isofficial
                                       Index Cond: (countrylanguage_1.countrycode = share0_ref3.code)
                                       Filter: countrylanguage_1.isofficial
                           ->  Nested Loop
                                 Output: share0_ref4.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice8; segments: 6)
                                       Output: share0_ref4.code
                                       ->  Result
                                             Output: share0_ref4.code
                                             Filter: (share0_ref4.region = 'Caribbean'::text)
                                             ->  Shared Scan (Consumer; slice8; share0)
                                                   Output: share0_ref4.name, share0_ref4.code, share0_ref4.name_1, share0_ref4.s_population, share0_ref4.s_gnp, share0_ref4.avg_life, share0_ref4.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                       Output: countrylanguage_2.isofficial
                                       Index Cond: (countrylanguage_2.countrycode = share0_ref4.code)
                                       Filter: countrylanguage_2.isofficial
         ->  Hash
               Output: ('ARG'::text)
               ->  Append
                     ->  Result
                           Output: 'ARG'::text
                     ->  Result
                           Output: 'BOL'::text
                     ->  Result
                           Output: 'BRA'::text
                     ->  Result
                           Output: 'PER'::text
                     ->  Result
                           Output: 'URY'::text
                     ->  Result
                           Output: 'IND'::text
                     ->  Result
                           Output: 'LCA'::text
                     ->  Result
                           Output: 'VCT'::text
 Optimizer: PolarDB PX Optimizer
(114 rows)

-- query2
with alleuropeanlanguages as 
(select country.code,country.name COUNTRY, city.name CAPITAL, language, isofficial, percentage
 FROM country,city,countrylanguage
 WHERE country.code = countrylanguage.countrycode
 and country.capital = city.id
 and country.continent = 'Europe')
select * from
(select * from alleuropeanlanguages where isofficial='True') e1,
(select * from alleuropeanlanguages where percentage > 50) e2
where e1.code = e2.code order by e2.COUNTRY,e1.language;
 code |        country         |              capital              |    language    | isofficial | percentage | code |        country         |              capital              |    language    | isofficial | percentage 
------+------------------------+-----------------------------------+----------------+------------+------------+------+------------------------+-----------------------------------+----------------+------------+------------
 ALB  | Albania                | Tirana                            | Albaniana      | t          |       97.9 | ALB  | Albania                | Tirana                            | Albaniana      | t          |       97.9
 AUT  | Austria                | Wien                              | German         | t          |         92 | AUT  | Austria                | Wien                              | German         | t          |         92
 BLR  | Belarus                | Minsk                             | Belorussian    | t          |       65.6 | BLR  | Belarus                | Minsk                             | Belorussian    | t          |       65.6
 BLR  | Belarus                | Minsk                             | Russian        | t          |         32 | BLR  | Belarus                | Minsk                             | Belorussian    | t          |       65.6
 BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2 | BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel]               | French         | t          |       32.6 | BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel]               | German         | t          |          1 | BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2
 BIH  | Bosnia and Herzegovina | Sarajevo                          | Serbo-Croatian | t          |       99.2 | BIH  | Bosnia and Herzegovina | Sarajevo                          | Serbo-Croatian | t          |       99.2
 BGR  | Bulgaria               | Sofija                            | Bulgariana     | t          |       83.2 | BGR  | Bulgaria               | Sofija                            | Bulgariana     | t          |       83.2
 HRV  | Croatia                | Zagreb                            | Serbo-Croatian | t          |       95.9 | HRV  | Croatia                | Zagreb                            | Serbo-Croatian | t          |       95.9
 CZE  | Czech Republic         | Praha                             | Czech          | t          |       81.2 | CZE  | Czech Republic         | Praha                             | Czech          | t          |       81.2
 DNK  | Denmark                | Kobenhavn                         | Danish         | t          |       93.5 | DNK  | Denmark                | Kobenhavn                         | Danish         | t          |       93.5
 EST  | Estonia                | Tallinn                           | Estonian       | t          |       65.3 | EST  | Estonia                | Tallinn                           | Estonian       | t          |       65.3
 FRO  | Faroe Islands          | Torshavn                          | Danish         | t          |          0 | FRO  | Faroe Islands          | Torshavn                          | Faroese        | t          |        100
 FRO  | Faroe Islands          | Torshavn                          | Faroese        | t          |        100 | FRO  | Faroe Islands          | Torshavn                          | Faroese        | t          |        100
 FIN  | Finland                | Helsinki [Helsingfors]            | Finnish        | t          |       92.7 | FIN  | Finland                | Helsinki [Helsingfors]            | Finnish        | t          |       92.7
 FIN  | Finland                | Helsinki [Helsingfors]            | Swedish        | t          |        5.7 | FIN  | Finland                | Helsinki [Helsingfors]            | Finnish        | t          |       92.7
 FRA  | France                 | Paris                             | French         | t          |       93.6 | FRA  | France                 | Paris                             | French         | t          |       93.6
 DEU  | Germany                | Berlin                            | German         | t          |       91.3 | DEU  | Germany                | Berlin                            | German         | t          |       91.3
 GIB  | Gibraltar              | Gibraltar                         | English        | t          |       88.9 | GIB  | Gibraltar              | Gibraltar                         | English        | t          |       88.9
 GRC  | Greece                 | Athenai                           | Greek          | t          |       98.5 | GRC  | Greece                 | Athenai                           | Greek          | t          |       98.5
 HUN  | Hungary                | Budapest                          | Hungarian      | t          |       98.5 | HUN  | Hungary                | Budapest                          | Hungarian      | t          |       98.5
 ISL  | Iceland                | Reykjavik                         | Icelandic      | t          |       95.7 | ISL  | Iceland                | Reykjavik                         | Icelandic      | t          |       95.7
 IRL  | Ireland                | Dublin                            | English        | t          |       98.4 | IRL  | Ireland                | Dublin                            | English        | t          |       98.4
 IRL  | Ireland                | Dublin                            | Irish          | t          |        1.6 | IRL  | Ireland                | Dublin                            | English        | t          |       98.4
 ITA  | Italy                  | Roma                              | Italian        | t          |       94.1 | ITA  | Italy                  | Roma                              | Italian        | t          |       94.1
 LVA  | Latvia                 | Riga                              | Latvian        | t          |       55.1 | LVA  | Latvia                 | Riga                              | Latvian        | t          |       55.1
 LIE  | Liechtenstein          | Vaduz                             | German         | t          |         89 | LIE  | Liechtenstein          | Vaduz                             | German         | t          |         89
 LTU  | Lithuania              | Vilnius                           | Lithuanian     | t          |       81.6 | LTU  | Lithuania              | Vilnius                           | Lithuanian     | t          |       81.6
 LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | French         | t          |        4.2 | LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4
 LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | German         | t          |        2.3 | LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4
 LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4 | LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4
 MKD  | Macedonia              | Skopje                            | Macedonian     | t          |       66.5 | MKD  | Macedonia              | Skopje                            | Macedonian     | t          |       66.5
 MLT  | Malta                  | Valletta                          | English        | t          |        2.1 | MLT  | Malta                  | Valletta                          | Maltese        | t          |       95.8
 MLT  | Malta                  | Valletta                          | Maltese        | t          |       95.8 | MLT  | Malta                  | Valletta                          | Maltese        | t          |       95.8
 MDA  | Moldova                | Chisinau                          | Romanian       | t          |       61.9 | MDA  | Moldova                | Chisinau                          | Romanian       | t          |       61.9
 NLD  | Netherlands            | Amsterdam                         | Dutch          | t          |       95.6 | NLD  | Netherlands            | Amsterdam                         | Dutch          | t          |       95.6
 NOR  | Norway                 | Oslo                              | Norwegian      | t          |       96.6 | NOR  | Norway                 | Oslo                              | Norwegian      | t          |       96.6
 POL  | Poland                 | Warszawa                          | Polish         | t          |       97.6 | POL  | Poland                 | Warszawa                          | Polish         | t          |       97.6
 PRT  | Portugal               | Lisboa                            | Portuguese     | t          |         99 | PRT  | Portugal               | Lisboa                            | Portuguese     | t          |         99
 ROM  | Romania                | Bucuresti                         | Romani         | t          |        0.7 | ROM  | Romania                | Bucuresti                         | Romanian       | t          |       90.7
 ROM  | Romania                | Bucuresti                         | Romanian       | t          |       90.7 | ROM  | Romania                | Bucuresti                         | Romanian       | t          |       90.7
 RUS  | Russian Federation     | Moscow                            | Russian        | t          |       86.6 | RUS  | Russian Federation     | Moscow                            | Russian        | t          |       86.6
 SMR  | San Marino             | San Marino                        | Italian        | t          |        100 | SMR  | San Marino             | San Marino                        | Italian        | t          |        100
 SVK  | Slovakia               | Bratislava                        | Slovak         | t          |       85.6 | SVK  | Slovakia               | Bratislava                        | Slovak         | t          |       85.6
 SVN  | Slovenia               | Ljubljana                         | Slovene        | t          |       87.9 | SVN  | Slovenia               | Ljubljana                         | Slovene        | t          |       87.9
 ESP  | Spain                  | Madrid                            | Spanish        | t          |       74.4 | ESP  | Spain                  | Madrid                            | Spanish        | t          |       74.4
 SWE  | Sweden                 | Stockholm                         | Swedish        | t          |       89.5 | SWE  | Sweden                 | Stockholm                         | Swedish        | t          |       89.5
 CHE  | Switzerland            | Bern                              | French         | t          |       19.2 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 CHE  | Switzerland            | Bern                              | German         | t          |       63.6 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 CHE  | Switzerland            | Bern                              | Italian        | t          |        7.7 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 CHE  | Switzerland            | Bern                              | Romansh        | t          |        0.6 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 UKR  | Ukraine                | Kyiv                              | Ukrainian      | t          |       64.7 | UKR  | Ukraine                | Kyiv                              | Ukrainian      | t          |       64.7
 GBR  | United Kingdom         | London                            | English        | t          |       97.3 | GBR  | United Kingdom         | London                            | English        | t          |       97.3
 YUG  | Yugoslavia             | Beograd                           | Serbo-Croatian | t          |       75.2 | YUG  | Yugoslavia             | Beograd                           | Serbo-Croatian | t          |       75.2
(55 rows)

                                                                                                                                       QUERY PLAN                                                                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
   Merge Key: share0_ref2.name, share0_ref3.language
   ->  Sequence
         Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.code, share0_ref1.name, share0_ref1.name_1, share0_ref1.language, share0_ref1.isofficial, share0_ref1.percentage
               ->  Hash Join
                     Output: country.code, country.name, city.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           Hash Key: countrylanguage.countrycode
                           ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                 Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                 Filter: (countrylanguage.isofficial OR (countrylanguage.percentage > '50'::double precision))
                     ->  Hash
                           Output: country.code, country.name, city.name
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name, city.name
                                 Hash Key: country.code
                                 ->  Nested Loop
                                       Output: country.code, country.name, city.name
                                       Join Filter: true
                                       ->  PX Broadcast 6:6  (slice4; segments: 6)
                                             Output: country.code, country.name, country.capital
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.capital
                                                   Filter: (country.continent = 'Europe'::text)
                                       ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                             Output: city.name
                                             Index Cond: (city.id = country.capital)
         ->  Sort
               Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
               Sort Key: share0_ref2.name, share0_ref3.language
               ->  Hash Join
                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                     Hash Cond: (share0_ref3.code = share0_ref2.code)
                     ->  Result
                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                           Filter: share0_ref3.isofficial
                           ->  Shared Scan (Producer; slice1; share0)
                                 Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                     ->  Hash
                           Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                           ->  Result
                                 Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                                 Filter: (share0_ref2.percentage > '50'::double precision)
                                 ->  Shared Scan (Producer; slice1; share0)
                                       Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
 Optimizer: PolarDB PX Optimizer
(51 rows)

-- query3
with allcountrystats as 
( select country.code,country.name,count(distinct city.id) CITY_CNT,
  count(distinct countrylanguage.language) LANG_CNT
  from country,city,countrylanguage
  where country.code = city.countrycode
  and country.code = countrylanguage.countrycode
  group by country.code,country.name
)
select sum(FOO.CITY_CNT) REGION_CITY_CNT,sum(FOO.LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > 1
and country.continent = 'Asia'
UNION ALL
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > 1
and country.continent = 'North America'
UNION ALL
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > (select  max(CITY_CNT/LANG_CNT)  from allcountrystats,country where allcountrystats.code = country.code AND country.continent='Europe')
) FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region;
 region_city_cnt | region_lang_cnt |          region           
-----------------+-----------------+---------------------------
             840 |             192 | Caribbean
            2824 |             112 | Central America
            8250 |             252 | Eastern Asia
            2664 |             396 | Middle East
            1625 |             125 | North America
            3500 |              70 | South America
            3179 |             528 | Southeast Asia
           12278 |             896 | Southern and Central Asia
(8 rows)

--query 4
with diversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country,
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country.code and country.gnp > 100000)
select d1.code,d1.name,d1.capital,city.name CAPITAL_CITY,d1.CNT,d2.CNT
from
diversecountries d1 left join country
ON (d1.code = country.code AND d1.CNT < 8)
left join diversecountries d2
ON (country.code = d2.code AND d2.CNT > 8)
INNER JOIN city
ON(d1.capital = city.id)
ORDER BY d1.name;
 code |        name        | capital |   capital_city   | cnt | cnt 
------+--------------------+---------+------------------+-----+-----
 AUS  | Australia          |     135 | Canberra         |   8 |    
 AUT  | Austria            |    1523 | Wien             |   8 |    
 CAN  | Canada             |    1822 | Ottawa           |  12 |    
 CHN  | China              |    1891 | Peking           |  12 |    
 DNK  | Denmark            |    3315 | Kobenhavn        |   7 |    
 IND  | India              |    1109 | New Delhi        |  12 |    
 IRN  | Iran               |    1380 | Teheran          |  10 |    
 ITA  | Italy              |    1464 | Roma             |   8 |    
 MMR  | Myanmar            |    2710 | Rangoon (Yangon) |   8 |    
 RUS  | Russian Federation |    3580 | Moscow           |  12 |    
 ZAF  | South Africa       |     716 | Pretoria         |  11 |    
 USA  | United States      |    3813 | Washington       |  12 |    
(12 rows)

                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
   Merge Key: share0_ref3.name
   ->  Sequence
         Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.code, share0_ref1.name, share0_ref1.capital, share0_ref1.cnt
               ->  Hash Join
                     Output: country.code, country.name, country.capital, (count())
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  Result
                           Output: countrylanguage.countrycode, (count())
                           Filter: ((count()) > 6)
                           ->  HashAggregate
                                 Output: count(), count(), countrylanguage.countrycode
                                 Group Key: countrylanguage.countrycode
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: countrylanguage.countrycode
                                       Hash Key: countrylanguage.countrycode
                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                             Output: countrylanguage.countrycode
                     ->  Hash
                           Output: country.code, country.name, country.capital
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name, country.capital
                                 Hash Key: country.code
                                 ->  Partial Seq Scan on qp_with_clause.country
                                       Output: country.code, country.name, country.capital
                                       Filter: (country.gnp > '100000'::numeric)
         ->  Sort
               Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
               Sort Key: share0_ref3.name
               ->  Hash Left Join
                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
                     Hash Cond: (country_1.code = share0_ref2.code)
                     ->  PX Hash 6:6  (slice4; segments: 6)
                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code, city.name
                           Hash Key: country_1.code
                           ->  Nested Loop
                                 Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code, city.name
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice5; segments: 6)
                                       Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code
                                       ->  Nested Loop Left Join
                                             Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code
                                             Join Filter: true
                                             ->  Shared Scan (Consumer; slice5; share0)
                                                   Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt
                                             ->  Full Index Scan using country_pkey on qp_with_clause.country country_1
                                                   Output: country_1.code
                                                   Index Cond: (country_1.code = share0_ref3.code)
                                                   Filter: (share0_ref3.cnt < 8)
                                 ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                       Output: city.name
                                       Index Cond: (city.id = share0_ref3.capital)
                     ->  Hash
                           Output: share0_ref2.code, share0_ref2.cnt
                           ->  Result
                                 Output: share0_ref2.code, share0_ref2.cnt
                                 Filter: (share0_ref2.cnt > 8)
                                 ->  Shared Scan (Producer; slice1; share0)
                                       Output: share0_ref2.code, share0_ref2.name, share0_ref2.capital, share0_ref2.cnt
 Optimizer: PolarDB PX Optimizer
(63 rows)

--query 5 Use CTE more than once in select list , from clause and where clause without correlation
with official_languages as
(
 select country.code,country.name,countrylanguage.language
 from
 country,countrylanguage
 where country.code = countrylanguage.countrycode and isofficial = 'True'
 and country.governmentform NOT  IN (select 'Commonwealth of the US' UNION ALL select 'Monarchy (Sultanate)' UNION ALL select 'Monarchy')
 and country.gnp > (select min(gnpold) from country where country.region = 'Western Europe')
)
select 
( select max(CNT) from (select count(*) CNT,o1.name from official_languages o1, official_languages o2
  where o1.code = o2.code group by o1.name) FOO
),* from official_languages;
 max | code |          name          |    language    
-----+------+------------------------+----------------
  16 | AFG  | Afghanistan            | Dari
  16 | AFG  | Afghanistan            | Pashto
  16 | ALB  | Albania                | Albaniana
  16 | AND  | Andorra                | Catalan
  16 | ANT  | Netherlands Antilles   | Dutch
  16 | ANT  | Netherlands Antilles   | Papiamento
  16 | ARE  | United Arab Emirates   | Arabic
  16 | ARG  | Argentina              | Spanish
  16 | ARM  | Armenia                | Armenian
  16 | AUS  | Australia              | English
  16 | AUT  | Austria                | German
  16 | AZE  | Azerbaijan             | Azerbaijani
  16 | BEL  | Belgium                | French
  16 | BEL  | Belgium                | German
  16 | BEL  | Belgium                | Dutch
  16 | BGD  | Bangladesh             | Bengali
  16 | BGR  | Bulgaria               | Bulgariana
  16 | BHR  | Bahrain                | Arabic
  16 | BIH  | Bosnia and Herzegovina | Serbo-Croatian
  16 | BLR  | Belarus                | Russian
  16 | BLR  | Belarus                | Belorussian
  16 | BMU  | Bermuda                | English
  16 | BOL  | Bolivia                | Ketdua
  16 | BOL  | Bolivia                | Aimara
  16 | BOL  | Bolivia                | Spanish
  16 | BRA  | Brazil                 | Portuguese
  16 | BRB  | Barbados               | English
  16 | CAN  | Canada                 | French
  16 | CAN  | Canada                 | English
  16 | CHE  | Switzerland            | Romansh
  16 | CHE  | Switzerland            | French
  16 | CHE  | Switzerland            | German
  16 | CHE  | Switzerland            | Italian
  16 | CHL  | Chile                  | Spanish
  16 | CHN  | China                  | Chinese
  16 | COL  | Colombia               | Spanish
  16 | COM  | Comoros                | Comorian
  16 | CRI  | Costa Rica             | Spanish
  16 | CUB  | Cuba                   | Spanish
  16 | CYM  | Cayman Islands         | English
  16 | CYP  | Cyprus                 | Turkish
  16 | CYP  | Cyprus                 | Greek
  16 | CZE  | Czech Republic         | Czech
  16 | DEU  | Germany                | German
  16 | DNK  | Denmark                | Danish
  16 | DOM  | Dominican Republic     | Spanish
  16 | DZA  | Algeria                | Arabic
  16 | ECU  | Ecuador                | Spanish
  16 | EGY  | Egypt                  | Arabic
  16 | ESP  | Spain                  | Spanish
  16 | EST  | Estonia                | Estonian
  16 | FIN  | Finland                | Finnish
  16 | FIN  | Finland                | Swedish
  16 | FJI  | Fiji Islands           | Fijian
  16 | FRA  | France                 | French
  16 | GBR  | United Kingdom         | English
  16 | GEO  | Georgia                | Georgiana
  16 | GLP  | Guadeloupe             | French
  16 | GRC  | Greece                 | Greek
  16 | GTM  | Guatemala              | Spanish
  16 | GUM  | Guam                   | English
  16 | GUM  | Guam                   | Chamorro
  16 | HND  | Honduras               | Spanish
  16 | HRV  | Croatia                | Serbo-Croatian
  16 | HTI  | Haiti                  | French
  16 | HUN  | Hungary                | Hungarian
  16 | IDN  | Indonesia              | Malay
  16 | IND  | India                  | Hindi
  16 | IRL  | Ireland                | English
  16 | IRL  | Ireland                | Irish
  16 | IRN  | Iran                   | Persian
  16 | IRQ  | Iraq                   | Arabic
  16 | ISL  | Iceland                | Icelandic
  16 | ISR  | Israel                 | Arabic
  16 | ISR  | Israel                 | Hebrew
  16 | ITA  | Italy                  | Italian
  16 | JOR  | Jordan                 | Arabic
  16 | JPN  | Japan                  | Japanese
  16 | KAZ  | Kazakstan              | Kazakh
  16 | KGZ  | Kyrgyzstan             | Russian
  16 | KGZ  | Kyrgyzstan             | Kirgiz
  16 | KHM  | Cambodia               | Khmer
  16 | KOR  | South Korea            | Korean
  16 | KWT  | Kuwait                 | Arabic
  16 | LAO  | Laos                   | Lao
  16 | LBN  | Lebanon                | Arabic
  16 | LBY  | Libyan Arab Jamahiriya | Arabic
  16 | LIE  | Liechtenstein          | German
  16 | LKA  | Sri Lanka              | Tamil
  16 | LKA  | Sri Lanka              | Singali
  16 | LTU  | Lithuania              | Lithuanian
  16 | LUX  | Luxembourg             | French
  16 | LUX  | Luxembourg             | Luxembourgish
  16 | LUX  | Luxembourg             | German
  16 | LVA  | Latvia                 | Latvian
  16 | MAC  | Macao                  | Portuguese
  16 | MAR  | Morocco                | Arabic
  16 | MDA  | Moldova                | Romanian
  16 | MDG  | Madagascar             | French
  16 | MDG  | Madagascar             | Malagasy
  16 | MEX  | Mexico                 | Spanish
  16 | MKD  | Macedonia              | Macedonian
  16 | MLT  | Malta                  | English
  16 | MLT  | Malta                  | Maltese
  16 | MMR  | Myanmar                | Burmese
  16 | MTQ  | Martinique             | French
  16 | MWI  | Malawi                 | Chichewa
  16 | MYS  | Malaysia               | Malay
  16 | NCL  | New Caledonia          | French
  16 | NIC  | Nicaragua              | Spanish
  16 | NLD  | Netherlands            | Dutch
  16 | NOR  | Norway                 | Norwegian
  16 | NPL  | Nepal                  | Nepali
  16 | NZL  | New Zealand            | English
  16 | PAK  | Pakistan               | Urdu
  16 | PAN  | Panama                 | Spanish
  16 | PER  | Peru                   | Aimara
  16 | PER  | Peru                   | Spanish
  16 | PER  | Peru                   | Ketdua
  16 | PHL  | Philippines            | Pilipino
  16 | POL  | Poland                 | Polish
  16 | PRK  | North Korea            | Korean
  16 | PRT  | Portugal               | Portuguese
  16 | PRY  | Paraguay               | Guarani
  16 | PRY  | Paraguay               | Spanish
  16 | ROM  | Romania                | Romani
  16 | ROM  | Romania                | Romanian
  16 | RUS  | Russian Federation     | Russian
  16 | RWA  | Rwanda                 | Rwanda
  16 | RWA  | Rwanda                 | French
  16 | SDN  | Sudan                  | Arabic
  16 | SEN  | Senegal                | Wolof
  16 | SGP  | Singapore              | Tamil
  16 | SGP  | Singapore              | Malay
  16 | SGP  | Singapore              | Chinese
  16 | SLV  | El Salvador            | Spanish
  16 | SVK  | Slovakia               | Slovak
  16 | SVN  | Slovenia               | Slovene
  16 | SWE  | Sweden                 | Swedish
  16 | SYR  | Syria                  | Arabic
  16 | TCD  | Chad                   | Arabic
  16 | TGO  | Togo                   | Kabye
  16 | TGO  | Togo                   | Ewe
  16 | THA  | Thailand               | Thai
  16 | TJK  | Tajikistan             | Tadzhik
  16 | TKM  | Turkmenistan           | Turkmenian
  16 | TUN  | Tunisia                | Arabic
  16 | TUR  | Turkey                 | Turkish
  16 | TZA  | Tanzania               | Swahili
  16 | UKR  | Ukraine                | Ukrainian
  16 | URY  | Uruguay                | Spanish
  16 | USA  | United States          | English
  16 | UZB  | Uzbekistan             | Uzbek
  16 | VEN  | Venezuela              | Spanish
  16 | VNM  | Vietnam                | Vietnamese
  16 | YEM  | Yemen                  | Arabic
  16 | YUG  | Yugoslavia             | Serbo-Croatian
  16 | ZAF  | South Africa           | Zulu
  16 | ZAF  | South Africa           | Xhosa
  16 | ZAF  | South Africa           | English
  16 | ZAF  | South Africa           | Afrikaans
  16 | ZWE  | Zimbabwe               | English
(162 rows)

                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (max((count()))), share0_ref4.code, share0_ref4.name, share0_ref4.language
   ->  Sequence
         Output: (max((count()))), share0_ref4.code, share0_ref4.name, share0_ref4.language
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.code, share0_ref1.name, share0_ref1.language
               ->  Hash Join
                     Output: country.code, country.name, countrylanguage.language
                     Hash Cond: (country.code = countrylanguage.countrycode)
                     ->  PX Hash 1:6  (slice2)
                           Output: country.code, country.name
                           Hash Key: country.code
                           ->  Hash Left Anti Semi (Not-In) Join
                                 Output: country.code, country.name
                                 Hash Cond: (country.governmentform = ('Commonwealth of the US'::text))
                                 ->  PX Coordinator 6:1  (slice3; segments: 6)
                                       Output: country.code, country.name, country.governmentform
                                       ->  Nested Loop
                                             Output: country.code, country.name, country.governmentform
                                             Join Filter: (country.gnp > (min(country_1.gnpold)))
                                             ->  PX Broadcast 1:6  (slice4)
                                                   Output: (min(country_1.gnpold))
                                                   ->  Finalize Aggregate
                                                         Output: min(country_1.gnpold)
                                                         ->  PX Coordinator 6:1  (slice5; segments: 6)
                                                               Output: (PARTIAL min(country_1.gnpold))
                                                               ->  Partial Aggregate
                                                                     Output: PARTIAL min(country_1.gnpold)
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                           Output: country_1.gnpold
                                                                           Filter: (country_1.region = 'Western Europe'::text)
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.gnp, country.governmentform
                                 ->  Hash
                                       Output: ('Commonwealth of the US'::text)
                                       ->  Append
                                             ->  Result
                                                   Output: 'Commonwealth of the US'::text
                                             ->  Result
                                                   Output: 'Monarchy (Sultanate)'::text
                                             ->  Result
                                                   Output: 'Monarchy'::text
                     ->  Hash
                           Output: countrylanguage.countrycode, countrylanguage.language
                           ->  PX Hash 6:6  (slice6; segments: 6)
                                 Output: countrylanguage.countrycode, countrylanguage.language
                                 Hash Key: countrylanguage.countrycode
                                 ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                       Output: countrylanguage.countrycode, countrylanguage.language
                                       Filter: countrylanguage.isofficial
         ->  Nested Loop Left Join
               Output: (max((count()))), share0_ref4.code, share0_ref4.name, share0_ref4.language
               Join Filter: true
               ->  Shared Scan (Producer; slice1; share0)
                     Output: share0_ref4.code, share0_ref4.name, share0_ref4.language
               ->  Materialize
                     Output: (max((count())))
                     ->  PX Broadcast 1:6  (slice7)
                           Output: (max((count())))
                           ->  Finalize Aggregate
                                 Output: max((count()))
                                 ->  PX Coordinator 6:1  (slice8; segments: 6)
                                       Output: (PARTIAL max((count())))
                                       ->  Partial Aggregate
                                             Output: PARTIAL max((count()))
                                             ->  HashAggregate
                                                   Output: count(), share0_ref3.name
                                                   Group Key: share0_ref3.name
                                                   ->  PX Hash 6:6  (slice9; segments: 6)
                                                         Output: share0_ref3.name
                                                         Hash Key: share0_ref3.name
                                                         ->  Hash Join
                                                               Output: share0_ref3.name
                                                               Hash Cond: (share0_ref3.code = share0_ref2.code)
                                                               ->  Shared Scan (Consumer; slice9; share0)
                                                                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.language
                                                               ->  Hash
                                                                     Output: share0_ref2.code, share0_ref2.name, share0_ref2.language
                                                                     ->  Shared Scan (Consumer; slice9; share0)
                                                                           Output: share0_ref2.code, share0_ref2.name, share0_ref2.language
 Optimizer: PolarDB PX Optimizer
(81 rows)

--query 6 Use CTE in the main query and subqueries within the main query
with bad_headofstates as 
(
 select country.code,country.name,country.headofstate,countrylanguage.language
 from
 country,countrylanguage
 where country.code = countrylanguage.countrycode and countrylanguage.isofficial=true
 and (country.gnp < country.gnpold or country.gnp < 3000)
)
select OUTERMOST_FOO.*,bad_headofstates.headofstate from (
select avg(population),region from
(
select FOO.*,bad_headofstates.headofstate,city.name
from
(select bad_headofstates.code,country.capital,country.region,country.population from
bad_headofstates,country where bad_headofstates.code = country.code) FOO, bad_headofstates,city
where FOO.code = bad_headofstates.code and FOO.capital = city.id) OUTER_FOO
group by region ) OUTERMOST_FOO,bad_headofstates,country 
where country.code = bad_headofstates.code and country.region = OUTERMOST_FOO.region
order by OUTERMOST_FOO.region,bad_headofstates.headofstate LIMIT 40;
          avg          |          region           |           headofstate            
-----------------------+---------------------------+----------------------------------
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
   744388.888888888889 | Caribbean                 | Beatrix
   744388.888888888889 | Caribbean                 | Beatrix
   744388.888888888889 | Caribbean                 | Beatrix
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Fidel Castro Ruz
   744388.888888888889 | Caribbean                 | George W. Bush
   744388.888888888889 | Caribbean                 | Jacques Chirac
  7651000.000000000000 | Central Africa            | Idriss Deby
  2657500.000000000000 | Central America           | Arnoldo Aleman Lacayo
  2657500.000000000000 | Central America           | Elisabeth II
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Bakili Muluzi
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | Isayas Afewerki [Isaias Afwerki]
  5982809.523809523810 | Eastern Africa            | Ismail Omar Guelleh
  5982809.523809523810 | Eastern Africa            | Jacques Chirac
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Robert G. Mugabe
 44173250.000000000000 | Eastern Asia              | Akihito
 44173250.000000000000 | Eastern Asia              | Jiang Zemin
 44173250.000000000000 | Eastern Asia              | Kim Dae-jung
(40 rows)

                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (avg(country_2.population)), country_2.region, share0_ref4.headofstate
   Merge Key: country_2.region, share0_ref4.headofstate
   ->  Sort
         Output: (avg(country_2.population)), country_2.region, share0_ref4.headofstate
         Sort Key: country_2.region, share0_ref4.headofstate
         ->  Sequence
               Output: (avg(country_2.population)), country_2.region, share0_ref4.headofstate
               ->  Shared Scan (Producer; slice1; share0)
                     Output: share0_ref1.code, share0_ref1.name, share0_ref1.headofstate, share0_ref1.language
                     ->  Hash Join
                           Output: country.code, country.name, country.headofstate, countrylanguage.language
                           Hash Cond: (country.code = countrylanguage.countrycode)
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: country.code, country.name, country.headofstate
                                 Hash Key: country.code
                                 ->  Partial Seq Scan on qp_with_clause.country
                                       Output: country.code, country.name, country.headofstate
                                       Filter: ((country.gnp < country.gnpold) OR (country.gnp < '3000'::numeric))
                           ->  Hash
                                 Output: countrylanguage.countrycode, countrylanguage.language
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: countrylanguage.countrycode, countrylanguage.language
                                       Hash Key: countrylanguage.countrycode
                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                             Output: countrylanguage.countrycode, countrylanguage.language
                                             Filter: countrylanguage.isofficial
               ->  PX Hash 1:6  (slice4)
                     Output: (avg(country_2.population)), country_2.region, share0_ref4.headofstate
                     ->  Limit
                           Output: (avg(country_2.population)), country_2.region, share0_ref4.headofstate
                           ->  PX Coordinator 6:1  (slice5; segments: 6)
                                 Output: (avg(country_2.population)), country_2.region, share0_ref4.headofstate
                                 Merge Key: country_2.region, share0_ref4.headofstate
                                 ->  Limit
                                       Output: (avg(country_2.population)), country_2.region, share0_ref4.headofstate
                                       ->  Sort
                                             Output: (avg(country_2.population)), country_2.region, share0_ref4.headofstate
                                             Sort Key: country_2.region, share0_ref4.headofstate
                                             ->  Hash Join
                                                   Output: (avg(country_2.population)), country_2.region, share0_ref4.headofstate
                                                   Hash Cond: (country_1.region = country_2.region)
                                                   ->  PX Hash 6:6  (slice6; segments: 6)
                                                         Output: share0_ref4.headofstate, country_1.region
                                                         Hash Key: country_1.region
                                                         ->  Hash Join
                                                               Output: share0_ref4.headofstate, country_1.region
                                                               Hash Cond: (country_1.code = share0_ref4.code)
                                                               ->  PX Hash 6:6  (slice7; segments: 6)
                                                                     Output: country_1.code, country_1.region
                                                                     Hash Key: country_1.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                           Output: country_1.code, country_1.region
                                                               ->  Hash
                                                                     Output: share0_ref4.code, share0_ref4.name, share0_ref4.headofstate, share0_ref4.language
                                                                     ->  Shared Scan (Consumer; slice6; share0)
                                                                           Output: share0_ref4.code, share0_ref4.name, share0_ref4.headofstate, share0_ref4.language
                                                   ->  Hash
                                                         Output: (avg(country_2.population)), country_2.region
                                                         ->  Finalize HashAggregate
                                                               Output: avg(country_2.population), country_2.region
                                                               Group Key: country_2.region
                                                               ->  PX Hash 6:6  (slice8; segments: 6)
                                                                     Output: country_2.region, (PARTIAL avg(country_2.population))
                                                                     Hash Key: country_2.region
                                                                     ->  Partial HashAggregate
                                                                           Output: country_2.region, PARTIAL avg(country_2.population)
                                                                           Group Key: country_2.region
                                                                           ->  Hash Join
                                                                                 Output: country_2.region, country_2.population
                                                                                 Hash Cond: (country_2.capital = city.id)
                                                                                 ->  PX Hash 6:6  (slice9; segments: 6)
                                                                                       Output: country_2.region, country_2.population, country_2.capital
                                                                                       Hash Key: country_2.capital
                                                                                       ->  Hash Join
                                                                                             Output: country_2.region, country_2.population, country_2.capital
                                                                                             Hash Cond: (share0_ref3.code = share0_ref2.code)
                                                                                             ->  Hash Join
                                                                                                   Output: share0_ref3.code, country_2.region, country_2.population, country_2.capital
                                                                                                   Hash Cond: (country_2.code = share0_ref3.code)
                                                                                                   ->  PX Hash 6:6  (slice10; segments: 6)
                                                                                                         Output: country_2.code, country_2.region, country_2.population, country_2.capital
                                                                                                         Hash Key: country_2.code
                                                                                                         ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                                                               Output: country_2.code, country_2.region, country_2.population, country_2.capital
                                                                                                   ->  Hash
                                                                                                         Output: share0_ref3.code, share0_ref3.name, share0_ref3.headofstate, share0_ref3.language
                                                                                                         ->  Shared Scan (Consumer; slice9; share0)
                                                                                                               Output: share0_ref3.code, share0_ref3.name, share0_ref3.headofstate, share0_ref3.language
                                                                                             ->  Hash
                                                                                                   Output: share0_ref2.code, share0_ref2.name, share0_ref2.headofstate, share0_ref2.language
                                                                                                   ->  Shared Scan (Consumer; slice9; share0)
                                                                                                         Output: share0_ref2.code, share0_ref2.name, share0_ref2.headofstate, share0_ref2.language
                                                                                 ->  Hash
                                                                                       Output: city.id
                                                                                       ->  PX Hash 6:6  (slice11; segments: 6)
                                                                                             Output: city.id
                                                                                             Hash Key: city.id
                                                                                             ->  Partial Seq Scan on qp_with_clause.city
                                                                                                   Output: city.id
 Optimizer: PolarDB PX Optimizer
(101 rows)

-- query 7 Use CTE in the main query, where clause and having clause
with district_population as 
(select sum(city.population) DISTRICT_POP,count(*) NUM_CITIES,district,countrycode,country.name COUNTRY
 from city,country
 where city.countrycode = country.code
 group by district,countrycode,country.name
 HAVING (sum(city.population)/count(*)) > ( select avg(population) from city where countrycode = 'CHN'))
select sum(FOO.DISTRICT_POP),sum(FOO.NUM_CITIES),COUNTRY,CAPITAL,CAPITAL_POP
from
(
(select district_population.*,city.name CAPITAL,city.population CAPITAL_POP from
district_population,country,city
where district_population.countrycode = country.code AND city.id = country.capital
AND DISTRICT_POP >= ( select avg(DISTRICT_POP) FROM district_population where district IN (select district from city where countrycode = 'USA') )
order by COUNTRY,district)
UNION ALL
(select district_population.*,city.name CAPITAL,city.population CAPITAL_POP from
district_population,country,city
where district_population.countrycode = country.code AND city.id = country.capital
AND DISTRICT_POP >= ( select avg(DISTRICT_POP) FROM district_population where district IN (select district from city where countrycode = 'IND') )
order by COUNTRY,district)
UNION ALL
(select district_population.*,city.name CAPITAL,city.population CAPITAL_POP from
district_population,country,city
where district_population.countrycode = country.code AND city.id = country.capital
AND DISTRICT_POP >= ( select avg(DISTRICT_POP) FROM district_population where district IN (select district from city where countrycode = 'CHN') )
order by COUNTRY,district)
) FOO
WHERE FOO.CAPITAL_POP > (select min(DISTRICT_POP) from district_population)
group by FOO.COUNTRY,FOO.CAPITAL,FOO.CAPITAL_POP
HAVING sum(FOO.DISTRICT_POP) >= ( select avg(DISTRICT_POP) FROM district_population where district IN (select district from city where countrycode = 'AUS') )
AND (sum(FOO.DISTRICT_POP)/sum(FOO.NUM_CITIES)) <= 
( select avg(DISTRICT_POP) FROM district_population where district IN (select district from city where countrycode = 'USA' or countrycode = 'IND' or countrycode = 'CHN'))
order by FOO.country;
    sum    | sum |                country                |      capital      | capital_pop 
-----------+-----+---------------------------------------+-------------------+-------------
   4577018 |   8 | Bangladesh                            | Dhaka             |     3612850
  35875413 |  66 | Brazil                                | Brasilia          |     1969868
   5423156 |   4 | Chile                                 | Santiago de Chile |     4703954
 146743375 | 155 | China                                 | Peking            |     7472000
   6260862 |   1 | Colombia                              | Santafe de Bogota |     6260862
   5064000 |   1 | Congo, The Democratic Republic of the | Kinshasa          |     5064000
  10117675 |   2 | Egypt                                 | Cairo             |     6789479
   3386667 |   1 | Germany                               | Berlin            |     3386667
  25060392 |  18 | Iran                                  | Teheran           |     6758845
   4336000 |   1 | Iraq                                  | Baghdad           |     4336000
  48546381 |  84 | Japan                                 | Tokyo             |     7980230
  29789325 |  11 | Mexico                                | Ciudad de Mexico  |     8591309
   3095329 |   2 | Morocco                               | Rabat             |      623457
   3361700 |   1 | Myanmar                               | Rangoon (Yangon)  |     3361700
  33060243 |  12 | Pakistan                              | Islamabad         |      524500
  29545923 |  48 | Philippines                           | Manila            |     1581082
  30717000 |   9 | Russian Federation                    | Moscow            |     8389200
   6846000 |   5 | Saudi Arabia                          | Riyadh            |     3324000
   4017733 |   1 | Singapore                             | Singapore         |     4017733
   3962883 |   8 | Spain                                 | Madrid            |     2879052
   6320174 |   1 | Thailand                              | Bangkok           |     6320174
  26997078 |   6 | Turkey                                | Ankara            |     3038159
  26874255 |  18 | United States                         | Washington        |      572059
   3980000 |   1 | Vietnam                               | Hanoi             |     1410000
(24 rows)

                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (sum(share0_ref4.district_pop)), (sum(share0_ref4.num_cities)), share0_ref4.name, city_3.name, city_3.population
   Merge Key: share0_ref4.name
   ->  Sequence
         Output: (sum(share0_ref4.district_pop)), (sum(share0_ref4.num_cities)), share0_ref4.name, city_3.name, city_3.population
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref3.district_pop, share0_ref3.num_cities, share0_ref3.district, share0_ref3.countrycode, share0_ref3.name
               ->  Nested Loop
                     Output: (sum(city.population)), (count()), city.district, city.countrycode, country.name
                     Join Filter: ((((sum(city.population)) / (count())))::numeric > (avg(city_1.population)))
                     ->  PX Broadcast 1:6  (slice4)
                           Output: (avg(city_1.population))
                           ->  Finalize Aggregate
                                 Output: avg(city_1.population)
                                 ->  PX Coordinator 6:1  (slice5; segments: 6)
                                       Output: (PARTIAL avg(city_1.population))
                                       ->  Partial Aggregate
                                             Output: PARTIAL avg(city_1.population)
                                             ->  Partial Seq Scan on qp_with_clause.city city_1
                                                   Output: city_1.population
                                                   Filter: (city_1.countrycode = 'CHN'::bpchar)
                     ->  HashAggregate
                           Output: sum(city.population), count(), sum(city.population), count(), city.countrycode, city.district, country.name
                           Group Key: city.district, city.countrycode, country.name
                           ->  Materialize
                                 Output: city.countrycode, city.district, city.population, country.name
                                 ->  Hash Join
                                       Output: city.countrycode, city.district, city.population, country.name
                                       Hash Cond: (city.countrycode = country.code)
                                       ->  PX Hash 6:6  (slice2; segments: 6)
                                             Output: city.countrycode, city.district, city.population
                                             Hash Key: city.countrycode
                                             ->  Partial Seq Scan on qp_with_clause.city
                                                   Output: city.countrycode, city.district, city.population
                                       ->  Hash
                                             Output: country.code, country.name
                                             ->  PX Hash 6:6  (slice3; segments: 6)
                                                   Output: country.code, country.name
                                                   Hash Key: country.code
                                                   ->  Partial Seq Scan on qp_with_clause.country
                                                         Output: country.code, country.name
         ->  Result
               Output: (sum(share0_ref4.district_pop)), (sum(share0_ref4.num_cities)), share0_ref4.name, city_3.name, city_3.population
               ->  Sort
                     Output: (sum(share0_ref4.district_pop)), (sum(share0_ref4.num_cities)), share0_ref4.name, city_3.name, city_3.population, (sum(share0_ref4.district_pop)), (sum(share0_ref4.num_cities))
                     Sort Key: share0_ref4.name
                     ->  Result
                           Output: (sum(share0_ref4.district_pop)), (sum(share0_ref4.num_cities)), share0_ref4.name, city_3.name, city_3.population, (sum(share0_ref4.district_pop)), (sum(share0_ref4.num_cities))
                           Filter: (((sum(share0_ref4.district_pop)) / (sum(share0_ref4.num_cities))) <= (SubPlan 2))
                           ->  Result
                                 Output: (sum(share0_ref4.district_pop)), (sum(share0_ref4.num_cities)), share0_ref4.name, city_3.name, city_3.population, (sum(share0_ref4.district_pop)), (sum(share0_ref4.district_pop)), (sum(share0_ref4.num_cities))
                                 Filter: ((sum(share0_ref4.district_pop)) >= (SubPlan 1))
                                 ->  HashAggregate
                                       Output: sum(share0_ref4.district_pop), sum(share0_ref4.num_cities), share0_ref4.name, city_3.name, city_3.population, sum(share0_ref4.district_pop), sum(share0_ref4.district_pop), sum(share0_ref4.num_cities)
                                       Group Key: share0_ref4.name, city_3.name, city_3.population
                                       ->  PX Hash 6:6  (slice6; segments: 6)
                                             Output: share0_ref4.district_pop, share0_ref4.num_cities, share0_ref4.name, city_3.name, city_3.population
                                             Hash Key: share0_ref4.name, city_3.name, city_3.population
                                             ->  Append
                                                   ->  Nested Loop
                                                         Output: share0_ref4.district_pop, share0_ref4.num_cities, share0_ref4.name, city_3.name, city_3.population
                                                         Join Filter: (city_3.population > (min(share0_ref6.district_pop)))
                                                         ->  PX Broadcast 1:6  (slice14)
                                                               Output: (min(share0_ref6.district_pop))
                                                               ->  Finalize Aggregate
                                                                     Output: min(share0_ref6.district_pop)
                                                                     ->  PX Coordinator 6:1  (slice15; segments: 6)
                                                                           Output: (PARTIAL min(share0_ref6.district_pop))
                                                                           ->  Partial Aggregate
                                                                                 Output: PARTIAL min(share0_ref6.district_pop)
                                                                                 ->  Shared Scan (Consumer; slice15; share0)
                                                                                       Output: share0_ref6.district_pop, share0_ref6.num_cities, share0_ref6.district, share0_ref6.countrycode, share0_ref6.name
                                                         ->  Sort
                                                               Output: share0_ref4.district_pop, share0_ref4.num_cities, share0_ref4.district, share0_ref4.name, city_3.name, city_3.population
                                                               Sort Key: share0_ref4.name, share0_ref4.district
                                                               ->  Hash Join
                                                                     Output: share0_ref4.district_pop, share0_ref4.num_cities, share0_ref4.district, share0_ref4.name, city_3.name, city_3.population
                                                                     Hash Cond: (share0_ref4.countrycode = country_1.code)
                                                                     ->  Nested Loop
                                                                           Output: share0_ref4.district_pop, share0_ref4.num_cities, share0_ref4.district, share0_ref4.countrycode, share0_ref4.name
                                                                           Join Filter: ((share0_ref4.district_pop)::numeric >= (avg(share0_ref5.district_pop)))
                                                                           ->  PX Broadcast 1:6  (slice7)
                                                                                 Output: (avg(share0_ref5.district_pop))
                                                                                 ->  Finalize Aggregate
                                                                                       Output: avg(share0_ref5.district_pop)
                                                                                       ->  PX Coordinator 6:1  (slice8; segments: 6)
                                                                                             Output: (PARTIAL avg(share0_ref5.district_pop))
                                                                                             ->  Partial Aggregate
                                                                                                   Output: PARTIAL avg(share0_ref5.district_pop)
                                                                                                   ->  Hash Semi Join
                                                                                                         Output: share0_ref5.district_pop
                                                                                                         Hash Cond: (share0_ref5.district = city_2.district)
                                                                                                         ->  PX Hash 6:6  (slice9; segments: 6)
                                                                                                               Output: share0_ref5.district_pop, share0_ref5.district
                                                                                                               Hash Key: share0_ref5.district
                                                                                                               ->  Result
                                                                                                                     Output: share0_ref5.district_pop, share0_ref5.district
                                                                                                                     ->  Shared Scan (Consumer; slice9; share0)
                                                                                                                           Output: share0_ref5.district_pop, share0_ref5.num_cities, share0_ref5.district, share0_ref5.countrycode, share0_ref5.name
                                                                                                         ->  Hash
                                                                                                               Output: city_2.district
                                                                                                               ->  PX Hash 6:6  (slice10; segments: 6)
                                                                                                                     Output: city_2.district
                                                                                                                     Hash Key: city_2.district
                                                                                                                     ->  Partial Seq Scan on qp_with_clause.city city_2
                                                                                                                           Output: city_2.district
                                                                                                                           Filter: (city_2.countrycode = 'USA'::bpchar)
                                                                           ->  Materialize
                                                                                 Output: share0_ref4.district_pop, share0_ref4.num_cities, share0_ref4.district, share0_ref4.countrycode, share0_ref4.name
                                                                                 ->  Shared Scan (Consumer; slice6; share0)
                                                                                       Output: share0_ref4.district_pop, share0_ref4.num_cities, share0_ref4.district, share0_ref4.countrycode, share0_ref4.name
                                                                     ->  Hash
                                                                           Output: country_1.code, city_3.name, city_3.population
                                                                           ->  PX Hash 6:6  (slice11; segments: 6)
                                                                                 Output: country_1.code, city_3.name, city_3.population
                                                                                 Hash Key: country_1.code
                                                                                 ->  Hash Join
                                                                                       Output: country_1.code, city_3.name, city_3.population
                                                                                       Hash Cond: (city_3.id = country_1.capital)
                                                                                       ->  PX Hash 6:6  (slice12; segments: 6)
                                                                                             Output: city_3.id, city_3.name, city_3.population
                                                                                             Hash Key: city_3.id
                                                                                             ->  Partial Seq Scan on qp_with_clause.city city_3
                                                                                                   Output: city_3.id, city_3.name, city_3.population
                                                                                       ->  Hash
                                                                                             Output: country_1.code, country_1.capital
                                                                                             ->  PX Hash 6:6  (slice13; segments: 6)
                                                                                                   Output: country_1.code, country_1.capital
                                                                                                   Hash Key: country_1.capital
                                                                                                   ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                                         Output: country_1.code, country_1.capital
                                                   ->  Nested Loop
                                                         Output: share0_ref7.district_pop, share0_ref7.num_cities, share0_ref7.name, city_5.name, city_5.population
                                                         Join Filter: (city_5.population > (min(share0_ref9.district_pop)))
                                                         ->  PX Broadcast 1:6  (slice23)
                                                               Output: (min(share0_ref9.district_pop))
                                                               ->  Finalize Aggregate
                                                                     Output: min(share0_ref9.district_pop)
                                                                     ->  PX Coordinator 6:1  (slice24; segments: 6)
                                                                           Output: (PARTIAL min(share0_ref9.district_pop))
                                                                           ->  Partial Aggregate
                                                                                 Output: PARTIAL min(share0_ref9.district_pop)
                                                                                 ->  Shared Scan (Consumer; slice24; share0)
                                                                                       Output: share0_ref9.district_pop, share0_ref9.num_cities, share0_ref9.district, share0_ref9.countrycode, share0_ref9.name
                                                         ->  Sort
                                                               Output: share0_ref7.district_pop, share0_ref7.num_cities, share0_ref7.district, share0_ref7.name, city_5.name, city_5.population
                                                               Sort Key: share0_ref7.name, share0_ref7.district
                                                               ->  Hash Join
                                                                     Output: share0_ref7.district_pop, share0_ref7.num_cities, share0_ref7.district, share0_ref7.name, city_5.name, city_5.population
                                                                     Hash Cond: (share0_ref7.countrycode = country_2.code)
                                                                     ->  Nested Loop
                                                                           Output: share0_ref7.district_pop, share0_ref7.num_cities, share0_ref7.district, share0_ref7.countrycode, share0_ref7.name
                                                                           Join Filter: ((share0_ref7.district_pop)::numeric >= (avg(share0_ref8.district_pop)))
                                                                           ->  PX Broadcast 1:6  (slice16)
                                                                                 Output: (avg(share0_ref8.district_pop))
                                                                                 ->  Finalize Aggregate
                                                                                       Output: avg(share0_ref8.district_pop)
                                                                                       ->  PX Coordinator 6:1  (slice17; segments: 6)
                                                                                             Output: (PARTIAL avg(share0_ref8.district_pop))
                                                                                             ->  Partial Aggregate
                                                                                                   Output: PARTIAL avg(share0_ref8.district_pop)
                                                                                                   ->  Hash Semi Join
                                                                                                         Output: share0_ref8.district_pop
                                                                                                         Hash Cond: (share0_ref8.district = city_4.district)
                                                                                                         ->  PX Hash 6:6  (slice18; segments: 6)
                                                                                                               Output: share0_ref8.district_pop, share0_ref8.district
                                                                                                               Hash Key: share0_ref8.district
                                                                                                               ->  Result
                                                                                                                     Output: share0_ref8.district_pop, share0_ref8.district
                                                                                                                     ->  Shared Scan (Consumer; slice18; share0)
                                                                                                                           Output: share0_ref8.district_pop, share0_ref8.num_cities, share0_ref8.district, share0_ref8.countrycode, share0_ref8.name
                                                                                                         ->  Hash
                                                                                                               Output: city_4.district
                                                                                                               ->  PX Hash 6:6  (slice19; segments: 6)
                                                                                                                     Output: city_4.district
                                                                                                                     Hash Key: city_4.district
                                                                                                                     ->  Partial Seq Scan on qp_with_clause.city city_4
                                                                                                                           Output: city_4.district
                                                                                                                           Filter: (city_4.countrycode = 'IND'::bpchar)
                                                                           ->  Materialize
                                                                                 Output: share0_ref7.district_pop, share0_ref7.num_cities, share0_ref7.district, share0_ref7.countrycode, share0_ref7.name
                                                                                 ->  Shared Scan (Consumer; slice6; share0)
                                                                                       Output: share0_ref7.district_pop, share0_ref7.num_cities, share0_ref7.district, share0_ref7.countrycode, share0_ref7.name
                                                                     ->  Hash
                                                                           Output: country_2.code, city_5.name, city_5.population
                                                                           ->  PX Hash 6:6  (slice20; segments: 6)
                                                                                 Output: country_2.code, city_5.name, city_5.population
                                                                                 Hash Key: country_2.code
                                                                                 ->  Hash Join
                                                                                       Output: country_2.code, city_5.name, city_5.population
                                                                                       Hash Cond: (city_5.id = country_2.capital)
                                                                                       ->  PX Hash 6:6  (slice21; segments: 6)
                                                                                             Output: city_5.id, city_5.name, city_5.population
                                                                                             Hash Key: city_5.id
                                                                                             ->  Partial Seq Scan on qp_with_clause.city city_5
                                                                                                   Output: city_5.id, city_5.name, city_5.population
                                                                                       ->  Hash
                                                                                             Output: country_2.code, country_2.capital
                                                                                             ->  PX Hash 6:6  (slice22; segments: 6)
                                                                                                   Output: country_2.code, country_2.capital
                                                                                                   Hash Key: country_2.capital
                                                                                                   ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                                                         Output: country_2.code, country_2.capital
                                                   ->  Nested Loop
                                                         Output: share0_ref10.district_pop, share0_ref10.num_cities, share0_ref10.name, city_7.name, city_7.population
                                                         Join Filter: (city_7.population > (min(share0_ref12.district_pop)))
                                                         ->  PX Broadcast 1:6  (slice32)
                                                               Output: (min(share0_ref12.district_pop))
                                                               ->  Finalize Aggregate
                                                                     Output: min(share0_ref12.district_pop)
                                                                     ->  PX Coordinator 6:1  (slice33; segments: 6)
                                                                           Output: (PARTIAL min(share0_ref12.district_pop))
                                                                           ->  Partial Aggregate
                                                                                 Output: PARTIAL min(share0_ref12.district_pop)
                                                                                 ->  Shared Scan (Consumer; slice33; share0)
                                                                                       Output: share0_ref12.district_pop, share0_ref12.num_cities, share0_ref12.district, share0_ref12.countrycode, share0_ref12.name
                                                         ->  Sort
                                                               Output: share0_ref10.district_pop, share0_ref10.num_cities, share0_ref10.district, share0_ref10.name, city_7.name, city_7.population
                                                               Sort Key: share0_ref10.name, share0_ref10.district
                                                               ->  Hash Join
                                                                     Output: share0_ref10.district_pop, share0_ref10.num_cities, share0_ref10.district, share0_ref10.name, city_7.name, city_7.population
                                                                     Hash Cond: (share0_ref10.countrycode = country_3.code)
                                                                     ->  Nested Loop
                                                                           Output: share0_ref10.district_pop, share0_ref10.num_cities, share0_ref10.district, share0_ref10.countrycode, share0_ref10.name
                                                                           Join Filter: ((share0_ref10.district_pop)::numeric >= (avg(share0_ref11.district_pop)))
                                                                           ->  PX Broadcast 1:6  (slice25)
                                                                                 Output: (avg(share0_ref11.district_pop))
                                                                                 ->  Finalize Aggregate
                                                                                       Output: avg(share0_ref11.district_pop)
                                                                                       ->  PX Coordinator 6:1  (slice26; segments: 6)
                                                                                             Output: (PARTIAL avg(share0_ref11.district_pop))
                                                                                             ->  Partial Aggregate
                                                                                                   Output: PARTIAL avg(share0_ref11.district_pop)
                                                                                                   ->  Hash Semi Join
                                                                                                         Output: share0_ref11.district_pop
                                                                                                         Hash Cond: (share0_ref11.district = city_6.district)
                                                                                                         ->  PX Hash 6:6  (slice27; segments: 6)
                                                                                                               Output: share0_ref11.district_pop, share0_ref11.district
                                                                                                               Hash Key: share0_ref11.district
                                                                                                               ->  Result
                                                                                                                     Output: share0_ref11.district_pop, share0_ref11.district
                                                                                                                     ->  Shared Scan (Consumer; slice27; share0)
                                                                                                                           Output: share0_ref11.district_pop, share0_ref11.num_cities, share0_ref11.district, share0_ref11.countrycode, share0_ref11.name
                                                                                                         ->  Hash
                                                                                                               Output: city_6.district
                                                                                                               ->  PX Hash 6:6  (slice28; segments: 6)
                                                                                                                     Output: city_6.district
                                                                                                                     Hash Key: city_6.district
                                                                                                                     ->  Partial Seq Scan on qp_with_clause.city city_6
                                                                                                                           Output: city_6.district
                                                                                                                           Filter: (city_6.countrycode = 'CHN'::bpchar)
                                                                           ->  Materialize
                                                                                 Output: share0_ref10.district_pop, share0_ref10.num_cities, share0_ref10.district, share0_ref10.countrycode, share0_ref10.name
                                                                                 ->  Shared Scan (Consumer; slice6; share0)
                                                                                       Output: share0_ref10.district_pop, share0_ref10.num_cities, share0_ref10.district, share0_ref10.countrycode, share0_ref10.name
                                                                     ->  Hash
                                                                           Output: country_3.code, city_7.name, city_7.population
                                                                           ->  PX Hash 6:6  (slice29; segments: 6)
                                                                                 Output: country_3.code, city_7.name, city_7.population
                                                                                 Hash Key: country_3.code
                                                                                 ->  Hash Join
                                                                                       Output: country_3.code, city_7.name, city_7.population
                                                                                       Hash Cond: (city_7.id = country_3.capital)
                                                                                       ->  PX Hash 6:6  (slice30; segments: 6)
                                                                                             Output: city_7.id, city_7.name, city_7.population
                                                                                             Hash Key: city_7.id
                                                                                             ->  Partial Seq Scan on qp_with_clause.city city_7
                                                                                                   Output: city_7.id, city_7.name, city_7.population
                                                                                       ->  Hash
                                                                                             Output: country_3.code, country_3.capital
                                                                                             ->  PX Hash 6:6  (slice31; segments: 6)
                                                                                                   Output: country_3.code, country_3.capital
                                                                                                   Hash Key: country_3.capital
                                                                                                   ->  Partial Seq Scan on qp_with_clause.country country_3
                                                                                                         Output: country_3.code, country_3.capital
                                 SubPlan 1
                                   ->  Materialize
                                         Output: (avg(share0_ref1.district_pop))
                                         ->  PX Broadcast 1:6  (slice34)
                                               Output: (avg(share0_ref1.district_pop))
                                               ->  Finalize Aggregate
                                                     Output: avg(share0_ref1.district_pop)
                                                     ->  PX Coordinator 6:1  (slice35; segments: 6)
                                                           Output: (PARTIAL avg(share0_ref1.district_pop))
                                                           ->  Partial Aggregate
                                                                 Output: PARTIAL avg(share0_ref1.district_pop)
                                                                 ->  Hash Semi Join
                                                                       Output: share0_ref1.district_pop
                                                                       Hash Cond: (share0_ref1.district = city_8.district)
                                                                       ->  Shared Scan (Consumer; slice35; share0)
                                                                             Output: share0_ref1.district_pop, share0_ref1.num_cities, share0_ref1.district, share0_ref1.countrycode, share0_ref1.name
                                                                       ->  Hash
                                                                             Output: city_8.district
                                                                             ->  PX Broadcast 6:6  (slice36; segments: 6)
                                                                                   Output: city_8.district
                                                                                   ->  Partial Seq Scan on qp_with_clause.city city_8
                                                                                         Output: city_8.district
                                                                                         Filter: (city_8.countrycode = 'AUS'::bpchar)
                           SubPlan 2
                             ->  Materialize
                                   Output: (avg(share0_ref2.district_pop))
                                   ->  PX Broadcast 1:6  (slice37)
                                         Output: (avg(share0_ref2.district_pop))
                                         ->  Finalize Aggregate
                                               Output: avg(share0_ref2.district_pop)
                                               ->  PX Coordinator 6:1  (slice38; segments: 6)
                                                     Output: (PARTIAL avg(share0_ref2.district_pop))
                                                     ->  Partial Aggregate
                                                           Output: PARTIAL avg(share0_ref2.district_pop)
                                                           ->  Hash Semi Join
                                                                 Output: share0_ref2.district_pop
                                                                 Hash Cond: (share0_ref2.district = city_9.district)
                                                                 ->  PX Hash 6:6  (slice39; segments: 6)
                                                                       Output: share0_ref2.district_pop, share0_ref2.district
                                                                       Hash Key: share0_ref2.district
                                                                       ->  Result
                                                                             Output: share0_ref2.district_pop, share0_ref2.district
                                                                             ->  Shared Scan (Consumer; slice39; share0)
                                                                                   Output: share0_ref2.district_pop, share0_ref2.num_cities, share0_ref2.district, share0_ref2.countrycode, share0_ref2.name
                                                                 ->  Hash
                                                                       Output: city_9.district
                                                                       ->  PX Hash 6:6  (slice40; segments: 6)
                                                                             Output: city_9.district
                                                                             Hash Key: city_9.district
                                                                             ->  Partial Seq Scan on qp_with_clause.city city_9
                                                                                   Output: city_9.district
                                                                                   Filter: ((city_9.countrycode = 'USA'::bpchar) OR (city_9.countrycode = 'IND'::bpchar) OR (city_9.countrycode = 'CHN'::bpchar))
 Optimizer: PolarDB PX Optimizer
(328 rows)

-- query8 Use CTE in the select list and the from clause
with official_languages as
(
 select country.code,country.name,countrylanguage.language
 from
 country,countrylanguage
 where country.code = countrylanguage.countrycode and isofficial = 'True'
)
select
( select max(CNT) from (select count(*) CNT from official_languages) FOO	
)
,* from official_languages order by official_languages.code,official_languages.language;
 max | code |                 name                 |    language    
-----+------+--------------------------------------+----------------
 236 | ABW  | Aruba                                | Dutch
 236 | AFG  | Afghanistan                          | Dari
 236 | AFG  | Afghanistan                          | Pashto
 236 | AIA  | Anguilla                             | English
 236 | ALB  | Albania                              | Albaniana
 236 | AND  | Andorra                              | Catalan
 236 | ANT  | Netherlands Antilles                 | Dutch
 236 | ANT  | Netherlands Antilles                 | Papiamento
 236 | ARE  | United Arab Emirates                 | Arabic
 236 | ARG  | Argentina                            | Spanish
 236 | ARM  | Armenia                              | Armenian
 236 | ASM  | American Samoa                       | English
 236 | ASM  | American Samoa                       | Samoan
 236 | ATG  | Antigua and Barbuda                  | English
 236 | AUS  | Australia                            | English
 236 | AUT  | Austria                              | German
 236 | AZE  | Azerbaijan                           | Azerbaijani
 236 | BDI  | Burundi                              | French
 236 | BDI  | Burundi                              | Kirundi
 236 | BEL  | Belgium                              | Dutch
 236 | BEL  | Belgium                              | French
 236 | BEL  | Belgium                              | German
 236 | BGD  | Bangladesh                           | Bengali
 236 | BGR  | Bulgaria                             | Bulgariana
 236 | BHR  | Bahrain                              | Arabic
 236 | BIH  | Bosnia and Herzegovina               | Serbo-Croatian
 236 | BLR  | Belarus                              | Belorussian
 236 | BLR  | Belarus                              | Russian
 236 | BLZ  | Belize                               | English
 236 | BMU  | Bermuda                              | English
 236 | BOL  | Bolivia                              | Aimara
 236 | BOL  | Bolivia                              | Ketdua
 236 | BOL  | Bolivia                              | Spanish
 236 | BRA  | Brazil                               | Portuguese
 236 | BRB  | Barbados                             | English
 236 | BRN  | Brunei                               | Malay
 236 | BTN  | Bhutan                               | Dzongkha
 236 | CAN  | Canada                               | English
 236 | CAN  | Canada                               | French
 236 | CCK  | Cocos (Keeling) Islands              | English
 236 | CHE  | Switzerland                          | French
 236 | CHE  | Switzerland                          | German
 236 | CHE  | Switzerland                          | Italian
 236 | CHE  | Switzerland                          | Romansh
 236 | CHL  | Chile                                | Spanish
 236 | CHN  | China                                | Chinese
 236 | COK  | Cook Islands                         | Maori
 236 | COL  | Colombia                             | Spanish
 236 | COM  | Comoros                              | Comorian
 236 | CPV  | Cape Verde                           | Portuguese
 236 | CRI  | Costa Rica                           | Spanish
 236 | CUB  | Cuba                                 | Spanish
 236 | CXR  | Christmas Island                     | English
 236 | CYM  | Cayman Islands                       | English
 236 | CYP  | Cyprus                               | Greek
 236 | CYP  | Cyprus                               | Turkish
 236 | CZE  | Czech Republic                       | Czech
 236 | DEU  | Germany                              | German
 236 | DJI  | Djibouti                             | Arabic
 236 | DNK  | Denmark                              | Danish
 236 | DOM  | Dominican Republic                   | Spanish
 236 | DZA  | Algeria                              | Arabic
 236 | ECU  | Ecuador                              | Spanish
 236 | EGY  | Egypt                                | Arabic
 236 | ERI  | Eritrea                              | Tigrinja
 236 | ESH  | Western Sahara                       | Arabic
 236 | ESP  | Spain                                | Spanish
 236 | EST  | Estonia                              | Estonian
 236 | FIN  | Finland                              | Finnish
 236 | FIN  | Finland                              | Swedish
 236 | FJI  | Fiji Islands                         | Fijian
 236 | FLK  | Falkland Islands                     | English
 236 | FRA  | France                               | French
 236 | FRO  | Faroe Islands                        | Danish
 236 | FRO  | Faroe Islands                        | Faroese
 236 | GBR  | United Kingdom                       | English
 236 | GEO  | Georgia                              | Georgiana
 236 | GIB  | Gibraltar                            | English
 236 | GLP  | Guadeloupe                           | French
 236 | GNB  | Guinea-Bissau                        | Portuguese
 236 | GRC  | Greece                               | Greek
 236 | GRL  | Greenland                            | Danish
 236 | GRL  | Greenland                            | Greenlandic
 236 | GTM  | Guatemala                            | Spanish
 236 | GUM  | Guam                                 | Chamorro
 236 | GUM  | Guam                                 | English
 236 | HND  | Honduras                             | Spanish
 236 | HRV  | Croatia                              | Serbo-Croatian
 236 | HTI  | Haiti                                | French
 236 | HUN  | Hungary                              | Hungarian
 236 | IDN  | Indonesia                            | Malay
 236 | IND  | India                                | Hindi
 236 | IRL  | Ireland                              | English
 236 | IRL  | Ireland                              | Irish
 236 | IRN  | Iran                                 | Persian
 236 | IRQ  | Iraq                                 | Arabic
 236 | ISL  | Iceland                              | Icelandic
 236 | ISR  | Israel                               | Arabic
 236 | ISR  | Israel                               | Hebrew
 236 | ITA  | Italy                                | Italian
 236 | JOR  | Jordan                               | Arabic
 236 | JPN  | Japan                                | Japanese
 236 | KAZ  | Kazakstan                            | Kazakh
 236 | KGZ  | Kyrgyzstan                           | Kirgiz
 236 | KGZ  | Kyrgyzstan                           | Russian
 236 | KHM  | Cambodia                             | Khmer
 236 | KIR  | Kiribati                             | Kiribati
 236 | KNA  | Saint Kitts and Nevis                | English
 236 | KOR  | South Korea                          | Korean
 236 | KWT  | Kuwait                               | Arabic
 236 | LAO  | Laos                                 | Lao
 236 | LBN  | Lebanon                              | Arabic
 236 | LBY  | Libyan Arab Jamahiriya               | Arabic
 236 | LCA  | Saint Lucia                          | English
 236 | LIE  | Liechtenstein                        | German
 236 | LKA  | Sri Lanka                            | Singali
 236 | LKA  | Sri Lanka                            | Tamil
 236 | LSO  | Lesotho                              | English
 236 | LSO  | Lesotho                              | Sotho
 236 | LTU  | Lithuania                            | Lithuanian
 236 | LUX  | Luxembourg                           | French
 236 | LUX  | Luxembourg                           | German
 236 | LUX  | Luxembourg                           | Luxembourgish
 236 | LVA  | Latvia                               | Latvian
 236 | MAC  | Macao                                | Portuguese
 236 | MAR  | Morocco                              | Arabic
 236 | MCO  | Monaco                               | French
 236 | MDA  | Moldova                              | Romanian
 236 | MDG  | Madagascar                           | French
 236 | MDG  | Madagascar                           | Malagasy
 236 | MDV  | Maldives                             | Dhivehi
 236 | MEX  | Mexico                               | Spanish
 236 | MHL  | Marshall Islands                     | English
 236 | MHL  | Marshall Islands                     | Marshallese
 236 | MKD  | Macedonia                            | Macedonian
 236 | MLT  | Malta                                | English
 236 | MLT  | Malta                                | Maltese
 236 | MMR  | Myanmar                              | Burmese
 236 | MNG  | Mongolia                             | Mongolian
 236 | MNP  | Northern Mariana Islands             | English
 236 | MSR  | Montserrat                           | English
 236 | MTQ  | Martinique                           | French
 236 | MWI  | Malawi                               | Chichewa
 236 | MYS  | Malaysia                             | Malay
 236 | MYT  | Mayotte                              | French
 236 | NCL  | New Caledonia                        | French
 236 | NFK  | Norfolk Island                       | English
 236 | NIC  | Nicaragua                            | Spanish
 236 | NIU  | Niue                                 | English
 236 | NLD  | Netherlands                          | Dutch
 236 | NOR  | Norway                               | Norwegian
 236 | NPL  | Nepal                                | Nepali
 236 | NRU  | Nauru                                | English
 236 | NRU  | Nauru                                | Nauru
 236 | NZL  | New Zealand                          | English
 236 | OMN  | Oman                                 | Arabic
 236 | PAK  | Pakistan                             | Urdu
 236 | PAN  | Panama                               | Spanish
 236 | PER  | Peru                                 | Aimara
 236 | PER  | Peru                                 | Ketdua
 236 | PER  | Peru                                 | Spanish
 236 | PHL  | Philippines                          | Pilipino
 236 | PLW  | Palau                                | English
 236 | PLW  | Palau                                | Palau
 236 | POL  | Poland                               | Polish
 236 | PRI  | Puerto Rico                          | Spanish
 236 | PRK  | North Korea                          | Korean
 236 | PRT  | Portugal                             | Portuguese
 236 | PRY  | Paraguay                             | Guarani
 236 | PRY  | Paraguay                             | Spanish
 236 | PYF  | French Polynesia                     | French
 236 | QAT  | Qatar                                | Arabic
 236 | ROM  | Romania                              | Romani
 236 | ROM  | Romania                              | Romanian
 236 | RUS  | Russian Federation                   | Russian
 236 | RWA  | Rwanda                               | French
 236 | RWA  | Rwanda                               | Rwanda
 236 | SAU  | Saudi Arabia                         | Arabic
 236 | SDN  | Sudan                                | Arabic
 236 | SEN  | Senegal                              | Wolof
 236 | SGP  | Singapore                            | Chinese
 236 | SGP  | Singapore                            | Malay
 236 | SGP  | Singapore                            | Tamil
 236 | SHN  | Saint Helena                         | English
 236 | SJM  | Svalbard and Jan Mayen               | Norwegian
 236 | SLV  | El Salvador                          | Spanish
 236 | SMR  | San Marino                           | Italian
 236 | SOM  | Somalia                              | Arabic
 236 | SOM  | Somalia                              | Somali
 236 | SPM  | Saint Pierre and Miquelon            | French
 236 | SVK  | Slovakia                             | Slovak
 236 | SVN  | Slovenia                             | Slovene
 236 | SWE  | Sweden                               | Swedish
 236 | SWZ  | Swaziland                            | Swazi
 236 | SYC  | Seychelles                           | English
 236 | SYC  | Seychelles                           | French
 236 | SYR  | Syria                                | Arabic
 236 | TCA  | Turks and Caicos Islands             | English
 236 | TCD  | Chad                                 | Arabic
 236 | TGO  | Togo                                 | Ewe
 236 | TGO  | Togo                                 | Kabye
 236 | THA  | Thailand                             | Thai
 236 | TJK  | Tajikistan                           | Tadzhik
 236 | TKL  | Tokelau                              | English
 236 | TKM  | Turkmenistan                         | Turkmenian
 236 | TMP  | East Timor                           | Portuguese
 236 | TON  | Tonga                                | English
 236 | TON  | Tonga                                | Tongan
 236 | TUN  | Tunisia                              | Arabic
 236 | TUR  | Turkey                               | Turkish
 236 | TUV  | Tuvalu                               | English
 236 | TUV  | Tuvalu                               | Tuvalu
 236 | TZA  | Tanzania                             | Swahili
 236 | UKR  | Ukraine                              | Ukrainian
 236 | UMI  | United States Minor Outlying Islands | English
 236 | URY  | Uruguay                              | Spanish
 236 | USA  | United States                        | English
 236 | UZB  | Uzbekistan                           | Uzbek
 236 | VAT  | Holy See (Vatican City State)        | Italian
 236 | VCT  | Saint Vincent and the Grenadines     | English
 236 | VEN  | Venezuela                            | Spanish
 236 | VGB  | Virgin Islands, British              | English
 236 | VIR  | Virgin Islands, U.S.                 | English
 236 | VNM  | Vietnam                              | Vietnamese
 236 | VUT  | Vanuatu                              | Bislama
 236 | VUT  | Vanuatu                              | English
 236 | VUT  | Vanuatu                              | French
 236 | WSM  | Samoa                                | English
 236 | WSM  | Samoa                                | Samoan
 236 | YEM  | Yemen                                | Arabic
 236 | YUG  | Yugoslavia                           | Serbo-Croatian
 236 | ZAF  | South Africa                         | Afrikaans
 236 | ZAF  | South Africa                         | English
 236 | ZAF  | South Africa                         | Xhosa
 236 | ZAF  | South Africa                         | Zulu
 236 | ZWE  | Zimbabwe                             | English
(236 rows)

                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (max((count()))), share0_ref3.code, share0_ref3.name, share0_ref3.language
   Merge Key: share0_ref3.code, share0_ref3.language
   ->  Sequence
         Output: (max((count()))), share0_ref3.code, share0_ref3.name, share0_ref3.language
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.code, share0_ref1.name, share0_ref1.language
               ->  Hash Join
                     Output: country.code, country.name, countrylanguage.language
                     Hash Cond: (country.code = countrylanguage.countrycode)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: country.code, country.name
                           Hash Key: country.code
                           ->  Partial Seq Scan on qp_with_clause.country
                                 Output: country.code, country.name
                     ->  Hash
                           Output: countrylanguage.countrycode, countrylanguage.language
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: countrylanguage.countrycode, countrylanguage.language
                                 Hash Key: countrylanguage.countrycode
                                 ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                       Output: countrylanguage.countrycode, countrylanguage.language
                                       Filter: countrylanguage.isofficial
         ->  Result
               Output: (max((count()))), share0_ref3.code, share0_ref3.name, share0_ref3.language
               ->  Sort
                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.language, (max((count())))
                     Sort Key: share0_ref3.code, share0_ref3.language
                     ->  Nested Loop Left Join
                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.language, (max((count())))
                           Join Filter: true
                           ->  Shared Scan (Producer; slice1; share0)
                                 Output: share0_ref3.code, share0_ref3.name, share0_ref3.language
                           ->  Materialize
                                 Output: (max((count())))
                                 ->  PX Broadcast 1:6  (slice4)
                                       Output: (max((count())))
                                       ->  Aggregate
                                             Output: max((count()))
                                             ->  Finalize Aggregate
                                                   Output: count()
                                                   ->  PX Coordinator 6:1  (slice5; segments: 6)
                                                         Output: (PARTIAL count())
                                                         ->  Partial Aggregate
                                                               Output: PARTIAL count()
                                                               ->  Shared Scan (Consumer; slice5; share0)
                                                                     Output: share0_ref2.code, share0_ref2.name, share0_ref2.language
 Optimizer: PolarDB PX Optimizer
(48 rows)

-- queries with CTEs using index scans 
set enable_seqscan=off;
set enable_indexscan=on;
--query1
with capitals as 
(select country.code,id,city.name from city,country 
 where city.countrycode = country.code AND city.id = country.capital) 
select * from 
capitals,countrylanguage
where capitals.code = countrylanguage.countrycode and isofficial='true'
order by capitals.code,countrylanguage.language;
 code |  id  |               name                | countrycode |    language    | isofficial | percentage 
------+------+-----------------------------------+-------------+----------------+------------+------------
 ABW  |  129 | Oranjestad                        | ABW         | Dutch          | t          |        5.3
 AFG  |    1 | Kabul                             | AFG         | Dari           | t          |       32.1
 AFG  |    1 | Kabul                             | AFG         | Pashto         | t          |       52.4
 AIA  |   62 | The Valley                        | AIA         | English        | t          |          0
 ALB  |   34 | Tirana                            | ALB         | Albaniana      | t          |       97.9
 AND  |   55 | Andorra la Vella                  | AND         | Catalan        | t          |       32.3
 ANT  |   33 | Willemstad                        | ANT         | Dutch          | t          |          0
 ANT  |   33 | Willemstad                        | ANT         | Papiamento     | t          |       86.2
 ARE  |   65 | Abu Dhabi                         | ARE         | Arabic         | t          |         42
 ARG  |   69 | Buenos Aires                      | ARG         | Spanish        | t          |       96.8
 ARM  |  126 | Yerevan                           | ARM         | Armenian       | t          |       93.4
 ASM  |   54 | Fagatogo                          | ASM         | English        | t          |        3.1
 ASM  |   54 | Fagatogo                          | ASM         | Samoan         | t          |       90.6
 ATG  |   63 | Saint Johns                       | ATG         | English        | t          |          0
 AUS  |  135 | Canberra                          | AUS         | English        | t          |       81.2
 AUT  | 1523 | Wien                              | AUT         | German         | t          |         92
 AZE  |  144 | Baku                              | AZE         | Azerbaijani    | t          |         89
 BDI  |  552 | Bujumbura                         | BDI         | French         | t          |          0
 BDI  |  552 | Bujumbura                         | BDI         | Kirundi        | t          |       98.1
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | Dutch          | t          |       59.2
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | French         | t          |       32.6
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | German         | t          |          1
 BGD  |  150 | Dhaka                             | BGD         | Bengali        | t          |       97.7
 BGR  |  539 | Sofija                            | BGR         | Bulgariana     | t          |       83.2
 BHR  |  149 | al-Manama                         | BHR         | Arabic         | t          |       67.7
 BIH  |  201 | Sarajevo                          | BIH         | Serbo-Croatian | t          |       99.2
 BLR  | 3520 | Minsk                             | BLR         | Belorussian    | t          |       65.6
 BLR  | 3520 | Minsk                             | BLR         | Russian        | t          |         32
 BLZ  |  185 | Belmopan                          | BLZ         | English        | t          |       50.8
 BMU  |  191 | Hamilton                          | BMU         | English        | t          |        100
 BOL  |  194 | La Paz                            | BOL         | Aimara         | t          |        3.2
 BOL  |  194 | La Paz                            | BOL         | Ketdua         | t          |        8.1
 BOL  |  194 | La Paz                            | BOL         | Spanish        | t          |       87.7
 BRA  |  211 | Brasilia                          | BRA         | Portuguese     | t          |       97.5
 BRB  |  174 | Bridgetown                        | BRB         | English        | t          |          0
 BRN  |  538 | Bandar Seri Begawan               | BRN         | Malay          | t          |       45.5
 BTN  |  192 | Thimphu                           | BTN         | Dzongkha       | t          |         50
 CAN  | 1822 | Ottawa                            | CAN         | English        | t          |       60.4
 CAN  | 1822 | Ottawa                            | CAN         | French         | t          |       23.4
 CCK  | 2317 | West Island                       | CCK         | English        | t          |          0
 CHE  | 3248 | Bern                              | CHE         | French         | t          |       19.2
 CHE  | 3248 | Bern                              | CHE         | German         | t          |       63.6
 CHE  | 3248 | Bern                              | CHE         | Italian        | t          |        7.7
 CHE  | 3248 | Bern                              | CHE         | Romansh        | t          |        0.6
 CHL  |  554 | Santiago de Chile                 | CHL         | Spanish        | t          |       89.7
 CHN  | 1891 | Peking                            | CHN         | Chinese        | t          |         92
 COK  |  583 | Avarua                            | COK         | Maori          | t          |          0
 COL  | 2257 | Santafe de Bogota                 | COL         | Spanish        | t          |         99
 COM  | 2295 | Moroni                            | COM         | Comorian       | t          |         75
 CPV  | 1859 | Praia                             | CPV         | Portuguese     | t          |          0
 CRI  |  584 | San Jose                          | CRI         | Spanish        | t          |       97.5
 CUB  | 2413 | La Habana                         | CUB         | Spanish        | t          |        100
 CXR  | 1791 | Flying Fish Cove                  | CXR         | English        | t          |          0
 CYM  |  553 | George Town                       | CYM         | English        | t          |          0
 CYP  | 2430 | Nicosia                           | CYP         | Greek          | t          |       74.1
 CYP  | 2430 | Nicosia                           | CYP         | Turkish        | t          |       22.4
 CZE  | 3339 | Praha                             | CZE         | Czech          | t          |       81.2
 DEU  | 3068 | Berlin                            | DEU         | German         | t          |       91.3
 DJI  |  585 | Djibouti                          | DJI         | Arabic         | t          |       10.6
 DNK  | 3315 | Kobenhavn                         | DNK         | Danish         | t          |       93.5
 DOM  |  587 | Santo Domingo de Guzman           | DOM         | Spanish        | t          |         98
 DZA  |   35 | Alger                             | DZA         | Arabic         | t          |         86
 ECU  |  594 | Quito                             | ECU         | Spanish        | t          |         93
 EGY  |  608 | Cairo                             | EGY         | Arabic         | t          |       98.8
 ERI  |  652 | Asmara                            | ERI         | Tigrinja       | t          |       49.1
 ESH  | 2453 | El-Aaiun                          | ESH         | Arabic         | t          |        100
 ESP  |  653 | Madrid                            | ESP         | Spanish        | t          |       74.4
 EST  | 3791 | Tallinn                           | EST         | Estonian       | t          |       65.3
 FIN  | 3236 | Helsinki [Helsingfors]            | FIN         | Finnish        | t          |       92.7
 FIN  | 3236 | Helsinki [Helsingfors]            | FIN         | Swedish        | t          |        5.7
 FJI  |  764 | Suva                              | FJI         | Fijian         | t          |       50.8
 FLK  |  763 | Stanley                           | FLK         | English        | t          |          0
 FRA  | 2974 | Paris                             | FRA         | French         | t          |       93.6
 FRO  |  901 | Torshavn                          | FRO         | Danish         | t          |          0
 FRO  |  901 | Torshavn                          | FRO         | Faroese        | t          |        100
 GBR  |  456 | London                            | GBR         | English        | t          |       97.3
 GEO  |  905 | Tbilisi                           | GEO         | Georgiana      | t          |       71.7
 GIB  |  915 | Gibraltar                         | GIB         | English        | t          |       88.9
 GLP  |  919 | Basse-Terre                       | GLP         | French         | t          |          0
 GNB  |  927 | Bissau                            | GNB         | Portuguese     | t          |        8.1
 GRC  | 2401 | Athenai                           | GRC         | Greek          | t          |       98.5
 GRL  |  917 | Nuuk                              | GRL         | Danish         | t          |       12.5
 GRL  |  917 | Nuuk                              | GRL         | Greenlandic    | t          |       87.5
 GTM  |  922 | Ciudad de Guatemala               | GTM         | Spanish        | t          |       64.7
 GUM  |  921 | Agaaa                             | GUM         | Chamorro       | t          |       29.6
 GUM  |  921 | Agaaa                             | GUM         | English        | t          |       37.5
 HND  |  933 | Tegucigalpa                       | HND         | Spanish        | t          |       97.2
 HRV  | 2409 | Zagreb                            | HRV         | Serbo-Croatian | t          |       95.9
 HTI  |  929 | Port-au-Prince                    | HTI         | French         | t          |          0
 HUN  | 3483 | Budapest                          | HUN         | Hungarian      | t          |       98.5
 IDN  |  939 | Jakarta                           | IDN         | Malay          | t          |       12.1
 IND  | 1109 | New Delhi                         | IND         | Hindi          | t          |       39.9
 IRL  | 1447 | Dublin                            | IRL         | English        | t          |       98.4
 IRL  | 1447 | Dublin                            | IRL         | Irish          | t          |        1.6
 IRN  | 1380 | Teheran                           | IRN         | Persian        | t          |       45.7
 IRQ  | 1365 | Baghdad                           | IRQ         | Arabic         | t          |       77.2
 ISL  | 1449 | Reykjavik                         | ISL         | Icelandic      | t          |       95.7
 ISR  | 1450 | Jerusalem                         | ISR         | Arabic         | t          |         18
 ISR  | 1450 | Jerusalem                         | ISR         | Hebrew         | t          |       63.1
 ITA  | 1464 | Roma                              | ITA         | Italian        | t          |       94.1
 JOR  | 1786 | Amman                             | JOR         | Arabic         | t          |       97.9
 JPN  | 1532 | Tokyo                             | JPN         | Japanese       | t          |       99.1
 KAZ  | 1864 | Astana                            | KAZ         | Kazakh         | t          |         46
 KGZ  | 2253 | Bishkek                           | KGZ         | Kirgiz         | t          |       59.7
 KGZ  | 2253 | Bishkek                           | KGZ         | Russian        | t          |       16.2
 KHM  | 1800 | Phnom Penh                        | KHM         | Khmer          | t          |       88.6
 KIR  | 2256 | Bairiki                           | KIR         | Kiribati       | t          |       98.9
 KNA  | 3064 | Basseterre                        | KNA         | English        | t          |          0
 KOR  | 2331 | Seoul                             | KOR         | Korean         | t          |       99.9
 KWT  | 2429 | Kuwait                            | KWT         | Arabic         | t          |       78.1
 LAO  | 2432 | Vientiane                         | LAO         | Lao            | t          |       67.2
 LBN  | 2438 | Beirut                            | LBN         | Arabic         | t          |         93
 LBY  | 2441 | Tripoli                           | LBY         | Arabic         | t          |         96
 LCA  | 3065 | Castries                          | LCA         | English        | t          |         20
 LIE  | 2446 | Vaduz                             | LIE         | German         | t          |         89
 LKA  | 3217 | Colombo                           | LKA         | Singali        | t          |       60.3
 LKA  | 3217 | Colombo                           | LKA         | Tamil          | t          |       19.6
 LSO  | 2437 | Maseru                            | LSO         | English        | t          |          0
 LSO  | 2437 | Maseru                            | LSO         | Sotho          | t          |         85
 LTU  | 2447 | Vilnius                           | LTU         | Lithuanian     | t          |       81.6
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | French         | t          |        4.2
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | German         | t          |        2.3
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | Luxembourgish  | t          |       64.4
 LVA  | 2434 | Riga                              | LVA         | Latvian        | t          |       55.1
 MAC  | 2454 | Macao                             | MAC         | Portuguese     | t          |        2.3
 MAR  | 2486 | Rabat                             | MAR         | Arabic         | t          |         65
 MCO  | 2695 | Monaco-Ville                      | MCO         | French         | t          |       41.9
 MDA  | 2690 | Chisinau                          | MDA         | Romanian       | t          |       61.9
 MDG  | 2455 | Antananarivo                      | MDG         | French         | t          |          0
 MDG  | 2455 | Antananarivo                      | MDG         | Malagasy       | t          |       98.9
 MDV  | 2463 | Male                              | MDV         | Dhivehi        | t          |        100
 MEX  | 2515 | Ciudad de Mexico                  | MEX         | Spanish        | t          |       92.1
 MHL  | 2507 | Dalap-Uliga-Darrit                | MHL         | English        | t          |          0
 MHL  | 2507 | Dalap-Uliga-Darrit                | MHL         | Marshallese    | t          |       96.8
 MKD  | 2460 | Skopje                            | MKD         | Macedonian     | t          |       66.5
 MLT  | 2484 | Valletta                          | MLT         | English        | t          |        2.1
 MLT  | 2484 | Valletta                          | MLT         | Maltese        | t          |       95.8
 MMR  | 2710 | Rangoon (Yangon)                  | MMR         | Burmese        | t          |         69
 MNG  | 2696 | Ulan Bator                        | MNG         | Mongolian      | t          |       78.8
 MNP  | 2913 | Garapan                           | MNP         | English        | t          |        4.8
 MSR  | 2697 | Plymouth                          | MSR         | English        | t          |          0
 MTQ  | 2508 | Fort-de-France                    | MTQ         | French         | t          |          0
 MWI  | 2462 | Lilongwe                          | MWI         | Chichewa       | t          |       58.3
 MYS  | 2464 | Kuala Lumpur                      | MYS         | Malay          | t          |       58.4
 MYT  | 2514 | Mamoutzou                         | MYT         | French         | t          |       20.3
 NCL  | 3493 | Noumea                            | NCL         | French         | t          |       34.3
 NFK  | 2806 | Kingston                          | NFK         | English        | t          |          0
 NIC  | 2734 | Managua                           | NIC         | Spanish        | t          |       97.6
 NIU  | 2805 | Alofi                             | NIU         | English        | t          |          0
 NLD  |    5 | Amsterdam                         | NLD         | Dutch          | t          |       95.6
 NOR  | 2807 | Oslo                              | NOR         | Norwegian      | t          |       96.6
 NPL  | 2729 | Kathmandu                         | NPL         | Nepali         | t          |       50.4
 NRU  | 2728 | Yaren                             | NRU         | English        | t          |        7.5
 NRU  | 2728 | Yaren                             | NRU         | Nauru          | t          |       57.5
 NZL  | 3499 | Wellington                        | NZL         | English        | t          |         87
 OMN  | 2821 | Masqat                            | OMN         | Arabic         | t          |       76.7
 PAK  | 2831 | Islamabad                         | PAK         | Urdu           | t          |        7.6
 PAN  | 2882 | Ciudad de Panama                  | PAN         | Spanish        | t          |       76.8
 PER  | 2890 | Lima                              | PER         | Aimara         | t          |        2.3
 PER  | 2890 | Lima                              | PER         | Ketdua         | t          |       16.4
 PER  | 2890 | Lima                              | PER         | Spanish        | t          |       79.8
 PHL  |  766 | Manila                            | PHL         | Pilipino       | t          |       29.3
 PLW  | 2881 | Koror                             | PLW         | English        | t          |        3.2
 PLW  | 2881 | Koror                             | PLW         | Palau          | t          |       82.2
 POL  | 2928 | Warszawa                          | POL         | Polish         | t          |       97.6
 PRI  | 2919 | San Juan                          | PRI         | Spanish        | t          |       51.3
 PRK  | 2318 | Pyongyang                         | PRK         | Korean         | t          |       99.9
 PRT  | 2914 | Lisboa                            | PRT         | Portuguese     | t          |         99
 PRY  | 2885 | Asuncion                          | PRY         | Guarani        | t          |       40.1
 PRY  | 2885 | Asuncion                          | PRY         | Spanish        | t          |       55.1
 PYF  | 3016 | Papeete                           | PYF         | French         | t          |       40.8
 QAT  | 2973 | Doha                              | QAT         | Arabic         | t          |       40.7
 ROM  | 3018 | Bucuresti                         | ROM         | Romani         | t          |        0.7
 ROM  | 3018 | Bucuresti                         | ROM         | Romanian       | t          |       90.7
 RUS  | 3580 | Moscow                            | RUS         | Russian        | t          |       86.6
 RWA  | 3047 | Kigali                            | RWA         | French         | t          |          0
 RWA  | 3047 | Kigali                            | RWA         | Rwanda         | t          |        100
 SAU  | 3173 | Riyadh                            | SAU         | Arabic         | t          |         95
 SDN  | 3225 | Khartum                           | SDN         | Arabic         | t          |       49.4
 SEN  | 3198 | Dakar                             | SEN         | Wolof          | t          |       48.1
 SGP  | 3208 | Singapore                         | SGP         | Chinese        | t          |       77.1
 SGP  | 3208 | Singapore                         | SGP         | Malay          | t          |       14.1
 SGP  | 3208 | Singapore                         | SGP         | Tamil          | t          |        7.4
 SHN  | 3063 | Jamestown                         | SHN         | English        | t          |          0
 SJM  |  938 | Longyearbyen                      | SJM         | Norwegian      | t          |          0
 SLV  |  645 | San Salvador                      | SLV         | Spanish        | t          |        100
 SMR  | 3171 | San Marino                        | SMR         | Italian        | t          |        100
 SOM  | 3214 | Mogadishu                         | SOM         | Arabic         | t          |          0
 SOM  | 3214 | Mogadishu                         | SOM         | Somali         | t          |       98.3
 SPM  | 3067 | Saint-Pierre                      | SPM         | French         | t          |          0
 SVK  | 3209 | Bratislava                        | SVK         | Slovak         | t          |       85.6
 SVN  | 3212 | Ljubljana                         | SVN         | Slovene        | t          |       87.9
 SWE  | 3048 | Stockholm                         | SWE         | Swedish        | t          |       89.5
 SWZ  | 3244 | Mbabane                           | SWZ         | Swazi          | t          |       89.9
 SYC  | 3206 | Victoria                          | SYC         | English        | t          |        3.8
 SYC  | 3206 | Victoria                          | SYC         | French         | t          |        1.3
 SYR  | 3250 | Damascus                          | SYR         | Arabic         | t          |         90
 TCA  | 3423 | Cockburn Town                     | TCA         | English        | t          |          0
 TCD  | 3337 | NDjamena                          | TCD         | Arabic         | t          |       12.3
 TGO  | 3332 | Lome                              | TGO         | Ewe            | t          |       23.2
 TGO  | 3332 | Lome                              | TGO         | Kabye          | t          |       13.8
 THA  | 3320 | Bangkok                           | THA         | Thai           | t          |       52.6
 TJK  | 3261 | Dushanbe                          | TJK         | Tadzhik        | t          |       62.2
 TKL  | 3333 | Fakaofo                           | TKL         | English        | t          |          0
 TKM  | 3419 | Ashgabat                          | TKM         | Turkmenian     | t          |       76.7
 TMP  | 1522 | Dili                              | TMP         | Portuguese     | t          |          0
 TON  | 3334 | Nukualofa                         | TON         | English        | t          |          0
 TON  | 3334 | Nukualofa                         | TON         | Tongan         | t          |       98.3
 TUN  | 3349 | Tunis                             | TUN         | Arabic         | t          |       69.9
 TUR  | 3358 | Ankara                            | TUR         | Turkish        | t          |       87.6
 TUV  | 3424 | Funafuti                          | TUV         | English        | t          |          0
 TUV  | 3424 | Funafuti                          | TUV         | Tuvalu         | t          |       92.5
 TZA  | 3306 | Dodoma                            | TZA         | Swahili        | t          |        8.8
 UKR  | 3426 | Kyiv                              | UKR         | Ukrainian      | t          |       64.7
 URY  | 3492 | Montevideo                        | URY         | Spanish        | t          |       95.7
 USA  | 3813 | Washington                        | USA         | English        | t          |       86.2
 UZB  | 3503 | Toskent                           | UZB         | Uzbek          | t          |       72.6
 VAT  | 3538 | Citta del Vaticano                | VAT         | Italian        | t          |          0
 VCT  | 3066 | Kingstown                         | VCT         | English        | t          |          0
 VEN  | 3539 | Caracas                           | VEN         | Spanish        | t          |       96.9
 VGB  |  537 | Road Town                         | VGB         | English        | t          |          0
 VIR  | 4067 | Charlotte Amalie                  | VIR         | English        | t          |       81.7
 VNM  | 3770 | Hanoi                             | VNM         | Vietnamese     | t          |       86.8
 VUT  | 3537 | Port-Vila                         | VUT         | Bislama        | t          |       56.6
 VUT  | 3537 | Port-Vila                         | VUT         | English        | t          |       28.3
 VUT  | 3537 | Port-Vila                         | VUT         | French         | t          |       14.2
 WSM  | 3169 | Apia                              | WSM         | English        | t          |        0.6
 WSM  | 3169 | Apia                              | WSM         | Samoan         | t          |       47.5
 YEM  | 1780 | Sanaa                             | YEM         | Arabic         | t          |       99.6
 YUG  | 1792 | Beograd                           | YUG         | Serbo-Croatian | t          |       75.2
 ZAF  |  716 | Pretoria                          | ZAF         | Afrikaans      | t          |       14.3
 ZAF  |  716 | Pretoria                          | ZAF         | English        | t          |        8.5
 ZAF  |  716 | Pretoria                          | ZAF         | Xhosa          | t          |       17.7
 ZAF  |  716 | Pretoria                          | ZAF         | Zulu           | t          |       22.7
 ZWE  | 4068 | Harare                            | ZWE         | English        | t          |        2.2
(235 rows)

                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
   Merge Key: country.code, countrylanguage.language
   ->  Sort
         Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
         Sort Key: country.code, countrylanguage.language
         ->  Sort
               Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
               Sort Key: country.code, countrylanguage.language
               ->  Hash Join
                     Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           Hash Key: countrylanguage.countrycode
                           ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                 Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                 Filter: countrylanguage.isofficial
                     ->  Hash
                           Output: country.code, city.id, city.name
                           ->  Hash Join
                                 Output: country.code, city.id, city.name
                                 Hash Cond: ((city.countrycode = country.code) AND (city.id = country.capital))
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: city.id, city.name, city.countrycode
                                       Hash Key: city.countrycode
                                       ->  Partial Seq Scan on qp_with_clause.city
                                             Output: city.id, city.name, city.countrycode
                                 ->  Hash
                                       Output: country.code, country.capital
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: country.code, country.capital
                                             Hash Key: country.code
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.capital
 Optimizer: PolarDB PX Optimizer
(36 rows)

--query2
with lang_total as
( select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code)
 
select lang_count,country.code,country.name,country.continent,country.region,country.population
 from country left outer join lang_total
 on (lang_total.code = country.code)
 where country.indepyear > 1970 and lang_total.lang_count >=1 and lang_total.lang_count >=1
  order by lang_total.lang_count desc;
 lang_count | code |              name               | continent |     region      | population 
------------+------+---------------------------------+-----------+-----------------+------------
         12 | RUS  | Russian Federation              | Europe    | Eastern Europe  |  146934000
          6 | FSM  | Micronesia, Federated States of | Oceania   | Micronesia      |     119000
          4 | AZE  | Azerbaijan                      | Asia      | Middle East     |    7734000
          1 | BIH  | Bosnia and Herzegovina          | Europe    | Southern Europe |    3972000
(4 rows)

                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
   Merge Key: (count())
   ->  Sort
         Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
         Sort Key: (count()) DESC
         ->  Sort
               Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
               Sort Key: (count()) DESC
               ->  Nested Loop
                     Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
                     Join Filter: true
                     ->  PX Broadcast 6:6  (slice2; segments: 6)
                           Output: (count()), country.code
                           ->  Result
                                 Output: (count()), country.code
                                 Filter: (((count()) >= 1) AND (country.code = countrylanguage.countrycode))
                                 ->  GroupAggregate
                                       Output: count(), country.code, countrylanguage.countrycode
                                       Group Key: country.code, countrylanguage.countrycode
                                       ->  Sort
                                             Output: country.code, countrylanguage.countrycode
                                             Sort Key: country.code, countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice3; segments: 6)
                                                   Output: country.code, countrylanguage.countrycode
                                                   Hash Key: country.code, countrylanguage.countrycode
                                                   ->  Nested Loop
                                                         Output: country.code, countrylanguage.countrycode
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                               Output: country.code
                                                               ->  Partial Seq Scan on qp_with_clause.country
                                                                     Output: country.code
                                                                     Filter: (country.governmentform = 'Federal Republic'::text)
                                                         ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage
                                                               Output: countrylanguage.countrycode
                                                               Index Cond: (countrylanguage.countrycode = country.code)
                     ->  Partial Index Scan using country_pkey on qp_with_clause.country country_1
                           Output: country_1.code, country_1.name, country_1.continent, country_1.region, country_1.indepyear, country_1.population
                           Index Cond: (country_1.code = country.code)
                           Filter: (country_1.indepyear > 1970)
 Optimizer: PolarDB PX Optimizer
(42 rows)

-- Using CTE in the WHERE clause
--query3
with lang_total as
( select lang_count,countrycode from
  (
  (
   select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code)
 
   UNION ALL
 
  (
   select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Monarchy')
  group by country.code,countrylanguage.countrycode order by country.code)
 
 ) FOO1
)
select * from
(
select count(*) as cnt,country.code,country.name 
from
country,countrylanguage
where country.code=countrylanguage.countrycode group by country.code,country.name) AS FOO
where foo.cnt = (select max(lang_count) from lang_total) order by foo.code;
 cnt | code |        name        
-----+------+--------------------
  12 | CAN  | Canada
  12 | CHN  | China
  12 | IND  | India
  12 | RUS  | Russian Federation
  12 | USA  | United States
(5 rows)

                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (count()), country.code, country.name
   Merge Key: country.code
   ->  Sort
         Output: (count()), country.code, country.name
         Sort Key: country.code
         ->  Sort
               Output: (count()), country.code, country.name
               Sort Key: country.code
               ->  Hash Join
                     Output: (count()), country.code, country.name
                     Hash Cond: ((count()) = (max((count()))))
                     ->  HashAggregate
                           Output: count(), country.code, country.name
                           Group Key: country.code, country.name
                           ->  Hash Join
                                 Output: country.code, country.name
                                 Hash Cond: (country.code = countrylanguage.countrycode)
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: country.code, country.name
                                       Hash Key: country.code
                                       ->  Partial Seq Scan on qp_with_clause.country
                                             Output: country.code, country.name
                                 ->  Hash
                                       Output: countrylanguage.countrycode
                                       ->  PX Hash 6:6  (slice3; segments: 6)
                                             Output: countrylanguage.countrycode
                                             Hash Key: countrylanguage.countrycode
                                             ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                   Output: countrylanguage.countrycode
                     ->  Hash
                           Output: (max((count())))
                           ->  PX Broadcast 1:6  (slice4)
                                 Output: (max((count())))
                                 ->  Finalize Aggregate
                                       Output: max((count()))
                                       ->  PX Coordinator 6:1  (slice5; segments: 6)
                                             Output: (PARTIAL max((count())))
                                             ->  Partial Aggregate
                                                   Output: PARTIAL max((count()))
                                                   ->  Append
                                                         ->  GroupAggregate
                                                               Output: count()
                                                               Group Key: country_1.code, countrylanguage_1.countrycode
                                                               ->  Sort
                                                                     Output: countrylanguage_1.countrycode, country_1.code
                                                                     Sort Key: country_1.code, countrylanguage_1.countrycode
                                                                     ->  PX Hash 6:6  (slice6; segments: 6)
                                                                           Output: countrylanguage_1.countrycode, country_1.code
                                                                           Hash Key: country_1.code, countrylanguage_1.countrycode
                                                                           ->  Nested Loop
                                                                                 Output: countrylanguage_1.countrycode, country_1.code
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice7; segments: 6)
                                                                                       Output: country_1.code
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                             Output: country_1.code
                                                                                             Filter: (country_1.governmentform = 'Federal Republic'::text)
                                                                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                                                                       Output: countrylanguage_1.countrycode
                                                                                       Index Cond: (countrylanguage_1.countrycode = country_1.code)
                                                         ->  GroupAggregate
                                                               Output: count()
                                                               Group Key: country_2.code, countrylanguage_2.countrycode
                                                               ->  Sort
                                                                     Output: country_2.code, countrylanguage_2.countrycode
                                                                     Sort Key: country_2.code, countrylanguage_2.countrycode
                                                                     ->  PX Hash 6:6  (slice8; segments: 6)
                                                                           Output: country_2.code, countrylanguage_2.countrycode
                                                                           Hash Key: country_2.code, countrylanguage_2.countrycode
                                                                           ->  Nested Loop
                                                                                 Output: country_2.code, countrylanguage_2.countrycode
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                                                       Output: country_2.code
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                                             Output: country_2.code
                                                                                             Filter: (country_2.governmentform = 'Monarchy'::text)
                                                                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                                                                       Output: countrylanguage_2.countrycode
                                                                                       Index Cond: (countrylanguage_2.countrycode = country_2.code)
 Optimizer: PolarDB PX Optimizer
(82 rows)

--query4
with diversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country,
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country.code and country.gnp > 100000)
 select diversecountries.name,city.name,diversecountries.CNT
 from diversecountries,city where city.id = diversecountries.capital
 order by diversecountries.name;
        name        |       name       | cnt 
--------------------+------------------+-----
 Australia          | Canberra         |   8
 Austria            | Wien             |   8
 Canada             | Ottawa           |  12
 China              | Peking           |  12
 Denmark            | Kobenhavn        |   7
 India              | New Delhi        |  12
 Iran               | Teheran          |  10
 Italy              | Roma             |   8
 Myanmar            | Rangoon (Yangon) |   8
 Russian Federation | Moscow           |  12
 South Africa       | Pretoria         |  11
 United States      | Washington       |  12
(12 rows)

                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.name, city.name, (count())
   Merge Key: country.name
   ->  Sort
         Output: country.name, city.name, (count())
         Sort Key: country.name
         ->  Sort
               Output: country.name, city.name, (count())
               Sort Key: country.name
               ->  Nested Loop
                     Output: country.name, city.name, (count())
                     Join Filter: true
                     ->  PX Broadcast 6:6  (slice2; segments: 6)
                           Output: country.name, country.capital, (count())
                           ->  Hash Join
                                 Output: country.name, country.capital, (count())
                                 Hash Cond: (countrylanguage.countrycode = country.code)
                                 ->  Result
                                       Output: (count()), countrylanguage.countrycode
                                       Filter: ((count()) > 6)
                                       ->  HashAggregate
                                             Output: count(), count(), countrylanguage.countrycode
                                             Group Key: countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice3; segments: 6)
                                                   Output: countrylanguage.countrycode
                                                   Hash Key: countrylanguage.countrycode
                                                   ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                         Output: countrylanguage.countrycode
                                 ->  Hash
                                       Output: country.code, country.name, country.capital
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: country.code, country.name, country.capital
                                             Hash Key: country.code
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.capital
                                                   Filter: (country.gnp > '100000'::numeric)
                     ->  Partial Index Scan using city_pkey on qp_with_clause.city
                           Output: city.name
                           Index Cond: (city.id = country.capital)
 Optimizer: PolarDB PX Optimizer
(40 rows)

-- some queries with merge joins and index scans
set enable_nestloop=off;
set enable_hashjoin=off;
set enable_mergejoin=on;
-- query 5
with somecheapasiandiversecountries as
(
 select FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,count(*) ASIAN_COUNT from
 (
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Southeast Asia'
 and country.continent = 'Asia'
 
 UNION ALL
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Eastern Asia'
 and country.continent = 'Asia'
 UNION ALL
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Middle East'
 and country.continent = 'Asia'
 ) FOO, countrylanguage
 where FOO.code = countrylanguage.countrycode
 group by FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,countrylanguage.countrycode
 HAVING count(*) >=
 (select min(CNT) FROM
   (select count(*) CNT,country.code from countrylanguage,country
    where countrylanguage.countrycode=country.code
    and country.continent = 'Asia'
    and country.region = 'Southern and Central Asia'
    group by country.code
   ) FOO1
 )
)
select FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,count(*) COMPARED_WITH_CHEAP_ASIAN_CNT
from
(
select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
from country,city
where country.capital = city.id 
and country.continent = 'North America'
UNION ALL
select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
from country,city
where country.capital =	city.id	
and country.continent =	'South America'
) FOO,countrylanguage
where FOO.code = countrylanguage.countrycode
group by FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate
HAVING count(*)  >=
 (select min(ASIAN_COUNT) FROM
   (select ASIAN_COUNT FROM somecheapasiandiversecountries,country
    where somecheapasiandiversecountries.code = country.code
    and country.gnp >= country.gnpold
   ) ASIANCOUNT
 )
order by COUNTRY;
 code |             country              |         capital         |            headofstate            | compared_with_cheap_asian_cnt 
------+----------------------------------+-------------------------+-----------------------------------+-------------------------------
 ATG  | Antigua and Barbuda              | Saint Johns             | Elisabeth II                      |                             2
 ARG  | Argentina                        | Buenos Aires            | Fernando de la Rua                |                             3
 ABW  | Aruba                            | Oranjestad              | Beatrix                           |                             4
 BHS  | Bahamas                          | Nassau                  | Elisabeth II                      |                             2
 BRB  | Barbados                         | Bridgetown              | Elisabeth II                      |                             2
 BLZ  | Belize                           | Belmopan                | Elisabeth II                      |                             4
 BOL  | Bolivia                          | La Paz                  | Hugo Banzer Suarez                |                             4
 BRA  | Brazil                           | Brasilia                | Fernando Henrique Cardoso         |                             5
 CAN  | Canada                           | Ottawa                  | Elisabeth II                      |                            12
 CHL  | Chile                            | Santiago de Chile       | Ricardo Lagos Escobar             |                             4
 COL  | Colombia                         | Santafe de Bogota       | Andres Pastrana Arango            |                             5
 CRI  | Costa Rica                       | San Jose                | Miguel Angel Rodriguez Echeverria |                             4
 DMA  | Dominica                         | Roseau                  | Vernon Shaw                       |                             2
 DOM  | Dominican Republic               | Santo Domingo de Guzman | Hipolito Mejia Dominguez          |                             2
 ECU  | Ecuador                          | Quito                   | Gustavo Noboa Bejarano            |                             2
 SLV  | El Salvador                      | San Salvador            | Francisco Guillermo Flores Perez  |                             2
 GUF  | French Guiana                    | Cayenne                 | Jacques Chirac                    |                             2
 GRL  | Greenland                        | Nuuk                    | Margrethe II                      |                             2
 GLP  | Guadeloupe                       | Basse-Terre             | Jacques Chirac                    |                             2
 GTM  | Guatemala                        | Ciudad de Guatemala     | Alfonso Portillo Cabrera          |                             5
 GUY  | Guyana                           | Georgetown              | Bharrat Jagdeo                    |                             3
 HTI  | Haiti                            | Port-au-Prince          | Jean-Bertrand Aristide            |                             2
 HND  | Honduras                         | Tegucigalpa             | Carlos Roberto Flores Facusse     |                             4
 JAM  | Jamaica                          | Kingston                | Elisabeth II                      |                             2
 MTQ  | Martinique                       | Fort-de-France          | Jacques Chirac                    |                             2
 MEX  | Mexico                           | Ciudad de Mexico        | Vicente Fox Quesada               |                             6
 ANT  | Netherlands Antilles             | Willemstad              | Beatrix                           |                             3
 NIC  | Nicaragua                        | Managua                 | Arnoldo Aleman Lacayo             |                             4
 PAN  | Panama                           | Ciudad de Panama        | Mireya Elisa Moscoso Rodriguez    |                             6
 PRY  | Paraguay                         | Asuncion                | Luis Angel Gonzalez Macchi        |                             4
 PER  | Peru                             | Lima                    | Valentin Paniagua Corazao         |                             3
 PRI  | Puerto Rico                      | San Juan                | George W. Bush                    |                             2
 KNA  | Saint Kitts and Nevis            | Basseterre              | Elisabeth II                      |                             2
 LCA  | Saint Lucia                      | Castries                | Elisabeth II                      |                             2
 VCT  | Saint Vincent and the Grenadines | Kingstown               | Elisabeth II                      |                             2
 SUR  | Suriname                         | Paramaribo              | Ronald Venetiaan                  |                             2
 TTO  | Trinidad and Tobago              | Port-of-Spain           | Arthur N. R. Robinson             |                             3
 USA  | United States                    | Washington              | George W. Bush                    |                            12
 VEN  | Venezuela                        | Caracas                 | Hugo Chavez Frias                 |                             3
 VIR  | Virgin Islands, U.S.             | Charlotte Amalie        | George W. Bush                    |                             3
(40 rows)

                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, country.name, city.name, country.headofstate, (count())
   Merge Key: country.name
   ->  Sort
         Output: country.code, country.name, city.name, country.headofstate, (count())
         Sort Key: country.name
         ->  Sort
               Output: country.code, country.name, city.name, country.headofstate, (count())
               Sort Key: country.name
               ->  Nested Loop
                     Output: country.code, country.name, city.name, country.headofstate, (count())
                     Join Filter: ((count()) >= (min((count()))))
                     ->  PX Broadcast 1:6  (slice7)
                           Output: (min((count())))
                           ->  Finalize Aggregate
                                 Output: min((count()))
                                 ->  PX Coordinator 6:1  (slice8; segments: 6)
                                       Output: (PARTIAL min((count())))
                                       ->  Partial Aggregate
                                             Output: PARTIAL min((count()))
                                             ->  Nested Loop
                                                   Output: (count())
                                                   Join Filter: true
                                                   ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                         Output: country_2.code, (count())
                                                         ->  Nested Loop
                                                               Output: country_2.code, (count())
                                                               Join Filter: ((count()) >= (min((count()))))
                                                               ->  PX Broadcast 1:6  (slice15)
                                                                     Output: (min((count())))
                                                                     ->  Finalize Aggregate
                                                                           Output: min((count()))
                                                                           ->  PX Coordinator 6:1  (slice16; segments: 6)
                                                                                 Output: (PARTIAL min((count())))
                                                                                 ->  Partial Aggregate
                                                                                       Output: PARTIAL min((count()))
                                                                                       ->  Finalize GroupAggregate
                                                                                             Output: count(), country_5.code
                                                                                             Group Key: country_5.code
                                                                                             ->  Sort
                                                                                                   Output: country_5.code, (PARTIAL count())
                                                                                                   Sort Key: country_5.code
                                                                                                   ->  PX Hash 6:6  (slice17; segments: 6)
                                                                                                         Output: country_5.code, (PARTIAL count())
                                                                                                         Hash Key: country_5.code
                                                                                                         ->  Partial GroupAggregate
                                                                                                               Output: country_5.code, PARTIAL count()
                                                                                                               Group Key: country_5.code
                                                                                                               ->  Sort
                                                                                                                     Output: country_5.code
                                                                                                                     Sort Key: country_5.code
                                                                                                                     ->  Nested Loop
                                                                                                                           Output: country_5.code
                                                                                                                           Join Filter: true
                                                                                                                           ->  PX Broadcast 6:6  (slice18; segments: 6)
                                                                                                                                 Output: country_5.code
                                                                                                                                 ->  Partial Seq Scan on qp_with_clause.country country_5
                                                                                                                                       Output: country_5.code
                                                                                                                                       Filter: ((country_5.continent = 'Asia'::text) AND (country_5.region = 'Southern and Central Asia'::text))
                                                                                                                           ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                                                                                                                 Index Cond: (countrylanguage_2.countrycode = country_5.code)
                                                               ->  Materialize
                                                                     Output: (count()), (count()), country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                     ->  HashAggregate
                                                                           Output: count(), count(), country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                           Group Key: country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                           ->  Hash Join
                                                                                 Output: country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                                 Hash Cond: (countrylanguage_1.countrycode = country_2.code)
                                                                                 ->  PX Hash 6:6  (slice10; segments: 6)
                                                                                       Output: countrylanguage_1.countrycode
                                                                                       Hash Key: countrylanguage_1.countrycode
                                                                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage countrylanguage_1
                                                                                             Output: countrylanguage_1.countrycode
                                                                                 ->  Hash
                                                                                       Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                       ->  PX Hash 6:6  (slice11; segments: 6)
                                                                                             Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                             Hash Key: country_2.code
                                                                                             ->  Append
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice12; segments: 6)
                                                                                                               Output: country_2.code, country_2.name, country_2.headofstate, country_2.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                                                                     Output: country_2.code, country_2.name, country_2.headofstate, country_2.capital
                                                                                                                     Filter: ((country_2.gnp < '10000'::numeric) AND (country_2.region = 'Southeast Asia'::text) AND (country_2.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_2
                                                                                                               Output: city_2.name
                                                                                                               Index Cond: (city_2.id = country_2.capital)
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_3.code, country_3.name, city_3.name, country_3.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice13; segments: 6)
                                                                                                               Output: country_3.code, country_3.name, country_3.headofstate, country_3.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_3
                                                                                                                     Output: country_3.code, country_3.name, country_3.headofstate, country_3.capital
                                                                                                                     Filter: ((country_3.gnp < '10000'::numeric) AND (country_3.region = 'Eastern Asia'::text) AND (country_3.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_3
                                                                                                               Output: city_3.name
                                                                                                               Index Cond: (city_3.id = country_3.capital)
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_4.code, country_4.name, city_4.name, country_4.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice14; segments: 6)
                                                                                                               Output: country_4.code, country_4.name, country_4.headofstate, country_4.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_4
                                                                                                                     Output: country_4.code, country_4.name, country_4.headofstate, country_4.capital
                                                                                                                     Filter: ((country_4.gnp < '10000'::numeric) AND (country_4.region = 'Middle East'::text) AND (country_4.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_4
                                                                                                               Output: city_4.name
                                                                                                               Index Cond: (city_4.id = country_4.capital)
                                                   ->  Partial Index Scan using country_pkey on qp_with_clause.country country_6
                                                         Output: country_6.gnp, country_6.gnpold
                                                         Index Cond: (country_6.code = country_2.code)
                                                         Filter: (country_6.gnp >= country_6.gnpold)
                     ->  HashAggregate
                           Output: count(), count(), country.code, country.name, country.headofstate, city.name
                           Group Key: country.name, country.code, city.name, country.headofstate
                           ->  Materialize
                                 Output: country.code, country.name, country.headofstate, city.name
                                 ->  Hash Join
                                       Output: country.code, country.name, country.headofstate, city.name
                                       Hash Cond: (country.code = countrylanguage.countrycode)
                                       ->  Append
                                             ->  PX Hash 6:6  (slice2; segments: 6)
                                                   Output: country.code, country.name, city.name, country.headofstate
                                                   Hash Key: country.code
                                                   ->  Nested Loop
                                                         Output: country.code, country.name, city.name, country.headofstate
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice3; segments: 6)
                                                               Output: country.code, country.name, country.headofstate, country.capital
                                                               ->  Partial Seq Scan on qp_with_clause.country
                                                                     Output: country.code, country.name, country.headofstate, country.capital
                                                                     Filter: (country.continent = 'North America'::text)
                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                                               Output: city.name
                                                               Index Cond: (city.id = country.capital)
                                             ->  PX Hash 6:6  (slice4; segments: 6)
                                                   Output: country_1.code, country_1.name, city_1.name, country_1.headofstate
                                                   Hash Key: country_1.code
                                                   ->  Nested Loop
                                                         Output: country_1.code, country_1.name, city_1.name, country_1.headofstate
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                               Output: country_1.code, country_1.name, country_1.headofstate, country_1.capital
                                                               ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                     Output: country_1.code, country_1.name, country_1.headofstate, country_1.capital
                                                                     Filter: (country_1.continent = 'South America'::text)
                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                               Output: city_1.name
                                                               Index Cond: (city_1.id = country_1.capital)
                                       ->  Hash
                                             Output: countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice6; segments: 6)
                                                   Output: countrylanguage.countrycode
                                                   Hash Key: countrylanguage.countrycode
                                                   ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                         Output: countrylanguage.countrycode
 Optimizer: PolarDB PX Optimizer
(162 rows)

-- query 6 
 
select count(*) from
( select r.* from
  ( with fact as 
     (
      select country.name as COUNTRY,country.code,city.name as CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,AGG1.region
      from      
         (select
         sum(case when (city.population >= 0.5 * country.population) then country.population else city.population end) as S_POPULATION,
         sum(case when (gnp >= gnpold) then gnp else gnpold end) as S_GNP,
         avg(case when (lifeexpectancy > 60) then 50 else lifeexpectancy end) as AVG_LIFE,country.region
         from country,city  
         where governmentform != 'Constitutional Monarchy'
         and country.capital = city.id
         and indepyear > 0
         group by country.region) AGG1
         ,country,city
         where country.capital = city.id
         and country.region = AGG1.region
      )
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'South America'
     
     UNION ALL
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'North America'
     
     UNION ALL
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'Caribbean'
 ) as r
 left join
  (
   select 'ARG' as CODE UNION ALL
   select 'BOL' as CODE UNION ALL
   select 'BRA' as CODE UNION ALL
   select 'PER' as CODE UNION ALL
   select 'URY' as CODE UNION ALL
   select 'IND' as CODE  UNION ALL
   select 'LCA' as CODE UNION ALL
   select 'VCT' as CODE
   ) as r1
on r.code = r1.code) AS FOO;
 count 
-------
    43
(1 row)

                                                                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count()
   ->  Hash Left Join
         Hash Cond: ((share0_ref2.code)::text = ('ARG'::text))
         ->  PX Coordinator 6:1  (slice1; segments: 6)
               Output: share0_ref2.code
               ->  Sequence
                     Output: share0_ref2.code
                     ->  Shared Scan (Producer; slice1; share0)
                           Output: share0_ref1.name, share0_ref1.code, share0_ref1.name_1, share0_ref1.s_population, share0_ref1.s_gnp, share0_ref1.avg_life, share0_ref1.region
                           ->  Hash Join
                                 Output: country.name, country.code, city.name, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)), country_1.region
                                 Hash Cond: (country.region = country_1.region)
                                 ->  Nested Loop
                                       Output: country.code, country.name, country.region, city.name
                                       Join Filter: true
                                       ->  PX Broadcast 6:6  (slice2; segments: 6)
                                             Output: country.code, country.name, country.region, country.capital
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.region, country.capital
                                                   Filter: (country.region = ANY ('{Caribbean,"North America","South America"}'::text[]))
                                       ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                             Output: city.name
                                             Index Cond: (city.id = country.capital)
                                 ->  Hash
                                       Output: country_1.region, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                       ->  PX Broadcast 6:6  (slice3; segments: 6)
                                             Output: country_1.region, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                             ->  Finalize GroupAggregate
                                                   Output: country_1.region, sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END), sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END), avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)
                                                   Group Key: country_1.region
                                                   ->  Sort
                                                         Output: country_1.region, (PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                                         Sort Key: country_1.region
                                                         ->  PX Hash 6:6  (slice4; segments: 6)
                                                               Output: country_1.region, (PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                                               Hash Key: country_1.region
                                                               ->  Partial HashAggregate
                                                                     Output: country_1.region, PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END), PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END), PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)
                                                                     Group Key: country_1.region
                                                                     ->  Nested Loop
                                                                           Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, city_1.population
                                                                           Join Filter: true
                                                                           ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                                                 Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, country_1.capital
                                                                                 ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                       Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, country_1.capital
                                                                                       Filter: ((country_1.governmentform <> 'Constitutional Monarchy'::text) AND (country_1.indepyear > 0) AND ((country_1.region = 'South America'::text) OR (country_1.region = 'North America'::text) OR (country_1.region = 'Caribbean'::text)) AND (country_1.region = ANY ('{Caribbean,"North America","South America"}'::text[])))
                                                                           ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                                                 Output: city_1.population
                                                                                 Index Cond: (city_1.id = country_1.capital)
                     ->  Append
                           ->  Nested Loop
                                 Output: share0_ref2.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice6; segments: 6)
                                       Output: share0_ref2.code
                                       ->  Result
                                             Output: share0_ref2.code
                                             Filter: (share0_ref2.region = 'South America'::text)
                                             ->  Shared Scan (Consumer; slice6; share0)
                                                   Output: share0_ref2.name, share0_ref2.code, share0_ref2.name_1, share0_ref2.s_population, share0_ref2.s_gnp, share0_ref2.avg_life, share0_ref2.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage
                                       Output: countrylanguage.isofficial
                                       Index Cond: (countrylanguage.countrycode = share0_ref2.code)
                                       Filter: countrylanguage.isofficial
                           ->  Nested Loop
                                 Output: share0_ref3.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice7; segments: 6)
                                       Output: share0_ref3.code
                                       ->  Result
                                             Output: share0_ref3.code
                                             Filter: (share0_ref3.region = 'North America'::text)
                                             ->  Shared Scan (Consumer; slice7; share0)
                                                   Output: share0_ref3.name, share0_ref3.code, share0_ref3.name_1, share0_ref3.s_population, share0_ref3.s_gnp, share0_ref3.avg_life, share0_ref3.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                       Output: countrylanguage_1.isofficial
                                       Index Cond: (countrylanguage_1.countrycode = share0_ref3.code)
                                       Filter: countrylanguage_1.isofficial
                           ->  Nested Loop
                                 Output: share0_ref4.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice8; segments: 6)
                                       Output: share0_ref4.code
                                       ->  Result
                                             Output: share0_ref4.code
                                             Filter: (share0_ref4.region = 'Caribbean'::text)
                                             ->  Shared Scan (Consumer; slice8; share0)
                                                   Output: share0_ref4.name, share0_ref4.code, share0_ref4.name_1, share0_ref4.s_population, share0_ref4.s_gnp, share0_ref4.avg_life, share0_ref4.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                       Output: countrylanguage_2.isofficial
                                       Index Cond: (countrylanguage_2.countrycode = share0_ref4.code)
                                       Filter: countrylanguage_2.isofficial
         ->  Hash
               Output: ('ARG'::text)
               ->  Append
                     ->  Result
                           Output: 'ARG'::text
                     ->  Result
                           Output: 'BOL'::text
                     ->  Result
                           Output: 'BRA'::text
                     ->  Result
                           Output: 'PER'::text
                     ->  Result
                           Output: 'URY'::text
                     ->  Result
                           Output: 'IND'::text
                     ->  Result
                           Output: 'LCA'::text
                     ->  Result
                           Output: 'VCT'::text
 Optimizer: PolarDB PX Optimizer
(114 rows)

-- query7
with alleuropeanlanguages as 
(select country.code,country.name COUNTRY, city.name CAPITAL, language, isofficial, percentage
 FROM country,city,countrylanguage
 WHERE country.code = countrylanguage.countrycode
 and country.capital = city.id
 and country.continent = 'Europe')
select * from
(select * from alleuropeanlanguages where isofficial='True') e1,
(select * from alleuropeanlanguages where percentage > 50) e2
where e1.code = e2.code order by e2.COUNTRY,e1.language;
 code |        country         |              capital              |    language    | isofficial | percentage | code |        country         |              capital              |    language    | isofficial | percentage 
------+------------------------+-----------------------------------+----------------+------------+------------+------+------------------------+-----------------------------------+----------------+------------+------------
 ALB  | Albania                | Tirana                            | Albaniana      | t          |       97.9 | ALB  | Albania                | Tirana                            | Albaniana      | t          |       97.9
 AUT  | Austria                | Wien                              | German         | t          |         92 | AUT  | Austria                | Wien                              | German         | t          |         92
 BLR  | Belarus                | Minsk                             | Belorussian    | t          |       65.6 | BLR  | Belarus                | Minsk                             | Belorussian    | t          |       65.6
 BLR  | Belarus                | Minsk                             | Russian        | t          |         32 | BLR  | Belarus                | Minsk                             | Belorussian    | t          |       65.6
 BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2 | BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel]               | French         | t          |       32.6 | BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel]               | German         | t          |          1 | BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2
 BIH  | Bosnia and Herzegovina | Sarajevo                          | Serbo-Croatian | t          |       99.2 | BIH  | Bosnia and Herzegovina | Sarajevo                          | Serbo-Croatian | t          |       99.2
 BGR  | Bulgaria               | Sofija                            | Bulgariana     | t          |       83.2 | BGR  | Bulgaria               | Sofija                            | Bulgariana     | t          |       83.2
 HRV  | Croatia                | Zagreb                            | Serbo-Croatian | t          |       95.9 | HRV  | Croatia                | Zagreb                            | Serbo-Croatian | t          |       95.9
 CZE  | Czech Republic         | Praha                             | Czech          | t          |       81.2 | CZE  | Czech Republic         | Praha                             | Czech          | t          |       81.2
 DNK  | Denmark                | Kobenhavn                         | Danish         | t          |       93.5 | DNK  | Denmark                | Kobenhavn                         | Danish         | t          |       93.5
 EST  | Estonia                | Tallinn                           | Estonian       | t          |       65.3 | EST  | Estonia                | Tallinn                           | Estonian       | t          |       65.3
 FRO  | Faroe Islands          | Torshavn                          | Danish         | t          |          0 | FRO  | Faroe Islands          | Torshavn                          | Faroese        | t          |        100
 FRO  | Faroe Islands          | Torshavn                          | Faroese        | t          |        100 | FRO  | Faroe Islands          | Torshavn                          | Faroese        | t          |        100
 FIN  | Finland                | Helsinki [Helsingfors]            | Finnish        | t          |       92.7 | FIN  | Finland                | Helsinki [Helsingfors]            | Finnish        | t          |       92.7
 FIN  | Finland                | Helsinki [Helsingfors]            | Swedish        | t          |        5.7 | FIN  | Finland                | Helsinki [Helsingfors]            | Finnish        | t          |       92.7
 FRA  | France                 | Paris                             | French         | t          |       93.6 | FRA  | France                 | Paris                             | French         | t          |       93.6
 DEU  | Germany                | Berlin                            | German         | t          |       91.3 | DEU  | Germany                | Berlin                            | German         | t          |       91.3
 GIB  | Gibraltar              | Gibraltar                         | English        | t          |       88.9 | GIB  | Gibraltar              | Gibraltar                         | English        | t          |       88.9
 GRC  | Greece                 | Athenai                           | Greek          | t          |       98.5 | GRC  | Greece                 | Athenai                           | Greek          | t          |       98.5
 HUN  | Hungary                | Budapest                          | Hungarian      | t          |       98.5 | HUN  | Hungary                | Budapest                          | Hungarian      | t          |       98.5
 ISL  | Iceland                | Reykjavik                         | Icelandic      | t          |       95.7 | ISL  | Iceland                | Reykjavik                         | Icelandic      | t          |       95.7
 IRL  | Ireland                | Dublin                            | English        | t          |       98.4 | IRL  | Ireland                | Dublin                            | English        | t          |       98.4
 IRL  | Ireland                | Dublin                            | Irish          | t          |        1.6 | IRL  | Ireland                | Dublin                            | English        | t          |       98.4
 ITA  | Italy                  | Roma                              | Italian        | t          |       94.1 | ITA  | Italy                  | Roma                              | Italian        | t          |       94.1
 LVA  | Latvia                 | Riga                              | Latvian        | t          |       55.1 | LVA  | Latvia                 | Riga                              | Latvian        | t          |       55.1
 LIE  | Liechtenstein          | Vaduz                             | German         | t          |         89 | LIE  | Liechtenstein          | Vaduz                             | German         | t          |         89
 LTU  | Lithuania              | Vilnius                           | Lithuanian     | t          |       81.6 | LTU  | Lithuania              | Vilnius                           | Lithuanian     | t          |       81.6
 LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | French         | t          |        4.2 | LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4
 LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | German         | t          |        2.3 | LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4
 LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4 | LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4
 MKD  | Macedonia              | Skopje                            | Macedonian     | t          |       66.5 | MKD  | Macedonia              | Skopje                            | Macedonian     | t          |       66.5
 MLT  | Malta                  | Valletta                          | English        | t          |        2.1 | MLT  | Malta                  | Valletta                          | Maltese        | t          |       95.8
 MLT  | Malta                  | Valletta                          | Maltese        | t          |       95.8 | MLT  | Malta                  | Valletta                          | Maltese        | t          |       95.8
 MDA  | Moldova                | Chisinau                          | Romanian       | t          |       61.9 | MDA  | Moldova                | Chisinau                          | Romanian       | t          |       61.9
 NLD  | Netherlands            | Amsterdam                         | Dutch          | t          |       95.6 | NLD  | Netherlands            | Amsterdam                         | Dutch          | t          |       95.6
 NOR  | Norway                 | Oslo                              | Norwegian      | t          |       96.6 | NOR  | Norway                 | Oslo                              | Norwegian      | t          |       96.6
 POL  | Poland                 | Warszawa                          | Polish         | t          |       97.6 | POL  | Poland                 | Warszawa                          | Polish         | t          |       97.6
 PRT  | Portugal               | Lisboa                            | Portuguese     | t          |         99 | PRT  | Portugal               | Lisboa                            | Portuguese     | t          |         99
 ROM  | Romania                | Bucuresti                         | Romani         | t          |        0.7 | ROM  | Romania                | Bucuresti                         | Romanian       | t          |       90.7
 ROM  | Romania                | Bucuresti                         | Romanian       | t          |       90.7 | ROM  | Romania                | Bucuresti                         | Romanian       | t          |       90.7
 RUS  | Russian Federation     | Moscow                            | Russian        | t          |       86.6 | RUS  | Russian Federation     | Moscow                            | Russian        | t          |       86.6
 SMR  | San Marino             | San Marino                        | Italian        | t          |        100 | SMR  | San Marino             | San Marino                        | Italian        | t          |        100
 SVK  | Slovakia               | Bratislava                        | Slovak         | t          |       85.6 | SVK  | Slovakia               | Bratislava                        | Slovak         | t          |       85.6
 SVN  | Slovenia               | Ljubljana                         | Slovene        | t          |       87.9 | SVN  | Slovenia               | Ljubljana                         | Slovene        | t          |       87.9
 ESP  | Spain                  | Madrid                            | Spanish        | t          |       74.4 | ESP  | Spain                  | Madrid                            | Spanish        | t          |       74.4
 SWE  | Sweden                 | Stockholm                         | Swedish        | t          |       89.5 | SWE  | Sweden                 | Stockholm                         | Swedish        | t          |       89.5
 CHE  | Switzerland            | Bern                              | French         | t          |       19.2 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 CHE  | Switzerland            | Bern                              | German         | t          |       63.6 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 CHE  | Switzerland            | Bern                              | Italian        | t          |        7.7 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 CHE  | Switzerland            | Bern                              | Romansh        | t          |        0.6 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 UKR  | Ukraine                | Kyiv                              | Ukrainian      | t          |       64.7 | UKR  | Ukraine                | Kyiv                              | Ukrainian      | t          |       64.7
 GBR  | United Kingdom         | London                            | English        | t          |       97.3 | GBR  | United Kingdom         | London                            | English        | t          |       97.3
 YUG  | Yugoslavia             | Beograd                           | Serbo-Croatian | t          |       75.2 | YUG  | Yugoslavia             | Beograd                           | Serbo-Croatian | t          |       75.2
(55 rows)

                                                                                                                                       QUERY PLAN                                                                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
   Merge Key: share0_ref2.name, share0_ref3.language
   ->  Sequence
         Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.code, share0_ref1.name, share0_ref1.name_1, share0_ref1.language, share0_ref1.isofficial, share0_ref1.percentage
               ->  Hash Join
                     Output: country.code, country.name, city.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           Hash Key: countrylanguage.countrycode
                           ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                 Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                 Filter: (countrylanguage.isofficial OR (countrylanguage.percentage > '50'::double precision))
                     ->  Hash
                           Output: country.code, country.name, city.name
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name, city.name
                                 Hash Key: country.code
                                 ->  Nested Loop
                                       Output: country.code, country.name, city.name
                                       Join Filter: true
                                       ->  PX Broadcast 6:6  (slice4; segments: 6)
                                             Output: country.code, country.name, country.capital
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.capital
                                                   Filter: (country.continent = 'Europe'::text)
                                       ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                             Output: city.name
                                             Index Cond: (city.id = country.capital)
         ->  Sort
               Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
               Sort Key: share0_ref2.name, share0_ref3.language
               ->  Hash Join
                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                     Hash Cond: (share0_ref3.code = share0_ref2.code)
                     ->  Result
                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                           Filter: share0_ref3.isofficial
                           ->  Shared Scan (Producer; slice1; share0)
                                 Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                     ->  Hash
                           Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                           ->  Result
                                 Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                                 Filter: (share0_ref2.percentage > '50'::double precision)
                                 ->  Shared Scan (Producer; slice1; share0)
                                       Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
 Optimizer: PolarDB PX Optimizer
(51 rows)

-- query8
with allcountrystats as 
( select country.code,country.name,count(distinct city.id) CITY_CNT,
  count(distinct countrylanguage.language) LANG_CNT
  from country,city,countrylanguage
  where country.code = city.countrycode
  and country.code = countrylanguage.countrycode
  group by country.code,country.name
)
select sum(FOO.CITY_CNT) REGION_CITY_CNT,sum(FOO.LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > 1
and country.continent = 'Asia'
UNION ALL
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > 1
and country.continent = 'North America'
UNION ALL
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > (select  max(CITY_CNT/LANG_CNT)  from allcountrystats,country where allcountrystats.code = country.code AND country.continent='Europe')
) FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region;
 region_city_cnt | region_lang_cnt |          region           
-----------------+-----------------+---------------------------
             840 |             192 | Caribbean
            2824 |             112 | Central America
            8250 |             252 | Eastern Asia
            2664 |             396 | Middle East
            1625 |             125 | North America
            3500 |              70 | South America
            3179 |             528 | Southeast Asia
           12278 |             896 | Southern and Central Asia
(8 rows)

-- some queries with hash joins and index scans
set enable_nestloop=off;
set enable_hashjoin=on;
set enable_mergejoin=off;
--query 9
with diversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country,
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country.code and country.gnp > 100000)
select d1.code,d1.name,d1.capital,city.name CAPITAL_CITY,d1.CNT,d2.CNT
from
diversecountries d1 left join country
ON (d1.code = country.code AND d1.CNT < 8)
left join diversecountries d2
ON (country.code = d2.code AND d2.CNT > 8)
INNER JOIN city
ON(d1.capital = city.id)
ORDER BY d1.name;
 code |        name        | capital |   capital_city   | cnt | cnt 
------+--------------------+---------+------------------+-----+-----
 AUS  | Australia          |     135 | Canberra         |   8 |    
 AUT  | Austria            |    1523 | Wien             |   8 |    
 CAN  | Canada             |    1822 | Ottawa           |  12 |    
 CHN  | China              |    1891 | Peking           |  12 |    
 DNK  | Denmark            |    3315 | Kobenhavn        |   7 |    
 IND  | India              |    1109 | New Delhi        |  12 |    
 IRN  | Iran               |    1380 | Teheran          |  10 |    
 ITA  | Italy              |    1464 | Roma             |   8 |    
 MMR  | Myanmar            |    2710 | Rangoon (Yangon) |   8 |    
 RUS  | Russian Federation |    3580 | Moscow           |  12 |    
 ZAF  | South Africa       |     716 | Pretoria         |  11 |    
 USA  | United States      |    3813 | Washington       |  12 |    
(12 rows)

                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
   Merge Key: share0_ref3.name
   ->  Sequence
         Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.code, share0_ref1.name, share0_ref1.capital, share0_ref1.cnt
               ->  Hash Join
                     Output: country.code, country.name, country.capital, (count())
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  Result
                           Output: countrylanguage.countrycode, (count())
                           Filter: ((count()) > 6)
                           ->  HashAggregate
                                 Output: count(), count(), countrylanguage.countrycode
                                 Group Key: countrylanguage.countrycode
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: countrylanguage.countrycode
                                       Hash Key: countrylanguage.countrycode
                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                             Output: countrylanguage.countrycode
                     ->  Hash
                           Output: country.code, country.name, country.capital
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name, country.capital
                                 Hash Key: country.code
                                 ->  Partial Seq Scan on qp_with_clause.country
                                       Output: country.code, country.name, country.capital
                                       Filter: (country.gnp > '100000'::numeric)
         ->  Sort
               Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
               Sort Key: share0_ref3.name
               ->  Hash Left Join
                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
                     Hash Cond: (country_1.code = share0_ref2.code)
                     ->  PX Hash 6:6  (slice4; segments: 6)
                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code, city.name
                           Hash Key: country_1.code
                           ->  Nested Loop
                                 Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code, city.name
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice5; segments: 6)
                                       Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code
                                       ->  Nested Loop Left Join
                                             Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code
                                             Join Filter: true
                                             ->  Shared Scan (Consumer; slice5; share0)
                                                   Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt
                                             ->  Full Index Scan using country_pkey on qp_with_clause.country country_1
                                                   Output: country_1.code
                                                   Index Cond: (country_1.code = share0_ref3.code)
                                                   Filter: (share0_ref3.cnt < 8)
                                 ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                       Output: city.name
                                       Index Cond: (city.id = share0_ref3.capital)
                     ->  Hash
                           Output: share0_ref2.code, share0_ref2.cnt
                           ->  Result
                                 Output: share0_ref2.code, share0_ref2.cnt
                                 Filter: (share0_ref2.cnt > 8)
                                 ->  Shared Scan (Producer; slice1; share0)
                                       Output: share0_ref2.code, share0_ref2.name, share0_ref2.capital, share0_ref2.cnt
 Optimizer: PolarDB PX Optimizer
(63 rows)

--query 10 , multiple ctes, joins
with longlivingregions as 
(
select FOO.*,count(distinct language) as "lang_count"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       avg(lifeexpectancy) as "REGION_LIFETIME",region
     from
      country
     group by region
    ) FOO,countrylanguage,country
where
   country.code = countrylanguage.countrycode
   and FOO.region = country.region
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP",foo."REGION_LIFETIME"),
denseregions as 
(
select FOO.*,count(distinct language) as "lang_count",
       sum(surfacearea) as "REGION_SURFACE_AREA"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       region
     from
      country
     group by region
    ) FOO,countrylanguage,country
where
   country.code = countrylanguage.countrycode
   and FOO.region = country.region
   and FOO."REGION_POP" != 0
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP"
order by sum(surfacearea)/foo."REGION_POP" desc),
allcountrystats as 
( select country.code,country.name,count(distinct city.id) CITY_CNT,
  count(distinct countrylanguage.language) LANG_CNT
  from country,city,countrylanguage
  where country.code = city.countrycode
  and country.code = countrylanguage.countrycode
  group by country.code,country.name
)
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear between 1800 and 1850
UNION ALL
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear between 1850 and 1900
UNION ALL
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear > 1900
order by name
LIMIT 50;
 city_cnt | lang_cnt |                 name                  | REGION_SURFACE_AREA | REGION_LIFETIME  | REGION_POP | lang_count | REGION_GNP |          region           
----------+----------+---------------------------------------+---------------------+------------------+------------+------------+------------+---------------------------
        4 |        5 | Afghanistan                           |         90749795.00 | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        1 |        3 | Albania                               |          5845195.40 | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
       18 |        2 | Algeria                               |         36993520.00 | 65.3857127598354 |  173266000 |         14 |  243870.00 | Northern Africa
        5 |        9 | Angola                                |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        1 |        2 | Antigua and Barbuda                   |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       57 |        3 | Argentina                             |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        3 |        2 | Armenia                               |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       14 |        8 | Australia                             |         62471162.00 | 78.8000030517578 |   22753100 |         11 |  405851.00 | Australia and New Zealand
        6 |        8 | Austria                               |          6649768.00 | 78.2555567423503 |  183247600 |         21 | 4673272.00 | Western Europe
        4 |        4 | Azerbaijan                            |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
        1 |        2 | Bahamas                               |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        1 |        2 | Bahrain                               |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       24 |        7 | Bangladesh                            |         90749795.00 | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        1 |        2 | Barbados                              |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       16 |        4 | Belarus                               |        214731845.00 | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        9 |        6 | Belgium                               |          6649768.00 | 78.2555567423503 |  183247600 |         21 | 4673272.00 | Western Europe
        2 |        4 | Belize                                |         14052371.00 | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
        4 |        7 | Benin                                 |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        3 | Bhutan                                |         90749795.00 | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        8 |        4 | Bolivia                               |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        3 |        1 | Bosnia and Herzegovina                |          5845195.40 | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
        2 |        5 | Botswana                              |         23060186.00 | 44.8199996948242 |   46886000 |         21 |  126931.00 | Southern Africa
      250 |        5 | Brazil                                |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        1 |        4 | Brunei                                |         35322186.00 | 64.4000001387163 |  518541000 |         47 |  642643.00 | Southeast Asia
       10 |        4 | Bulgaria                              |        214731845.00 | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        3 |        6 | Burkina Faso                          |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        3 | Burundi                               |         43631319.00 | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        3 |        4 | Cambodia                              |         35322186.00 | 64.4000001387163 |  518541000 |         47 |  642643.00 | Southeast Asia
        7 |        8 | Cameroon                              |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       49 |       12 | Canada                                |        236342035.00 | 75.8199996948242 |  309632000 |         18 | 9111890.00 | North America
        1 |        2 | Cape Verde                            |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        6 | Central African Republic              |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        2 |        8 | Chad                                  |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       29 |        4 | Chile                                 |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
       38 |        5 | Colombia                              |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        1 |        5 | Comoros                               |         43631319.00 | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        2 |        6 | Congo                                 |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       18 |       10 | Congo, The Democratic Republic of the |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        1 |        4 | Costa Rica                            |         14052371.00 | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
        5 |        5 | Cote deIvoire                         |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        4 |        2 | Croatia                               |          5845195.40 | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
       14 |        1 | Cuba                                  |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        2 |        2 | Cyprus                                |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       10 |        8 | Czech Republic                        |        214731845.00 | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        1 |        3 | Djibouti                              |         43631319.00 | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        1 |        2 | Dominica                              |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        6 |        2 | Dominican Republic                    |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       15 |        2 | Ecuador                               |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
       37 |        2 | Egypt                                 |         36993520.00 | 65.3857127598354 |  173266000 |         14 |  243870.00 | Northern Africa
        7 |        2 | El Salvador                           |         14052371.00 | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
(50 rows)

--query 11
with allcitystats as 
( select city.name CITY,city.id,country.name COUNTRY,city.district,city.population as CITY_POP
  from
  city,country
  where city.countrycode = country.code
),
alldistrictstats as 
( select allcitystats.district,allcitystats.COUNTRY,sum(CITY_POP) DISTRICT_POP,
  count(CITY) as D_CITY_CNT
  from allcitystats
  group by allcitystats.district,allcitystats.COUNTRY
  order by district,COUNTRY
),
allcountrystats as 
( select alldistrictstats.COUNTRY,country.code,sum(D_CITY_CNT) C_CITY_CNT,
  count(distinct countrylanguage.language) C_LANG_CNT
  from alldistrictstats,country,countrylanguage
  where alldistrictstats.COUNTRY = country.name
  and country.code = countrylanguage.countrycode
  group by COUNTRY,code
),
asian_region_stats as 
(
select sum(FOO.C_CITY_CNT) REGION_CITY_CNT,sum(FOO.C_LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountrystats.code,allcountrystats.COUNTRY,C_CITY_CNT,C_LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and C_CITY_CNT/C_LANG_CNT > 1
and country.continent = 'Asia') FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region
)
select * from
(
select REGION_CITY_CNT as CITY_CNT,REGION_LANG_CNT as LANG_CNT, region as IDENTIFIER from asian_region_stats
UNION ALL
(
select sum(FOO.C_CITY_CNT) CITY_CNT,sum(FOO.C_LANG_CNT) LANG_CNT,FOO.region as IDENTIFIER
FROM
(
select allcountrystats.code,allcountrystats.COUNTRY,C_CITY_CNT,C_LANG_CNT,country.region,allcitystats.CITY CAPITAL
from allcountrystats,country,allcitystats
where allcountrystats.code = country.code
and country.capital = allcitystats.id
and C_CITY_CNT/C_LANG_CNT > 1
and country.continent = 'Europe') FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region
)
) FOO1
order by FOO1.lang_cnt,FOO1.identifier;
 city_cnt | lang_cnt |        identifier         
----------+----------+---------------------------
      494 |       10 | British Islands
      159 |       48 | Baltic Countries
    36060 |      132 | Eastern Asia
     1295 |      161 | Nordic Countries
     9414 |      369 | Western Europe
    11880 |      450 | Southern Europe
    32900 |      610 | Eastern Europe
    29161 |      616 | Southeast Asia
     8568 |      792 | Middle East
    80388 |     1092 | Southern and Central Asia
(10 rows)

                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
   Merge Key: (sum(share2_ref2.c_lang_cnt)), country_3.region
   ->  Sequence
         Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.name, share0_ref1.id, share0_ref1.name_1, share0_ref1.district, share0_ref1.population
               ->  Hash Join
                     Output: city.name, city.id, country.name, city.district, city.population
                     Hash Cond: (city.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: city.id, city.name, city.countrycode, city.district, city.population
                           Hash Key: city.countrycode
                           ->  Partial Seq Scan on qp_with_clause.city
                                 Output: city.id, city.name, city.countrycode, city.district, city.population
                     ->  Hash
                           Output: country.code, country.name
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name
                                 Hash Key: country.code
                                 ->  Partial Seq Scan on qp_with_clause.country
                                       Output: country.code, country.name
         ->  Sequence
               Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
               ->  Shared Scan (Producer; slice1; share2)
                     Output: share2_ref1.name, share2_ref1.code, share2_ref1.c_city_cnt, share2_ref1.c_lang_cnt
                     ->  GroupAggregate
                           Output: share0_ref2.name_1, country_1.code, sum((count(share0_ref2.name))), count(DISTINCT countrylanguage.language)
                           Group Key: share0_ref2.name_1, country_1.code
                           ->  Sort
                                 Output: share0_ref2.name_1, (count(share0_ref2.name)), country_1.code, countrylanguage.language
                                 Sort Key: share0_ref2.name_1, country_1.code
                                 ->  Hash Join
                                       Output: share0_ref2.name_1, (count(share0_ref2.name)), country_1.code, countrylanguage.language
                                       Hash Cond: (share0_ref2.name_1 = country_1.name)
                                       ->  Sort
                                             Output: share0_ref2.district, share0_ref2.name_1, (count(share0_ref2.name))
                                             Sort Key: share0_ref2.district, share0_ref2.name_1
                                             ->  PX Hash 6:6  (slice4; segments: 6)
                                                   Output: share0_ref2.district, share0_ref2.name_1, (count(share0_ref2.name))
                                                   Hash Key: share0_ref2.name_1
                                                   ->  HashAggregate
                                                         Output: share0_ref2.district, share0_ref2.name_1, count(share0_ref2.name)
                                                         Group Key: share0_ref2.district, share0_ref2.name_1
                                                         ->  PX Hash 6:6  (slice5; segments: 6)
                                                               Output: share0_ref2.district, share0_ref2.name_1, share0_ref2.name, share0_ref2.population
                                                               Hash Key: share0_ref2.district, share0_ref2.name_1
                                                               ->  Result
                                                                     Output: share0_ref2.district, share0_ref2.name_1, share0_ref2.name, share0_ref2.population
                                                                     ->  Shared Scan (Consumer; slice5; share0)
                                                                           Output: share0_ref2.name, share0_ref2.id, share0_ref2.name_1, share0_ref2.district, share0_ref2.population
                                       ->  Hash
                                             Output: country_1.code, country_1.name, countrylanguage.language
                                             ->  PX Hash 6:6  (slice6; segments: 6)
                                                   Output: country_1.code, country_1.name, countrylanguage.language
                                                   Hash Key: country_1.name
                                                   ->  Hash Join
                                                         Output: country_1.code, country_1.name, countrylanguage.language
                                                         Hash Cond: (countrylanguage.countrycode = country_1.code)
                                                         ->  PX Hash 6:6  (slice7; segments: 6)
                                                               Output: countrylanguage.countrycode, countrylanguage.language
                                                               Hash Key: countrylanguage.countrycode
                                                               ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                                     Output: countrylanguage.countrycode, countrylanguage.language
                                                         ->  Hash
                                                               Output: country_1.code, country_1.name
                                                               ->  PX Hash 6:6  (slice8; segments: 6)
                                                                     Output: country_1.code, country_1.name
                                                                     Hash Key: country_1.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                           Output: country_1.code, country_1.name
               ->  Sort
                     Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
                     Sort Key: (sum(share2_ref2.c_lang_cnt)), country_3.region
                     ->  Append
                           ->  Sort
                                 Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
                                 Sort Key: country_3.region
                                 ->  HashAggregate
                                       Output: sum(share2_ref2.c_city_cnt), sum(share2_ref2.c_lang_cnt), country_3.region
                                       Group Key: country_3.region
                                       ->  Hash Join
                                             Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                             Hash Cond: (country_2.region = country_3.region)
                                             ->  PX Hash 6:6  (slice9; segments: 6)
                                                   Output: country_2.region
                                                   Hash Key: country_2.region
                                                   ->  Hash Join
                                                         Output: country_2.region
                                                         Hash Cond: (share2_ref3.code = country_2.code)
                                                         ->  PX Hash 6:6  (slice10; segments: 6)
                                                               Output: share2_ref3.code
                                                               Hash Key: share2_ref3.code
                                                               ->  Result
                                                                     Output: share2_ref3.code
                                                                     ->  Shared Scan (Consumer; slice10; share2)
                                                                           Output: share2_ref3.name, share2_ref3.code, share2_ref3.c_city_cnt, share2_ref3.c_lang_cnt
                                                         ->  Hash
                                                               Output: country_2.code, country_2.region
                                                               ->  PX Hash 6:6  (slice11; segments: 6)
                                                                     Output: country_2.code, country_2.region
                                                                     Hash Key: country_2.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                           Output: country_2.code, country_2.region
                                             ->  Hash
                                                   Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                   ->  PX Hash 6:6  (slice12; segments: 6)
                                                         Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                         Hash Key: country_3.region
                                                         ->  Hash Join
                                                               Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                               Hash Cond: (share2_ref2.code = country_3.code)
                                                               ->  PX Hash 6:6  (slice13; segments: 6)
                                                                     Output: share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                                     Hash Key: share2_ref2.code
                                                                     ->  Result
                                                                           Output: share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                                           Filter: ((share2_ref2.c_city_cnt / (share2_ref2.c_lang_cnt)::numeric) > '1'::numeric)
                                                                           ->  Shared Scan (Consumer; slice13; share2)
                                                                                 Output: share2_ref2.name, share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                               ->  Hash
                                                                     Output: country_3.region, country_3.code
                                                                     ->  PX Hash 6:6  (slice14; segments: 6)
                                                                           Output: country_3.region, country_3.code
                                                                           Hash Key: country_3.code
                                                                           ->  Nested Loop
                                                                                 Output: country_3.region, country_3.code
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice15; segments: 6)
                                                                                       Output: country_3.region, country_3.code, country_3.capital
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_3
                                                                                             Output: country_3.region, country_3.code, country_3.capital
                                                                                             Filter: (country_3.continent = 'Asia'::text)
                                                                                 ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                                                       Index Cond: (city_1.id = country_3.capital)
                           ->  Sort
                                 Output: (sum(share2_ref4.c_city_cnt)), (sum(share2_ref4.c_lang_cnt)), country_5.region
                                 Sort Key: country_5.region
                                 ->  HashAggregate
                                       Output: sum(share2_ref4.c_city_cnt), sum(share2_ref4.c_lang_cnt), country_5.region
                                       Group Key: country_5.region
                                       ->  Hash Join
                                             Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                             Hash Cond: (country_4.region = country_5.region)
                                             ->  PX Hash 6:6  (slice16; segments: 6)
                                                   Output: country_4.region
                                                   Hash Key: country_4.region
                                                   ->  Hash Join
                                                         Output: country_4.region
                                                         Hash Cond: (share2_ref5.code = country_4.code)
                                                         ->  PX Hash 6:6  (slice17; segments: 6)
                                                               Output: share2_ref5.code
                                                               Hash Key: share2_ref5.code
                                                               ->  Result
                                                                     Output: share2_ref5.code
                                                                     ->  Shared Scan (Consumer; slice17; share2)
                                                                           Output: share2_ref5.name, share2_ref5.code, share2_ref5.c_city_cnt, share2_ref5.c_lang_cnt
                                                         ->  Hash
                                                               Output: country_4.code, country_4.region
                                                               ->  PX Hash 6:6  (slice18; segments: 6)
                                                                     Output: country_4.code, country_4.region
                                                                     Hash Key: country_4.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_4
                                                                           Output: country_4.code, country_4.region
                                             ->  Hash
                                                   Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                   ->  PX Hash 6:6  (slice19; segments: 6)
                                                         Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                         Hash Key: country_5.region
                                                         ->  Hash Join
                                                               Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                               Hash Cond: (share2_ref4.code = country_5.code)
                                                               ->  Result
                                                                     Output: share2_ref4.code, share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt
                                                                     Filter: ((share2_ref4.c_city_cnt / (share2_ref4.c_lang_cnt)::numeric) > '1'::numeric)
                                                                     ->  Shared Scan (Consumer; slice19; share2)
                                                                           Output: share2_ref4.name, share2_ref4.code, share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt
                                                               ->  Hash
                                                                     Output: country_5.code, country_5.region
                                                                     ->  PX Broadcast 6:6  (slice20; segments: 6)
                                                                           Output: country_5.code, country_5.region
                                                                           ->  Hash Join
                                                                                 Output: country_5.code, country_5.region
                                                                                 Hash Cond: (share0_ref3.id = country_5.capital)
                                                                                 ->  PX Hash 6:6  (slice21; segments: 6)
                                                                                       Output: share0_ref3.id
                                                                                       Hash Key: share0_ref3.id
                                                                                       ->  Result
                                                                                             Output: share0_ref3.id
                                                                                             ->  Shared Scan (Consumer; slice21; share0)
                                                                                                   Output: share0_ref3.name, share0_ref3.id, share0_ref3.name_1, share0_ref3.district, share0_ref3.population
                                                                                 ->  Hash
                                                                                       Output: country_5.code, country_5.region, country_5.capital
                                                                                       ->  PX Hash 6:6  (slice22; segments: 6)
                                                                                             Output: country_5.code, country_5.region, country_5.capital
                                                                                             Hash Key: country_5.capital
                                                                                             ->  Partial Seq Scan on qp_with_clause.country country_5
                                                                                                   Output: country_5.code, country_5.region, country_5.capital
                                                                                                   Filter: (country_5.continent = 'Europe'::text)
 Optimizer: PolarDB PX Optimizer
(200 rows)

-- queries with CTEs using index scans on bitmap indexes
\echo --start_ignore
--start_ignore
Drop index bitmap_city_countrycode;
ERROR:  index "bitmap_city_countrycode" does not exist
Drop index bitmap_country_gf;
ERROR:  index "bitmap_country_gf" does not exist
Drop index bitmap_country_region;
ERROR:  index "bitmap_country_region" does not exist
Drop index bitmap_country_continent;
ERROR:  index "bitmap_country_continent" does not exist
Drop index bitmap_countrylanguage_countrycode;
ERROR:  index "bitmap_countrylanguage_countrycode" does not exist
\echo --end_ignore
--end_ignore
create index bitmap_city_countrycode on city using bitmap(countrycode);
ERROR:  access method "bitmap" does not exist
create index bitmap_country_gf on country using bitmap(governmentform);
ERROR:  access method "bitmap" does not exist
create index bitmap_country_region on country using bitmap(region);
ERROR:  access method "bitmap" does not exist
create index bitmap_country_continent on country using bitmap(continent);
ERROR:  access method "bitmap" does not exist
create index bitmap_countrylanguage_countrycode on countrylanguage using bitmap(countrycode);
ERROR:  access method "bitmap" does not exist
set enable_seqscan=off;
set enable_indexscan=on;
--query1
with capitals as 
(select country.code,id,city.name from city,country 
 where city.countrycode = country.code AND city.id = country.capital) 
select * from 
capitals,countrylanguage
where capitals.code = countrylanguage.countrycode and isofficial='true'
order by capitals.code,countrylanguage.language;
 code |  id  |               name                | countrycode |    language    | isofficial | percentage 
------+------+-----------------------------------+-------------+----------------+------------+------------
 ABW  |  129 | Oranjestad                        | ABW         | Dutch          | t          |        5.3
 AFG  |    1 | Kabul                             | AFG         | Dari           | t          |       32.1
 AFG  |    1 | Kabul                             | AFG         | Pashto         | t          |       52.4
 AIA  |   62 | The Valley                        | AIA         | English        | t          |          0
 ALB  |   34 | Tirana                            | ALB         | Albaniana      | t          |       97.9
 AND  |   55 | Andorra la Vella                  | AND         | Catalan        | t          |       32.3
 ANT  |   33 | Willemstad                        | ANT         | Dutch          | t          |          0
 ANT  |   33 | Willemstad                        | ANT         | Papiamento     | t          |       86.2
 ARE  |   65 | Abu Dhabi                         | ARE         | Arabic         | t          |         42
 ARG  |   69 | Buenos Aires                      | ARG         | Spanish        | t          |       96.8
 ARM  |  126 | Yerevan                           | ARM         | Armenian       | t          |       93.4
 ASM  |   54 | Fagatogo                          | ASM         | English        | t          |        3.1
 ASM  |   54 | Fagatogo                          | ASM         | Samoan         | t          |       90.6
 ATG  |   63 | Saint Johns                       | ATG         | English        | t          |          0
 AUS  |  135 | Canberra                          | AUS         | English        | t          |       81.2
 AUT  | 1523 | Wien                              | AUT         | German         | t          |         92
 AZE  |  144 | Baku                              | AZE         | Azerbaijani    | t          |         89
 BDI  |  552 | Bujumbura                         | BDI         | French         | t          |          0
 BDI  |  552 | Bujumbura                         | BDI         | Kirundi        | t          |       98.1
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | Dutch          | t          |       59.2
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | French         | t          |       32.6
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | German         | t          |          1
 BGD  |  150 | Dhaka                             | BGD         | Bengali        | t          |       97.7
 BGR  |  539 | Sofija                            | BGR         | Bulgariana     | t          |       83.2
 BHR  |  149 | al-Manama                         | BHR         | Arabic         | t          |       67.7
 BIH  |  201 | Sarajevo                          | BIH         | Serbo-Croatian | t          |       99.2
 BLR  | 3520 | Minsk                             | BLR         | Belorussian    | t          |       65.6
 BLR  | 3520 | Minsk                             | BLR         | Russian        | t          |         32
 BLZ  |  185 | Belmopan                          | BLZ         | English        | t          |       50.8
 BMU  |  191 | Hamilton                          | BMU         | English        | t          |        100
 BOL  |  194 | La Paz                            | BOL         | Aimara         | t          |        3.2
 BOL  |  194 | La Paz                            | BOL         | Ketdua         | t          |        8.1
 BOL  |  194 | La Paz                            | BOL         | Spanish        | t          |       87.7
 BRA  |  211 | Brasilia                          | BRA         | Portuguese     | t          |       97.5
 BRB  |  174 | Bridgetown                        | BRB         | English        | t          |          0
 BRN  |  538 | Bandar Seri Begawan               | BRN         | Malay          | t          |       45.5
 BTN  |  192 | Thimphu                           | BTN         | Dzongkha       | t          |         50
 CAN  | 1822 | Ottawa                            | CAN         | English        | t          |       60.4
 CAN  | 1822 | Ottawa                            | CAN         | French         | t          |       23.4
 CCK  | 2317 | West Island                       | CCK         | English        | t          |          0
 CHE  | 3248 | Bern                              | CHE         | French         | t          |       19.2
 CHE  | 3248 | Bern                              | CHE         | German         | t          |       63.6
 CHE  | 3248 | Bern                              | CHE         | Italian        | t          |        7.7
 CHE  | 3248 | Bern                              | CHE         | Romansh        | t          |        0.6
 CHL  |  554 | Santiago de Chile                 | CHL         | Spanish        | t          |       89.7
 CHN  | 1891 | Peking                            | CHN         | Chinese        | t          |         92
 COK  |  583 | Avarua                            | COK         | Maori          | t          |          0
 COL  | 2257 | Santafe de Bogota                 | COL         | Spanish        | t          |         99
 COM  | 2295 | Moroni                            | COM         | Comorian       | t          |         75
 CPV  | 1859 | Praia                             | CPV         | Portuguese     | t          |          0
 CRI  |  584 | San Jose                          | CRI         | Spanish        | t          |       97.5
 CUB  | 2413 | La Habana                         | CUB         | Spanish        | t          |        100
 CXR  | 1791 | Flying Fish Cove                  | CXR         | English        | t          |          0
 CYM  |  553 | George Town                       | CYM         | English        | t          |          0
 CYP  | 2430 | Nicosia                           | CYP         | Greek          | t          |       74.1
 CYP  | 2430 | Nicosia                           | CYP         | Turkish        | t          |       22.4
 CZE  | 3339 | Praha                             | CZE         | Czech          | t          |       81.2
 DEU  | 3068 | Berlin                            | DEU         | German         | t          |       91.3
 DJI  |  585 | Djibouti                          | DJI         | Arabic         | t          |       10.6
 DNK  | 3315 | Kobenhavn                         | DNK         | Danish         | t          |       93.5
 DOM  |  587 | Santo Domingo de Guzman           | DOM         | Spanish        | t          |         98
 DZA  |   35 | Alger                             | DZA         | Arabic         | t          |         86
 ECU  |  594 | Quito                             | ECU         | Spanish        | t          |         93
 EGY  |  608 | Cairo                             | EGY         | Arabic         | t          |       98.8
 ERI  |  652 | Asmara                            | ERI         | Tigrinja       | t          |       49.1
 ESH  | 2453 | El-Aaiun                          | ESH         | Arabic         | t          |        100
 ESP  |  653 | Madrid                            | ESP         | Spanish        | t          |       74.4
 EST  | 3791 | Tallinn                           | EST         | Estonian       | t          |       65.3
 FIN  | 3236 | Helsinki [Helsingfors]            | FIN         | Finnish        | t          |       92.7
 FIN  | 3236 | Helsinki [Helsingfors]            | FIN         | Swedish        | t          |        5.7
 FJI  |  764 | Suva                              | FJI         | Fijian         | t          |       50.8
 FLK  |  763 | Stanley                           | FLK         | English        | t          |          0
 FRA  | 2974 | Paris                             | FRA         | French         | t          |       93.6
 FRO  |  901 | Torshavn                          | FRO         | Danish         | t          |          0
 FRO  |  901 | Torshavn                          | FRO         | Faroese        | t          |        100
 GBR  |  456 | London                            | GBR         | English        | t          |       97.3
 GEO  |  905 | Tbilisi                           | GEO         | Georgiana      | t          |       71.7
 GIB  |  915 | Gibraltar                         | GIB         | English        | t          |       88.9
 GLP  |  919 | Basse-Terre                       | GLP         | French         | t          |          0
 GNB  |  927 | Bissau                            | GNB         | Portuguese     | t          |        8.1
 GRC  | 2401 | Athenai                           | GRC         | Greek          | t          |       98.5
 GRL  |  917 | Nuuk                              | GRL         | Danish         | t          |       12.5
 GRL  |  917 | Nuuk                              | GRL         | Greenlandic    | t          |       87.5
 GTM  |  922 | Ciudad de Guatemala               | GTM         | Spanish        | t          |       64.7
 GUM  |  921 | Agaaa                             | GUM         | Chamorro       | t          |       29.6
 GUM  |  921 | Agaaa                             | GUM         | English        | t          |       37.5
 HND  |  933 | Tegucigalpa                       | HND         | Spanish        | t          |       97.2
 HRV  | 2409 | Zagreb                            | HRV         | Serbo-Croatian | t          |       95.9
 HTI  |  929 | Port-au-Prince                    | HTI         | French         | t          |          0
 HUN  | 3483 | Budapest                          | HUN         | Hungarian      | t          |       98.5
 IDN  |  939 | Jakarta                           | IDN         | Malay          | t          |       12.1
 IND  | 1109 | New Delhi                         | IND         | Hindi          | t          |       39.9
 IRL  | 1447 | Dublin                            | IRL         | English        | t          |       98.4
 IRL  | 1447 | Dublin                            | IRL         | Irish          | t          |        1.6
 IRN  | 1380 | Teheran                           | IRN         | Persian        | t          |       45.7
 IRQ  | 1365 | Baghdad                           | IRQ         | Arabic         | t          |       77.2
 ISL  | 1449 | Reykjavik                         | ISL         | Icelandic      | t          |       95.7
 ISR  | 1450 | Jerusalem                         | ISR         | Arabic         | t          |         18
 ISR  | 1450 | Jerusalem                         | ISR         | Hebrew         | t          |       63.1
 ITA  | 1464 | Roma                              | ITA         | Italian        | t          |       94.1
 JOR  | 1786 | Amman                             | JOR         | Arabic         | t          |       97.9
 JPN  | 1532 | Tokyo                             | JPN         | Japanese       | t          |       99.1
 KAZ  | 1864 | Astana                            | KAZ         | Kazakh         | t          |         46
 KGZ  | 2253 | Bishkek                           | KGZ         | Kirgiz         | t          |       59.7
 KGZ  | 2253 | Bishkek                           | KGZ         | Russian        | t          |       16.2
 KHM  | 1800 | Phnom Penh                        | KHM         | Khmer          | t          |       88.6
 KIR  | 2256 | Bairiki                           | KIR         | Kiribati       | t          |       98.9
 KNA  | 3064 | Basseterre                        | KNA         | English        | t          |          0
 KOR  | 2331 | Seoul                             | KOR         | Korean         | t          |       99.9
 KWT  | 2429 | Kuwait                            | KWT         | Arabic         | t          |       78.1
 LAO  | 2432 | Vientiane                         | LAO         | Lao            | t          |       67.2
 LBN  | 2438 | Beirut                            | LBN         | Arabic         | t          |         93
 LBY  | 2441 | Tripoli                           | LBY         | Arabic         | t          |         96
 LCA  | 3065 | Castries                          | LCA         | English        | t          |         20
 LIE  | 2446 | Vaduz                             | LIE         | German         | t          |         89
 LKA  | 3217 | Colombo                           | LKA         | Singali        | t          |       60.3
 LKA  | 3217 | Colombo                           | LKA         | Tamil          | t          |       19.6
 LSO  | 2437 | Maseru                            | LSO         | English        | t          |          0
 LSO  | 2437 | Maseru                            | LSO         | Sotho          | t          |         85
 LTU  | 2447 | Vilnius                           | LTU         | Lithuanian     | t          |       81.6
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | French         | t          |        4.2
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | German         | t          |        2.3
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | Luxembourgish  | t          |       64.4
 LVA  | 2434 | Riga                              | LVA         | Latvian        | t          |       55.1
 MAC  | 2454 | Macao                             | MAC         | Portuguese     | t          |        2.3
 MAR  | 2486 | Rabat                             | MAR         | Arabic         | t          |         65
 MCO  | 2695 | Monaco-Ville                      | MCO         | French         | t          |       41.9
 MDA  | 2690 | Chisinau                          | MDA         | Romanian       | t          |       61.9
 MDG  | 2455 | Antananarivo                      | MDG         | French         | t          |          0
 MDG  | 2455 | Antananarivo                      | MDG         | Malagasy       | t          |       98.9
 MDV  | 2463 | Male                              | MDV         | Dhivehi        | t          |        100
 MEX  | 2515 | Ciudad de Mexico                  | MEX         | Spanish        | t          |       92.1
 MHL  | 2507 | Dalap-Uliga-Darrit                | MHL         | English        | t          |          0
 MHL  | 2507 | Dalap-Uliga-Darrit                | MHL         | Marshallese    | t          |       96.8
 MKD  | 2460 | Skopje                            | MKD         | Macedonian     | t          |       66.5
 MLT  | 2484 | Valletta                          | MLT         | English        | t          |        2.1
 MLT  | 2484 | Valletta                          | MLT         | Maltese        | t          |       95.8
 MMR  | 2710 | Rangoon (Yangon)                  | MMR         | Burmese        | t          |         69
 MNG  | 2696 | Ulan Bator                        | MNG         | Mongolian      | t          |       78.8
 MNP  | 2913 | Garapan                           | MNP         | English        | t          |        4.8
 MSR  | 2697 | Plymouth                          | MSR         | English        | t          |          0
 MTQ  | 2508 | Fort-de-France                    | MTQ         | French         | t          |          0
 MWI  | 2462 | Lilongwe                          | MWI         | Chichewa       | t          |       58.3
 MYS  | 2464 | Kuala Lumpur                      | MYS         | Malay          | t          |       58.4
 MYT  | 2514 | Mamoutzou                         | MYT         | French         | t          |       20.3
 NCL  | 3493 | Noumea                            | NCL         | French         | t          |       34.3
 NFK  | 2806 | Kingston                          | NFK         | English        | t          |          0
 NIC  | 2734 | Managua                           | NIC         | Spanish        | t          |       97.6
 NIU  | 2805 | Alofi                             | NIU         | English        | t          |          0
 NLD  |    5 | Amsterdam                         | NLD         | Dutch          | t          |       95.6
 NOR  | 2807 | Oslo                              | NOR         | Norwegian      | t          |       96.6
 NPL  | 2729 | Kathmandu                         | NPL         | Nepali         | t          |       50.4
 NRU  | 2728 | Yaren                             | NRU         | English        | t          |        7.5
 NRU  | 2728 | Yaren                             | NRU         | Nauru          | t          |       57.5
 NZL  | 3499 | Wellington                        | NZL         | English        | t          |         87
 OMN  | 2821 | Masqat                            | OMN         | Arabic         | t          |       76.7
 PAK  | 2831 | Islamabad                         | PAK         | Urdu           | t          |        7.6
 PAN  | 2882 | Ciudad de Panama                  | PAN         | Spanish        | t          |       76.8
 PER  | 2890 | Lima                              | PER         | Aimara         | t          |        2.3
 PER  | 2890 | Lima                              | PER         | Ketdua         | t          |       16.4
 PER  | 2890 | Lima                              | PER         | Spanish        | t          |       79.8
 PHL  |  766 | Manila                            | PHL         | Pilipino       | t          |       29.3
 PLW  | 2881 | Koror                             | PLW         | English        | t          |        3.2
 PLW  | 2881 | Koror                             | PLW         | Palau          | t          |       82.2
 POL  | 2928 | Warszawa                          | POL         | Polish         | t          |       97.6
 PRI  | 2919 | San Juan                          | PRI         | Spanish        | t          |       51.3
 PRK  | 2318 | Pyongyang                         | PRK         | Korean         | t          |       99.9
 PRT  | 2914 | Lisboa                            | PRT         | Portuguese     | t          |         99
 PRY  | 2885 | Asuncion                          | PRY         | Guarani        | t          |       40.1
 PRY  | 2885 | Asuncion                          | PRY         | Spanish        | t          |       55.1
 PYF  | 3016 | Papeete                           | PYF         | French         | t          |       40.8
 QAT  | 2973 | Doha                              | QAT         | Arabic         | t          |       40.7
 ROM  | 3018 | Bucuresti                         | ROM         | Romani         | t          |        0.7
 ROM  | 3018 | Bucuresti                         | ROM         | Romanian       | t          |       90.7
 RUS  | 3580 | Moscow                            | RUS         | Russian        | t          |       86.6
 RWA  | 3047 | Kigali                            | RWA         | French         | t          |          0
 RWA  | 3047 | Kigali                            | RWA         | Rwanda         | t          |        100
 SAU  | 3173 | Riyadh                            | SAU         | Arabic         | t          |         95
 SDN  | 3225 | Khartum                           | SDN         | Arabic         | t          |       49.4
 SEN  | 3198 | Dakar                             | SEN         | Wolof          | t          |       48.1
 SGP  | 3208 | Singapore                         | SGP         | Chinese        | t          |       77.1
 SGP  | 3208 | Singapore                         | SGP         | Malay          | t          |       14.1
 SGP  | 3208 | Singapore                         | SGP         | Tamil          | t          |        7.4
 SHN  | 3063 | Jamestown                         | SHN         | English        | t          |          0
 SJM  |  938 | Longyearbyen                      | SJM         | Norwegian      | t          |          0
 SLV  |  645 | San Salvador                      | SLV         | Spanish        | t          |        100
 SMR  | 3171 | San Marino                        | SMR         | Italian        | t          |        100
 SOM  | 3214 | Mogadishu                         | SOM         | Arabic         | t          |          0
 SOM  | 3214 | Mogadishu                         | SOM         | Somali         | t          |       98.3
 SPM  | 3067 | Saint-Pierre                      | SPM         | French         | t          |          0
 SVK  | 3209 | Bratislava                        | SVK         | Slovak         | t          |       85.6
 SVN  | 3212 | Ljubljana                         | SVN         | Slovene        | t          |       87.9
 SWE  | 3048 | Stockholm                         | SWE         | Swedish        | t          |       89.5
 SWZ  | 3244 | Mbabane                           | SWZ         | Swazi          | t          |       89.9
 SYC  | 3206 | Victoria                          | SYC         | English        | t          |        3.8
 SYC  | 3206 | Victoria                          | SYC         | French         | t          |        1.3
 SYR  | 3250 | Damascus                          | SYR         | Arabic         | t          |         90
 TCA  | 3423 | Cockburn Town                     | TCA         | English        | t          |          0
 TCD  | 3337 | NDjamena                          | TCD         | Arabic         | t          |       12.3
 TGO  | 3332 | Lome                              | TGO         | Ewe            | t          |       23.2
 TGO  | 3332 | Lome                              | TGO         | Kabye          | t          |       13.8
 THA  | 3320 | Bangkok                           | THA         | Thai           | t          |       52.6
 TJK  | 3261 | Dushanbe                          | TJK         | Tadzhik        | t          |       62.2
 TKL  | 3333 | Fakaofo                           | TKL         | English        | t          |          0
 TKM  | 3419 | Ashgabat                          | TKM         | Turkmenian     | t          |       76.7
 TMP  | 1522 | Dili                              | TMP         | Portuguese     | t          |          0
 TON  | 3334 | Nukualofa                         | TON         | English        | t          |          0
 TON  | 3334 | Nukualofa                         | TON         | Tongan         | t          |       98.3
 TUN  | 3349 | Tunis                             | TUN         | Arabic         | t          |       69.9
 TUR  | 3358 | Ankara                            | TUR         | Turkish        | t          |       87.6
 TUV  | 3424 | Funafuti                          | TUV         | English        | t          |          0
 TUV  | 3424 | Funafuti                          | TUV         | Tuvalu         | t          |       92.5
 TZA  | 3306 | Dodoma                            | TZA         | Swahili        | t          |        8.8
 UKR  | 3426 | Kyiv                              | UKR         | Ukrainian      | t          |       64.7
 URY  | 3492 | Montevideo                        | URY         | Spanish        | t          |       95.7
 USA  | 3813 | Washington                        | USA         | English        | t          |       86.2
 UZB  | 3503 | Toskent                           | UZB         | Uzbek          | t          |       72.6
 VAT  | 3538 | Citta del Vaticano                | VAT         | Italian        | t          |          0
 VCT  | 3066 | Kingstown                         | VCT         | English        | t          |          0
 VEN  | 3539 | Caracas                           | VEN         | Spanish        | t          |       96.9
 VGB  |  537 | Road Town                         | VGB         | English        | t          |          0
 VIR  | 4067 | Charlotte Amalie                  | VIR         | English        | t          |       81.7
 VNM  | 3770 | Hanoi                             | VNM         | Vietnamese     | t          |       86.8
 VUT  | 3537 | Port-Vila                         | VUT         | Bislama        | t          |       56.6
 VUT  | 3537 | Port-Vila                         | VUT         | English        | t          |       28.3
 VUT  | 3537 | Port-Vila                         | VUT         | French         | t          |       14.2
 WSM  | 3169 | Apia                              | WSM         | English        | t          |        0.6
 WSM  | 3169 | Apia                              | WSM         | Samoan         | t          |       47.5
 YEM  | 1780 | Sanaa                             | YEM         | Arabic         | t          |       99.6
 YUG  | 1792 | Beograd                           | YUG         | Serbo-Croatian | t          |       75.2
 ZAF  |  716 | Pretoria                          | ZAF         | Afrikaans      | t          |       14.3
 ZAF  |  716 | Pretoria                          | ZAF         | English        | t          |        8.5
 ZAF  |  716 | Pretoria                          | ZAF         | Xhosa          | t          |       17.7
 ZAF  |  716 | Pretoria                          | ZAF         | Zulu           | t          |       22.7
 ZWE  | 4068 | Harare                            | ZWE         | English        | t          |        2.2
(235 rows)

                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
   Merge Key: country.code, countrylanguage.language
   ->  Sort
         Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
         Sort Key: country.code, countrylanguage.language
         ->  Sort
               Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
               Sort Key: country.code, countrylanguage.language
               ->  Hash Join
                     Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           Hash Key: countrylanguage.countrycode
                           ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                 Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                 Filter: countrylanguage.isofficial
                     ->  Hash
                           Output: country.code, city.id, city.name
                           ->  Hash Join
                                 Output: country.code, city.id, city.name
                                 Hash Cond: ((city.countrycode = country.code) AND (city.id = country.capital))
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: city.id, city.name, city.countrycode
                                       Hash Key: city.countrycode
                                       ->  Partial Seq Scan on qp_with_clause.city
                                             Output: city.id, city.name, city.countrycode
                                 ->  Hash
                                       Output: country.code, country.capital
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: country.code, country.capital
                                             Hash Key: country.code
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.capital
 Optimizer: PolarDB PX Optimizer
(36 rows)

--query2
with lang_total as
( select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code)
 
select lang_count,country.code,country.name,country.continent,country.region,country.population
 from country left outer join lang_total
 on (lang_total.code = country.code)
 where country.indepyear > 1970 and lang_total.lang_count >=1 and lang_total.lang_count >=1
  order by lang_total.lang_count desc;
 lang_count | code |              name               | continent |     region      | population 
------------+------+---------------------------------+-----------+-----------------+------------
         12 | RUS  | Russian Federation              | Europe    | Eastern Europe  |  146934000
          6 | FSM  | Micronesia, Federated States of | Oceania   | Micronesia      |     119000
          4 | AZE  | Azerbaijan                      | Asia      | Middle East     |    7734000
          1 | BIH  | Bosnia and Herzegovina          | Europe    | Southern Europe |    3972000
(4 rows)

                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
   Merge Key: (count())
   ->  Sort
         Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
         Sort Key: (count()) DESC
         ->  Sort
               Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
               Sort Key: (count()) DESC
               ->  Nested Loop
                     Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
                     Join Filter: true
                     ->  PX Broadcast 6:6  (slice2; segments: 6)
                           Output: (count()), country.code
                           ->  Result
                                 Output: (count()), country.code
                                 Filter: (((count()) >= 1) AND (country.code = countrylanguage.countrycode))
                                 ->  GroupAggregate
                                       Output: count(), country.code, countrylanguage.countrycode
                                       Group Key: country.code, countrylanguage.countrycode
                                       ->  Sort
                                             Output: country.code, countrylanguage.countrycode
                                             Sort Key: country.code, countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice3; segments: 6)
                                                   Output: country.code, countrylanguage.countrycode
                                                   Hash Key: country.code, countrylanguage.countrycode
                                                   ->  Nested Loop
                                                         Output: country.code, countrylanguage.countrycode
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                               Output: country.code
                                                               ->  Partial Seq Scan on qp_with_clause.country
                                                                     Output: country.code
                                                                     Filter: (country.governmentform = 'Federal Republic'::text)
                                                         ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage
                                                               Output: countrylanguage.countrycode
                                                               Index Cond: (countrylanguage.countrycode = country.code)
                     ->  Partial Index Scan using country_pkey on qp_with_clause.country country_1
                           Output: country_1.code, country_1.name, country_1.continent, country_1.region, country_1.indepyear, country_1.population
                           Index Cond: (country_1.code = country.code)
                           Filter: (country_1.indepyear > 1970)
 Optimizer: PolarDB PX Optimizer
(42 rows)

-- Using CTE in the WHERE clause
--query3
with lang_total as
( select lang_count,countrycode from
  (
  (
   select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code)
 
   UNION ALL
 
  (
   select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Monarchy')
  group by country.code,countrylanguage.countrycode order by country.code)
 
 ) FOO1
)
select * from
(
select count(*) as cnt,country.code,country.name 
from
country,countrylanguage
where country.code=countrylanguage.countrycode group by country.code,country.name) AS FOO
where foo.cnt = (select max(lang_count) from lang_total) order by foo.code;
 cnt | code |        name        
-----+------+--------------------
  12 | CAN  | Canada
  12 | CHN  | China
  12 | IND  | India
  12 | RUS  | Russian Federation
  12 | USA  | United States
(5 rows)

                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (count()), country.code, country.name
   Merge Key: country.code
   ->  Sort
         Output: (count()), country.code, country.name
         Sort Key: country.code
         ->  Sort
               Output: (count()), country.code, country.name
               Sort Key: country.code
               ->  Hash Join
                     Output: (count()), country.code, country.name
                     Hash Cond: ((count()) = (max((count()))))
                     ->  HashAggregate
                           Output: count(), country.code, country.name
                           Group Key: country.code, country.name
                           ->  Hash Join
                                 Output: country.code, country.name
                                 Hash Cond: (country.code = countrylanguage.countrycode)
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: country.code, country.name
                                       Hash Key: country.code
                                       ->  Partial Seq Scan on qp_with_clause.country
                                             Output: country.code, country.name
                                 ->  Hash
                                       Output: countrylanguage.countrycode
                                       ->  PX Hash 6:6  (slice3; segments: 6)
                                             Output: countrylanguage.countrycode
                                             Hash Key: countrylanguage.countrycode
                                             ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                   Output: countrylanguage.countrycode
                     ->  Hash
                           Output: (max((count())))
                           ->  PX Broadcast 1:6  (slice4)
                                 Output: (max((count())))
                                 ->  Finalize Aggregate
                                       Output: max((count()))
                                       ->  PX Coordinator 6:1  (slice5; segments: 6)
                                             Output: (PARTIAL max((count())))
                                             ->  Partial Aggregate
                                                   Output: PARTIAL max((count()))
                                                   ->  Append
                                                         ->  GroupAggregate
                                                               Output: count()
                                                               Group Key: country_1.code, countrylanguage_1.countrycode
                                                               ->  Sort
                                                                     Output: countrylanguage_1.countrycode, country_1.code
                                                                     Sort Key: country_1.code, countrylanguage_1.countrycode
                                                                     ->  PX Hash 6:6  (slice6; segments: 6)
                                                                           Output: countrylanguage_1.countrycode, country_1.code
                                                                           Hash Key: country_1.code, countrylanguage_1.countrycode
                                                                           ->  Nested Loop
                                                                                 Output: countrylanguage_1.countrycode, country_1.code
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice7; segments: 6)
                                                                                       Output: country_1.code
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                             Output: country_1.code
                                                                                             Filter: (country_1.governmentform = 'Federal Republic'::text)
                                                                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                                                                       Output: countrylanguage_1.countrycode
                                                                                       Index Cond: (countrylanguage_1.countrycode = country_1.code)
                                                         ->  GroupAggregate
                                                               Output: count()
                                                               Group Key: country_2.code, countrylanguage_2.countrycode
                                                               ->  Sort
                                                                     Output: country_2.code, countrylanguage_2.countrycode
                                                                     Sort Key: country_2.code, countrylanguage_2.countrycode
                                                                     ->  PX Hash 6:6  (slice8; segments: 6)
                                                                           Output: country_2.code, countrylanguage_2.countrycode
                                                                           Hash Key: country_2.code, countrylanguage_2.countrycode
                                                                           ->  Nested Loop
                                                                                 Output: country_2.code, countrylanguage_2.countrycode
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                                                       Output: country_2.code
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                                             Output: country_2.code
                                                                                             Filter: (country_2.governmentform = 'Monarchy'::text)
                                                                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                                                                       Output: countrylanguage_2.countrycode
                                                                                       Index Cond: (countrylanguage_2.countrycode = country_2.code)
 Optimizer: PolarDB PX Optimizer
(82 rows)

--query4
with diversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country,
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country.code and country.gnp > 100000)
 select diversecountries.name,city.name,diversecountries.CNT
 from diversecountries,city where city.id = diversecountries.capital
 order by diversecountries.name;
        name        |       name       | cnt 
--------------------+------------------+-----
 Australia          | Canberra         |   8
 Austria            | Wien             |   8
 Canada             | Ottawa           |  12
 China              | Peking           |  12
 Denmark            | Kobenhavn        |   7
 India              | New Delhi        |  12
 Iran               | Teheran          |  10
 Italy              | Roma             |   8
 Myanmar            | Rangoon (Yangon) |   8
 Russian Federation | Moscow           |  12
 South Africa       | Pretoria         |  11
 United States      | Washington       |  12
(12 rows)

                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.name, city.name, (count())
   Merge Key: country.name
   ->  Sort
         Output: country.name, city.name, (count())
         Sort Key: country.name
         ->  Sort
               Output: country.name, city.name, (count())
               Sort Key: country.name
               ->  Nested Loop
                     Output: country.name, city.name, (count())
                     Join Filter: true
                     ->  PX Broadcast 6:6  (slice2; segments: 6)
                           Output: country.name, country.capital, (count())
                           ->  Hash Join
                                 Output: country.name, country.capital, (count())
                                 Hash Cond: (countrylanguage.countrycode = country.code)
                                 ->  Result
                                       Output: (count()), countrylanguage.countrycode
                                       Filter: ((count()) > 6)
                                       ->  HashAggregate
                                             Output: count(), count(), countrylanguage.countrycode
                                             Group Key: countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice3; segments: 6)
                                                   Output: countrylanguage.countrycode
                                                   Hash Key: countrylanguage.countrycode
                                                   ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                         Output: countrylanguage.countrycode
                                 ->  Hash
                                       Output: country.code, country.name, country.capital
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: country.code, country.name, country.capital
                                             Hash Key: country.code
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.capital
                                                   Filter: (country.gnp > '100000'::numeric)
                     ->  Partial Index Scan using city_pkey on qp_with_clause.city
                           Output: city.name
                           Index Cond: (city.id = country.capital)
 Optimizer: PolarDB PX Optimizer
(40 rows)

-- some queries with merge joins and index scans
set enable_nestloop=off;
set enable_hashjoin=off;
set enable_mergejoin=on;
-- query 5
with somecheapasiandiversecountries as
(
 select FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,count(*) ASIAN_COUNT from
 (
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Southeast Asia'
 and country.continent = 'Asia'
 
 UNION ALL
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Eastern Asia'
 and country.continent = 'Asia'
 UNION ALL
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Middle East'
 and country.continent = 'Asia'
 ) FOO, countrylanguage
 where FOO.code = countrylanguage.countrycode
 group by FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,countrylanguage.countrycode
 HAVING count(*) >=
 (select min(CNT) FROM
   (select count(*) CNT,country.code from countrylanguage,country
    where countrylanguage.countrycode=country.code
    and country.continent = 'Asia'
    and country.region = 'Southern and Central Asia'
    group by country.code
   ) FOO1
 )
)
select FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,count(*) COMPARED_WITH_CHEAP_ASIAN_CNT
from
(
select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
from country,city
where country.capital = city.id 
and country.continent = 'North America'
UNION ALL
select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
from country,city
where country.capital =	city.id	
and country.continent =	'South America'
) FOO,countrylanguage
where FOO.code = countrylanguage.countrycode
group by FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate
HAVING count(*)  >=
 (select min(ASIAN_COUNT) FROM
   (select ASIAN_COUNT FROM somecheapasiandiversecountries,country
    where somecheapasiandiversecountries.code = country.code
    and country.gnp >= country.gnpold
   ) ASIANCOUNT
 )
order by COUNTRY;
 code |             country              |         capital         |            headofstate            | compared_with_cheap_asian_cnt 
------+----------------------------------+-------------------------+-----------------------------------+-------------------------------
 ATG  | Antigua and Barbuda              | Saint Johns             | Elisabeth II                      |                             2
 ARG  | Argentina                        | Buenos Aires            | Fernando de la Rua                |                             3
 ABW  | Aruba                            | Oranjestad              | Beatrix                           |                             4
 BHS  | Bahamas                          | Nassau                  | Elisabeth II                      |                             2
 BRB  | Barbados                         | Bridgetown              | Elisabeth II                      |                             2
 BLZ  | Belize                           | Belmopan                | Elisabeth II                      |                             4
 BOL  | Bolivia                          | La Paz                  | Hugo Banzer Suarez                |                             4
 BRA  | Brazil                           | Brasilia                | Fernando Henrique Cardoso         |                             5
 CAN  | Canada                           | Ottawa                  | Elisabeth II                      |                            12
 CHL  | Chile                            | Santiago de Chile       | Ricardo Lagos Escobar             |                             4
 COL  | Colombia                         | Santafe de Bogota       | Andres Pastrana Arango            |                             5
 CRI  | Costa Rica                       | San Jose                | Miguel Angel Rodriguez Echeverria |                             4
 DMA  | Dominica                         | Roseau                  | Vernon Shaw                       |                             2
 DOM  | Dominican Republic               | Santo Domingo de Guzman | Hipolito Mejia Dominguez          |                             2
 ECU  | Ecuador                          | Quito                   | Gustavo Noboa Bejarano            |                             2
 SLV  | El Salvador                      | San Salvador            | Francisco Guillermo Flores Perez  |                             2
 GUF  | French Guiana                    | Cayenne                 | Jacques Chirac                    |                             2
 GRL  | Greenland                        | Nuuk                    | Margrethe II                      |                             2
 GLP  | Guadeloupe                       | Basse-Terre             | Jacques Chirac                    |                             2
 GTM  | Guatemala                        | Ciudad de Guatemala     | Alfonso Portillo Cabrera          |                             5
 GUY  | Guyana                           | Georgetown              | Bharrat Jagdeo                    |                             3
 HTI  | Haiti                            | Port-au-Prince          | Jean-Bertrand Aristide            |                             2
 HND  | Honduras                         | Tegucigalpa             | Carlos Roberto Flores Facusse     |                             4
 JAM  | Jamaica                          | Kingston                | Elisabeth II                      |                             2
 MTQ  | Martinique                       | Fort-de-France          | Jacques Chirac                    |                             2
 MEX  | Mexico                           | Ciudad de Mexico        | Vicente Fox Quesada               |                             6
 ANT  | Netherlands Antilles             | Willemstad              | Beatrix                           |                             3
 NIC  | Nicaragua                        | Managua                 | Arnoldo Aleman Lacayo             |                             4
 PAN  | Panama                           | Ciudad de Panama        | Mireya Elisa Moscoso Rodriguez    |                             6
 PRY  | Paraguay                         | Asuncion                | Luis Angel Gonzalez Macchi        |                             4
 PER  | Peru                             | Lima                    | Valentin Paniagua Corazao         |                             3
 PRI  | Puerto Rico                      | San Juan                | George W. Bush                    |                             2
 KNA  | Saint Kitts and Nevis            | Basseterre              | Elisabeth II                      |                             2
 LCA  | Saint Lucia                      | Castries                | Elisabeth II                      |                             2
 VCT  | Saint Vincent and the Grenadines | Kingstown               | Elisabeth II                      |                             2
 SUR  | Suriname                         | Paramaribo              | Ronald Venetiaan                  |                             2
 TTO  | Trinidad and Tobago              | Port-of-Spain           | Arthur N. R. Robinson             |                             3
 USA  | United States                    | Washington              | George W. Bush                    |                            12
 VEN  | Venezuela                        | Caracas                 | Hugo Chavez Frias                 |                             3
 VIR  | Virgin Islands, U.S.             | Charlotte Amalie        | George W. Bush                    |                             3
(40 rows)

                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, country.name, city.name, country.headofstate, (count())
   Merge Key: country.name
   ->  Sort
         Output: country.code, country.name, city.name, country.headofstate, (count())
         Sort Key: country.name
         ->  Sort
               Output: country.code, country.name, city.name, country.headofstate, (count())
               Sort Key: country.name
               ->  Nested Loop
                     Output: country.code, country.name, city.name, country.headofstate, (count())
                     Join Filter: ((count()) >= (min((count()))))
                     ->  PX Broadcast 1:6  (slice7)
                           Output: (min((count())))
                           ->  Finalize Aggregate
                                 Output: min((count()))
                                 ->  PX Coordinator 6:1  (slice8; segments: 6)
                                       Output: (PARTIAL min((count())))
                                       ->  Partial Aggregate
                                             Output: PARTIAL min((count()))
                                             ->  Nested Loop
                                                   Output: (count())
                                                   Join Filter: true
                                                   ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                         Output: country_2.code, (count())
                                                         ->  Nested Loop
                                                               Output: country_2.code, (count())
                                                               Join Filter: ((count()) >= (min((count()))))
                                                               ->  PX Broadcast 1:6  (slice15)
                                                                     Output: (min((count())))
                                                                     ->  Finalize Aggregate
                                                                           Output: min((count()))
                                                                           ->  PX Coordinator 6:1  (slice16; segments: 6)
                                                                                 Output: (PARTIAL min((count())))
                                                                                 ->  Partial Aggregate
                                                                                       Output: PARTIAL min((count()))
                                                                                       ->  Finalize GroupAggregate
                                                                                             Output: count(), country_5.code
                                                                                             Group Key: country_5.code
                                                                                             ->  Sort
                                                                                                   Output: country_5.code, (PARTIAL count())
                                                                                                   Sort Key: country_5.code
                                                                                                   ->  PX Hash 6:6  (slice17; segments: 6)
                                                                                                         Output: country_5.code, (PARTIAL count())
                                                                                                         Hash Key: country_5.code
                                                                                                         ->  Partial GroupAggregate
                                                                                                               Output: country_5.code, PARTIAL count()
                                                                                                               Group Key: country_5.code
                                                                                                               ->  Sort
                                                                                                                     Output: country_5.code
                                                                                                                     Sort Key: country_5.code
                                                                                                                     ->  Nested Loop
                                                                                                                           Output: country_5.code
                                                                                                                           Join Filter: true
                                                                                                                           ->  PX Broadcast 6:6  (slice18; segments: 6)
                                                                                                                                 Output: country_5.code
                                                                                                                                 ->  Partial Seq Scan on qp_with_clause.country country_5
                                                                                                                                       Output: country_5.code
                                                                                                                                       Filter: ((country_5.continent = 'Asia'::text) AND (country_5.region = 'Southern and Central Asia'::text))
                                                                                                                           ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                                                                                                                 Index Cond: (countrylanguage_2.countrycode = country_5.code)
                                                               ->  Materialize
                                                                     Output: (count()), (count()), country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                     ->  HashAggregate
                                                                           Output: count(), count(), country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                           Group Key: country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                           ->  Hash Join
                                                                                 Output: country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                                 Hash Cond: (countrylanguage_1.countrycode = country_2.code)
                                                                                 ->  PX Hash 6:6  (slice10; segments: 6)
                                                                                       Output: countrylanguage_1.countrycode
                                                                                       Hash Key: countrylanguage_1.countrycode
                                                                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage countrylanguage_1
                                                                                             Output: countrylanguage_1.countrycode
                                                                                 ->  Hash
                                                                                       Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                       ->  PX Hash 6:6  (slice11; segments: 6)
                                                                                             Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                             Hash Key: country_2.code
                                                                                             ->  Append
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice12; segments: 6)
                                                                                                               Output: country_2.code, country_2.name, country_2.headofstate, country_2.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                                                                     Output: country_2.code, country_2.name, country_2.headofstate, country_2.capital
                                                                                                                     Filter: ((country_2.gnp < '10000'::numeric) AND (country_2.region = 'Southeast Asia'::text) AND (country_2.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_2
                                                                                                               Output: city_2.name
                                                                                                               Index Cond: (city_2.id = country_2.capital)
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_3.code, country_3.name, city_3.name, country_3.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice13; segments: 6)
                                                                                                               Output: country_3.code, country_3.name, country_3.headofstate, country_3.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_3
                                                                                                                     Output: country_3.code, country_3.name, country_3.headofstate, country_3.capital
                                                                                                                     Filter: ((country_3.gnp < '10000'::numeric) AND (country_3.region = 'Eastern Asia'::text) AND (country_3.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_3
                                                                                                               Output: city_3.name
                                                                                                               Index Cond: (city_3.id = country_3.capital)
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_4.code, country_4.name, city_4.name, country_4.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice14; segments: 6)
                                                                                                               Output: country_4.code, country_4.name, country_4.headofstate, country_4.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_4
                                                                                                                     Output: country_4.code, country_4.name, country_4.headofstate, country_4.capital
                                                                                                                     Filter: ((country_4.gnp < '10000'::numeric) AND (country_4.region = 'Middle East'::text) AND (country_4.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_4
                                                                                                               Output: city_4.name
                                                                                                               Index Cond: (city_4.id = country_4.capital)
                                                   ->  Partial Index Scan using country_pkey on qp_with_clause.country country_6
                                                         Output: country_6.gnp, country_6.gnpold
                                                         Index Cond: (country_6.code = country_2.code)
                                                         Filter: (country_6.gnp >= country_6.gnpold)
                     ->  HashAggregate
                           Output: count(), count(), country.code, country.name, country.headofstate, city.name
                           Group Key: country.name, country.code, city.name, country.headofstate
                           ->  Materialize
                                 Output: country.code, country.name, country.headofstate, city.name
                                 ->  Hash Join
                                       Output: country.code, country.name, country.headofstate, city.name
                                       Hash Cond: (country.code = countrylanguage.countrycode)
                                       ->  Append
                                             ->  PX Hash 6:6  (slice2; segments: 6)
                                                   Output: country.code, country.name, city.name, country.headofstate
                                                   Hash Key: country.code
                                                   ->  Nested Loop
                                                         Output: country.code, country.name, city.name, country.headofstate
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice3; segments: 6)
                                                               Output: country.code, country.name, country.headofstate, country.capital
                                                               ->  Partial Seq Scan on qp_with_clause.country
                                                                     Output: country.code, country.name, country.headofstate, country.capital
                                                                     Filter: (country.continent = 'North America'::text)
                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                                               Output: city.name
                                                               Index Cond: (city.id = country.capital)
                                             ->  PX Hash 6:6  (slice4; segments: 6)
                                                   Output: country_1.code, country_1.name, city_1.name, country_1.headofstate
                                                   Hash Key: country_1.code
                                                   ->  Nested Loop
                                                         Output: country_1.code, country_1.name, city_1.name, country_1.headofstate
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                               Output: country_1.code, country_1.name, country_1.headofstate, country_1.capital
                                                               ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                     Output: country_1.code, country_1.name, country_1.headofstate, country_1.capital
                                                                     Filter: (country_1.continent = 'South America'::text)
                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                               Output: city_1.name
                                                               Index Cond: (city_1.id = country_1.capital)
                                       ->  Hash
                                             Output: countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice6; segments: 6)
                                                   Output: countrylanguage.countrycode
                                                   Hash Key: countrylanguage.countrycode
                                                   ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                         Output: countrylanguage.countrycode
 Optimizer: PolarDB PX Optimizer
(162 rows)

-- query 6 
 
select count(*) from
( select r.* from
  ( with fact as 
     (
      select country.name as COUNTRY,country.code,city.name as CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,AGG1.region
      from      
         (select
         sum(case when (city.population >= 0.5 * country.population) then country.population else city.population end) as S_POPULATION,
         sum(case when (gnp >= gnpold) then gnp else gnpold end) as S_GNP,
         avg(case when (lifeexpectancy > 60) then 50 else lifeexpectancy end) as AVG_LIFE,country.region
         from country,city  
         where governmentform != 'Constitutional Monarchy'
         and country.capital = city.id
         and indepyear > 0
         group by country.region) AGG1
         ,country,city
         where country.capital = city.id
         and country.region = AGG1.region
      )
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'South America'
     
     UNION ALL
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'North America'
     
     UNION ALL
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'Caribbean'
 ) as r
 left join
  (
   select 'ARG' as CODE UNION ALL
   select 'BOL' as CODE UNION ALL
   select 'BRA' as CODE UNION ALL
   select 'PER' as CODE UNION ALL
   select 'URY' as CODE UNION ALL
   select 'IND' as CODE  UNION ALL
   select 'LCA' as CODE UNION ALL
   select 'VCT' as CODE
   ) as r1
on r.code = r1.code) AS FOO;
 count 
-------
    43
(1 row)

                                                                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count()
   ->  Hash Left Join
         Hash Cond: ((share0_ref2.code)::text = ('ARG'::text))
         ->  PX Coordinator 6:1  (slice1; segments: 6)
               Output: share0_ref2.code
               ->  Sequence
                     Output: share0_ref2.code
                     ->  Shared Scan (Producer; slice1; share0)
                           Output: share0_ref1.name, share0_ref1.code, share0_ref1.name_1, share0_ref1.s_population, share0_ref1.s_gnp, share0_ref1.avg_life, share0_ref1.region
                           ->  Hash Join
                                 Output: country.name, country.code, city.name, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)), country_1.region
                                 Hash Cond: (country.region = country_1.region)
                                 ->  Nested Loop
                                       Output: country.code, country.name, country.region, city.name
                                       Join Filter: true
                                       ->  PX Broadcast 6:6  (slice2; segments: 6)
                                             Output: country.code, country.name, country.region, country.capital
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.region, country.capital
                                                   Filter: (country.region = ANY ('{Caribbean,"North America","South America"}'::text[]))
                                       ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                             Output: city.name
                                             Index Cond: (city.id = country.capital)
                                 ->  Hash
                                       Output: country_1.region, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                       ->  PX Broadcast 6:6  (slice3; segments: 6)
                                             Output: country_1.region, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                             ->  Finalize GroupAggregate
                                                   Output: country_1.region, sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END), sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END), avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)
                                                   Group Key: country_1.region
                                                   ->  Sort
                                                         Output: country_1.region, (PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                                         Sort Key: country_1.region
                                                         ->  PX Hash 6:6  (slice4; segments: 6)
                                                               Output: country_1.region, (PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                                               Hash Key: country_1.region
                                                               ->  Partial HashAggregate
                                                                     Output: country_1.region, PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END), PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END), PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)
                                                                     Group Key: country_1.region
                                                                     ->  Nested Loop
                                                                           Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, city_1.population
                                                                           Join Filter: true
                                                                           ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                                                 Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, country_1.capital
                                                                                 ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                       Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, country_1.capital
                                                                                       Filter: ((country_1.governmentform <> 'Constitutional Monarchy'::text) AND (country_1.indepyear > 0) AND ((country_1.region = 'South America'::text) OR (country_1.region = 'North America'::text) OR (country_1.region = 'Caribbean'::text)) AND (country_1.region = ANY ('{Caribbean,"North America","South America"}'::text[])))
                                                                           ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                                                 Output: city_1.population
                                                                                 Index Cond: (city_1.id = country_1.capital)
                     ->  Append
                           ->  Nested Loop
                                 Output: share0_ref2.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice6; segments: 6)
                                       Output: share0_ref2.code
                                       ->  Result
                                             Output: share0_ref2.code
                                             Filter: (share0_ref2.region = 'South America'::text)
                                             ->  Shared Scan (Consumer; slice6; share0)
                                                   Output: share0_ref2.name, share0_ref2.code, share0_ref2.name_1, share0_ref2.s_population, share0_ref2.s_gnp, share0_ref2.avg_life, share0_ref2.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage
                                       Output: countrylanguage.isofficial
                                       Index Cond: (countrylanguage.countrycode = share0_ref2.code)
                                       Filter: countrylanguage.isofficial
                           ->  Nested Loop
                                 Output: share0_ref3.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice7; segments: 6)
                                       Output: share0_ref3.code
                                       ->  Result
                                             Output: share0_ref3.code
                                             Filter: (share0_ref3.region = 'North America'::text)
                                             ->  Shared Scan (Consumer; slice7; share0)
                                                   Output: share0_ref3.name, share0_ref3.code, share0_ref3.name_1, share0_ref3.s_population, share0_ref3.s_gnp, share0_ref3.avg_life, share0_ref3.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                       Output: countrylanguage_1.isofficial
                                       Index Cond: (countrylanguage_1.countrycode = share0_ref3.code)
                                       Filter: countrylanguage_1.isofficial
                           ->  Nested Loop
                                 Output: share0_ref4.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice8; segments: 6)
                                       Output: share0_ref4.code
                                       ->  Result
                                             Output: share0_ref4.code
                                             Filter: (share0_ref4.region = 'Caribbean'::text)
                                             ->  Shared Scan (Consumer; slice8; share0)
                                                   Output: share0_ref4.name, share0_ref4.code, share0_ref4.name_1, share0_ref4.s_population, share0_ref4.s_gnp, share0_ref4.avg_life, share0_ref4.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                       Output: countrylanguage_2.isofficial
                                       Index Cond: (countrylanguage_2.countrycode = share0_ref4.code)
                                       Filter: countrylanguage_2.isofficial
         ->  Hash
               Output: ('ARG'::text)
               ->  Append
                     ->  Result
                           Output: 'ARG'::text
                     ->  Result
                           Output: 'BOL'::text
                     ->  Result
                           Output: 'BRA'::text
                     ->  Result
                           Output: 'PER'::text
                     ->  Result
                           Output: 'URY'::text
                     ->  Result
                           Output: 'IND'::text
                     ->  Result
                           Output: 'LCA'::text
                     ->  Result
                           Output: 'VCT'::text
 Optimizer: PolarDB PX Optimizer
(114 rows)

-- query8
with allcountrystats as 
( select country.code,country.name,count(distinct city.id) CITY_CNT,
  count(distinct countrylanguage.language) LANG_CNT
  from country,city,countrylanguage
  where country.code = city.countrycode
  and country.code = countrylanguage.countrycode
  group by country.code,country.name
)
select sum(FOO.CITY_CNT) REGION_CITY_CNT,sum(FOO.LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > 1
and country.continent = 'Asia'
UNION ALL
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > 1
and country.continent = 'North America'
UNION ALL
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > (select  max(CITY_CNT/LANG_CNT)  from allcountrystats,country where allcountrystats.code = country.code AND country.continent='Europe')
) FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region;
 region_city_cnt | region_lang_cnt |          region           
-----------------+-----------------+---------------------------
             840 |             192 | Caribbean
            2824 |             112 | Central America
            8250 |             252 | Eastern Asia
            2664 |             396 | Middle East
            1625 |             125 | North America
            3500 |              70 | South America
            3179 |             528 | Southeast Asia
           12278 |             896 | Southern and Central Asia
(8 rows)

-- some queries with hash joins and index scans
set enable_nestloop=off;
set enable_hashjoin=on;
set enable_mergejoin=off;
--query 9
with diversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country,
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country.code and country.gnp > 100000)
select d1.code,d1.name,d1.capital,city.name CAPITAL_CITY,d1.CNT,d2.CNT
from
diversecountries d1 left join country
ON (d1.code = country.code AND d1.CNT < 8)
left join diversecountries d2
ON (country.code = d2.code AND d2.CNT > 8)
INNER JOIN city
ON(d1.capital = city.id)
ORDER BY d1.name;
 code |        name        | capital |   capital_city   | cnt | cnt 
------+--------------------+---------+------------------+-----+-----
 AUS  | Australia          |     135 | Canberra         |   8 |    
 AUT  | Austria            |    1523 | Wien             |   8 |    
 CAN  | Canada             |    1822 | Ottawa           |  12 |    
 CHN  | China              |    1891 | Peking           |  12 |    
 DNK  | Denmark            |    3315 | Kobenhavn        |   7 |    
 IND  | India              |    1109 | New Delhi        |  12 |    
 IRN  | Iran               |    1380 | Teheran          |  10 |    
 ITA  | Italy              |    1464 | Roma             |   8 |    
 MMR  | Myanmar            |    2710 | Rangoon (Yangon) |   8 |    
 RUS  | Russian Federation |    3580 | Moscow           |  12 |    
 ZAF  | South Africa       |     716 | Pretoria         |  11 |    
 USA  | United States      |    3813 | Washington       |  12 |    
(12 rows)

                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
   Merge Key: share0_ref3.name
   ->  Sequence
         Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.code, share0_ref1.name, share0_ref1.capital, share0_ref1.cnt
               ->  Hash Join
                     Output: country.code, country.name, country.capital, (count())
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  Result
                           Output: countrylanguage.countrycode, (count())
                           Filter: ((count()) > 6)
                           ->  HashAggregate
                                 Output: count(), count(), countrylanguage.countrycode
                                 Group Key: countrylanguage.countrycode
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: countrylanguage.countrycode
                                       Hash Key: countrylanguage.countrycode
                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                             Output: countrylanguage.countrycode
                     ->  Hash
                           Output: country.code, country.name, country.capital
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name, country.capital
                                 Hash Key: country.code
                                 ->  Partial Seq Scan on qp_with_clause.country
                                       Output: country.code, country.name, country.capital
                                       Filter: (country.gnp > '100000'::numeric)
         ->  Sort
               Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
               Sort Key: share0_ref3.name
               ->  Hash Left Join
                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
                     Hash Cond: (country_1.code = share0_ref2.code)
                     ->  PX Hash 6:6  (slice4; segments: 6)
                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code, city.name
                           Hash Key: country_1.code
                           ->  Nested Loop
                                 Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code, city.name
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice5; segments: 6)
                                       Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code
                                       ->  Nested Loop Left Join
                                             Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code
                                             Join Filter: true
                                             ->  Shared Scan (Consumer; slice5; share0)
                                                   Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt
                                             ->  Full Index Scan using country_pkey on qp_with_clause.country country_1
                                                   Output: country_1.code
                                                   Index Cond: (country_1.code = share0_ref3.code)
                                                   Filter: (share0_ref3.cnt < 8)
                                 ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                       Output: city.name
                                       Index Cond: (city.id = share0_ref3.capital)
                     ->  Hash
                           Output: share0_ref2.code, share0_ref2.cnt
                           ->  Result
                                 Output: share0_ref2.code, share0_ref2.cnt
                                 Filter: (share0_ref2.cnt > 8)
                                 ->  Shared Scan (Producer; slice1; share0)
                                       Output: share0_ref2.code, share0_ref2.name, share0_ref2.capital, share0_ref2.cnt
 Optimizer: PolarDB PX Optimizer
(63 rows)

--query 10 , multiple ctes, joins
with longlivingregions as 
(
select FOO.*,count(distinct language) as "lang_count"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       avg(lifeexpectancy) as "REGION_LIFETIME",region
     from
      country
     group by region
    ) FOO,countrylanguage,country
where
   country.code = countrylanguage.countrycode
   and FOO.region = country.region
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP",foo."REGION_LIFETIME"),
denseregions as 
(
select FOO.*,count(distinct language) as "lang_count",
       sum(surfacearea) as "REGION_SURFACE_AREA"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       region
     from
      country
     group by region
    ) FOO,countrylanguage,country
where
   country.code = countrylanguage.countrycode
   and FOO.region = country.region
   and FOO."REGION_POP" != 0
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP"
order by sum(surfacearea)/foo."REGION_POP" desc),
allcountrystats as 
( select country.code,country.name,count(distinct city.id) CITY_CNT,
  count(distinct countrylanguage.language) LANG_CNT
  from country,city,countrylanguage
  where country.code = city.countrycode
  and country.code = countrylanguage.countrycode
  group by country.code,country.name
)
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear between 1800 and 1850
UNION ALL
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear between 1850 and 1900
UNION ALL
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear > 1900
order by name
LIMIT 50;
 city_cnt | lang_cnt |                 name                  | REGION_SURFACE_AREA | REGION_LIFETIME  | REGION_POP | lang_count | REGION_GNP |          region           
----------+----------+---------------------------------------+---------------------+------------------+------------+------------+------------+---------------------------
        4 |        5 | Afghanistan                           |         90749795.00 | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        1 |        3 | Albania                               |          5845195.40 | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
       18 |        2 | Algeria                               |         36993520.00 | 65.3857127598354 |  173266000 |         14 |  243870.00 | Northern Africa
        5 |        9 | Angola                                |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        1 |        2 | Antigua and Barbuda                   |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       57 |        3 | Argentina                             |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        3 |        2 | Armenia                               |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       14 |        8 | Australia                             |         62471162.00 | 78.8000030517578 |   22753100 |         11 |  405851.00 | Australia and New Zealand
        6 |        8 | Austria                               |          6649768.00 | 78.2555567423503 |  183247600 |         21 | 4673272.00 | Western Europe
        4 |        4 | Azerbaijan                            |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
        1 |        2 | Bahamas                               |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        1 |        2 | Bahrain                               |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       24 |        7 | Bangladesh                            |         90749795.00 | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        1 |        2 | Barbados                              |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       16 |        4 | Belarus                               |        214731845.00 | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        9 |        6 | Belgium                               |          6649768.00 | 78.2555567423503 |  183247600 |         21 | 4673272.00 | Western Europe
        2 |        4 | Belize                                |         14052371.00 | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
        4 |        7 | Benin                                 |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        3 | Bhutan                                |         90749795.00 | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        8 |        4 | Bolivia                               |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        3 |        1 | Bosnia and Herzegovina                |          5845195.40 | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
        2 |        5 | Botswana                              |         23060186.00 | 44.8199996948242 |   46886000 |         21 |  126931.00 | Southern Africa
      250 |        5 | Brazil                                |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        1 |        4 | Brunei                                |         35322186.00 | 64.4000001387163 |  518541000 |         47 |  642643.00 | Southeast Asia
       10 |        4 | Bulgaria                              |        214731845.00 | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        3 |        6 | Burkina Faso                          |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        3 | Burundi                               |         43631319.00 | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        3 |        4 | Cambodia                              |         35322186.00 | 64.4000001387163 |  518541000 |         47 |  642643.00 | Southeast Asia
        7 |        8 | Cameroon                              |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       49 |       12 | Canada                                |        236342035.00 | 75.8199996948242 |  309632000 |         18 | 9111890.00 | North America
        1 |        2 | Cape Verde                            |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        6 | Central African Republic              |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        2 |        8 | Chad                                  |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       29 |        4 | Chile                                 |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
       38 |        5 | Colombia                              |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        1 |        5 | Comoros                               |         43631319.00 | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        2 |        6 | Congo                                 |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       18 |       10 | Congo, The Democratic Republic of the |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        1 |        4 | Costa Rica                            |         14052371.00 | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
        5 |        5 | Cote deIvoire                         |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        4 |        2 | Croatia                               |          5845195.40 | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
       14 |        1 | Cuba                                  |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        2 |        2 | Cyprus                                |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       10 |        8 | Czech Republic                        |        214731845.00 | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        1 |        3 | Djibouti                              |         43631319.00 | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        1 |        2 | Dominica                              |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        6 |        2 | Dominican Republic                    |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       15 |        2 | Ecuador                               |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
       37 |        2 | Egypt                                 |         36993520.00 | 65.3857127598354 |  173266000 |         14 |  243870.00 | Northern Africa
        7 |        2 | El Salvador                           |         14052371.00 | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
(50 rows)

--query 11
with allcitystats as 
( select city.name CITY,city.id,country.name COUNTRY,city.district,city.population as CITY_POP
  from
  city,country
  where city.countrycode = country.code
),
alldistrictstats as 
( select allcitystats.district,allcitystats.COUNTRY,sum(CITY_POP) DISTRICT_POP,
  count(CITY) as D_CITY_CNT
  from allcitystats
  group by allcitystats.district,allcitystats.COUNTRY
  order by district,COUNTRY
),
allcountrystats as 
( select alldistrictstats.COUNTRY,country.code,sum(D_CITY_CNT) C_CITY_CNT,
  count(distinct countrylanguage.language) C_LANG_CNT
  from alldistrictstats,country,countrylanguage
  where alldistrictstats.COUNTRY = country.name
  and country.code = countrylanguage.countrycode
  group by COUNTRY,code
),
asian_region_stats as 
(
select sum(FOO.C_CITY_CNT) REGION_CITY_CNT,sum(FOO.C_LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountrystats.code,allcountrystats.COUNTRY,C_CITY_CNT,C_LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and C_CITY_CNT/C_LANG_CNT > 1
and country.continent = 'Asia') FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region
)
select * from
(
select REGION_CITY_CNT as CITY_CNT,REGION_LANG_CNT as LANG_CNT, region as IDENTIFIER from asian_region_stats
UNION ALL
(
select sum(FOO.C_CITY_CNT) CITY_CNT,sum(FOO.C_LANG_CNT) LANG_CNT,FOO.region as IDENTIFIER
FROM
(
select allcountrystats.code,allcountrystats.COUNTRY,C_CITY_CNT,C_LANG_CNT,country.region,allcitystats.CITY CAPITAL
from allcountrystats,country,allcitystats
where allcountrystats.code = country.code
and country.capital = allcitystats.id
and C_CITY_CNT/C_LANG_CNT > 1
and country.continent = 'Europe') FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region
)
) FOO1
order by FOO1.lang_cnt,FOO1.identifier;
 city_cnt | lang_cnt |        identifier         
----------+----------+---------------------------
      494 |       10 | British Islands
      159 |       48 | Baltic Countries
    36060 |      132 | Eastern Asia
     1295 |      161 | Nordic Countries
     9414 |      369 | Western Europe
    11880 |      450 | Southern Europe
    32900 |      610 | Eastern Europe
    29161 |      616 | Southeast Asia
     8568 |      792 | Middle East
    80388 |     1092 | Southern and Central Asia
(10 rows)

                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
   Merge Key: (sum(share2_ref2.c_lang_cnt)), country_3.region
   ->  Sequence
         Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.name, share0_ref1.id, share0_ref1.name_1, share0_ref1.district, share0_ref1.population
               ->  Hash Join
                     Output: city.name, city.id, country.name, city.district, city.population
                     Hash Cond: (city.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: city.id, city.name, city.countrycode, city.district, city.population
                           Hash Key: city.countrycode
                           ->  Partial Seq Scan on qp_with_clause.city
                                 Output: city.id, city.name, city.countrycode, city.district, city.population
                     ->  Hash
                           Output: country.code, country.name
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name
                                 Hash Key: country.code
                                 ->  Partial Seq Scan on qp_with_clause.country
                                       Output: country.code, country.name
         ->  Sequence
               Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
               ->  Shared Scan (Producer; slice1; share2)
                     Output: share2_ref1.name, share2_ref1.code, share2_ref1.c_city_cnt, share2_ref1.c_lang_cnt
                     ->  GroupAggregate
                           Output: share0_ref2.name_1, country_1.code, sum((count(share0_ref2.name))), count(DISTINCT countrylanguage.language)
                           Group Key: share0_ref2.name_1, country_1.code
                           ->  Sort
                                 Output: share0_ref2.name_1, (count(share0_ref2.name)), country_1.code, countrylanguage.language
                                 Sort Key: share0_ref2.name_1, country_1.code
                                 ->  Hash Join
                                       Output: share0_ref2.name_1, (count(share0_ref2.name)), country_1.code, countrylanguage.language
                                       Hash Cond: (share0_ref2.name_1 = country_1.name)
                                       ->  Sort
                                             Output: share0_ref2.district, share0_ref2.name_1, (count(share0_ref2.name))
                                             Sort Key: share0_ref2.district, share0_ref2.name_1
                                             ->  PX Hash 6:6  (slice4; segments: 6)
                                                   Output: share0_ref2.district, share0_ref2.name_1, (count(share0_ref2.name))
                                                   Hash Key: share0_ref2.name_1
                                                   ->  HashAggregate
                                                         Output: share0_ref2.district, share0_ref2.name_1, count(share0_ref2.name)
                                                         Group Key: share0_ref2.district, share0_ref2.name_1
                                                         ->  PX Hash 6:6  (slice5; segments: 6)
                                                               Output: share0_ref2.district, share0_ref2.name_1, share0_ref2.name, share0_ref2.population
                                                               Hash Key: share0_ref2.district, share0_ref2.name_1
                                                               ->  Result
                                                                     Output: share0_ref2.district, share0_ref2.name_1, share0_ref2.name, share0_ref2.population
                                                                     ->  Shared Scan (Consumer; slice5; share0)
                                                                           Output: share0_ref2.name, share0_ref2.id, share0_ref2.name_1, share0_ref2.district, share0_ref2.population
                                       ->  Hash
                                             Output: country_1.code, country_1.name, countrylanguage.language
                                             ->  PX Hash 6:6  (slice6; segments: 6)
                                                   Output: country_1.code, country_1.name, countrylanguage.language
                                                   Hash Key: country_1.name
                                                   ->  Hash Join
                                                         Output: country_1.code, country_1.name, countrylanguage.language
                                                         Hash Cond: (countrylanguage.countrycode = country_1.code)
                                                         ->  PX Hash 6:6  (slice7; segments: 6)
                                                               Output: countrylanguage.countrycode, countrylanguage.language
                                                               Hash Key: countrylanguage.countrycode
                                                               ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                                     Output: countrylanguage.countrycode, countrylanguage.language
                                                         ->  Hash
                                                               Output: country_1.code, country_1.name
                                                               ->  PX Hash 6:6  (slice8; segments: 6)
                                                                     Output: country_1.code, country_1.name
                                                                     Hash Key: country_1.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                           Output: country_1.code, country_1.name
               ->  Sort
                     Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
                     Sort Key: (sum(share2_ref2.c_lang_cnt)), country_3.region
                     ->  Append
                           ->  Sort
                                 Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
                                 Sort Key: country_3.region
                                 ->  HashAggregate
                                       Output: sum(share2_ref2.c_city_cnt), sum(share2_ref2.c_lang_cnt), country_3.region
                                       Group Key: country_3.region
                                       ->  Hash Join
                                             Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                             Hash Cond: (country_2.region = country_3.region)
                                             ->  PX Hash 6:6  (slice9; segments: 6)
                                                   Output: country_2.region
                                                   Hash Key: country_2.region
                                                   ->  Hash Join
                                                         Output: country_2.region
                                                         Hash Cond: (share2_ref3.code = country_2.code)
                                                         ->  PX Hash 6:6  (slice10; segments: 6)
                                                               Output: share2_ref3.code
                                                               Hash Key: share2_ref3.code
                                                               ->  Result
                                                                     Output: share2_ref3.code
                                                                     ->  Shared Scan (Consumer; slice10; share2)
                                                                           Output: share2_ref3.name, share2_ref3.code, share2_ref3.c_city_cnt, share2_ref3.c_lang_cnt
                                                         ->  Hash
                                                               Output: country_2.code, country_2.region
                                                               ->  PX Hash 6:6  (slice11; segments: 6)
                                                                     Output: country_2.code, country_2.region
                                                                     Hash Key: country_2.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                           Output: country_2.code, country_2.region
                                             ->  Hash
                                                   Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                   ->  PX Hash 6:6  (slice12; segments: 6)
                                                         Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                         Hash Key: country_3.region
                                                         ->  Hash Join
                                                               Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                               Hash Cond: (share2_ref2.code = country_3.code)
                                                               ->  PX Hash 6:6  (slice13; segments: 6)
                                                                     Output: share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                                     Hash Key: share2_ref2.code
                                                                     ->  Result
                                                                           Output: share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                                           Filter: ((share2_ref2.c_city_cnt / (share2_ref2.c_lang_cnt)::numeric) > '1'::numeric)
                                                                           ->  Shared Scan (Consumer; slice13; share2)
                                                                                 Output: share2_ref2.name, share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                               ->  Hash
                                                                     Output: country_3.region, country_3.code
                                                                     ->  PX Hash 6:6  (slice14; segments: 6)
                                                                           Output: country_3.region, country_3.code
                                                                           Hash Key: country_3.code
                                                                           ->  Nested Loop
                                                                                 Output: country_3.region, country_3.code
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice15; segments: 6)
                                                                                       Output: country_3.region, country_3.code, country_3.capital
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_3
                                                                                             Output: country_3.region, country_3.code, country_3.capital
                                                                                             Filter: (country_3.continent = 'Asia'::text)
                                                                                 ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                                                       Index Cond: (city_1.id = country_3.capital)
                           ->  Sort
                                 Output: (sum(share2_ref4.c_city_cnt)), (sum(share2_ref4.c_lang_cnt)), country_5.region
                                 Sort Key: country_5.region
                                 ->  HashAggregate
                                       Output: sum(share2_ref4.c_city_cnt), sum(share2_ref4.c_lang_cnt), country_5.region
                                       Group Key: country_5.region
                                       ->  Hash Join
                                             Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                             Hash Cond: (country_4.region = country_5.region)
                                             ->  PX Hash 6:6  (slice16; segments: 6)
                                                   Output: country_4.region
                                                   Hash Key: country_4.region
                                                   ->  Hash Join
                                                         Output: country_4.region
                                                         Hash Cond: (share2_ref5.code = country_4.code)
                                                         ->  PX Hash 6:6  (slice17; segments: 6)
                                                               Output: share2_ref5.code
                                                               Hash Key: share2_ref5.code
                                                               ->  Result
                                                                     Output: share2_ref5.code
                                                                     ->  Shared Scan (Consumer; slice17; share2)
                                                                           Output: share2_ref5.name, share2_ref5.code, share2_ref5.c_city_cnt, share2_ref5.c_lang_cnt
                                                         ->  Hash
                                                               Output: country_4.code, country_4.region
                                                               ->  PX Hash 6:6  (slice18; segments: 6)
                                                                     Output: country_4.code, country_4.region
                                                                     Hash Key: country_4.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_4
                                                                           Output: country_4.code, country_4.region
                                             ->  Hash
                                                   Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                   ->  PX Hash 6:6  (slice19; segments: 6)
                                                         Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                         Hash Key: country_5.region
                                                         ->  Hash Join
                                                               Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                               Hash Cond: (share2_ref4.code = country_5.code)
                                                               ->  Result
                                                                     Output: share2_ref4.code, share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt
                                                                     Filter: ((share2_ref4.c_city_cnt / (share2_ref4.c_lang_cnt)::numeric) > '1'::numeric)
                                                                     ->  Shared Scan (Consumer; slice19; share2)
                                                                           Output: share2_ref4.name, share2_ref4.code, share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt
                                                               ->  Hash
                                                                     Output: country_5.code, country_5.region
                                                                     ->  PX Broadcast 6:6  (slice20; segments: 6)
                                                                           Output: country_5.code, country_5.region
                                                                           ->  Hash Join
                                                                                 Output: country_5.code, country_5.region
                                                                                 Hash Cond: (share0_ref3.id = country_5.capital)
                                                                                 ->  PX Hash 6:6  (slice21; segments: 6)
                                                                                       Output: share0_ref3.id
                                                                                       Hash Key: share0_ref3.id
                                                                                       ->  Result
                                                                                             Output: share0_ref3.id
                                                                                             ->  Shared Scan (Consumer; slice21; share0)
                                                                                                   Output: share0_ref3.name, share0_ref3.id, share0_ref3.name_1, share0_ref3.district, share0_ref3.population
                                                                                 ->  Hash
                                                                                       Output: country_5.code, country_5.region, country_5.capital
                                                                                       ->  PX Hash 6:6  (slice22; segments: 6)
                                                                                             Output: country_5.code, country_5.region, country_5.capital
                                                                                             Hash Key: country_5.capital
                                                                                             ->  Partial Seq Scan on qp_with_clause.country country_5
                                                                                                   Output: country_5.code, country_5.region, country_5.capital
                                                                                                   Filter: (country_5.continent = 'Europe'::text)
 Optimizer: PolarDB PX Optimizer
(200 rows)

-- queries with CTEs using hash aggs
set enable_groupagg=off;
ERROR:  unrecognized configuration parameter "enable_groupagg"
set enable_hashagg=on;
--query1
with capitals as 
(select country.code,id,city.name from city,country 
 where city.countrycode = country.code AND city.id = country.capital) 
select * from 
capitals,countrylanguage
where capitals.code = countrylanguage.countrycode and isofficial='true'
order by capitals.code,countrylanguage.language;
 code |  id  |               name                | countrycode |    language    | isofficial | percentage 
------+------+-----------------------------------+-------------+----------------+------------+------------
 ABW  |  129 | Oranjestad                        | ABW         | Dutch          | t          |        5.3
 AFG  |    1 | Kabul                             | AFG         | Dari           | t          |       32.1
 AFG  |    1 | Kabul                             | AFG         | Pashto         | t          |       52.4
 AIA  |   62 | The Valley                        | AIA         | English        | t          |          0
 ALB  |   34 | Tirana                            | ALB         | Albaniana      | t          |       97.9
 AND  |   55 | Andorra la Vella                  | AND         | Catalan        | t          |       32.3
 ANT  |   33 | Willemstad                        | ANT         | Dutch          | t          |          0
 ANT  |   33 | Willemstad                        | ANT         | Papiamento     | t          |       86.2
 ARE  |   65 | Abu Dhabi                         | ARE         | Arabic         | t          |         42
 ARG  |   69 | Buenos Aires                      | ARG         | Spanish        | t          |       96.8
 ARM  |  126 | Yerevan                           | ARM         | Armenian       | t          |       93.4
 ASM  |   54 | Fagatogo                          | ASM         | English        | t          |        3.1
 ASM  |   54 | Fagatogo                          | ASM         | Samoan         | t          |       90.6
 ATG  |   63 | Saint Johns                       | ATG         | English        | t          |          0
 AUS  |  135 | Canberra                          | AUS         | English        | t          |       81.2
 AUT  | 1523 | Wien                              | AUT         | German         | t          |         92
 AZE  |  144 | Baku                              | AZE         | Azerbaijani    | t          |         89
 BDI  |  552 | Bujumbura                         | BDI         | French         | t          |          0
 BDI  |  552 | Bujumbura                         | BDI         | Kirundi        | t          |       98.1
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | Dutch          | t          |       59.2
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | French         | t          |       32.6
 BEL  |  179 | Bruxelles [Brussel]               | BEL         | German         | t          |          1
 BGD  |  150 | Dhaka                             | BGD         | Bengali        | t          |       97.7
 BGR  |  539 | Sofija                            | BGR         | Bulgariana     | t          |       83.2
 BHR  |  149 | al-Manama                         | BHR         | Arabic         | t          |       67.7
 BIH  |  201 | Sarajevo                          | BIH         | Serbo-Croatian | t          |       99.2
 BLR  | 3520 | Minsk                             | BLR         | Belorussian    | t          |       65.6
 BLR  | 3520 | Minsk                             | BLR         | Russian        | t          |         32
 BLZ  |  185 | Belmopan                          | BLZ         | English        | t          |       50.8
 BMU  |  191 | Hamilton                          | BMU         | English        | t          |        100
 BOL  |  194 | La Paz                            | BOL         | Aimara         | t          |        3.2
 BOL  |  194 | La Paz                            | BOL         | Ketdua         | t          |        8.1
 BOL  |  194 | La Paz                            | BOL         | Spanish        | t          |       87.7
 BRA  |  211 | Brasilia                          | BRA         | Portuguese     | t          |       97.5
 BRB  |  174 | Bridgetown                        | BRB         | English        | t          |          0
 BRN  |  538 | Bandar Seri Begawan               | BRN         | Malay          | t          |       45.5
 BTN  |  192 | Thimphu                           | BTN         | Dzongkha       | t          |         50
 CAN  | 1822 | Ottawa                            | CAN         | English        | t          |       60.4
 CAN  | 1822 | Ottawa                            | CAN         | French         | t          |       23.4
 CCK  | 2317 | West Island                       | CCK         | English        | t          |          0
 CHE  | 3248 | Bern                              | CHE         | French         | t          |       19.2
 CHE  | 3248 | Bern                              | CHE         | German         | t          |       63.6
 CHE  | 3248 | Bern                              | CHE         | Italian        | t          |        7.7
 CHE  | 3248 | Bern                              | CHE         | Romansh        | t          |        0.6
 CHL  |  554 | Santiago de Chile                 | CHL         | Spanish        | t          |       89.7
 CHN  | 1891 | Peking                            | CHN         | Chinese        | t          |         92
 COK  |  583 | Avarua                            | COK         | Maori          | t          |          0
 COL  | 2257 | Santafe de Bogota                 | COL         | Spanish        | t          |         99
 COM  | 2295 | Moroni                            | COM         | Comorian       | t          |         75
 CPV  | 1859 | Praia                             | CPV         | Portuguese     | t          |          0
 CRI  |  584 | San Jose                          | CRI         | Spanish        | t          |       97.5
 CUB  | 2413 | La Habana                         | CUB         | Spanish        | t          |        100
 CXR  | 1791 | Flying Fish Cove                  | CXR         | English        | t          |          0
 CYM  |  553 | George Town                       | CYM         | English        | t          |          0
 CYP  | 2430 | Nicosia                           | CYP         | Greek          | t          |       74.1
 CYP  | 2430 | Nicosia                           | CYP         | Turkish        | t          |       22.4
 CZE  | 3339 | Praha                             | CZE         | Czech          | t          |       81.2
 DEU  | 3068 | Berlin                            | DEU         | German         | t          |       91.3
 DJI  |  585 | Djibouti                          | DJI         | Arabic         | t          |       10.6
 DNK  | 3315 | Kobenhavn                         | DNK         | Danish         | t          |       93.5
 DOM  |  587 | Santo Domingo de Guzman           | DOM         | Spanish        | t          |         98
 DZA  |   35 | Alger                             | DZA         | Arabic         | t          |         86
 ECU  |  594 | Quito                             | ECU         | Spanish        | t          |         93
 EGY  |  608 | Cairo                             | EGY         | Arabic         | t          |       98.8
 ERI  |  652 | Asmara                            | ERI         | Tigrinja       | t          |       49.1
 ESH  | 2453 | El-Aaiun                          | ESH         | Arabic         | t          |        100
 ESP  |  653 | Madrid                            | ESP         | Spanish        | t          |       74.4
 EST  | 3791 | Tallinn                           | EST         | Estonian       | t          |       65.3
 FIN  | 3236 | Helsinki [Helsingfors]            | FIN         | Finnish        | t          |       92.7
 FIN  | 3236 | Helsinki [Helsingfors]            | FIN         | Swedish        | t          |        5.7
 FJI  |  764 | Suva                              | FJI         | Fijian         | t          |       50.8
 FLK  |  763 | Stanley                           | FLK         | English        | t          |          0
 FRA  | 2974 | Paris                             | FRA         | French         | t          |       93.6
 FRO  |  901 | Torshavn                          | FRO         | Danish         | t          |          0
 FRO  |  901 | Torshavn                          | FRO         | Faroese        | t          |        100
 GBR  |  456 | London                            | GBR         | English        | t          |       97.3
 GEO  |  905 | Tbilisi                           | GEO         | Georgiana      | t          |       71.7
 GIB  |  915 | Gibraltar                         | GIB         | English        | t          |       88.9
 GLP  |  919 | Basse-Terre                       | GLP         | French         | t          |          0
 GNB  |  927 | Bissau                            | GNB         | Portuguese     | t          |        8.1
 GRC  | 2401 | Athenai                           | GRC         | Greek          | t          |       98.5
 GRL  |  917 | Nuuk                              | GRL         | Danish         | t          |       12.5
 GRL  |  917 | Nuuk                              | GRL         | Greenlandic    | t          |       87.5
 GTM  |  922 | Ciudad de Guatemala               | GTM         | Spanish        | t          |       64.7
 GUM  |  921 | Agaaa                             | GUM         | Chamorro       | t          |       29.6
 GUM  |  921 | Agaaa                             | GUM         | English        | t          |       37.5
 HND  |  933 | Tegucigalpa                       | HND         | Spanish        | t          |       97.2
 HRV  | 2409 | Zagreb                            | HRV         | Serbo-Croatian | t          |       95.9
 HTI  |  929 | Port-au-Prince                    | HTI         | French         | t          |          0
 HUN  | 3483 | Budapest                          | HUN         | Hungarian      | t          |       98.5
 IDN  |  939 | Jakarta                           | IDN         | Malay          | t          |       12.1
 IND  | 1109 | New Delhi                         | IND         | Hindi          | t          |       39.9
 IRL  | 1447 | Dublin                            | IRL         | English        | t          |       98.4
 IRL  | 1447 | Dublin                            | IRL         | Irish          | t          |        1.6
 IRN  | 1380 | Teheran                           | IRN         | Persian        | t          |       45.7
 IRQ  | 1365 | Baghdad                           | IRQ         | Arabic         | t          |       77.2
 ISL  | 1449 | Reykjavik                         | ISL         | Icelandic      | t          |       95.7
 ISR  | 1450 | Jerusalem                         | ISR         | Arabic         | t          |         18
 ISR  | 1450 | Jerusalem                         | ISR         | Hebrew         | t          |       63.1
 ITA  | 1464 | Roma                              | ITA         | Italian        | t          |       94.1
 JOR  | 1786 | Amman                             | JOR         | Arabic         | t          |       97.9
 JPN  | 1532 | Tokyo                             | JPN         | Japanese       | t          |       99.1
 KAZ  | 1864 | Astana                            | KAZ         | Kazakh         | t          |         46
 KGZ  | 2253 | Bishkek                           | KGZ         | Kirgiz         | t          |       59.7
 KGZ  | 2253 | Bishkek                           | KGZ         | Russian        | t          |       16.2
 KHM  | 1800 | Phnom Penh                        | KHM         | Khmer          | t          |       88.6
 KIR  | 2256 | Bairiki                           | KIR         | Kiribati       | t          |       98.9
 KNA  | 3064 | Basseterre                        | KNA         | English        | t          |          0
 KOR  | 2331 | Seoul                             | KOR         | Korean         | t          |       99.9
 KWT  | 2429 | Kuwait                            | KWT         | Arabic         | t          |       78.1
 LAO  | 2432 | Vientiane                         | LAO         | Lao            | t          |       67.2
 LBN  | 2438 | Beirut                            | LBN         | Arabic         | t          |         93
 LBY  | 2441 | Tripoli                           | LBY         | Arabic         | t          |         96
 LCA  | 3065 | Castries                          | LCA         | English        | t          |         20
 LIE  | 2446 | Vaduz                             | LIE         | German         | t          |         89
 LKA  | 3217 | Colombo                           | LKA         | Singali        | t          |       60.3
 LKA  | 3217 | Colombo                           | LKA         | Tamil          | t          |       19.6
 LSO  | 2437 | Maseru                            | LSO         | English        | t          |          0
 LSO  | 2437 | Maseru                            | LSO         | Sotho          | t          |         85
 LTU  | 2447 | Vilnius                           | LTU         | Lithuanian     | t          |       81.6
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | French         | t          |        4.2
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | German         | t          |        2.3
 LUX  | 2452 | Luxembourg [Luxemburg/Letzebuerg] | LUX         | Luxembourgish  | t          |       64.4
 LVA  | 2434 | Riga                              | LVA         | Latvian        | t          |       55.1
 MAC  | 2454 | Macao                             | MAC         | Portuguese     | t          |        2.3
 MAR  | 2486 | Rabat                             | MAR         | Arabic         | t          |         65
 MCO  | 2695 | Monaco-Ville                      | MCO         | French         | t          |       41.9
 MDA  | 2690 | Chisinau                          | MDA         | Romanian       | t          |       61.9
 MDG  | 2455 | Antananarivo                      | MDG         | French         | t          |          0
 MDG  | 2455 | Antananarivo                      | MDG         | Malagasy       | t          |       98.9
 MDV  | 2463 | Male                              | MDV         | Dhivehi        | t          |        100
 MEX  | 2515 | Ciudad de Mexico                  | MEX         | Spanish        | t          |       92.1
 MHL  | 2507 | Dalap-Uliga-Darrit                | MHL         | English        | t          |          0
 MHL  | 2507 | Dalap-Uliga-Darrit                | MHL         | Marshallese    | t          |       96.8
 MKD  | 2460 | Skopje                            | MKD         | Macedonian     | t          |       66.5
 MLT  | 2484 | Valletta                          | MLT         | English        | t          |        2.1
 MLT  | 2484 | Valletta                          | MLT         | Maltese        | t          |       95.8
 MMR  | 2710 | Rangoon (Yangon)                  | MMR         | Burmese        | t          |         69
 MNG  | 2696 | Ulan Bator                        | MNG         | Mongolian      | t          |       78.8
 MNP  | 2913 | Garapan                           | MNP         | English        | t          |        4.8
 MSR  | 2697 | Plymouth                          | MSR         | English        | t          |          0
 MTQ  | 2508 | Fort-de-France                    | MTQ         | French         | t          |          0
 MWI  | 2462 | Lilongwe                          | MWI         | Chichewa       | t          |       58.3
 MYS  | 2464 | Kuala Lumpur                      | MYS         | Malay          | t          |       58.4
 MYT  | 2514 | Mamoutzou                         | MYT         | French         | t          |       20.3
 NCL  | 3493 | Noumea                            | NCL         | French         | t          |       34.3
 NFK  | 2806 | Kingston                          | NFK         | English        | t          |          0
 NIC  | 2734 | Managua                           | NIC         | Spanish        | t          |       97.6
 NIU  | 2805 | Alofi                             | NIU         | English        | t          |          0
 NLD  |    5 | Amsterdam                         | NLD         | Dutch          | t          |       95.6
 NOR  | 2807 | Oslo                              | NOR         | Norwegian      | t          |       96.6
 NPL  | 2729 | Kathmandu                         | NPL         | Nepali         | t          |       50.4
 NRU  | 2728 | Yaren                             | NRU         | English        | t          |        7.5
 NRU  | 2728 | Yaren                             | NRU         | Nauru          | t          |       57.5
 NZL  | 3499 | Wellington                        | NZL         | English        | t          |         87
 OMN  | 2821 | Masqat                            | OMN         | Arabic         | t          |       76.7
 PAK  | 2831 | Islamabad                         | PAK         | Urdu           | t          |        7.6
 PAN  | 2882 | Ciudad de Panama                  | PAN         | Spanish        | t          |       76.8
 PER  | 2890 | Lima                              | PER         | Aimara         | t          |        2.3
 PER  | 2890 | Lima                              | PER         | Ketdua         | t          |       16.4
 PER  | 2890 | Lima                              | PER         | Spanish        | t          |       79.8
 PHL  |  766 | Manila                            | PHL         | Pilipino       | t          |       29.3
 PLW  | 2881 | Koror                             | PLW         | English        | t          |        3.2
 PLW  | 2881 | Koror                             | PLW         | Palau          | t          |       82.2
 POL  | 2928 | Warszawa                          | POL         | Polish         | t          |       97.6
 PRI  | 2919 | San Juan                          | PRI         | Spanish        | t          |       51.3
 PRK  | 2318 | Pyongyang                         | PRK         | Korean         | t          |       99.9
 PRT  | 2914 | Lisboa                            | PRT         | Portuguese     | t          |         99
 PRY  | 2885 | Asuncion                          | PRY         | Guarani        | t          |       40.1
 PRY  | 2885 | Asuncion                          | PRY         | Spanish        | t          |       55.1
 PYF  | 3016 | Papeete                           | PYF         | French         | t          |       40.8
 QAT  | 2973 | Doha                              | QAT         | Arabic         | t          |       40.7
 ROM  | 3018 | Bucuresti                         | ROM         | Romani         | t          |        0.7
 ROM  | 3018 | Bucuresti                         | ROM         | Romanian       | t          |       90.7
 RUS  | 3580 | Moscow                            | RUS         | Russian        | t          |       86.6
 RWA  | 3047 | Kigali                            | RWA         | French         | t          |          0
 RWA  | 3047 | Kigali                            | RWA         | Rwanda         | t          |        100
 SAU  | 3173 | Riyadh                            | SAU         | Arabic         | t          |         95
 SDN  | 3225 | Khartum                           | SDN         | Arabic         | t          |       49.4
 SEN  | 3198 | Dakar                             | SEN         | Wolof          | t          |       48.1
 SGP  | 3208 | Singapore                         | SGP         | Chinese        | t          |       77.1
 SGP  | 3208 | Singapore                         | SGP         | Malay          | t          |       14.1
 SGP  | 3208 | Singapore                         | SGP         | Tamil          | t          |        7.4
 SHN  | 3063 | Jamestown                         | SHN         | English        | t          |          0
 SJM  |  938 | Longyearbyen                      | SJM         | Norwegian      | t          |          0
 SLV  |  645 | San Salvador                      | SLV         | Spanish        | t          |        100
 SMR  | 3171 | San Marino                        | SMR         | Italian        | t          |        100
 SOM  | 3214 | Mogadishu                         | SOM         | Arabic         | t          |          0
 SOM  | 3214 | Mogadishu                         | SOM         | Somali         | t          |       98.3
 SPM  | 3067 | Saint-Pierre                      | SPM         | French         | t          |          0
 SVK  | 3209 | Bratislava                        | SVK         | Slovak         | t          |       85.6
 SVN  | 3212 | Ljubljana                         | SVN         | Slovene        | t          |       87.9
 SWE  | 3048 | Stockholm                         | SWE         | Swedish        | t          |       89.5
 SWZ  | 3244 | Mbabane                           | SWZ         | Swazi          | t          |       89.9
 SYC  | 3206 | Victoria                          | SYC         | English        | t          |        3.8
 SYC  | 3206 | Victoria                          | SYC         | French         | t          |        1.3
 SYR  | 3250 | Damascus                          | SYR         | Arabic         | t          |         90
 TCA  | 3423 | Cockburn Town                     | TCA         | English        | t          |          0
 TCD  | 3337 | NDjamena                          | TCD         | Arabic         | t          |       12.3
 TGO  | 3332 | Lome                              | TGO         | Ewe            | t          |       23.2
 TGO  | 3332 | Lome                              | TGO         | Kabye          | t          |       13.8
 THA  | 3320 | Bangkok                           | THA         | Thai           | t          |       52.6
 TJK  | 3261 | Dushanbe                          | TJK         | Tadzhik        | t          |       62.2
 TKL  | 3333 | Fakaofo                           | TKL         | English        | t          |          0
 TKM  | 3419 | Ashgabat                          | TKM         | Turkmenian     | t          |       76.7
 TMP  | 1522 | Dili                              | TMP         | Portuguese     | t          |          0
 TON  | 3334 | Nukualofa                         | TON         | English        | t          |          0
 TON  | 3334 | Nukualofa                         | TON         | Tongan         | t          |       98.3
 TUN  | 3349 | Tunis                             | TUN         | Arabic         | t          |       69.9
 TUR  | 3358 | Ankara                            | TUR         | Turkish        | t          |       87.6
 TUV  | 3424 | Funafuti                          | TUV         | English        | t          |          0
 TUV  | 3424 | Funafuti                          | TUV         | Tuvalu         | t          |       92.5
 TZA  | 3306 | Dodoma                            | TZA         | Swahili        | t          |        8.8
 UKR  | 3426 | Kyiv                              | UKR         | Ukrainian      | t          |       64.7
 URY  | 3492 | Montevideo                        | URY         | Spanish        | t          |       95.7
 USA  | 3813 | Washington                        | USA         | English        | t          |       86.2
 UZB  | 3503 | Toskent                           | UZB         | Uzbek          | t          |       72.6
 VAT  | 3538 | Citta del Vaticano                | VAT         | Italian        | t          |          0
 VCT  | 3066 | Kingstown                         | VCT         | English        | t          |          0
 VEN  | 3539 | Caracas                           | VEN         | Spanish        | t          |       96.9
 VGB  |  537 | Road Town                         | VGB         | English        | t          |          0
 VIR  | 4067 | Charlotte Amalie                  | VIR         | English        | t          |       81.7
 VNM  | 3770 | Hanoi                             | VNM         | Vietnamese     | t          |       86.8
 VUT  | 3537 | Port-Vila                         | VUT         | Bislama        | t          |       56.6
 VUT  | 3537 | Port-Vila                         | VUT         | English        | t          |       28.3
 VUT  | 3537 | Port-Vila                         | VUT         | French         | t          |       14.2
 WSM  | 3169 | Apia                              | WSM         | English        | t          |        0.6
 WSM  | 3169 | Apia                              | WSM         | Samoan         | t          |       47.5
 YEM  | 1780 | Sanaa                             | YEM         | Arabic         | t          |       99.6
 YUG  | 1792 | Beograd                           | YUG         | Serbo-Croatian | t          |       75.2
 ZAF  |  716 | Pretoria                          | ZAF         | Afrikaans      | t          |       14.3
 ZAF  |  716 | Pretoria                          | ZAF         | English        | t          |        8.5
 ZAF  |  716 | Pretoria                          | ZAF         | Xhosa          | t          |       17.7
 ZAF  |  716 | Pretoria                          | ZAF         | Zulu           | t          |       22.7
 ZWE  | 4068 | Harare                            | ZWE         | English        | t          |        2.2
(235 rows)

                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
   Merge Key: country.code, countrylanguage.language
   ->  Sort
         Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
         Sort Key: country.code, countrylanguage.language
         ->  Sort
               Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
               Sort Key: country.code, countrylanguage.language
               ->  Hash Join
                     Output: country.code, city.id, city.name, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           Hash Key: countrylanguage.countrycode
                           ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                 Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                 Filter: countrylanguage.isofficial
                     ->  Hash
                           Output: country.code, city.id, city.name
                           ->  Hash Join
                                 Output: country.code, city.id, city.name
                                 Hash Cond: ((city.countrycode = country.code) AND (city.id = country.capital))
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: city.id, city.name, city.countrycode
                                       Hash Key: city.countrycode
                                       ->  Partial Seq Scan on qp_with_clause.city
                                             Output: city.id, city.name, city.countrycode
                                 ->  Hash
                                       Output: country.code, country.capital
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: country.code, country.capital
                                             Hash Key: country.code
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.capital
 Optimizer: PolarDB PX Optimizer
(36 rows)

--query2
with lang_total as
( select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code)
 
select lang_count,country.code,country.name,country.continent,country.region,country.population
 from country left outer join lang_total
 on (lang_total.code = country.code)
 where country.indepyear > 1970 and lang_total.lang_count >=1 and lang_total.lang_count >=1
  order by lang_total.lang_count desc;
 lang_count | code |              name               | continent |     region      | population 
------------+------+---------------------------------+-----------+-----------------+------------
         12 | RUS  | Russian Federation              | Europe    | Eastern Europe  |  146934000
          6 | FSM  | Micronesia, Federated States of | Oceania   | Micronesia      |     119000
          4 | AZE  | Azerbaijan                      | Asia      | Middle East     |    7734000
          1 | BIH  | Bosnia and Herzegovina          | Europe    | Southern Europe |    3972000
(4 rows)

                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
   Merge Key: (count())
   ->  Sort
         Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
         Sort Key: (count()) DESC
         ->  Sort
               Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
               Sort Key: (count()) DESC
               ->  Nested Loop
                     Output: (count()), country_1.code, country_1.name, country_1.continent, country_1.region, country_1.population
                     Join Filter: true
                     ->  PX Broadcast 6:6  (slice2; segments: 6)
                           Output: (count()), country.code
                           ->  Result
                                 Output: (count()), country.code
                                 Filter: (((count()) >= 1) AND (country.code = countrylanguage.countrycode))
                                 ->  GroupAggregate
                                       Output: count(), country.code, countrylanguage.countrycode
                                       Group Key: country.code, countrylanguage.countrycode
                                       ->  Sort
                                             Output: country.code, countrylanguage.countrycode
                                             Sort Key: country.code, countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice3; segments: 6)
                                                   Output: country.code, countrylanguage.countrycode
                                                   Hash Key: country.code, countrylanguage.countrycode
                                                   ->  Nested Loop
                                                         Output: country.code, countrylanguage.countrycode
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                               Output: country.code
                                                               ->  Partial Seq Scan on qp_with_clause.country
                                                                     Output: country.code
                                                                     Filter: (country.governmentform = 'Federal Republic'::text)
                                                         ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage
                                                               Output: countrylanguage.countrycode
                                                               Index Cond: (countrylanguage.countrycode = country.code)
                     ->  Partial Index Scan using country_pkey on qp_with_clause.country country_1
                           Output: country_1.code, country_1.name, country_1.continent, country_1.region, country_1.indepyear, country_1.population
                           Index Cond: (country_1.code = country.code)
                           Filter: (country_1.indepyear > 1970)
 Optimizer: PolarDB PX Optimizer
(42 rows)

-- Using CTE in the WHERE clause
--query3
with lang_total as
( select lang_count,countrycode from
  (
  (
   select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code)
 
   UNION ALL
 
  (
   select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Monarchy')
  group by country.code,countrylanguage.countrycode order by country.code)
 
 ) FOO1
)
select * from
(
select count(*) as cnt,country.code,country.name 
from
country,countrylanguage
where country.code=countrylanguage.countrycode group by country.code,country.name) AS FOO
where foo.cnt = (select max(lang_count) from lang_total) order by foo.code;
 cnt | code |        name        
-----+------+--------------------
  12 | CAN  | Canada
  12 | CHN  | China
  12 | IND  | India
  12 | RUS  | Russian Federation
  12 | USA  | United States
(5 rows)

                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (count()), country.code, country.name
   Merge Key: country.code
   ->  Sort
         Output: (count()), country.code, country.name
         Sort Key: country.code
         ->  Sort
               Output: (count()), country.code, country.name
               Sort Key: country.code
               ->  Hash Join
                     Output: (count()), country.code, country.name
                     Hash Cond: ((count()) = (max((count()))))
                     ->  HashAggregate
                           Output: count(), country.code, country.name
                           Group Key: country.code, country.name
                           ->  Hash Join
                                 Output: country.code, country.name
                                 Hash Cond: (country.code = countrylanguage.countrycode)
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: country.code, country.name
                                       Hash Key: country.code
                                       ->  Partial Seq Scan on qp_with_clause.country
                                             Output: country.code, country.name
                                 ->  Hash
                                       Output: countrylanguage.countrycode
                                       ->  PX Hash 6:6  (slice3; segments: 6)
                                             Output: countrylanguage.countrycode
                                             Hash Key: countrylanguage.countrycode
                                             ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                   Output: countrylanguage.countrycode
                     ->  Hash
                           Output: (max((count())))
                           ->  PX Broadcast 1:6  (slice4)
                                 Output: (max((count())))
                                 ->  Finalize Aggregate
                                       Output: max((count()))
                                       ->  PX Coordinator 6:1  (slice5; segments: 6)
                                             Output: (PARTIAL max((count())))
                                             ->  Partial Aggregate
                                                   Output: PARTIAL max((count()))
                                                   ->  Append
                                                         ->  GroupAggregate
                                                               Output: count()
                                                               Group Key: country_1.code, countrylanguage_1.countrycode
                                                               ->  Sort
                                                                     Output: countrylanguage_1.countrycode, country_1.code
                                                                     Sort Key: country_1.code, countrylanguage_1.countrycode
                                                                     ->  PX Hash 6:6  (slice6; segments: 6)
                                                                           Output: countrylanguage_1.countrycode, country_1.code
                                                                           Hash Key: country_1.code, countrylanguage_1.countrycode
                                                                           ->  Nested Loop
                                                                                 Output: countrylanguage_1.countrycode, country_1.code
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice7; segments: 6)
                                                                                       Output: country_1.code
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                             Output: country_1.code
                                                                                             Filter: (country_1.governmentform = 'Federal Republic'::text)
                                                                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                                                                       Output: countrylanguage_1.countrycode
                                                                                       Index Cond: (countrylanguage_1.countrycode = country_1.code)
                                                         ->  GroupAggregate
                                                               Output: count()
                                                               Group Key: country_2.code, countrylanguage_2.countrycode
                                                               ->  Sort
                                                                     Output: country_2.code, countrylanguage_2.countrycode
                                                                     Sort Key: country_2.code, countrylanguage_2.countrycode
                                                                     ->  PX Hash 6:6  (slice8; segments: 6)
                                                                           Output: country_2.code, countrylanguage_2.countrycode
                                                                           Hash Key: country_2.code, countrylanguage_2.countrycode
                                                                           ->  Nested Loop
                                                                                 Output: country_2.code, countrylanguage_2.countrycode
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                                                       Output: country_2.code
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                                             Output: country_2.code
                                                                                             Filter: (country_2.governmentform = 'Monarchy'::text)
                                                                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                                                                       Output: countrylanguage_2.countrycode
                                                                                       Index Cond: (countrylanguage_2.countrycode = country_2.code)
 Optimizer: PolarDB PX Optimizer
(82 rows)

--query4
with diversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country,
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country.code and country.gnp > 100000)
 select diversecountries.name,city.name,diversecountries.CNT
 from diversecountries,city where city.id = diversecountries.capital
 order by diversecountries.name;
        name        |       name       | cnt 
--------------------+------------------+-----
 Australia          | Canberra         |   8
 Austria            | Wien             |   8
 Canada             | Ottawa           |  12
 China              | Peking           |  12
 Denmark            | Kobenhavn        |   7
 India              | New Delhi        |  12
 Iran               | Teheran          |  10
 Italy              | Roma             |   8
 Myanmar            | Rangoon (Yangon) |   8
 Russian Federation | Moscow           |  12
 South Africa       | Pretoria         |  11
 United States      | Washington       |  12
(12 rows)

                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.name, city.name, (count())
   Merge Key: country.name
   ->  Sort
         Output: country.name, city.name, (count())
         Sort Key: country.name
         ->  Sort
               Output: country.name, city.name, (count())
               Sort Key: country.name
               ->  Nested Loop
                     Output: country.name, city.name, (count())
                     Join Filter: true
                     ->  PX Broadcast 6:6  (slice2; segments: 6)
                           Output: country.name, country.capital, (count())
                           ->  Hash Join
                                 Output: country.name, country.capital, (count())
                                 Hash Cond: (countrylanguage.countrycode = country.code)
                                 ->  Result
                                       Output: (count()), countrylanguage.countrycode
                                       Filter: ((count()) > 6)
                                       ->  HashAggregate
                                             Output: count(), count(), countrylanguage.countrycode
                                             Group Key: countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice3; segments: 6)
                                                   Output: countrylanguage.countrycode
                                                   Hash Key: countrylanguage.countrycode
                                                   ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                         Output: countrylanguage.countrycode
                                 ->  Hash
                                       Output: country.code, country.name, country.capital
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: country.code, country.name, country.capital
                                             Hash Key: country.code
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.capital
                                                   Filter: (country.gnp > '100000'::numeric)
                     ->  Partial Index Scan using city_pkey on qp_with_clause.city
                           Output: city.name
                           Index Cond: (city.id = country.capital)
 Optimizer: PolarDB PX Optimizer
(40 rows)

-- query 5
with somecheapasiandiversecountries as
(
 select FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,count(*) ASIAN_COUNT from
 (
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Southeast Asia'
 and country.continent = 'Asia'
 
 UNION ALL
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Eastern Asia'
 and country.continent = 'Asia'
 UNION ALL
 select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
 from country,city
 where country.capital = city.id 
 and country.gnp < 10000
 and country.region = 'Middle East'
 and country.continent = 'Asia'
 ) FOO, countrylanguage
 where FOO.code = countrylanguage.countrycode
 group by FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,countrylanguage.countrycode
 HAVING count(*) >=
 (select min(CNT) FROM
   (select count(*) CNT,country.code from countrylanguage,country
    where countrylanguage.countrycode=country.code
    and country.continent = 'Asia'
    and country.region = 'Southern and Central Asia'
    group by country.code
   ) FOO1
 )
)
select FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate,count(*) COMPARED_WITH_CHEAP_ASIAN_CNT
from
(
select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
from country,city
where country.capital = city.id 
and country.continent = 'North America'
UNION ALL
select country.code,country.name COUNTRY,city.name CAPITAL,country.headofstate
from country,city
where country.capital =	city.id	
and country.continent =	'South America'
) FOO,countrylanguage
where FOO.code = countrylanguage.countrycode
group by FOO.code,FOO.COUNTRY,FOO.CAPITAL,FOO.headofstate
HAVING count(*)  >=
 (select min(ASIAN_COUNT) FROM
   (select ASIAN_COUNT FROM somecheapasiandiversecountries,country
    where somecheapasiandiversecountries.code = country.code
    and country.gnp >= country.gnpold
   ) ASIANCOUNT
 )
order by COUNTRY;
 code |             country              |         capital         |            headofstate            | compared_with_cheap_asian_cnt 
------+----------------------------------+-------------------------+-----------------------------------+-------------------------------
 ATG  | Antigua and Barbuda              | Saint Johns             | Elisabeth II                      |                             2
 ARG  | Argentina                        | Buenos Aires            | Fernando de la Rua                |                             3
 ABW  | Aruba                            | Oranjestad              | Beatrix                           |                             4
 BHS  | Bahamas                          | Nassau                  | Elisabeth II                      |                             2
 BRB  | Barbados                         | Bridgetown              | Elisabeth II                      |                             2
 BLZ  | Belize                           | Belmopan                | Elisabeth II                      |                             4
 BOL  | Bolivia                          | La Paz                  | Hugo Banzer Suarez                |                             4
 BRA  | Brazil                           | Brasilia                | Fernando Henrique Cardoso         |                             5
 CAN  | Canada                           | Ottawa                  | Elisabeth II                      |                            12
 CHL  | Chile                            | Santiago de Chile       | Ricardo Lagos Escobar             |                             4
 COL  | Colombia                         | Santafe de Bogota       | Andres Pastrana Arango            |                             5
 CRI  | Costa Rica                       | San Jose                | Miguel Angel Rodriguez Echeverria |                             4
 DMA  | Dominica                         | Roseau                  | Vernon Shaw                       |                             2
 DOM  | Dominican Republic               | Santo Domingo de Guzman | Hipolito Mejia Dominguez          |                             2
 ECU  | Ecuador                          | Quito                   | Gustavo Noboa Bejarano            |                             2
 SLV  | El Salvador                      | San Salvador            | Francisco Guillermo Flores Perez  |                             2
 GUF  | French Guiana                    | Cayenne                 | Jacques Chirac                    |                             2
 GRL  | Greenland                        | Nuuk                    | Margrethe II                      |                             2
 GLP  | Guadeloupe                       | Basse-Terre             | Jacques Chirac                    |                             2
 GTM  | Guatemala                        | Ciudad de Guatemala     | Alfonso Portillo Cabrera          |                             5
 GUY  | Guyana                           | Georgetown              | Bharrat Jagdeo                    |                             3
 HTI  | Haiti                            | Port-au-Prince          | Jean-Bertrand Aristide            |                             2
 HND  | Honduras                         | Tegucigalpa             | Carlos Roberto Flores Facusse     |                             4
 JAM  | Jamaica                          | Kingston                | Elisabeth II                      |                             2
 MTQ  | Martinique                       | Fort-de-France          | Jacques Chirac                    |                             2
 MEX  | Mexico                           | Ciudad de Mexico        | Vicente Fox Quesada               |                             6
 ANT  | Netherlands Antilles             | Willemstad              | Beatrix                           |                             3
 NIC  | Nicaragua                        | Managua                 | Arnoldo Aleman Lacayo             |                             4
 PAN  | Panama                           | Ciudad de Panama        | Mireya Elisa Moscoso Rodriguez    |                             6
 PRY  | Paraguay                         | Asuncion                | Luis Angel Gonzalez Macchi        |                             4
 PER  | Peru                             | Lima                    | Valentin Paniagua Corazao         |                             3
 PRI  | Puerto Rico                      | San Juan                | George W. Bush                    |                             2
 KNA  | Saint Kitts and Nevis            | Basseterre              | Elisabeth II                      |                             2
 LCA  | Saint Lucia                      | Castries                | Elisabeth II                      |                             2
 VCT  | Saint Vincent and the Grenadines | Kingstown               | Elisabeth II                      |                             2
 SUR  | Suriname                         | Paramaribo              | Ronald Venetiaan                  |                             2
 TTO  | Trinidad and Tobago              | Port-of-Spain           | Arthur N. R. Robinson             |                             3
 USA  | United States                    | Washington              | George W. Bush                    |                            12
 VEN  | Venezuela                        | Caracas                 | Hugo Chavez Frias                 |                             3
 VIR  | Virgin Islands, U.S.             | Charlotte Amalie        | George W. Bush                    |                             3
(40 rows)

                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, country.name, city.name, country.headofstate, (count())
   Merge Key: country.name
   ->  Sort
         Output: country.code, country.name, city.name, country.headofstate, (count())
         Sort Key: country.name
         ->  Sort
               Output: country.code, country.name, city.name, country.headofstate, (count())
               Sort Key: country.name
               ->  Nested Loop
                     Output: country.code, country.name, city.name, country.headofstate, (count())
                     Join Filter: ((count()) >= (min((count()))))
                     ->  PX Broadcast 1:6  (slice7)
                           Output: (min((count())))
                           ->  Finalize Aggregate
                                 Output: min((count()))
                                 ->  PX Coordinator 6:1  (slice8; segments: 6)
                                       Output: (PARTIAL min((count())))
                                       ->  Partial Aggregate
                                             Output: PARTIAL min((count()))
                                             ->  Nested Loop
                                                   Output: (count())
                                                   Join Filter: true
                                                   ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                         Output: country_2.code, (count())
                                                         ->  Nested Loop
                                                               Output: country_2.code, (count())
                                                               Join Filter: ((count()) >= (min((count()))))
                                                               ->  PX Broadcast 1:6  (slice15)
                                                                     Output: (min((count())))
                                                                     ->  Finalize Aggregate
                                                                           Output: min((count()))
                                                                           ->  PX Coordinator 6:1  (slice16; segments: 6)
                                                                                 Output: (PARTIAL min((count())))
                                                                                 ->  Partial Aggregate
                                                                                       Output: PARTIAL min((count()))
                                                                                       ->  Finalize GroupAggregate
                                                                                             Output: count(), country_5.code
                                                                                             Group Key: country_5.code
                                                                                             ->  Sort
                                                                                                   Output: country_5.code, (PARTIAL count())
                                                                                                   Sort Key: country_5.code
                                                                                                   ->  PX Hash 6:6  (slice17; segments: 6)
                                                                                                         Output: country_5.code, (PARTIAL count())
                                                                                                         Hash Key: country_5.code
                                                                                                         ->  Partial GroupAggregate
                                                                                                               Output: country_5.code, PARTIAL count()
                                                                                                               Group Key: country_5.code
                                                                                                               ->  Sort
                                                                                                                     Output: country_5.code
                                                                                                                     Sort Key: country_5.code
                                                                                                                     ->  Nested Loop
                                                                                                                           Output: country_5.code
                                                                                                                           Join Filter: true
                                                                                                                           ->  PX Broadcast 6:6  (slice18; segments: 6)
                                                                                                                                 Output: country_5.code
                                                                                                                                 ->  Partial Seq Scan on qp_with_clause.country country_5
                                                                                                                                       Output: country_5.code
                                                                                                                                       Filter: ((country_5.continent = 'Asia'::text) AND (country_5.region = 'Southern and Central Asia'::text))
                                                                                                                           ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                                                                                                                 Index Cond: (countrylanguage_2.countrycode = country_5.code)
                                                               ->  Materialize
                                                                     Output: (count()), (count()), country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                     ->  HashAggregate
                                                                           Output: count(), count(), country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                           Group Key: country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                           ->  Hash Join
                                                                                 Output: country_2.code, country_2.name, city_2.name, country_2.headofstate, countrylanguage_1.countrycode
                                                                                 Hash Cond: (countrylanguage_1.countrycode = country_2.code)
                                                                                 ->  PX Hash 6:6  (slice10; segments: 6)
                                                                                       Output: countrylanguage_1.countrycode
                                                                                       Hash Key: countrylanguage_1.countrycode
                                                                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage countrylanguage_1
                                                                                             Output: countrylanguage_1.countrycode
                                                                                 ->  Hash
                                                                                       Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                       ->  PX Hash 6:6  (slice11; segments: 6)
                                                                                             Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                             Hash Key: country_2.code
                                                                                             ->  Append
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_2.code, country_2.name, city_2.name, country_2.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice12; segments: 6)
                                                                                                               Output: country_2.code, country_2.name, country_2.headofstate, country_2.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                                                                     Output: country_2.code, country_2.name, country_2.headofstate, country_2.capital
                                                                                                                     Filter: ((country_2.gnp < '10000'::numeric) AND (country_2.region = 'Southeast Asia'::text) AND (country_2.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_2
                                                                                                               Output: city_2.name
                                                                                                               Index Cond: (city_2.id = country_2.capital)
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_3.code, country_3.name, city_3.name, country_3.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice13; segments: 6)
                                                                                                               Output: country_3.code, country_3.name, country_3.headofstate, country_3.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_3
                                                                                                                     Output: country_3.code, country_3.name, country_3.headofstate, country_3.capital
                                                                                                                     Filter: ((country_3.gnp < '10000'::numeric) AND (country_3.region = 'Eastern Asia'::text) AND (country_3.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_3
                                                                                                               Output: city_3.name
                                                                                                               Index Cond: (city_3.id = country_3.capital)
                                                                                                   ->  Nested Loop
                                                                                                         Output: country_4.code, country_4.name, city_4.name, country_4.headofstate
                                                                                                         Join Filter: true
                                                                                                         ->  PX Broadcast 6:6  (slice14; segments: 6)
                                                                                                               Output: country_4.code, country_4.name, country_4.headofstate, country_4.capital
                                                                                                               ->  Partial Seq Scan on qp_with_clause.country country_4
                                                                                                                     Output: country_4.code, country_4.name, country_4.headofstate, country_4.capital
                                                                                                                     Filter: ((country_4.gnp < '10000'::numeric) AND (country_4.region = 'Middle East'::text) AND (country_4.continent = 'Asia'::text))
                                                                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_4
                                                                                                               Output: city_4.name
                                                                                                               Index Cond: (city_4.id = country_4.capital)
                                                   ->  Partial Index Scan using country_pkey on qp_with_clause.country country_6
                                                         Output: country_6.gnp, country_6.gnpold
                                                         Index Cond: (country_6.code = country_2.code)
                                                         Filter: (country_6.gnp >= country_6.gnpold)
                     ->  HashAggregate
                           Output: count(), count(), country.code, country.name, country.headofstate, city.name
                           Group Key: country.name, country.code, city.name, country.headofstate
                           ->  Materialize
                                 Output: country.code, country.name, country.headofstate, city.name
                                 ->  Hash Join
                                       Output: country.code, country.name, country.headofstate, city.name
                                       Hash Cond: (country.code = countrylanguage.countrycode)
                                       ->  Append
                                             ->  PX Hash 6:6  (slice2; segments: 6)
                                                   Output: country.code, country.name, city.name, country.headofstate
                                                   Hash Key: country.code
                                                   ->  Nested Loop
                                                         Output: country.code, country.name, city.name, country.headofstate
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice3; segments: 6)
                                                               Output: country.code, country.name, country.headofstate, country.capital
                                                               ->  Partial Seq Scan on qp_with_clause.country
                                                                     Output: country.code, country.name, country.headofstate, country.capital
                                                                     Filter: (country.continent = 'North America'::text)
                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                                               Output: city.name
                                                               Index Cond: (city.id = country.capital)
                                             ->  PX Hash 6:6  (slice4; segments: 6)
                                                   Output: country_1.code, country_1.name, city_1.name, country_1.headofstate
                                                   Hash Key: country_1.code
                                                   ->  Nested Loop
                                                         Output: country_1.code, country_1.name, city_1.name, country_1.headofstate
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                               Output: country_1.code, country_1.name, country_1.headofstate, country_1.capital
                                                               ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                     Output: country_1.code, country_1.name, country_1.headofstate, country_1.capital
                                                                     Filter: (country_1.continent = 'South America'::text)
                                                         ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                               Output: city_1.name
                                                               Index Cond: (city_1.id = country_1.capital)
                                       ->  Hash
                                             Output: countrylanguage.countrycode
                                             ->  PX Hash 6:6  (slice6; segments: 6)
                                                   Output: countrylanguage.countrycode
                                                   Hash Key: countrylanguage.countrycode
                                                   ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                         Output: countrylanguage.countrycode
 Optimizer: PolarDB PX Optimizer
(162 rows)

-- query 6 
 
select count(*) from
( select r.* from
  ( with fact as 
     (
      select country.name as COUNTRY,country.code,city.name as CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,AGG1.region
      from      
         (select
         sum(case when (city.population >= 0.5 * country.population) then country.population else city.population end) as S_POPULATION,
         sum(case when (gnp >= gnpold) then gnp else gnpold end) as S_GNP,
         avg(case when (lifeexpectancy > 60) then 50 else lifeexpectancy end) as AVG_LIFE,country.region
         from country,city  
         where governmentform != 'Constitutional Monarchy'
         and country.capital = city.id
         and indepyear > 0
         group by country.region) AGG1
         ,country,city
         where country.capital = city.id
         and country.region = AGG1.region
      )
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'South America'
     
     UNION ALL
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'North America'
     
     UNION ALL
     
     select code,COUNTRY,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage
     where fact.code = countrylanguage.countrycode and isofficial = 'True'
     and fact.region = 'Caribbean'
 ) as r
 left join
  (
   select 'ARG' as CODE UNION ALL
   select 'BOL' as CODE UNION ALL
   select 'BRA' as CODE UNION ALL
   select 'PER' as CODE UNION ALL
   select 'URY' as CODE UNION ALL
   select 'IND' as CODE  UNION ALL
   select 'LCA' as CODE UNION ALL
   select 'VCT' as CODE
   ) as r1
on r.code = r1.code) AS FOO;
 count 
-------
    43
(1 row)

                                                                                                                                                                                                                                         QUERY PLAN                                                                                                                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count()
   ->  Hash Left Join
         Hash Cond: ((share0_ref2.code)::text = ('ARG'::text))
         ->  PX Coordinator 6:1  (slice1; segments: 6)
               Output: share0_ref2.code
               ->  Sequence
                     Output: share0_ref2.code
                     ->  Shared Scan (Producer; slice1; share0)
                           Output: share0_ref1.name, share0_ref1.code, share0_ref1.name_1, share0_ref1.s_population, share0_ref1.s_gnp, share0_ref1.avg_life, share0_ref1.region
                           ->  Hash Join
                                 Output: country.name, country.code, city.name, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)), country_1.region
                                 Hash Cond: (country.region = country_1.region)
                                 ->  Nested Loop
                                       Output: country.code, country.name, country.region, city.name
                                       Join Filter: true
                                       ->  PX Broadcast 6:6  (slice2; segments: 6)
                                             Output: country.code, country.name, country.region, country.capital
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.region, country.capital
                                                   Filter: (country.region = ANY ('{Caribbean,"North America","South America"}'::text[]))
                                       ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                             Output: city.name
                                             Index Cond: (city.id = country.capital)
                                 ->  Hash
                                       Output: country_1.region, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                       ->  PX Broadcast 6:6  (slice3; segments: 6)
                                             Output: country_1.region, (sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                             ->  Finalize GroupAggregate
                                                   Output: country_1.region, sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END), sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END), avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)
                                                   Group Key: country_1.region
                                                   ->  Sort
                                                         Output: country_1.region, (PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                                         Sort Key: country_1.region
                                                         ->  PX Hash 6:6  (slice4; segments: 6)
                                                               Output: country_1.region, (PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END)), (PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END)), (PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END))
                                                               Hash Key: country_1.region
                                                               ->  Partial HashAggregate
                                                                     Output: country_1.region, PARTIAL sum(CASE WHEN ((city_1.population)::numeric >= (0.5 * (country_1.population)::numeric)) THEN country_1.population ELSE city_1.population END), PARTIAL sum(CASE WHEN (country_1.gnp >= country_1.gnpold) THEN country_1.gnp ELSE country_1.gnpold END), PARTIAL avg(CASE WHEN (country_1.lifeexpectancy > '60'::double precision) THEN '50'::real ELSE country_1.lifeexpectancy END)
                                                                     Group Key: country_1.region
                                                                     ->  Nested Loop
                                                                           Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, city_1.population
                                                                           Join Filter: true
                                                                           ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                                                 Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, country_1.capital
                                                                                 ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                       Output: country_1.region, country_1.population, country_1.lifeexpectancy, country_1.gnp, country_1.gnpold, country_1.capital
                                                                                       Filter: ((country_1.governmentform <> 'Constitutional Monarchy'::text) AND (country_1.indepyear > 0) AND ((country_1.region = 'South America'::text) OR (country_1.region = 'North America'::text) OR (country_1.region = 'Caribbean'::text)) AND (country_1.region = ANY ('{Caribbean,"North America","South America"}'::text[])))
                                                                           ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                                                 Output: city_1.population
                                                                                 Index Cond: (city_1.id = country_1.capital)
                     ->  Append
                           ->  Nested Loop
                                 Output: share0_ref2.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice6; segments: 6)
                                       Output: share0_ref2.code
                                       ->  Result
                                             Output: share0_ref2.code
                                             Filter: (share0_ref2.region = 'South America'::text)
                                             ->  Shared Scan (Consumer; slice6; share0)
                                                   Output: share0_ref2.name, share0_ref2.code, share0_ref2.name_1, share0_ref2.s_population, share0_ref2.s_gnp, share0_ref2.avg_life, share0_ref2.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage
                                       Output: countrylanguage.isofficial
                                       Index Cond: (countrylanguage.countrycode = share0_ref2.code)
                                       Filter: countrylanguage.isofficial
                           ->  Nested Loop
                                 Output: share0_ref3.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice7; segments: 6)
                                       Output: share0_ref3.code
                                       ->  Result
                                             Output: share0_ref3.code
                                             Filter: (share0_ref3.region = 'North America'::text)
                                             ->  Shared Scan (Consumer; slice7; share0)
                                                   Output: share0_ref3.name, share0_ref3.code, share0_ref3.name_1, share0_ref3.s_population, share0_ref3.s_gnp, share0_ref3.avg_life, share0_ref3.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                       Output: countrylanguage_1.isofficial
                                       Index Cond: (countrylanguage_1.countrycode = share0_ref3.code)
                                       Filter: countrylanguage_1.isofficial
                           ->  Nested Loop
                                 Output: share0_ref4.code
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice8; segments: 6)
                                       Output: share0_ref4.code
                                       ->  Result
                                             Output: share0_ref4.code
                                             Filter: (share0_ref4.region = 'Caribbean'::text)
                                             ->  Shared Scan (Consumer; slice8; share0)
                                                   Output: share0_ref4.name, share0_ref4.code, share0_ref4.name_1, share0_ref4.s_population, share0_ref4.s_gnp, share0_ref4.avg_life, share0_ref4.region
                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_2
                                       Output: countrylanguage_2.isofficial
                                       Index Cond: (countrylanguage_2.countrycode = share0_ref4.code)
                                       Filter: countrylanguage_2.isofficial
         ->  Hash
               Output: ('ARG'::text)
               ->  Append
                     ->  Result
                           Output: 'ARG'::text
                     ->  Result
                           Output: 'BOL'::text
                     ->  Result
                           Output: 'BRA'::text
                     ->  Result
                           Output: 'PER'::text
                     ->  Result
                           Output: 'URY'::text
                     ->  Result
                           Output: 'IND'::text
                     ->  Result
                           Output: 'LCA'::text
                     ->  Result
                           Output: 'VCT'::text
 Optimizer: PolarDB PX Optimizer
(114 rows)

-- query7
with alleuropeanlanguages as 
(select country.code,country.name COUNTRY, city.name CAPITAL, language, isofficial, percentage
 FROM country,city,countrylanguage
 WHERE country.code = countrylanguage.countrycode
 and country.capital = city.id
 and country.continent = 'Europe')
select * from
(select * from alleuropeanlanguages where isofficial='True') e1,
(select * from alleuropeanlanguages where percentage > 50) e2
where e1.code = e2.code order by e2.COUNTRY,e1.language;
 code |        country         |              capital              |    language    | isofficial | percentage | code |        country         |              capital              |    language    | isofficial | percentage 
------+------------------------+-----------------------------------+----------------+------------+------------+------+------------------------+-----------------------------------+----------------+------------+------------
 ALB  | Albania                | Tirana                            | Albaniana      | t          |       97.9 | ALB  | Albania                | Tirana                            | Albaniana      | t          |       97.9
 AUT  | Austria                | Wien                              | German         | t          |         92 | AUT  | Austria                | Wien                              | German         | t          |         92
 BLR  | Belarus                | Minsk                             | Belorussian    | t          |       65.6 | BLR  | Belarus                | Minsk                             | Belorussian    | t          |       65.6
 BLR  | Belarus                | Minsk                             | Russian        | t          |         32 | BLR  | Belarus                | Minsk                             | Belorussian    | t          |       65.6
 BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2 | BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel]               | French         | t          |       32.6 | BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2
 BEL  | Belgium                | Bruxelles [Brussel]               | German         | t          |          1 | BEL  | Belgium                | Bruxelles [Brussel]               | Dutch          | t          |       59.2
 BIH  | Bosnia and Herzegovina | Sarajevo                          | Serbo-Croatian | t          |       99.2 | BIH  | Bosnia and Herzegovina | Sarajevo                          | Serbo-Croatian | t          |       99.2
 BGR  | Bulgaria               | Sofija                            | Bulgariana     | t          |       83.2 | BGR  | Bulgaria               | Sofija                            | Bulgariana     | t          |       83.2
 HRV  | Croatia                | Zagreb                            | Serbo-Croatian | t          |       95.9 | HRV  | Croatia                | Zagreb                            | Serbo-Croatian | t          |       95.9
 CZE  | Czech Republic         | Praha                             | Czech          | t          |       81.2 | CZE  | Czech Republic         | Praha                             | Czech          | t          |       81.2
 DNK  | Denmark                | Kobenhavn                         | Danish         | t          |       93.5 | DNK  | Denmark                | Kobenhavn                         | Danish         | t          |       93.5
 EST  | Estonia                | Tallinn                           | Estonian       | t          |       65.3 | EST  | Estonia                | Tallinn                           | Estonian       | t          |       65.3
 FRO  | Faroe Islands          | Torshavn                          | Danish         | t          |          0 | FRO  | Faroe Islands          | Torshavn                          | Faroese        | t          |        100
 FRO  | Faroe Islands          | Torshavn                          | Faroese        | t          |        100 | FRO  | Faroe Islands          | Torshavn                          | Faroese        | t          |        100
 FIN  | Finland                | Helsinki [Helsingfors]            | Finnish        | t          |       92.7 | FIN  | Finland                | Helsinki [Helsingfors]            | Finnish        | t          |       92.7
 FIN  | Finland                | Helsinki [Helsingfors]            | Swedish        | t          |        5.7 | FIN  | Finland                | Helsinki [Helsingfors]            | Finnish        | t          |       92.7
 FRA  | France                 | Paris                             | French         | t          |       93.6 | FRA  | France                 | Paris                             | French         | t          |       93.6
 DEU  | Germany                | Berlin                            | German         | t          |       91.3 | DEU  | Germany                | Berlin                            | German         | t          |       91.3
 GIB  | Gibraltar              | Gibraltar                         | English        | t          |       88.9 | GIB  | Gibraltar              | Gibraltar                         | English        | t          |       88.9
 GRC  | Greece                 | Athenai                           | Greek          | t          |       98.5 | GRC  | Greece                 | Athenai                           | Greek          | t          |       98.5
 HUN  | Hungary                | Budapest                          | Hungarian      | t          |       98.5 | HUN  | Hungary                | Budapest                          | Hungarian      | t          |       98.5
 ISL  | Iceland                | Reykjavik                         | Icelandic      | t          |       95.7 | ISL  | Iceland                | Reykjavik                         | Icelandic      | t          |       95.7
 IRL  | Ireland                | Dublin                            | English        | t          |       98.4 | IRL  | Ireland                | Dublin                            | English        | t          |       98.4
 IRL  | Ireland                | Dublin                            | Irish          | t          |        1.6 | IRL  | Ireland                | Dublin                            | English        | t          |       98.4
 ITA  | Italy                  | Roma                              | Italian        | t          |       94.1 | ITA  | Italy                  | Roma                              | Italian        | t          |       94.1
 LVA  | Latvia                 | Riga                              | Latvian        | t          |       55.1 | LVA  | Latvia                 | Riga                              | Latvian        | t          |       55.1
 LIE  | Liechtenstein          | Vaduz                             | German         | t          |         89 | LIE  | Liechtenstein          | Vaduz                             | German         | t          |         89
 LTU  | Lithuania              | Vilnius                           | Lithuanian     | t          |       81.6 | LTU  | Lithuania              | Vilnius                           | Lithuanian     | t          |       81.6
 LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | French         | t          |        4.2 | LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4
 LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | German         | t          |        2.3 | LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4
 LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4 | LUX  | Luxembourg             | Luxembourg [Luxemburg/Letzebuerg] | Luxembourgish  | t          |       64.4
 MKD  | Macedonia              | Skopje                            | Macedonian     | t          |       66.5 | MKD  | Macedonia              | Skopje                            | Macedonian     | t          |       66.5
 MLT  | Malta                  | Valletta                          | English        | t          |        2.1 | MLT  | Malta                  | Valletta                          | Maltese        | t          |       95.8
 MLT  | Malta                  | Valletta                          | Maltese        | t          |       95.8 | MLT  | Malta                  | Valletta                          | Maltese        | t          |       95.8
 MDA  | Moldova                | Chisinau                          | Romanian       | t          |       61.9 | MDA  | Moldova                | Chisinau                          | Romanian       | t          |       61.9
 NLD  | Netherlands            | Amsterdam                         | Dutch          | t          |       95.6 | NLD  | Netherlands            | Amsterdam                         | Dutch          | t          |       95.6
 NOR  | Norway                 | Oslo                              | Norwegian      | t          |       96.6 | NOR  | Norway                 | Oslo                              | Norwegian      | t          |       96.6
 POL  | Poland                 | Warszawa                          | Polish         | t          |       97.6 | POL  | Poland                 | Warszawa                          | Polish         | t          |       97.6
 PRT  | Portugal               | Lisboa                            | Portuguese     | t          |         99 | PRT  | Portugal               | Lisboa                            | Portuguese     | t          |         99
 ROM  | Romania                | Bucuresti                         | Romani         | t          |        0.7 | ROM  | Romania                | Bucuresti                         | Romanian       | t          |       90.7
 ROM  | Romania                | Bucuresti                         | Romanian       | t          |       90.7 | ROM  | Romania                | Bucuresti                         | Romanian       | t          |       90.7
 RUS  | Russian Federation     | Moscow                            | Russian        | t          |       86.6 | RUS  | Russian Federation     | Moscow                            | Russian        | t          |       86.6
 SMR  | San Marino             | San Marino                        | Italian        | t          |        100 | SMR  | San Marino             | San Marino                        | Italian        | t          |        100
 SVK  | Slovakia               | Bratislava                        | Slovak         | t          |       85.6 | SVK  | Slovakia               | Bratislava                        | Slovak         | t          |       85.6
 SVN  | Slovenia               | Ljubljana                         | Slovene        | t          |       87.9 | SVN  | Slovenia               | Ljubljana                         | Slovene        | t          |       87.9
 ESP  | Spain                  | Madrid                            | Spanish        | t          |       74.4 | ESP  | Spain                  | Madrid                            | Spanish        | t          |       74.4
 SWE  | Sweden                 | Stockholm                         | Swedish        | t          |       89.5 | SWE  | Sweden                 | Stockholm                         | Swedish        | t          |       89.5
 CHE  | Switzerland            | Bern                              | French         | t          |       19.2 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 CHE  | Switzerland            | Bern                              | German         | t          |       63.6 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 CHE  | Switzerland            | Bern                              | Italian        | t          |        7.7 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 CHE  | Switzerland            | Bern                              | Romansh        | t          |        0.6 | CHE  | Switzerland            | Bern                              | German         | t          |       63.6
 UKR  | Ukraine                | Kyiv                              | Ukrainian      | t          |       64.7 | UKR  | Ukraine                | Kyiv                              | Ukrainian      | t          |       64.7
 GBR  | United Kingdom         | London                            | English        | t          |       97.3 | GBR  | United Kingdom         | London                            | English        | t          |       97.3
 YUG  | Yugoslavia             | Beograd                           | Serbo-Croatian | t          |       75.2 | YUG  | Yugoslavia             | Beograd                           | Serbo-Croatian | t          |       75.2
(55 rows)

                                                                                                                                       QUERY PLAN                                                                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
   Merge Key: share0_ref2.name, share0_ref3.language
   ->  Sequence
         Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.code, share0_ref1.name, share0_ref1.name_1, share0_ref1.language, share0_ref1.isofficial, share0_ref1.percentage
               ->  Hash Join
                     Output: country.code, country.name, city.name, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                           Hash Key: countrylanguage.countrycode
                           ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                 Output: countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                 Filter: (countrylanguage.isofficial OR (countrylanguage.percentage > '50'::double precision))
                     ->  Hash
                           Output: country.code, country.name, city.name
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name, city.name
                                 Hash Key: country.code
                                 ->  Nested Loop
                                       Output: country.code, country.name, city.name
                                       Join Filter: true
                                       ->  PX Broadcast 6:6  (slice4; segments: 6)
                                             Output: country.code, country.name, country.capital
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.capital
                                                   Filter: (country.continent = 'Europe'::text)
                                       ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                             Output: city.name
                                             Index Cond: (city.id = country.capital)
         ->  Sort
               Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
               Sort Key: share0_ref2.name, share0_ref3.language
               ->  Hash Join
                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage, share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                     Hash Cond: (share0_ref3.code = share0_ref2.code)
                     ->  Result
                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                           Filter: share0_ref3.isofficial
                           ->  Shared Scan (Producer; slice1; share0)
                                 Output: share0_ref3.code, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.isofficial, share0_ref3.percentage
                     ->  Hash
                           Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                           ->  Result
                                 Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
                                 Filter: (share0_ref2.percentage > '50'::double precision)
                                 ->  Shared Scan (Producer; slice1; share0)
                                       Output: share0_ref2.code, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.isofficial, share0_ref2.percentage
 Optimizer: PolarDB PX Optimizer
(51 rows)

-- query8
with allcountrystats as 
( select country.code,country.name,count(distinct city.id) CITY_CNT,
  count(distinct countrylanguage.language) LANG_CNT
  from country,city,countrylanguage
  where country.code = city.countrycode
  and country.code = countrylanguage.countrycode
  group by country.code,country.name
)
select sum(FOO.CITY_CNT) REGION_CITY_CNT,sum(FOO.LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > 1
and country.continent = 'Asia'
UNION ALL
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > 1
and country.continent = 'North America'
UNION ALL
select allcountrystats.code,allcountrystats.name COUNTRY,CITY_CNT,LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and CITY_CNT/LANG_CNT > (select  max(CITY_CNT/LANG_CNT)  from allcountrystats,country where allcountrystats.code = country.code AND country.continent='Europe')
) FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region;
 region_city_cnt | region_lang_cnt |          region           
-----------------+-----------------+---------------------------
             840 |             192 | Caribbean
            2824 |             112 | Central America
            8250 |             252 | Eastern Asia
            2664 |             396 | Middle East
            1625 |             125 | North America
            3500 |              70 | South America
            3179 |             528 | Southeast Asia
           12278 |             896 | Southern and Central Asia
(8 rows)

--query 9
with diversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country,
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country.code and country.gnp > 100000)
select d1.code,d1.name,d1.capital,city.name CAPITAL_CITY,d1.CNT,d2.CNT
from
diversecountries d1 left join country
ON (d1.code = country.code AND d1.CNT < 8)
left join diversecountries d2
ON (country.code = d2.code AND d2.CNT > 8)
INNER JOIN city
ON(d1.capital = city.id)
ORDER BY d1.name;
 code |        name        | capital |   capital_city   | cnt | cnt 
------+--------------------+---------+------------------+-----+-----
 AUS  | Australia          |     135 | Canberra         |   8 |    
 AUT  | Austria            |    1523 | Wien             |   8 |    
 CAN  | Canada             |    1822 | Ottawa           |  12 |    
 CHN  | China              |    1891 | Peking           |  12 |    
 DNK  | Denmark            |    3315 | Kobenhavn        |   7 |    
 IND  | India              |    1109 | New Delhi        |  12 |    
 IRN  | Iran               |    1380 | Teheran          |  10 |    
 ITA  | Italy              |    1464 | Roma             |   8 |    
 MMR  | Myanmar            |    2710 | Rangoon (Yangon) |   8 |    
 RUS  | Russian Federation |    3580 | Moscow           |  12 |    
 ZAF  | South Africa       |     716 | Pretoria         |  11 |    
 USA  | United States      |    3813 | Washington       |  12 |    
(12 rows)

                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
   Merge Key: share0_ref3.name
   ->  Sequence
         Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.code, share0_ref1.name, share0_ref1.capital, share0_ref1.cnt
               ->  Hash Join
                     Output: country.code, country.name, country.capital, (count())
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  Result
                           Output: countrylanguage.countrycode, (count())
                           Filter: ((count()) > 6)
                           ->  HashAggregate
                                 Output: count(), count(), countrylanguage.countrycode
                                 Group Key: countrylanguage.countrycode
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: countrylanguage.countrycode
                                       Hash Key: countrylanguage.countrycode
                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                             Output: countrylanguage.countrycode
                     ->  Hash
                           Output: country.code, country.name, country.capital
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name, country.capital
                                 Hash Key: country.code
                                 ->  Partial Seq Scan on qp_with_clause.country
                                       Output: country.code, country.name, country.capital
                                       Filter: (country.gnp > '100000'::numeric)
         ->  Sort
               Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
               Sort Key: share0_ref3.name
               ->  Hash Left Join
                     Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, city.name, share0_ref3.cnt, share0_ref2.cnt
                     Hash Cond: (country_1.code = share0_ref2.code)
                     ->  PX Hash 6:6  (slice4; segments: 6)
                           Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code, city.name
                           Hash Key: country_1.code
                           ->  Nested Loop
                                 Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code, city.name
                                 Join Filter: true
                                 ->  PX Broadcast 6:6  (slice5; segments: 6)
                                       Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code
                                       ->  Nested Loop Left Join
                                             Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt, country_1.code
                                             Join Filter: true
                                             ->  Shared Scan (Consumer; slice5; share0)
                                                   Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt
                                             ->  Full Index Scan using country_pkey on qp_with_clause.country country_1
                                                   Output: country_1.code
                                                   Index Cond: (country_1.code = share0_ref3.code)
                                                   Filter: (share0_ref3.cnt < 8)
                                 ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                       Output: city.name
                                       Index Cond: (city.id = share0_ref3.capital)
                     ->  Hash
                           Output: share0_ref2.code, share0_ref2.cnt
                           ->  Result
                                 Output: share0_ref2.code, share0_ref2.cnt
                                 Filter: (share0_ref2.cnt > 8)
                                 ->  Shared Scan (Producer; slice1; share0)
                                       Output: share0_ref2.code, share0_ref2.name, share0_ref2.capital, share0_ref2.cnt
 Optimizer: PolarDB PX Optimizer
(63 rows)

--query 10 , multiple ctes, joins
with longlivingregions as 
(
select FOO.*,count(distinct language) as "lang_count"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       avg(lifeexpectancy) as "REGION_LIFETIME",region
     from
      country
     group by region
    ) FOO,countrylanguage,country
where
   country.code = countrylanguage.countrycode
   and FOO.region = country.region
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP",foo."REGION_LIFETIME"),
denseregions as 
(
select FOO.*,count(distinct language) as "lang_count",
       sum(surfacearea) as "REGION_SURFACE_AREA"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       region
     from
      country
     group by region
    ) FOO,countrylanguage,country
where
   country.code = countrylanguage.countrycode
   and FOO.region = country.region
   and FOO."REGION_POP" != 0
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP"
order by sum(surfacearea)/foo."REGION_POP" desc),
allcountrystats as 
( select country.code,country.name,count(distinct city.id) CITY_CNT,
  count(distinct countrylanguage.language) LANG_CNT
  from country,city,countrylanguage
  where country.code = city.countrycode
  and country.code = countrylanguage.countrycode
  group by country.code,country.name
)
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear between 1800 and 1850
UNION ALL
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear between 1850 and 1900
UNION ALL
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear > 1900
order by name
LIMIT 50;
 city_cnt | lang_cnt |                 name                  | REGION_SURFACE_AREA | REGION_LIFETIME  | REGION_POP | lang_count | REGION_GNP |          region           
----------+----------+---------------------------------------+---------------------+------------------+------------+------------+------------+---------------------------
        4 |        5 | Afghanistan                           |         90749795.00 | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        1 |        3 | Albania                               |          5845195.40 | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
       18 |        2 | Algeria                               |         36993520.00 | 65.3857127598354 |  173266000 |         14 |  243870.00 | Northern Africa
        5 |        9 | Angola                                |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        1 |        2 | Antigua and Barbuda                   |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       57 |        3 | Argentina                             |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        3 |        2 | Armenia                               |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       14 |        8 | Australia                             |         62471162.00 | 78.8000030517578 |   22753100 |         11 |  405851.00 | Australia and New Zealand
        6 |        8 | Austria                               |          6649768.00 | 78.2555567423503 |  183247600 |         21 | 4673272.00 | Western Europe
        4 |        4 | Azerbaijan                            |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
        1 |        2 | Bahamas                               |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        1 |        2 | Bahrain                               |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       24 |        7 | Bangladesh                            |         90749795.00 | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        1 |        2 | Barbados                              |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       16 |        4 | Belarus                               |        214731845.00 | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        9 |        6 | Belgium                               |          6649768.00 | 78.2555567423503 |  183247600 |         21 | 4673272.00 | Western Europe
        2 |        4 | Belize                                |         14052371.00 | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
        4 |        7 | Benin                                 |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        3 | Bhutan                                |         90749795.00 | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        8 |        4 | Bolivia                               |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        3 |        1 | Bosnia and Herzegovina                |          5845195.40 | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
        2 |        5 | Botswana                              |         23060186.00 | 44.8199996948242 |   46886000 |         21 |  126931.00 | Southern Africa
      250 |        5 | Brazil                                |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        1 |        4 | Brunei                                |         35322186.00 | 64.4000001387163 |  518541000 |         47 |  642643.00 | Southeast Asia
       10 |        4 | Bulgaria                              |        214731845.00 | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        3 |        6 | Burkina Faso                          |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        3 | Burundi                               |         43631319.00 | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        3 |        4 | Cambodia                              |         35322186.00 | 64.4000001387163 |  518541000 |         47 |  642643.00 | Southeast Asia
        7 |        8 | Cameroon                              |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       49 |       12 | Canada                                |        236342035.00 | 75.8199996948242 |  309632000 |         18 | 9111890.00 | North America
        1 |        2 | Cape Verde                            |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        6 | Central African Republic              |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        2 |        8 | Chad                                  |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       29 |        4 | Chile                                 |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
       38 |        5 | Colombia                              |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        1 |        5 | Comoros                               |         43631319.00 | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        2 |        6 | Congo                                 |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       18 |       10 | Congo, The Democratic Republic of the |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        1 |        4 | Costa Rica                            |         14052371.00 | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
        5 |        5 | Cote deIvoire                         |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        4 |        2 | Croatia                               |          5845195.40 | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
       14 |        1 | Cuba                                  |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        2 |        2 | Cyprus                                |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       10 |        8 | Czech Republic                        |        214731845.00 | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        1 |        3 | Djibouti                              |         43631319.00 | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        1 |        2 | Dominica                              |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        6 |        2 | Dominican Republic                    |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       15 |        2 | Ecuador                               |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
       37 |        2 | Egypt                                 |         36993520.00 | 65.3857127598354 |  173266000 |         14 |  243870.00 | Northern Africa
        7 |        2 | El Salvador                           |         14052371.00 | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
(50 rows)

--query 11
with allcitystats as 
( select city.name CITY,city.id,country.name COUNTRY,city.district,city.population as CITY_POP
  from
  city,country
  where city.countrycode = country.code
),
alldistrictstats as 
( select allcitystats.district,allcitystats.COUNTRY,sum(CITY_POP) DISTRICT_POP,
  count(CITY) as D_CITY_CNT
  from allcitystats
  group by allcitystats.district,allcitystats.COUNTRY
  order by district,COUNTRY
),
allcountrystats as 
( select alldistrictstats.COUNTRY,country.code,sum(D_CITY_CNT) C_CITY_CNT,
  count(distinct countrylanguage.language) C_LANG_CNT
  from alldistrictstats,country,countrylanguage
  where alldistrictstats.COUNTRY = country.name
  and country.code = countrylanguage.countrycode
  group by COUNTRY,code
),
asian_region_stats as 
(
select sum(FOO.C_CITY_CNT) REGION_CITY_CNT,sum(FOO.C_LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountrystats.code,allcountrystats.COUNTRY,C_CITY_CNT,C_LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and C_CITY_CNT/C_LANG_CNT > 1
and country.continent = 'Asia') FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region
)
select * from
(
select REGION_CITY_CNT as CITY_CNT,REGION_LANG_CNT as LANG_CNT, region as IDENTIFIER from asian_region_stats
UNION ALL
(
select sum(FOO.C_CITY_CNT) CITY_CNT,sum(FOO.C_LANG_CNT) LANG_CNT,FOO.region as IDENTIFIER
FROM
(
select allcountrystats.code,allcountrystats.COUNTRY,C_CITY_CNT,C_LANG_CNT,country.region,allcitystats.CITY CAPITAL
from allcountrystats,country,allcitystats
where allcountrystats.code = country.code
and country.capital = allcitystats.id
and C_CITY_CNT/C_LANG_CNT > 1
and country.continent = 'Europe') FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region
)
) FOO1
order by FOO1.lang_cnt,FOO1.identifier;
 city_cnt | lang_cnt |        identifier         
----------+----------+---------------------------
      494 |       10 | British Islands
      159 |       48 | Baltic Countries
    36060 |      132 | Eastern Asia
     1295 |      161 | Nordic Countries
     9414 |      369 | Western Europe
    11880 |      450 | Southern Europe
    32900 |      610 | Eastern Europe
    29161 |      616 | Southeast Asia
     8568 |      792 | Middle East
    80388 |     1092 | Southern and Central Asia
(10 rows)

                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
   Merge Key: (sum(share2_ref2.c_lang_cnt)), country_3.region
   ->  Sequence
         Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.name, share0_ref1.id, share0_ref1.name_1, share0_ref1.district, share0_ref1.population
               ->  Hash Join
                     Output: city.name, city.id, country.name, city.district, city.population
                     Hash Cond: (city.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: city.id, city.name, city.countrycode, city.district, city.population
                           Hash Key: city.countrycode
                           ->  Partial Seq Scan on qp_with_clause.city
                                 Output: city.id, city.name, city.countrycode, city.district, city.population
                     ->  Hash
                           Output: country.code, country.name
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name
                                 Hash Key: country.code
                                 ->  Partial Seq Scan on qp_with_clause.country
                                       Output: country.code, country.name
         ->  Sequence
               Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
               ->  Shared Scan (Producer; slice1; share2)
                     Output: share2_ref1.name, share2_ref1.code, share2_ref1.c_city_cnt, share2_ref1.c_lang_cnt
                     ->  GroupAggregate
                           Output: share0_ref2.name_1, country_1.code, sum((count(share0_ref2.name))), count(DISTINCT countrylanguage.language)
                           Group Key: share0_ref2.name_1, country_1.code
                           ->  Sort
                                 Output: share0_ref2.name_1, (count(share0_ref2.name)), country_1.code, countrylanguage.language
                                 Sort Key: share0_ref2.name_1, country_1.code
                                 ->  Hash Join
                                       Output: share0_ref2.name_1, (count(share0_ref2.name)), country_1.code, countrylanguage.language
                                       Hash Cond: (share0_ref2.name_1 = country_1.name)
                                       ->  Sort
                                             Output: share0_ref2.district, share0_ref2.name_1, (count(share0_ref2.name))
                                             Sort Key: share0_ref2.district, share0_ref2.name_1
                                             ->  PX Hash 6:6  (slice4; segments: 6)
                                                   Output: share0_ref2.district, share0_ref2.name_1, (count(share0_ref2.name))
                                                   Hash Key: share0_ref2.name_1
                                                   ->  HashAggregate
                                                         Output: share0_ref2.district, share0_ref2.name_1, count(share0_ref2.name)
                                                         Group Key: share0_ref2.district, share0_ref2.name_1
                                                         ->  PX Hash 6:6  (slice5; segments: 6)
                                                               Output: share0_ref2.district, share0_ref2.name_1, share0_ref2.name, share0_ref2.population
                                                               Hash Key: share0_ref2.district, share0_ref2.name_1
                                                               ->  Result
                                                                     Output: share0_ref2.district, share0_ref2.name_1, share0_ref2.name, share0_ref2.population
                                                                     ->  Shared Scan (Consumer; slice5; share0)
                                                                           Output: share0_ref2.name, share0_ref2.id, share0_ref2.name_1, share0_ref2.district, share0_ref2.population
                                       ->  Hash
                                             Output: country_1.code, country_1.name, countrylanguage.language
                                             ->  PX Hash 6:6  (slice6; segments: 6)
                                                   Output: country_1.code, country_1.name, countrylanguage.language
                                                   Hash Key: country_1.name
                                                   ->  Hash Join
                                                         Output: country_1.code, country_1.name, countrylanguage.language
                                                         Hash Cond: (countrylanguage.countrycode = country_1.code)
                                                         ->  PX Hash 6:6  (slice7; segments: 6)
                                                               Output: countrylanguage.countrycode, countrylanguage.language
                                                               Hash Key: countrylanguage.countrycode
                                                               ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                                     Output: countrylanguage.countrycode, countrylanguage.language
                                                         ->  Hash
                                                               Output: country_1.code, country_1.name
                                                               ->  PX Hash 6:6  (slice8; segments: 6)
                                                                     Output: country_1.code, country_1.name
                                                                     Hash Key: country_1.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                           Output: country_1.code, country_1.name
               ->  Sort
                     Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
                     Sort Key: (sum(share2_ref2.c_lang_cnt)), country_3.region
                     ->  Append
                           ->  Sort
                                 Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
                                 Sort Key: country_3.region
                                 ->  HashAggregate
                                       Output: sum(share2_ref2.c_city_cnt), sum(share2_ref2.c_lang_cnt), country_3.region
                                       Group Key: country_3.region
                                       ->  Hash Join
                                             Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                             Hash Cond: (country_2.region = country_3.region)
                                             ->  PX Hash 6:6  (slice9; segments: 6)
                                                   Output: country_2.region
                                                   Hash Key: country_2.region
                                                   ->  Hash Join
                                                         Output: country_2.region
                                                         Hash Cond: (share2_ref3.code = country_2.code)
                                                         ->  PX Hash 6:6  (slice10; segments: 6)
                                                               Output: share2_ref3.code
                                                               Hash Key: share2_ref3.code
                                                               ->  Result
                                                                     Output: share2_ref3.code
                                                                     ->  Shared Scan (Consumer; slice10; share2)
                                                                           Output: share2_ref3.name, share2_ref3.code, share2_ref3.c_city_cnt, share2_ref3.c_lang_cnt
                                                         ->  Hash
                                                               Output: country_2.code, country_2.region
                                                               ->  PX Hash 6:6  (slice11; segments: 6)
                                                                     Output: country_2.code, country_2.region
                                                                     Hash Key: country_2.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                           Output: country_2.code, country_2.region
                                             ->  Hash
                                                   Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                   ->  PX Hash 6:6  (slice12; segments: 6)
                                                         Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                         Hash Key: country_3.region
                                                         ->  Hash Join
                                                               Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                               Hash Cond: (share2_ref2.code = country_3.code)
                                                               ->  PX Hash 6:6  (slice13; segments: 6)
                                                                     Output: share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                                     Hash Key: share2_ref2.code
                                                                     ->  Result
                                                                           Output: share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                                           Filter: ((share2_ref2.c_city_cnt / (share2_ref2.c_lang_cnt)::numeric) > '1'::numeric)
                                                                           ->  Shared Scan (Consumer; slice13; share2)
                                                                                 Output: share2_ref2.name, share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                               ->  Hash
                                                                     Output: country_3.region, country_3.code
                                                                     ->  PX Hash 6:6  (slice14; segments: 6)
                                                                           Output: country_3.region, country_3.code
                                                                           Hash Key: country_3.code
                                                                           ->  Nested Loop
                                                                                 Output: country_3.region, country_3.code
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice15; segments: 6)
                                                                                       Output: country_3.region, country_3.code, country_3.capital
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_3
                                                                                             Output: country_3.region, country_3.code, country_3.capital
                                                                                             Filter: (country_3.continent = 'Asia'::text)
                                                                                 ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                                                       Index Cond: (city_1.id = country_3.capital)
                           ->  Sort
                                 Output: (sum(share2_ref4.c_city_cnt)), (sum(share2_ref4.c_lang_cnt)), country_5.region
                                 Sort Key: country_5.region
                                 ->  HashAggregate
                                       Output: sum(share2_ref4.c_city_cnt), sum(share2_ref4.c_lang_cnt), country_5.region
                                       Group Key: country_5.region
                                       ->  Hash Join
                                             Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                             Hash Cond: (country_4.region = country_5.region)
                                             ->  PX Hash 6:6  (slice16; segments: 6)
                                                   Output: country_4.region
                                                   Hash Key: country_4.region
                                                   ->  Hash Join
                                                         Output: country_4.region
                                                         Hash Cond: (share2_ref5.code = country_4.code)
                                                         ->  PX Hash 6:6  (slice17; segments: 6)
                                                               Output: share2_ref5.code
                                                               Hash Key: share2_ref5.code
                                                               ->  Result
                                                                     Output: share2_ref5.code
                                                                     ->  Shared Scan (Consumer; slice17; share2)
                                                                           Output: share2_ref5.name, share2_ref5.code, share2_ref5.c_city_cnt, share2_ref5.c_lang_cnt
                                                         ->  Hash
                                                               Output: country_4.code, country_4.region
                                                               ->  PX Hash 6:6  (slice18; segments: 6)
                                                                     Output: country_4.code, country_4.region
                                                                     Hash Key: country_4.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_4
                                                                           Output: country_4.code, country_4.region
                                             ->  Hash
                                                   Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                   ->  PX Hash 6:6  (slice19; segments: 6)
                                                         Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                         Hash Key: country_5.region
                                                         ->  Hash Join
                                                               Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                               Hash Cond: (share2_ref4.code = country_5.code)
                                                               ->  Result
                                                                     Output: share2_ref4.code, share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt
                                                                     Filter: ((share2_ref4.c_city_cnt / (share2_ref4.c_lang_cnt)::numeric) > '1'::numeric)
                                                                     ->  Shared Scan (Consumer; slice19; share2)
                                                                           Output: share2_ref4.name, share2_ref4.code, share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt
                                                               ->  Hash
                                                                     Output: country_5.code, country_5.region
                                                                     ->  PX Broadcast 6:6  (slice20; segments: 6)
                                                                           Output: country_5.code, country_5.region
                                                                           ->  Hash Join
                                                                                 Output: country_5.code, country_5.region
                                                                                 Hash Cond: (share0_ref3.id = country_5.capital)
                                                                                 ->  PX Hash 6:6  (slice21; segments: 6)
                                                                                       Output: share0_ref3.id
                                                                                       Hash Key: share0_ref3.id
                                                                                       ->  Result
                                                                                             Output: share0_ref3.id
                                                                                             ->  Shared Scan (Consumer; slice21; share0)
                                                                                                   Output: share0_ref3.name, share0_ref3.id, share0_ref3.name_1, share0_ref3.district, share0_ref3.population
                                                                                 ->  Hash
                                                                                       Output: country_5.code, country_5.region, country_5.capital
                                                                                       ->  PX Hash 6:6  (slice22; segments: 6)
                                                                                             Output: country_5.code, country_5.region, country_5.capital
                                                                                             Hash Key: country_5.capital
                                                                                             ->  Partial Seq Scan on qp_with_clause.country country_5
                                                                                                   Output: country_5.code, country_5.region, country_5.capital
                                                                                                   Filter: (country_5.continent = 'Europe'::text)
 Optimizer: PolarDB PX Optimizer
(200 rows)

-- queries with CTEs on AO tables
DROP TABLE IF EXISTS CITY_AO;
NOTICE:  table "city_ao" does not exist, skipping
CREATE TABLE CITY_AO (
    id integer NOT NULL,
    name text NOT NULL,
    countrycode character(3) NOT NULL,
    district text NOT NULL,
    population integer NOT NULL
) with (appendonly=true);
ERROR:  unrecognized parameter "appendonly"
DROP TABLE IF EXISTS country_ao;
NOTICE:  table "country_ao" does not exist, skipping
CREATE TABLE country_ao (
    code character(3) NOT NULL,
    name text NOT NULL,
    continent text NOT NULL,
    region text NOT NULL,
    surfacearea numeric(10,2) NOT NULL,
    indepyear smallint,
    population integer NOT NULL,
    lifeexpectancy real,
    gnp numeric(10,2),
    gnpold numeric(10,2),
    localname text NOT NULL,
    governmentform text NOT NULL,
    headofstate text,
    capital integer,
    code2 character(2) NOT NULL
) with (appendonly=true);
ERROR:  unrecognized parameter "appendonly"
DROP TABLE IF EXISTS countrylanguage_ao;
NOTICE:  table "countrylanguage_ao" does not exist, skipping
CREATE TABLE countrylanguage_ao (
    countrycode character(3) NOT NULL,
    "language" text NOT NULL,
    isofficial boolean NOT NULL,
    percentage real NOT NULL
) with (appendonly=true);
ERROR:  unrecognized parameter "appendonly"
ALTER TABLE ONLY city_ao
    ADD CONSTRAINT city_ao_pkey PRIMARY KEY (id);
ERROR:  relation "city_ao" does not exist
ALTER TABLE ONLY country_ao
    ADD CONSTRAINT country_ao_pkey PRIMARY KEY (code);
ERROR:  relation "country_ao" does not exist
ALTER TABLE ONLY countrylanguage_ao
    ADD CONSTRAINT countrylanguage_ao_pkey PRIMARY KEY (countrycode, "language");
ERROR:  relation "countrylanguage_ao" does not exist
create index bitmap_city_ao_countrycode on city_ao using bitmap(countrycode);
ERROR:  relation "city_ao" does not exist
create index bitmap_country_ao_gf on country_ao using bitmap(governmentform);
ERROR:  relation "country_ao" does not exist
create index bitmap_country_ao_region on country_ao using bitmap(region);
ERROR:  relation "country_ao" does not exist
create index bitmap_country_ao_continent on country_ao using bitmap(continent);
ERROR:  relation "country_ao" does not exist
create index bitmap_countrylanguage_ao_countrycode on countrylanguage_ao using bitmap(countrycode);
ERROR:  relation "countrylanguage_ao" does not exist
INSERT INTO CITY_AO SELECT * FROM CITY;
ERROR:  relation "city_ao" does not exist
LINE 1: INSERT INTO CITY_AO SELECT * FROM CITY;
                    ^
INSERT INTO COUNTRY_AO SELECT * FROM COUNTRY;
ERROR:  relation "country_ao" does not exist
LINE 1: INSERT INTO COUNTRY_AO SELECT * FROM COUNTRY;
                    ^
INSERT INTO COUNTRYLANGUAGE_AO SELECT * FROM COUNTRYLANGUAGE;
ERROR:  relation "countrylanguage_ao" does not exist
LINE 1: INSERT INTO COUNTRYLANGUAGE_AO SELECT * FROM COUNTRYLANGUAGE...
                    ^
ANALYZE CITY_AO;
ERROR:  relation "city_ao" does not exist
ANALYZE COUNTRY_AO;
ERROR:  relation "country_ao" does not exist
ANALYZE COUNTRYLANGUAGE_AO;
ERROR:  relation "countrylanguage_ao" does not exist
set enable_seqscan=off;
set enable_indexscan=on;
--query1
with capitals as 
(select country_ao.code,id,city_ao.name from city_ao,country_ao 
 where city_ao.countrycode = country_ao.code AND city_ao.id = country_ao.capital) 
select * from 
capitals,countrylanguage_ao
where capitals.code = countrylanguage_ao.countrycode and isofficial='true'
order by capitals.code,countrylanguage_ao.language;
ERROR:  relation "city_ao" does not exist
LINE 2: (select country_ao.code,id,city_ao.name from city_ao,country...
                                                     ^
--query2
with lang_total as
( select count(*) as lang_count,country_ao.code,countrylanguage_ao.countrycode
  from country_ao join countrylanguage_ao on (country_ao.code=countrylanguage_ao.countrycode and governmentform='Federal Republic')
  group by country_ao.code,countrylanguage_ao.countrycode order by country_ao.code)
 
select lang_count,country_ao.code,country_ao.name,country_ao.continent,country_ao.region,country_ao.population
 from country_ao left outer join lang_total
 on (lang_total.code = country_ao.code)
 where country_ao.indepyear > 1970 and lang_total.lang_count >=1 and lang_total.lang_count >=1
  order by lang_total.lang_count desc;
ERROR:  relation "country_ao" does not exist
LINE 3:   from country_ao join countrylanguage_ao on (country_ao.cod...
               ^
-- Using CTE in the WHERE clause
--query3
with lang_total as
( select lang_count,countrycode from
  (
  (
   select count(*) as lang_count,country_ao.code,countrylanguage_ao.countrycode
  from country_ao join countrylanguage_ao on (country_ao.code=countrylanguage_ao.countrycode and governmentform='Federal Republic')
  group by country_ao.code,countrylanguage_ao.countrycode order by country_ao.code)
 
   UNION ALL
 
  (
   select count(*) as lang_count,country_ao.code,countrylanguage_ao.countrycode
  from country_ao join countrylanguage_ao on (country_ao.code=countrylanguage_ao.countrycode and governmentform='Monarchy')
  group by country_ao.code,countrylanguage_ao.countrycode order by country_ao.code)
 
 ) FOO1
)
select * from
(
select count(*) as cnt,country_ao.code,country_ao.name 
from
country_ao,countrylanguage_ao
where country_ao.code=countrylanguage_ao.countrycode group by country_ao.code,country_ao.name) AS FOO
where foo.cnt = (select max(lang_count) from lang_total) order by foo.code;
ERROR:  relation "country_ao" does not exist
LINE 6:   from country_ao join countrylanguage_ao on (country_ao.cod...
               ^
--query4
with diversecountries as
(select country_ao.code,country_ao.name,country_ao.capital,d.CNT
 from country_ao,
 (select countrylanguage_ao.countrycode,count(*) as CNT from countrylanguage_ao group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country_ao.code and country_ao.gnp > 100000)
 select diversecountries.name,city_ao.name,diversecountries.CNT
 from diversecountries,city_ao where city_ao.id = diversecountries.capital
 order by diversecountries.name;
ERROR:  relation "country_ao" does not exist
LINE 3:  from country_ao,
              ^
-- some queries with merge joins and index scans
set enable_nestloop=off;
set enable_hashjoin=off;
set enable_mergejoin=on;
-- query 5
with somecheapasiandiversecountries as
(
 select FOO.code,FOO.COUNTRY_AO,FOO.CAPITAL,FOO.headofstate,count(*) ASIAN_COUNT from
 (
 select country_ao.code,country_ao.name COUNTRY_AO,city_ao.name CAPITAL,country_ao.headofstate
 from country_ao,city_ao
 where country_ao.capital = city_ao.id 
 and country_ao.gnp < 10000
 and country_ao.region = 'Southeast Asia'
 and country_ao.continent = 'Asia'
 
 UNION ALL
 select country_ao.code,country_ao.name COUNTRY_AO,city_ao.name CAPITAL,country_ao.headofstate
 from country_ao,city_ao
 where country_ao.capital = city_ao.id 
 and country_ao.gnp < 10000
 and country_ao.region = 'Eastern Asia'
 and country_ao.continent = 'Asia'
 UNION ALL
 select country_ao.code,country_ao.name COUNTRY_AO,city_ao.name CAPITAL,country_ao.headofstate
 from country_ao,city_ao
 where country_ao.capital = city_ao.id 
 and country_ao.gnp < 10000
 and country_ao.region = 'Middle East'
 and country_ao.continent = 'Asia'
 ) FOO, countrylanguage_ao
 where FOO.code = countrylanguage_ao.countrycode
 group by FOO.code,FOO.COUNTRY_AO,FOO.CAPITAL,FOO.headofstate,countrylanguage_ao.countrycode
 HAVING count(*) >=
 (select min(CNT) FROM
   (select count(*) CNT,country_ao.code from countrylanguage_ao,country_ao
    where countrylanguage_ao.countrycode=country_ao.code
    and country_ao.continent = 'Asia'
    and country_ao.region = 'Southern and Central Asia'
    group by country_ao.code
   ) FOO1
 )
)
select FOO.code,FOO.COUNTRY_AO,FOO.CAPITAL,FOO.headofstate,count(*) COMPARED_WITH_CHEAP_ASIAN_CNT
from
(
select country_ao.code,country_ao.name COUNTRY_AO,city_ao.name CAPITAL,country_ao.headofstate
from country_ao,city_ao
where country_ao.capital = city_ao.id 
and country_ao.continent = 'North America'
UNION ALL
select country_ao.code,country_ao.name COUNTRY_AO,city_ao.name CAPITAL,country_ao.headofstate
from country_ao,city_ao
where country_ao.capital =	city_ao.id	
and country_ao.continent =	'South America'
) FOO,countrylanguage_ao
where FOO.code = countrylanguage_ao.countrycode
group by FOO.code,FOO.COUNTRY_AO,FOO.CAPITAL,FOO.headofstate
HAVING count(*)  >=
 (select min(ASIAN_COUNT) FROM
   (select ASIAN_COUNT FROM somecheapasiandiversecountries,country_ao
    where somecheapasiandiversecountries.code = country_ao.code
    and country_ao.gnp >= country_ao.gnpold
   ) ASIANCOUNT
 )
order by COUNTRY_AO;
ERROR:  relation "country_ao" does not exist
LINE 6:  from country_ao,city_ao
              ^
-- query 6 
 
select count(*) from
( select r.* from
  ( with fact as 
     (
      select country_ao.name as COUNTRY_AO,country_ao.code,city_ao.name as CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,AGG1.region
      from      
         (select
         sum(case when (city_ao.population >= 0.5 * country_ao.population) then country_ao.population else city_ao.population end) as S_POPULATION,
         sum(case when (gnp >= gnpold) then gnp else gnpold end) as S_GNP,
         avg(case when (lifeexpectancy > 60) then 50 else lifeexpectancy end) as AVG_LIFE,country_ao.region
         from country_ao,city_ao  
         where governmentform != 'Constitutional Monarchy'
         and country_ao.capital = city_ao.id
         and indepyear > 0
         group by country_ao.region) AGG1
         ,country_ao,city_ao
         where country_ao.capital = city_ao.id
         and country_ao.region = AGG1.region
      )
     
     select code,COUNTRY_AO,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage_ao
     where fact.code = countrylanguage_ao.countrycode and isofficial = 'True'
     and fact.region = 'South America'
     
     UNION ALL
     
     select code,COUNTRY_AO,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage_ao
     where fact.code = countrylanguage_ao.countrycode and isofficial = 'True'
     and fact.region = 'North America'
     
     UNION ALL
     
     select code,COUNTRY_AO,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage_ao
     where fact.code = countrylanguage_ao.countrycode and isofficial = 'True'
     and fact.region = 'Caribbean'
 ) as r
 left join
  (
   select 'ARG' as CODE UNION ALL
   select 'BOL' as CODE UNION ALL
   select 'BRA' as CODE UNION ALL
   select 'PER' as CODE UNION ALL
   select 'URY' as CODE UNION ALL
   select 'IND' as CODE  UNION ALL
   select 'LCA' as CODE UNION ALL
   select 'VCT' as CODE
   ) as r1
on r.code = r1.code) AS FOO;
ERROR:  relation "country_ao" does not exist
LINE 11:          from country_ao,city_ao  
                       ^
-- query7
with alleuropeanlanguages as 
(select country_ao.code,country_ao.name COUNTRY_AO, city_ao.name CAPITAL, language, isofficial, percentage
 FROM country_ao,city_ao,countrylanguage_ao
 WHERE country_ao.code = countrylanguage_ao.countrycode
 and country_ao.capital = city_ao.id
 and country_ao.continent = 'Europe')
select * from
(select * from alleuropeanlanguages where isofficial='True') e1,
(select * from alleuropeanlanguages where percentage > 50) e2
where e1.code = e2.code order by e2.COUNTRY_AO,e1.language;
ERROR:  relation "country_ao" does not exist
LINE 3:  FROM country_ao,city_ao,countrylanguage_ao
              ^
-- query8
with allcountry_aostats as 
( select country_ao.code,country_ao.name,count(distinct city_ao.id) CITY_AO_CNT,
  count(distinct countrylanguage_ao.language) LANG_CNT
  from country_ao,city_ao,countrylanguage_ao
  where country_ao.code = city_ao.countrycode
  and country_ao.code = countrylanguage_ao.countrycode
  group by country_ao.code,country_ao.name
)
select sum(FOO.CITY_AO_CNT) REGION_CITY_AO_CNT,sum(FOO.LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountry_aostats.code,allcountry_aostats.name COUNTRY_AO,CITY_AO_CNT,LANG_CNT,country_ao.region,city_ao.name CAPITAL
from allcountry_aostats,country_ao,city_ao
where allcountry_aostats.code = country_ao.code
and country_ao.capital = city_ao.id
and CITY_AO_CNT/LANG_CNT > 1
and country_ao.continent = 'Asia'
UNION ALL
select allcountry_aostats.code,allcountry_aostats.name COUNTRY_AO,CITY_AO_CNT,LANG_CNT,country_ao.region,city_ao.name CAPITAL
from allcountry_aostats,country_ao,city_ao
where allcountry_aostats.code = country_ao.code
and country_ao.capital = city_ao.id
and CITY_AO_CNT/LANG_CNT > 1
and country_ao.continent = 'North America'
UNION ALL
select allcountry_aostats.code,allcountry_aostats.name COUNTRY_AO,CITY_AO_CNT,LANG_CNT,country_ao.region,city_ao.name CAPITAL
from allcountry_aostats,country_ao,city_ao
where allcountry_aostats.code = country_ao.code
and country_ao.capital = city_ao.id
and CITY_AO_CNT/LANG_CNT > (select  max(CITY_AO_CNT/LANG_CNT)  from allcountry_aostats,country_ao where allcountry_aostats.code = country_ao.code AND country_ao.continent='Europe')
) FOO
,allcountry_aostats,country_ao
WHERE allcountry_aostats.code = country_ao.code
and FOO.region = country_ao.region
group by FOO.region order by FOO.region;
ERROR:  relation "country_ao" does not exist
LINE 4:   from country_ao,city_ao,countrylanguage_ao
               ^
-- some queries with hash joins and index scans
set enable_nestloop=off;
set enable_hashjoin=on;
set enable_mergejoin=off;
--query 9
with diversecountries as
(select country_ao.code,country_ao.name,country_ao.capital,d.CNT
 from country_ao,
 (select countrylanguage_ao.countrycode,count(*) as CNT from countrylanguage_ao group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country_ao.code and country_ao.gnp > 100000)
select d1.code,d1.name,d1.capital,city_ao.name CAPITAL_CITY_AO,d1.CNT,d2.CNT
from
diversecountries d1 left join country_ao
ON (d1.code = country_ao.code AND d1.CNT < 8)
left join diversecountries d2
ON (country_ao.code = d2.code AND d2.CNT > 8)
INNER JOIN city_ao
ON(d1.capital = city_ao.id)
ORDER BY d1.name;
ERROR:  relation "country_ao" does not exist
LINE 3:  from country_ao,
              ^
--query 10 , multiple ctes, joins
with longlivingregions as 
(
select FOO.*,count(distinct language) as "lang_count"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       avg(lifeexpectancy) as "REGION_LIFETIME",region
     from
      country_ao
     group by region
    ) FOO,countrylanguage_ao,country_ao
where
   country_ao.code = countrylanguage_ao.countrycode
   and FOO.region = country_ao.region
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP",foo."REGION_LIFETIME"),
denseregions as 
(
select FOO.*,count(distinct language) as "lang_count",
       sum(surfacearea) as "REGION_SURFACE_AREA"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       region
     from
      country_ao
     group by region
    ) FOO,countrylanguage_ao,country_ao
where
   country_ao.code = countrylanguage_ao.countrycode
   and FOO.region = country_ao.region
   and FOO."REGION_POP" != 0
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP"
order by sum(surfacearea)/foo."REGION_POP" desc),
allcountry_aostats as 
( select country_ao.code,country_ao.name,count(distinct city_ao.id) CITY_AO_CNT,
  count(distinct countrylanguage_ao.language) LANG_CNT
  from country_ao,city_ao,countrylanguage_ao
  where country_ao.code = city_ao.countrycode
  and country_ao.code = countrylanguage_ao.countrycode
  group by country_ao.code,country_ao.name
)
select allcountry_aostats.CITY_AO_CNT,allcountry_aostats.LANG_CNT,allcountry_aostats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountry_aostats,country_ao
where longlivingregions.region = denseregions.region and allcountry_aostats.code = country_ao.code and country_ao.region = longlivingregions.region
and country_ao.indepyear between 1800 and 1850
UNION ALL
select allcountry_aostats.CITY_AO_CNT,allcountry_aostats.LANG_CNT,allcountry_aostats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountry_aostats,country_ao
where longlivingregions.region = denseregions.region and allcountry_aostats.code = country_ao.code and country_ao.region = longlivingregions.region
and country_ao.indepyear between 1850 and 1900
UNION ALL
select allcountry_aostats.CITY_AO_CNT,allcountry_aostats.LANG_CNT,allcountry_aostats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountry_aostats,country_ao
where longlivingregions.region = denseregions.region and allcountry_aostats.code = country_ao.code and country_ao.region = longlivingregions.region
and country_ao.indepyear > 1900
order by name
LIMIT 50;
ERROR:  relation "country_ao" does not exist
LINE 10:       country_ao
               ^
--query 11
with allcity_aostats as 
( select city_ao.name CITY_AO,city_ao.id,country_ao.name COUNTRY_AO,city_ao.district,city_ao.population as CITY_AO_POP
  from
  city_ao,country_ao
  where city_ao.countrycode = country_ao.code
),
alldistrictstats as 
( select allcity_aostats.district,allcity_aostats.COUNTRY_AO,sum(CITY_AO_POP) DISTRICT_POP,
  count(CITY_AO) as D_CITY_AO_CNT
  from allcity_aostats
  group by allcity_aostats.district,allcity_aostats.COUNTRY_AO
  order by district,COUNTRY_AO
),
allcountry_aostats as 
( select alldistrictstats.COUNTRY_AO,country_ao.code,sum(D_CITY_AO_CNT) C_CITY_AO_CNT,
  count(distinct countrylanguage_ao.language) C_LANG_CNT
  from alldistrictstats,country_ao,countrylanguage_ao
  where alldistrictstats.COUNTRY_AO = country_ao.name
  and country_ao.code = countrylanguage_ao.countrycode
  group by COUNTRY_AO,code
),
asian_region_stats as 
(
select sum(FOO.C_CITY_AO_CNT) REGION_CITY_AO_CNT,sum(FOO.C_LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountry_aostats.code,allcountry_aostats.COUNTRY_AO,C_CITY_AO_CNT,C_LANG_CNT,country_ao.region,city_ao.name CAPITAL
from allcountry_aostats,country_ao,city_ao
where allcountry_aostats.code = country_ao.code
and country_ao.capital = city_ao.id
and C_CITY_AO_CNT/C_LANG_CNT > 1
and country_ao.continent = 'Asia') FOO
,allcountry_aostats,country_ao
WHERE allcountry_aostats.code = country_ao.code
and FOO.region = country_ao.region
group by FOO.region order by FOO.region
)
select * from
(
select REGION_CITY_AO_CNT as CITY_AO_CNT,REGION_LANG_CNT as LANG_CNT, region as IDENTIFIER from asian_region_stats
UNION ALL
(
select sum(FOO.C_CITY_AO_CNT) CITY_AO_CNT,sum(FOO.C_LANG_CNT) LANG_CNT,FOO.region as IDENTIFIER
FROM
(
select allcountry_aostats.code,allcountry_aostats.COUNTRY_AO,C_CITY_AO_CNT,C_LANG_CNT,country_ao.region,allcity_aostats.CITY_AO CAPITAL
from allcountry_aostats,country_ao,allcity_aostats
where allcountry_aostats.code = country_ao.code
and country_ao.capital = allcity_aostats.id
and C_CITY_AO_CNT/C_LANG_CNT > 1
and country_ao.continent = 'Europe') FOO
,allcountry_aostats,country_ao
WHERE allcountry_aostats.code = country_ao.code
and FOO.region = country_ao.region
group by FOO.region order by FOO.region
)
) FOO1
order by FOO1.lang_cnt,FOO1.identifier;
ERROR:  relation "city_ao" does not exist
LINE 4:   city_ao,country_ao
          ^
-- queries with CTEs on CO tables
DROP TABLE IF EXISTS CITY_CO;
NOTICE:  table "city_co" does not exist, skipping
CREATE TABLE CITY_CO (
    id integer NOT NULL,
    name text NOT NULL,
    countrycode character(3) NOT NULL,
    district text NOT NULL,
    population integer NOT NULL
) with (appendonly=true,orientation=column);
ERROR:  unrecognized parameter "appendonly"
DROP TABLE IF EXISTS country_co;
NOTICE:  table "country_co" does not exist, skipping
CREATE TABLE country_co (
    code character(3) NOT NULL,
    name text NOT NULL,
    continent text NOT NULL,
    region text NOT NULL,
    surfacearea numeric(10,2) NOT NULL,
    indepyear smallint,
    population integer NOT NULL,
    lifeexpectancy real,
    gnp numeric(10,2),
    gnpold numeric(10,2),
    localname text NOT NULL,
    governmentform text NOT NULL,
    headofstate text,
    capital integer,
    code2 character(2) NOT NULL
) with (appendonly=true,orientation=column);
ERROR:  unrecognized parameter "appendonly"
DROP TABLE IF EXISTS countrylanguage_co;
NOTICE:  table "countrylanguage_co" does not exist, skipping
CREATE TABLE countrylanguage_co (
    countrycode character(3) NOT NULL,
    "language" text NOT NULL,
    isofficial boolean NOT NULL,
    percentage real NOT NULL
) with (appendonly=true,orientation=column);
ERROR:  unrecognized parameter "appendonly"
ALTER TABLE ONLY city_co
    ADD CONSTRAINT city_co_pkey PRIMARY KEY (id);
ERROR:  relation "city_co" does not exist
ALTER TABLE ONLY country_co
    ADD CONSTRAINT country_co_pkey PRIMARY KEY (code);
ERROR:  relation "country_co" does not exist
ALTER TABLE ONLY countrylanguage_co
    ADD CONSTRAINT countrylanguage_co_pkey PRIMARY KEY (countrycode, "language");
ERROR:  relation "countrylanguage_co" does not exist
create index bitmap_city_co_countrycode on city_co using bitmap(countrycode);
ERROR:  relation "city_co" does not exist
create index bitmap_country_co_gf on country_co using bitmap(governmentform);
ERROR:  relation "country_co" does not exist
create index bitmap_country_co_region on country_co using bitmap(region);
ERROR:  relation "country_co" does not exist
create index bitmap_country_co_continent on country_co using bitmap(continent);
ERROR:  relation "country_co" does not exist
create index bitmap_countrylanguage_co_countrycode on countrylanguage_co using bitmap(countrycode);
ERROR:  relation "countrylanguage_co" does not exist
INSERT INTO CITY_CO SELECT * FROM CITY;
ERROR:  relation "city_co" does not exist
LINE 1: INSERT INTO CITY_CO SELECT * FROM CITY;
                    ^
INSERT INTO COUNTRY_CO SELECT * FROM COUNTRY;
ERROR:  relation "country_co" does not exist
LINE 1: INSERT INTO COUNTRY_CO SELECT * FROM COUNTRY;
                    ^
INSERT INTO COUNTRYLANGUAGE_CO SELECT * FROM COUNTRYLANGUAGE;
ERROR:  relation "countrylanguage_co" does not exist
LINE 1: INSERT INTO COUNTRYLANGUAGE_CO SELECT * FROM COUNTRYLANGUAGE...
                    ^
ANALYZE CITY_CO;
ERROR:  relation "city_co" does not exist
ANALYZE COUNTRY_CO;
ERROR:  relation "country_co" does not exist
ANALYZE COUNTRYLANGUAGE_CO;
ERROR:  relation "countrylanguage_co" does not exist
set enable_seqscan=off;
set enable_indexscan=on;
--query1
with capitals as
(select country_co.code,id,city_co.name from city_co,country_co
 where city_co.countrycode = country_co.code AND city_co.id = country_co.capital)
select * from
capitals,countrylanguage_co
where capitals.code = countrylanguage_co.countrycode and isofficial='true'
order by capitals.code,countrylanguage_co.language;
ERROR:  relation "city_co" does not exist
LINE 2: (select country_co.code,id,city_co.name from city_co,country...
                                                     ^
--query2
with lang_total as
( select count(*) as lang_count,country_co.code,countrylanguage_co.countrycode
  from country_co join countrylanguage_co on (country_co.code=countrylanguage_co.countrycode and governmentform='Federal Republic')
  group by country_co.code,countrylanguage_co.countrycode order by country_co.code)
 
select lang_count,country_co.code,country_co.name,country_co.continent,country_co.region,country_co.population
 from country_co left outer join lang_total
 on (lang_total.code = country_co.code)
 where country_co.indepyear > 1970 and lang_total.lang_count >=1 and lang_total.lang_count >=1
  order by lang_total.lang_count desc;
ERROR:  relation "country_co" does not exist
LINE 3:   from country_co join countrylanguage_co on (country_co.cod...
               ^
-- Using CTE in the WHERE clause
--query3
with lang_total as
( select lang_count,countrycode from
  (
  (
   select count(*) as lang_count,country_co.code,countrylanguage_co.countrycode
  from country_co join countrylanguage_co on (country_co.code=countrylanguage_co.countrycode and governmentform='Federal Republic')
  group by country_co.code,countrylanguage_co.countrycode order by country_co.code)
 
   UNION ALL
 
  (
   select count(*) as lang_count,country_co.code,countrylanguage_co.countrycode
  from country_co join countrylanguage_co on (country_co.code=countrylanguage_co.countrycode and governmentform='Monarchy')
  group by country_co.code,countrylanguage_co.countrycode order by country_co.code)
 
 ) FOO1
)
select * from
(
select count(*) as cnt,country_co.code,country_co.name 
from
country_co,countrylanguage_co
where country_co.code=countrylanguage_co.countrycode group by country_co.code,country_co.name) AS FOO
where foo.cnt = (select max(lang_count) from lang_total) order by foo.code;
ERROR:  relation "country_co" does not exist
LINE 6:   from country_co join countrylanguage_co on (country_co.cod...
               ^
--query4
with diversecountries as
(select country_co.code,country_co.name,country_co.capital,d.CNT
 from country_co,
 (select countrylanguage_co.countrycode,count(*) as CNT from countrylanguage_co group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country_co.code and country_co.gnp > 100000)
 select diversecountries.name,city_co.name,diversecountries.CNT
 from diversecountries,city_co where city_co.id = diversecountries.capital
 order by diversecountries.name;
ERROR:  relation "country_co" does not exist
LINE 3:  from country_co,
              ^
-- some queries with merge joins and index scans
set enable_nestloop=off;
set enable_hashjoin=off;
set enable_mergejoin=on;
-- query 5
with somecheapasiandiversecountries as
(
 select FOO.code,FOO.COUNTRY_CO,FOO.CAPITAL,FOO.headofstate,count(*) ASIAN_COUNT from
 (
 select country_co.code,country_co.name COUNTRY_CO,city_co.name CAPITAL,country_co.headofstate
 from country_co,city_co
 where country_co.capital = city_co.id 
 and country_co.gnp < 10000
 and country_co.region = 'Southeast Asia'
 and country_co.continent = 'Asia'
 
 UNION ALL
 select country_co.code,country_co.name COUNTRY_CO,city_co.name CAPITAL,country_co.headofstate
 from country_co,city_co
 where country_co.capital = city_co.id 
 and country_co.gnp < 10000
 and country_co.region = 'Eastern Asia'
 and country_co.continent = 'Asia'
 UNION ALL
 select country_co.code,country_co.name COUNTRY_CO,city_co.name CAPITAL,country_co.headofstate
 from country_co,city_co
 where country_co.capital = city_co.id 
 and country_co.gnp < 10000
 and country_co.region = 'Middle East'
 and country_co.continent = 'Asia'
 ) FOO, countrylanguage_co
 where FOO.code = countrylanguage_co.countrycode
 group by FOO.code,FOO.COUNTRY_CO,FOO.CAPITAL,FOO.headofstate,countrylanguage_co.countrycode
 HAVING count(*) >=
 (select min(CNT) FROM
   (select count(*) CNT,country_co.code from countrylanguage_co,country_co
    where countrylanguage_co.countrycode=country_co.code
    and country_co.continent = 'Asia'
    and country_co.region = 'Southern and Central Asia'
    group by country_co.code
   ) FOO1
 )
)
select FOO.code,FOO.COUNTRY_CO,FOO.CAPITAL,FOO.headofstate,count(*) COMPARED_WITH_CHEAP_ASIAN_CNT
from
(
select country_co.code,country_co.name COUNTRY_CO,city_co.name CAPITAL,country_co.headofstate
from country_co,city_co
where country_co.capital = city_co.id 
and country_co.continent = 'North America'
UNION ALL
select country_co.code,country_co.name COUNTRY_CO,city_co.name CAPITAL,country_co.headofstate
from country_co,city_co
where country_co.capital =	city_co.id	
and country_co.continent =	'South America'
) FOO,countrylanguage_co
where FOO.code = countrylanguage_co.countrycode
group by FOO.code,FOO.COUNTRY_CO,FOO.CAPITAL,FOO.headofstate
HAVING count(*)  >=
 (select min(ASIAN_COUNT) FROM
   (select ASIAN_COUNT FROM somecheapasiandiversecountries,country_co
    where somecheapasiandiversecountries.code = country_co.code
    and country_co.gnp >= country_co.gnpold
   ) ASIANCOUNT
 )
order by COUNTRY_CO;
ERROR:  relation "country_co" does not exist
LINE 6:  from country_co,city_co
              ^
-- query 6
select count(*) from
( select r.* from
  ( with fact as
     (
      select country_co.name as COUNTRY_CO,country_co.code,city_co.name as CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,AGG1.region
      from
         (select
         sum(case when (city_co.population >= 0.5 * country_co.population) then country_co.population else city_co.population end) as S_POPULATION,
         sum(case when (gnp >= gnpold) then gnp else gnpold end) as S_GNP,
         avg(case when (lifeexpectancy > 60) then 50 else lifeexpectancy end) as AVG_LIFE,country_co.region
         from country_co,city_co
         where governmentform != 'Constitutional Monarchy'
         and country_co.capital = city_co.id
         and indepyear > 0
         group by country_co.region) AGG1
         ,country_co,city_co
         where country_co.capital = city_co.id
         and country_co.region = AGG1.region
      )
     select code,COUNTRY_CO,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage_co
     where fact.code = countrylanguage_co.countrycode and isofficial = 'True'
     and fact.region = 'South America'
     UNION ALL
     select code,COUNTRY_CO,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage_co
     where fact.code = countrylanguage_co.countrycode and isofficial = 'True'
     and fact.region = 'North America'
     UNION ALL
     select code,COUNTRY_CO,CAPITAL,S_POPULATION,S_GNP,AVG_LIFE,language as OFFICIALLANGUAGE,region
     from fact,countrylanguage_co
     where fact.code = countrylanguage_co.countrycode and isofficial = 'True'
     and fact.region = 'Caribbean'
 ) as r
 left join
  (
   select 'ARG' as CODE UNION ALL
   select 'BOL' as CODE UNION ALL
   select 'BRA' as CODE UNION ALL
   select 'PER' as CODE UNION ALL
   select 'URY' as CODE UNION ALL
   select 'IND' as CODE  UNION ALL
   select 'LCA' as CODE UNION ALL
   select 'VCT' as CODE
   ) as r1
on r.code = r1.code) AS FOO;
ERROR:  relation "country_co" does not exist
LINE 11:          from country_co,city_co
                       ^
-- query7
with alleuropeanlanguages as 
(select country_co.code,country_co.name COUNTRY_CO, city_co.name CAPITAL, language, isofficial, percentage
 FROM country_co,city_co,countrylanguage_co
 WHERE country_co.code = countrylanguage_co.countrycode
 and country_co.capital = city_co.id
 and country_co.continent = 'Europe')
select * from
(select * from alleuropeanlanguages where isofficial='True') e1,
(select * from alleuropeanlanguages where percentage > 50) e2
where e1.code = e2.code order by e2.COUNTRY_CO,e1.language;
ERROR:  relation "country_co" does not exist
LINE 3:  FROM country_co,city_co,countrylanguage_co
              ^
-- query8
with allcountry_costats as 
( select country_co.code,country_co.name,count(distinct city_co.id) CITY_CO_CNT,
  count(distinct countrylanguage_co.language) LANG_CNT
  from country_co,city_co,countrylanguage_co
  where country_co.code = city_co.countrycode
  and country_co.code = countrylanguage_co.countrycode
  group by country_co.code,country_co.name
)
select sum(FOO.CITY_CO_CNT) REGION_CITY_CO_CNT,sum(FOO.LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountry_costats.code,allcountry_costats.name COUNTRY_CO,CITY_CO_CNT,LANG_CNT,country_co.region,city_co.name CAPITAL
from allcountry_costats,country_co,city_co
where allcountry_costats.code = country_co.code
and country_co.capital = city_co.id
and CITY_CO_CNT/LANG_CNT > 1
and country_co.continent = 'Asia'
UNION ALL
select allcountry_costats.code,allcountry_costats.name COUNTRY_CO,CITY_CO_CNT,LANG_CNT,country_co.region,city_co.name CAPITAL
from allcountry_costats,country_co,city_co
where allcountry_costats.code = country_co.code
and country_co.capital = city_co.id
and CITY_CO_CNT/LANG_CNT > 1
and country_co.continent = 'North America'
UNION ALL
select allcountry_costats.code,allcountry_costats.name COUNTRY_CO,CITY_CO_CNT,LANG_CNT,country_co.region,city_co.name CAPITAL
from allcountry_costats,country_co,city_co
where allcountry_costats.code = country_co.code
and country_co.capital = city_co.id
and CITY_CO_CNT/LANG_CNT > (select  max(CITY_CO_CNT/LANG_CNT)  from allcountry_costats,country_co where allcountry_costats.code = country_co.code AND country_co.continent='Europe')
) FOO
,allcountry_costats,country_co
WHERE allcountry_costats.code = country_co.code
and FOO.region = country_co.region
group by FOO.region order by FOO.region;
ERROR:  relation "country_co" does not exist
LINE 4:   from country_co,city_co,countrylanguage_co
               ^
-- some queries with hash joins and index scans
set enable_nestloop=off;
set enable_hashjoin=on;
set enable_mergejoin=off;
--query 9
with diversecountries as
(select country_co.code,country_co.name,country_co.capital,d.CNT
 from country_co,
 (select countrylanguage_co.countrycode,count(*) as CNT from countrylanguage_co group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country_co.code and country_co.gnp > 100000)
select d1.code,d1.name,d1.capital,city_co.name CAPITAL_CITY_CO,d1.CNT,d2.CNT
from
diversecountries d1 left join country_co
ON (d1.code = country_co.code AND d1.CNT < 8)
left join diversecountries d2
ON (country_co.code = d2.code AND d2.CNT > 8)
INNER JOIN city_co
ON(d1.capital = city_co.id)
ORDER BY d1.name;
ERROR:  relation "country_co" does not exist
LINE 3:  from country_co,
              ^
--query 10 , multiple ctes, joins
with longlivingregions as 
(
select FOO.*,count(distinct language) as "lang_count"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       avg(lifeexpectancy) as "REGION_LIFETIME",region
     from
      country_co
     group by region
    ) FOO,countrylanguage_co,country_co
where
   country_co.code = countrylanguage_co.countrycode
   and FOO.region = country_co.region
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP",foo."REGION_LIFETIME"),
denseregions as 
(
select FOO.*,count(distinct language) as "lang_count",
       sum(surfacearea) as "REGION_SURFACE_AREA"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       region
     from
      country_co
     group by region
    ) FOO,countrylanguage_co,country_co
where
   country_co.code = countrylanguage_co.countrycode
   and FOO.region = country_co.region
   and FOO."REGION_POP" != 0
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP"
order by sum(surfacearea)/foo."REGION_POP" desc),
allcountry_costats as 
( select country_co.code,country_co.name,count(distinct city_co.id) CITY_CO_CNT,
  count(distinct countrylanguage_co.language) LANG_CNT
  from country_co,city_co,countrylanguage_co
  where country_co.code = city_co.countrycode
  and country_co.code = countrylanguage_co.countrycode
  group by country_co.code,country_co.name
)
select allcountry_costats.CITY_CO_CNT,allcountry_costats.LANG_CNT,allcountry_costats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountry_costats,country_co
where longlivingregions.region = denseregions.region and allcountry_costats.code = country_co.code and country_co.region = longlivingregions.region
and country_co.indepyear between 1800 and 1850
UNION ALL
select allcountry_costats.CITY_CO_CNT,allcountry_costats.LANG_CNT,allcountry_costats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountry_costats,country_co
where longlivingregions.region = denseregions.region and allcountry_costats.code = country_co.code and country_co.region = longlivingregions.region
and country_co.indepyear between 1850 and 1900
UNION ALL
select allcountry_costats.CITY_CO_CNT,allcountry_costats.LANG_CNT,allcountry_costats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountry_costats,country_co
where longlivingregions.region = denseregions.region and allcountry_costats.code = country_co.code and country_co.region = longlivingregions.region
and country_co.indepyear > 1900
order by name
LIMIT 50;
ERROR:  relation "country_co" does not exist
LINE 10:       country_co
               ^
--query 11
with allcity_costats as
( select city_co.name CITY_CO,city_co.id,country_co.name COUNTRY_CO,city_co.district,city_co.population as CITY_CO_POP
  from
  city_co,country_co
  where city_co.countrycode = country_co.code
),
alldistrictstats as
( select allcity_costats.district,allcity_costats.COUNTRY_CO,sum(CITY_CO_POP) DISTRICT_POP,
  count(CITY_CO) as D_CITY_CO_CNT
  from allcity_costats
  group by allcity_costats.district,allcity_costats.COUNTRY_CO
  order by district,COUNTRY_CO
),
allcountry_costats as
( select alldistrictstats.COUNTRY_CO,country_co.code,sum(D_CITY_CO_CNT) C_CITY_CO_CNT,
  count(distinct countrylanguage_co.language) C_LANG_CNT
  from alldistrictstats,country_co,countrylanguage_co
  where alldistrictstats.COUNTRY_CO = country_co.name
  and country_co.code = countrylanguage_co.countrycode
  group by COUNTRY_CO,code
),
asian_region_stats as
(
select sum(FOO.C_CITY_CO_CNT) REGION_CITY_CO_CNT,sum(FOO.C_LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountry_costats.code,allcountry_costats.COUNTRY_CO,C_CITY_CO_CNT,C_LANG_CNT,country_co.region,city_co.name CAPITAL
from allcountry_costats,country_co,city_co
where allcountry_costats.code = country_co.code
and country_co.capital = city_co.id
and C_CITY_CO_CNT/C_LANG_CNT > 1
and country_co.continent = 'Asia') FOO
,allcountry_costats,country_co
WHERE allcountry_costats.code = country_co.code
and FOO.region = country_co.region
group by FOO.region order by FOO.region
)
select * from
(
select REGION_CITY_CO_CNT as CITY_CO_CNT,REGION_LANG_CNT as LANG_CNT, region as IDENTIFIER from asian_region_stats
UNION ALL
(
select sum(FOO.C_CITY_CO_CNT) CITY_CO_CNT,sum(FOO.C_LANG_CNT) LANG_CNT,FOO.region as IDENTIFIER
FROM
(
select allcountry_costats.code,allcountry_costats.COUNTRY_CO,C_CITY_CO_CNT,C_LANG_CNT,country_co.region,allcity_costats.CITY_CO CAPITAL
from allcountry_costats,country_co,allcity_costats
where allcountry_costats.code = country_co.code
and country_co.capital = allcity_costats.id
and C_CITY_CO_CNT/C_LANG_CNT > 1
and country_co.continent = 'Europe') FOO
,allcountry_costats,country_co
WHERE allcountry_costats.code = country_co.code
and FOO.region = country_co.region
group by FOO.region order by FOO.region
)
) FOO1
order by FOO1.lang_cnt,FOO1.identifier;
ERROR:  relation "city_co" does not exist
LINE 4:   city_co,country_co
          ^
-- Queries using multiple CTEs
-- query1 - all CTEs being used once in the main query
 with capitals as 
(select country.code,id,city.name from city,country 
 where city.countrycode = country.code AND city.id = country.capital),
lang_total as
( select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code),
alleuropeanlanguages as 
(select country.code,country.name COUNTRY, city.name CAPITAL, language, isofficial, percentage
 FROM country,city,countrylanguage
 WHERE country.code = countrylanguage.countrycode
 and country.capital = city.id
 and country.continent = 'Europe'),
diversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country,
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country.code and country.gnp > 100000)
select capitals.name CAPITAL,lang_total.lang_count COUNTRY_LANG_COUNT,capitals.code,country.name
from capitals,lang_total,country
where capitals.code = lang_total.countrycode
and capitals.code = country.code
and country.code NOT IN (select diversecountries.code from diversecountries,alleuropeanlanguages
                         where diversecountries.code = alleuropeanlanguages.code)
order by capitals.code;
     capital      | country_lang_count | code |              name               
------------------+--------------------+------+---------------------------------
 Buenos Aires     |                  3 | ARG  | Argentina
 Baku             |                  4 | AZE  | Azerbaijan
 Sarajevo         |                  1 | BIH  | Bosnia and Herzegovina
 Brasilia         |                  5 | BRA  | Brazil
 Berlin           |                  6 | DEU  | Germany
 Palikir          |                  6 | FSM  | Micronesia, Federated States of
 New Delhi        |                 12 | IND  | India
 Antananarivo     |                  2 | MDG  | Madagascar
 Ciudad de Mexico |                  6 | MEX  | Mexico
 Abuja            |                 10 | NGA  | Nigeria
 Washington       |                 12 | USA  | United States
 Caracas          |                  3 | VEN  | Venezuela
 Beograd          |                  6 | YUG  | Yugoslavia
(13 rows)

                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: city.name, (count()), country.code, country_2.name
   Merge Key: country.code
   ->  Sort
         Output: city.name, (count()), country.code, country_2.name
         Sort Key: country.code
         ->  Sort
               Output: city.name, (count()), country.code, country_2.name
               Sort Key: country.code
               ->  Hash Join
                     Output: city.name, (count()), country.code, country_2.name
                     Hash Cond: (country.code = countrylanguage.countrycode)
                     ->  Hash Join
                           Output: country.code, city.name
                           Hash Cond: ((city.countrycode = country.code) AND (city.id = country.capital))
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: city.id, city.name, city.countrycode
                                 Hash Key: city.countrycode
                                 ->  Partial Seq Scan on qp_with_clause.city
                                       Output: city.id, city.name, city.countrycode
                           ->  Hash
                                 Output: country.code, country.capital
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: country.code, country.capital
                                       Hash Key: country.code
                                       ->  Partial Seq Scan on qp_with_clause.country
                                             Output: country.code, country.capital
                     ->  Hash
                           Output: (count()), countrylanguage.countrycode, country_2.name
                           ->  Hash Left Anti Semi (Not-In) Join
                                 Output: (count()), countrylanguage.countrycode, country_2.name
                                 Hash Cond: (country_2.code = country_4.code)
                                 ->  PX Hash 6:6  (slice4; segments: 6)
                                       Output: (count()), countrylanguage.countrycode, country_2.code, country_2.name
                                       Hash Key: country_2.code
                                       ->  Nested Loop
                                             Output: (count()), countrylanguage.countrycode, country_2.code, country_2.name
                                             Join Filter: true
                                             ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                   Output: (count()), country_1.code, countrylanguage.countrycode
                                                   ->  Result
                                                         Output: (count()), country_1.code, countrylanguage.countrycode
                                                         Filter: (country_1.code = countrylanguage.countrycode)
                                                         ->  GroupAggregate
                                                               Output: count(), country_1.code, countrylanguage.countrycode
                                                               Group Key: country_1.code, countrylanguage.countrycode
                                                               ->  Sort
                                                                     Output: country_1.code, countrylanguage.countrycode
                                                                     Sort Key: country_1.code, countrylanguage.countrycode
                                                                     ->  PX Hash 6:6  (slice6; segments: 6)
                                                                           Output: country_1.code, countrylanguage.countrycode
                                                                           Hash Key: country_1.code, countrylanguage.countrycode
                                                                           ->  Nested Loop
                                                                                 Output: country_1.code, countrylanguage.countrycode
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice7; segments: 6)
                                                                                       Output: country_1.code
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                             Output: country_1.code
                                                                                             Filter: (country_1.governmentform = 'Federal Republic'::text)
                                                                                 ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage
                                                                                       Output: countrylanguage.countrycode
                                                                                       Index Cond: (countrylanguage.countrycode = country_1.code)
                                             ->  Partial Index Scan using country_pkey on qp_with_clause.country country_2
                                                   Output: country_2.code, country_2.name
                                                   Index Cond: (country_2.code = country_1.code)
                                 ->  Hash
                                       Output: country_4.code
                                       ->  Hash Join
                                             Output: country_4.code
                                             Hash Cond: (country_3.code = country_4.code)
                                             ->  PX Hash 6:6  (slice8; segments: 6)
                                                   Output: country_3.code
                                                   Hash Key: country_3.code
                                                   ->  Nested Loop
                                                         Output: country_3.code
                                                         Join Filter: true
                                                         ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                               Output: country_3.code
                                                               ->  Nested Loop
                                                                     Output: country_3.code
                                                                     Join Filter: true
                                                                     ->  PX Broadcast 6:6  (slice10; segments: 6)
                                                                           Output: country_3.code, country_3.capital
                                                                           ->  Partial Seq Scan on qp_with_clause.country country_3
                                                                                 Output: country_3.code, country_3.capital
                                                                                 Filter: (country_3.continent = 'Europe'::text)
                                                                     ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                                           Index Cond: (city_1.id = country_3.capital)
                                                         ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                                               Index Cond: (countrylanguage_1.countrycode = country_3.code)
                                             ->  Hash
                                                   Output: country_4.code
                                                   ->  Hash Join
                                                         Output: country_4.code
                                                         Hash Cond: (countrylanguage_2.countrycode = country_4.code)
                                                         ->  Result
                                                               Output: countrylanguage_2.countrycode
                                                               Filter: ((count()) > 6)
                                                               ->  HashAggregate
                                                                     Output: count(), count(), countrylanguage_2.countrycode
                                                                     Group Key: countrylanguage_2.countrycode
                                                                     ->  PX Hash 6:6  (slice11; segments: 6)
                                                                           Output: countrylanguage_2.countrycode
                                                                           Hash Key: countrylanguage_2.countrycode
                                                                           ->  Partial Seq Scan on qp_with_clause.countrylanguage countrylanguage_2
                                                                                 Output: countrylanguage_2.countrycode
                                                         ->  Hash
                                                               Output: country_4.code
                                                               ->  PX Hash 6:6  (slice12; segments: 6)
                                                                     Output: country_4.code
                                                                     Hash Key: country_4.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_4
                                                                           Output: country_4.code
                                                                           Filter: (country_4.gnp > '100000'::numeric)
 Optimizer: PolarDB PX Optimizer
(116 rows)

-- query 2 multiple CTEs being used multiple times through joins
with longlivingregions as 
(
select FOO.*,count(distinct language) as "lang_count"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       avg(lifeexpectancy) as "REGION_LIFETIME",region
     from
      country
     group by region
    ) FOO,countrylanguage,country
where
   country.code = countrylanguage.countrycode
   and FOO.region = country.region
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP",foo."REGION_LIFETIME"),
denseregions as 
(
select FOO.*,count(distinct language) as "lang_count",
       sum(surfacearea) as "REGION_SURFACE_AREA"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       region
     from
      country
     group by region
    ) FOO,countrylanguage,country
where
   country.code = countrylanguage.countrycode
   and FOO.region = country.region
   and FOO."REGION_POP" != 0
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP"
order by sum(surfacearea)/foo."REGION_POP" desc),
allcountrystats as 
( select country.code,country.name,count(distinct city.id) CITY_CNT,
  count(distinct countrylanguage.language) LANG_CNT
  from country,city,countrylanguage
  where country.code = city.countrycode
  and country.code = countrylanguage.countrycode
  group by country.code,country.name
)
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear between 1800 and 1850
UNION ALL
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear between 1850 and 1900
UNION ALL
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear > 1900
order by name
LIMIT 50;
 city_cnt | lang_cnt |                 name                  | REGION_SURFACE_AREA | REGION_LIFETIME  | REGION_POP | lang_count | REGION_GNP |          region           
----------+----------+---------------------------------------+---------------------+------------------+------------+------------+------------+---------------------------
        4 |        5 | Afghanistan                           |         90749795.00 | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        1 |        3 | Albania                               |          5845195.40 | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
       18 |        2 | Algeria                               |         36993520.00 | 65.3857127598354 |  173266000 |         14 |  243870.00 | Northern Africa
        5 |        9 | Angola                                |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        1 |        2 | Antigua and Barbuda                   |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       57 |        3 | Argentina                             |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        3 |        2 | Armenia                               |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       14 |        8 | Australia                             |         62471162.00 | 78.8000030517578 |   22753100 |         11 |  405851.00 | Australia and New Zealand
        6 |        8 | Austria                               |          6649768.00 | 78.2555567423503 |  183247600 |         21 | 4673272.00 | Western Europe
        4 |        4 | Azerbaijan                            |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
        1 |        2 | Bahamas                               |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        1 |        2 | Bahrain                               |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       24 |        7 | Bangladesh                            |         90749795.00 | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        1 |        2 | Barbados                              |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       16 |        4 | Belarus                               |        214731845.00 | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        9 |        6 | Belgium                               |          6649768.00 | 78.2555567423503 |  183247600 |         21 | 4673272.00 | Western Europe
        2 |        4 | Belize                                |         14052371.00 | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
        4 |        7 | Benin                                 |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        3 | Bhutan                                |         90749795.00 | 61.3500003814697 | 1490776000 |         54 |  810604.00 | Southern and Central Asia
        8 |        4 | Bolivia                               |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        3 |        1 | Bosnia and Herzegovina                |          5845195.40 | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
        2 |        5 | Botswana                              |         23060186.00 | 44.8199996948242 |   46886000 |         21 |  126931.00 | Southern Africa
      250 |        5 | Brazil                                |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        1 |        4 | Brunei                                |         35322186.00 | 64.4000001387163 |  518541000 |         47 |  642643.00 | Southeast Asia
       10 |        4 | Bulgaria                              |        214731845.00 | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        3 |        6 | Burkina Faso                          |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        3 | Burundi                               |         43631319.00 | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        3 |        4 | Cambodia                              |         35322186.00 | 64.4000001387163 |  518541000 |         47 |  642643.00 | Southeast Asia
        7 |        8 | Cameroon                              |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       49 |       12 | Canada                                |        236342035.00 | 75.8199996948242 |  309632000 |         18 | 9111890.00 | North America
        1 |        2 | Cape Verde                            |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        1 |        6 | Central African Republic              |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        2 |        8 | Chad                                  |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       29 |        4 | Chile                                 |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
       38 |        5 | Colombia                              |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
        1 |        5 | Comoros                               |         43631319.00 | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        2 |        6 | Congo                                 |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
       18 |       10 | Congo, The Democratic Republic of the |         55663022.00 | 50.3111110263401 |   95652000 |         47 |   32938.00 | Central Africa
        1 |        4 | Costa Rica                            |         14052371.00 | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
        5 |        5 | Cote deIvoire                         |         39744907.00 | 52.7411768296186 |  221672000 |         65 |  106711.00 | Western Africa
        4 |        2 | Croatia                               |          5845195.40 | 76.5285720825195 |  144674200 |         22 | 2012289.00 | Southern Europe
       14 |        1 | Cuba                                  |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        2 |        2 | Cyprus                                |         10153662.00 | 70.5666671329074 |  188380700 |         21 |  677260.00 | Middle East
       10 |        8 | Czech Republic                        |        214731845.00 | 69.9299995422363 |  307026000 |         28 |  659980.00 | Eastern Europe
        1 |        3 | Djibouti                              |         43631319.00 | 50.8105261953254 |  246999000 |         80 |   69925.00 | Eastern Africa
        1 |        2 | Dominica                              |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
        6 |        2 | Dominican Republic                    |           363261.00 | 73.0583332379659 |   38140000 |         10 |  103586.20 | Caribbean
       15 |        2 | Ecuador                               |         74318167.00 | 70.9461532005897 |  345780000 |         21 | 1511874.00 | South America
       37 |        2 | Egypt                                 |         36993520.00 | 65.3857127598354 |  173266000 |         14 |  243870.00 | Northern Africa
        7 |        2 | El Salvador                           |         14052371.00 | 71.0249996185303 |  135221000 |         23 |  473151.00 | Central America
(50 rows)

       
-- Queries with multiple CTEs referencing one another
-- query1 
with city_official_language as
(select city.id,city.name CITY,country.name COUNTRY,countrylanguage.language,city.population,country.capital 
 from city,countrylanguage,country
 where city.countrycode = country.code
 and country.code = countrylanguage.countrycode
 and countrylanguage.isofficial = 'True'
),
capital_official_language as 
(select c2.CITY, c1.COUNTRY,c1.language OFFICIAL_LANGUAGE,c1.CITY CAPITAL
 from city_official_language c1 , city_official_language c2 
 where c1.id = c2.capital
 and c1.id != c2.id
),
alleuropeanlanguages as 
(select c.COUNTRY,c.CITY,c.CAPITAL,c.OFFICIAL_LANGUAGE
 from capital_official_language c, country
 where c.COUNTRY = country.name 
 and country.continent = 'Europe'
)
select code,COUNTRY,CITY,alleuropeanlanguages.CAPITAL,OFFICIAL_LANGUAGE from alleuropeanlanguages,country
where alleuropeanlanguages.COUNTRY = country.name
and alleuropeanlanguages.city in (select CITY from city_official_language)
and alleuropeanlanguages.OFFICIAL_LANGUAGE IN (select OFFICIAL_LANGUAGE from capital_official_language)
order by code,country,city,official_language
limit 100;
 code |        country         |     city     |       capital       | official_language 
------+------------------------+--------------+---------------------+-------------------
 AUT  | Austria                | Graz         | Wien                | German
 AUT  | Austria                | Innsbruck    | Wien                | German
 AUT  | Austria                | Klagenfurt   | Wien                | German
 AUT  | Austria                | Linz         | Wien                | German
 AUT  | Austria                | Salzburg     | Wien                | German
 BEL  | Belgium                | Antwerpen    | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Antwerpen    | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Antwerpen    | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Antwerpen    | Bruxelles [Brussel] | French
 BEL  | Belgium                | Antwerpen    | Bruxelles [Brussel] | French
 BEL  | Belgium                | Antwerpen    | Bruxelles [Brussel] | French
 BEL  | Belgium                | Antwerpen    | Bruxelles [Brussel] | German
 BEL  | Belgium                | Antwerpen    | Bruxelles [Brussel] | German
 BEL  | Belgium                | Antwerpen    | Bruxelles [Brussel] | German
 BEL  | Belgium                | Brugge       | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Brugge       | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Brugge       | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Brugge       | Bruxelles [Brussel] | French
 BEL  | Belgium                | Brugge       | Bruxelles [Brussel] | French
 BEL  | Belgium                | Brugge       | Bruxelles [Brussel] | French
 BEL  | Belgium                | Brugge       | Bruxelles [Brussel] | German
 BEL  | Belgium                | Brugge       | Bruxelles [Brussel] | German
 BEL  | Belgium                | Brugge       | Bruxelles [Brussel] | German
 BEL  | Belgium                | Charleroi    | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Charleroi    | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Charleroi    | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Charleroi    | Bruxelles [Brussel] | French
 BEL  | Belgium                | Charleroi    | Bruxelles [Brussel] | French
 BEL  | Belgium                | Charleroi    | Bruxelles [Brussel] | French
 BEL  | Belgium                | Charleroi    | Bruxelles [Brussel] | German
 BEL  | Belgium                | Charleroi    | Bruxelles [Brussel] | German
 BEL  | Belgium                | Charleroi    | Bruxelles [Brussel] | German
 BEL  | Belgium                | Gent         | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Gent         | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Gent         | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Gent         | Bruxelles [Brussel] | French
 BEL  | Belgium                | Gent         | Bruxelles [Brussel] | French
 BEL  | Belgium                | Gent         | Bruxelles [Brussel] | French
 BEL  | Belgium                | Gent         | Bruxelles [Brussel] | German
 BEL  | Belgium                | Gent         | Bruxelles [Brussel] | German
 BEL  | Belgium                | Gent         | Bruxelles [Brussel] | German
 BEL  | Belgium                | Liege        | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Liege        | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Liege        | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Liege        | Bruxelles [Brussel] | French
 BEL  | Belgium                | Liege        | Bruxelles [Brussel] | French
 BEL  | Belgium                | Liege        | Bruxelles [Brussel] | French
 BEL  | Belgium                | Liege        | Bruxelles [Brussel] | German
 BEL  | Belgium                | Liege        | Bruxelles [Brussel] | German
 BEL  | Belgium                | Liege        | Bruxelles [Brussel] | German
 BEL  | Belgium                | Mons         | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Mons         | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Mons         | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Mons         | Bruxelles [Brussel] | French
 BEL  | Belgium                | Mons         | Bruxelles [Brussel] | French
 BEL  | Belgium                | Mons         | Bruxelles [Brussel] | French
 BEL  | Belgium                | Mons         | Bruxelles [Brussel] | German
 BEL  | Belgium                | Mons         | Bruxelles [Brussel] | German
 BEL  | Belgium                | Mons         | Bruxelles [Brussel] | German
 BEL  | Belgium                | Namur        | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Namur        | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Namur        | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Namur        | Bruxelles [Brussel] | French
 BEL  | Belgium                | Namur        | Bruxelles [Brussel] | French
 BEL  | Belgium                | Namur        | Bruxelles [Brussel] | French
 BEL  | Belgium                | Namur        | Bruxelles [Brussel] | German
 BEL  | Belgium                | Namur        | Bruxelles [Brussel] | German
 BEL  | Belgium                | Namur        | Bruxelles [Brussel] | German
 BEL  | Belgium                | Schaerbeek   | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Schaerbeek   | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Schaerbeek   | Bruxelles [Brussel] | Dutch
 BEL  | Belgium                | Schaerbeek   | Bruxelles [Brussel] | French
 BEL  | Belgium                | Schaerbeek   | Bruxelles [Brussel] | French
 BEL  | Belgium                | Schaerbeek   | Bruxelles [Brussel] | French
 BEL  | Belgium                | Schaerbeek   | Bruxelles [Brussel] | German
 BEL  | Belgium                | Schaerbeek   | Bruxelles [Brussel] | German
 BEL  | Belgium                | Schaerbeek   | Bruxelles [Brussel] | German
 BGR  | Bulgaria               | Burgas       | Sofija              | Bulgariana
 BGR  | Bulgaria               | Dobric       | Sofija              | Bulgariana
 BGR  | Bulgaria               | Gumen        | Sofija              | Bulgariana
 BGR  | Bulgaria               | Pleven       | Sofija              | Bulgariana
 BGR  | Bulgaria               | Plovdiv      | Sofija              | Bulgariana
 BGR  | Bulgaria               | Ruse         | Sofija              | Bulgariana
 BGR  | Bulgaria               | Sliven       | Sofija              | Bulgariana
 BGR  | Bulgaria               | Stara Zagora | Sofija              | Bulgariana
 BGR  | Bulgaria               | Varna        | Sofija              | Bulgariana
 BIH  | Bosnia and Herzegovina | Banja Luka   | Sarajevo            | Serbo-Croatian
 BIH  | Bosnia and Herzegovina | Zenica       | Sarajevo            | Serbo-Croatian
 BLR  | Belarus                | Baranovitdi  | Minsk               | Belorussian
 BLR  | Belarus                | Baranovitdi  | Minsk               | Belorussian
 BLR  | Belarus                | Baranovitdi  | Minsk               | Russian
 BLR  | Belarus                | Baranovitdi  | Minsk               | Russian
 BLR  | Belarus                | Bobruisk     | Minsk               | Belorussian
 BLR  | Belarus                | Bobruisk     | Minsk               | Belorussian
 BLR  | Belarus                | Bobruisk     | Minsk               | Russian
 BLR  | Belarus                | Bobruisk     | Minsk               | Russian
 BLR  | Belarus                | Borisov      | Minsk               | Belorussian
 BLR  | Belarus                | Borisov      | Minsk               | Belorussian
 BLR  | Belarus                | Borisov      | Minsk               | Russian
 BLR  | Belarus                | Borisov      | Minsk               | Russian
(100 rows)

                                                                                                            QUERY PLAN                                                                                                             
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country_2.code, share1_ref3.name_1, share1_ref3.name, share1_ref3.name_2, share1_ref3.language
   Merge Key: country_2.code, share1_ref3.name_1, share1_ref3.name, share1_ref3.language
   ->  Sort
         Output: country_2.code, share1_ref3.name_1, share1_ref3.name, share1_ref3.name_2, share1_ref3.language
         Sort Key: country_2.code, share1_ref3.name_1, share1_ref3.name, share1_ref3.language
         ->  Sequence
               Output: country_2.code, share1_ref3.name_1, share1_ref3.name, share1_ref3.name_2, share1_ref3.language
               ->  Shared Scan (Producer; slice1; share0)
                     Output: share0_ref1.id, share0_ref1.name, share0_ref1.name_1, share0_ref1.language, share0_ref1.population, share0_ref1.capital
                     ->  Hash Join
                           Output: city.id, city.name, country.name, countrylanguage.language, city.population, country.capital
                           Hash Cond: (city.countrycode = country.code)
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: city.id, city.name, city.countrycode, city.population
                                 Hash Key: city.countrycode
                                 ->  Partial Seq Scan on qp_with_clause.city
                                       Output: city.id, city.name, city.countrycode, city.population
                           ->  Hash
                                 Output: countrylanguage.language, country.code, country.name, country.capital
                                 ->  Hash Join
                                       Output: countrylanguage.language, country.code, country.name, country.capital
                                       Hash Cond: (country.code = countrylanguage.countrycode)
                                       ->  PX Hash 6:6  (slice3; segments: 6)
                                             Output: country.code, country.name, country.capital
                                             Hash Key: country.code
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.code, country.name, country.capital
                                       ->  Hash
                                             Output: countrylanguage.countrycode, countrylanguage.language
                                             ->  PX Hash 6:6  (slice4; segments: 6)
                                                   Output: countrylanguage.countrycode, countrylanguage.language
                                                   Hash Key: countrylanguage.countrycode
                                                   ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                         Output: countrylanguage.countrycode, countrylanguage.language
                                                         Filter: countrylanguage.isofficial
               ->  Sequence
                     Output: country_2.code, share1_ref3.name_1, share1_ref3.name, share1_ref3.name_2, share1_ref3.language
                     ->  Shared Scan (Producer; slice1; share1)
                           Output: share1_ref1.name, share1_ref1.name_1, share1_ref1.language, share1_ref1.name_2
                           ->  Hash Join
                                 Output: share0_ref2.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.name
                                 Hash Cond: (share0_ref3.id = share0_ref2.capital)
                                 Join Filter: (share0_ref3.id <> share0_ref2.id)
                                 ->  PX Hash 6:6  (slice5; segments: 6)
                                       Output: share0_ref3.id, share0_ref3.name, share0_ref3.name_1, share0_ref3.language
                                       Hash Key: share0_ref3.id
                                       ->  Result
                                             Output: share0_ref3.id, share0_ref3.name, share0_ref3.name_1, share0_ref3.language
                                             ->  Shared Scan (Consumer; slice5; share0)
                                                   Output: share0_ref3.id, share0_ref3.name, share0_ref3.name_1, share0_ref3.language, share0_ref3.population, share0_ref3.capital
                                 ->  Hash
                                       Output: share0_ref2.id, share0_ref2.name, share0_ref2.capital
                                       ->  PX Hash 6:6  (slice6; segments: 6)
                                             Output: share0_ref2.id, share0_ref2.name, share0_ref2.capital
                                             Hash Key: share0_ref2.capital
                                             ->  Result
                                                   Output: share0_ref2.id, share0_ref2.name, share0_ref2.capital
                                                   ->  Shared Scan (Consumer; slice6; share0)
                                                         Output: share0_ref2.id, share0_ref2.name, share0_ref2.name_1, share0_ref2.language, share0_ref2.population, share0_ref2.capital
                     ->  PX Hash 1:6  (slice7)
                           Output: country_2.code, share1_ref3.name_1, share1_ref3.name, share1_ref3.name_2, share1_ref3.language
                           ->  Limit
                                 Output: country_2.code, share1_ref3.name_1, share1_ref3.name, share1_ref3.name_2, share1_ref3.language
                                 ->  PX Coordinator 6:1  (slice8; segments: 6)
                                       Output: country_2.code, share1_ref3.name_1, share1_ref3.name, share1_ref3.name_2, share1_ref3.language
                                       Merge Key: country_2.code, share1_ref3.name_1, share1_ref3.name, share1_ref3.language
                                       ->  Limit
                                             Output: country_2.code, share1_ref3.name_1, share1_ref3.name, share1_ref3.name_2, share1_ref3.language
                                             ->  Sort
                                                   Output: country_2.code, share1_ref3.name_1, share1_ref3.name, share1_ref3.name_2, share1_ref3.language
                                                   Sort Key: country_2.code, share1_ref3.name_1, share1_ref3.name, share1_ref3.language
                                                   ->  Hash Join
                                                         Output: country_2.code, share1_ref3.name_1, share1_ref3.name, share1_ref3.name_2, share1_ref3.language
                                                         Hash Cond: (share1_ref3.name_1 = country_2.name)
                                                         ->  Hash Join
                                                               Output: share1_ref3.name_1, share1_ref3.name, share1_ref3.name_2, share1_ref3.language
                                                               Hash Cond: (share1_ref3.name = share0_ref4.name)
                                                               ->  Hash Join
                                                                     Output: share1_ref3.name_1, share1_ref3.name, share1_ref3.name_2, share1_ref3.language
                                                                     Hash Cond: (share1_ref3.language = share1_ref2.language)
                                                                     ->  Hash Join
                                                                           Output: share1_ref3.name_1, share1_ref3.name, share1_ref3.name_2, share1_ref3.language
                                                                           Hash Cond: (share1_ref3.name_1 = country_1.name)
                                                                           ->  Shared Scan (Consumer; slice8; share1)
                                                                                 Output: share1_ref3.name, share1_ref3.name_1, share1_ref3.language, share1_ref3.name_2
                                                                           ->  Hash
                                                                                 Output: country_1.name
                                                                                 ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                                                       Output: country_1.name
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                             Output: country_1.name
                                                                                             Filter: (country_1.continent = 'Europe'::text)
                                                                     ->  Hash
                                                                           Output: share1_ref2.language
                                                                           ->  PX Broadcast 6:6  (slice10; segments: 6)
                                                                                 Output: share1_ref2.language
                                                                                 ->  HashAggregate
                                                                                       Output: share1_ref2.language
                                                                                       Group Key: share1_ref2.language
                                                                                       ->  PX Hash 6:6  (slice11; segments: 6)
                                                                                             Output: share1_ref2.language
                                                                                             Hash Key: share1_ref2.language
                                                                                             ->  HashAggregate
                                                                                                   Output: share1_ref2.language
                                                                                                   Group Key: share1_ref2.language
                                                                                                   ->  Shared Scan (Consumer; slice11; share1)
                                                                                                         Output: share1_ref2.name, share1_ref2.name_1, share1_ref2.language, share1_ref2.name_2
                                                               ->  Hash
                                                                     Output: share0_ref4.name
                                                                     ->  PX Broadcast 6:6  (slice12; segments: 6)
                                                                           Output: share0_ref4.name
                                                                           ->  HashAggregate
                                                                                 Output: share0_ref4.name
                                                                                 Group Key: share0_ref4.name
                                                                                 ->  PX Hash 6:6  (slice13; segments: 6)
                                                                                       Output: share0_ref4.name
                                                                                       Hash Key: share0_ref4.name
                                                                                       ->  HashAggregate
                                                                                             Output: share0_ref4.name
                                                                                             Group Key: share0_ref4.name
                                                                                             ->  Shared Scan (Consumer; slice13; share0)
                                                                                                   Output: share0_ref4.id, share0_ref4.name, share0_ref4.name_1, share0_ref4.language, share0_ref4.population, share0_ref4.capital
                                                         ->  Hash
                                                               Output: country_2.code, country_2.name
                                                               ->  PX Broadcast 6:6  (slice14; segments: 6)
                                                                     Output: country_2.code, country_2.name
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                           Output: country_2.code, country_2.name
 Optimizer: PolarDB PX Optimizer
(130 rows)

--query2
with allcitystats as 
( select city.name CITY,city.id,country.name COUNTRY,city.district,city.population as CITY_POP
  from
  city,country
  where city.countrycode = country.code
),
alldistrictstats as 
( select allcitystats.district,allcitystats.COUNTRY,sum(CITY_POP) DISTRICT_POP,
  count(CITY) as D_CITY_CNT
  from allcitystats
  group by allcitystats.district,allcitystats.COUNTRY
  order by district,COUNTRY
),
allcountrystats as 
( select alldistrictstats.COUNTRY,country.code,sum(D_CITY_CNT) C_CITY_CNT,
  count(distinct countrylanguage.language) C_LANG_CNT
  from alldistrictstats,country,countrylanguage
  where alldistrictstats.COUNTRY = country.name
  and country.code = countrylanguage.countrycode
  group by COUNTRY,code
),
asian_region_stats as 
(
select sum(FOO.C_CITY_CNT) REGION_CITY_CNT,sum(FOO.C_LANG_CNT) REGION_LANG_CNT,FOO.region
FROM
(
select allcountrystats.code,allcountrystats.COUNTRY,C_CITY_CNT,C_LANG_CNT,country.region,city.name CAPITAL
from allcountrystats,country,city
where allcountrystats.code = country.code
and country.capital = city.id
and C_CITY_CNT/C_LANG_CNT > 1
and country.continent = 'Asia') FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region
)
select * from
(
select REGION_CITY_CNT as CITY_CNT,REGION_LANG_CNT as LANG_CNT, region as IDENTIFIER from asian_region_stats
UNION ALL
(
select sum(FOO.C_CITY_CNT) CITY_CNT,sum(FOO.C_LANG_CNT) LANG_CNT,FOO.region as IDENTIFIER
FROM
(
select allcountrystats.code,allcountrystats.COUNTRY,C_CITY_CNT,C_LANG_CNT,country.region,allcitystats.CITY CAPITAL
from allcountrystats,country,allcitystats
where allcountrystats.code = country.code
and country.capital = allcitystats.id
and C_CITY_CNT/C_LANG_CNT > 1
and country.continent = 'Europe') FOO
,allcountrystats,country
WHERE allcountrystats.code = country.code
and FOO.region = country.region
group by FOO.region order by FOO.region
)
) FOO1
order by FOO1.lang_cnt,FOO1.identifier;
 city_cnt | lang_cnt |        identifier         
----------+----------+---------------------------
      494 |       10 | British Islands
      159 |       48 | Baltic Countries
    36060 |      132 | Eastern Asia
     1295 |      161 | Nordic Countries
     9414 |      369 | Western Europe
    11880 |      450 | Southern Europe
    32900 |      610 | Eastern Europe
    29161 |      616 | Southeast Asia
     8568 |      792 | Middle East
    80388 |     1092 | Southern and Central Asia
(10 rows)

                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
   Merge Key: (sum(share2_ref2.c_lang_cnt)), country_3.region
   ->  Sequence
         Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.name, share0_ref1.id, share0_ref1.name_1, share0_ref1.district, share0_ref1.population
               ->  Hash Join
                     Output: city.name, city.id, country.name, city.district, city.population
                     Hash Cond: (city.countrycode = country.code)
                     ->  PX Hash 6:6  (slice2; segments: 6)
                           Output: city.id, city.name, city.countrycode, city.district, city.population
                           Hash Key: city.countrycode
                           ->  Partial Seq Scan on qp_with_clause.city
                                 Output: city.id, city.name, city.countrycode, city.district, city.population
                     ->  Hash
                           Output: country.code, country.name
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name
                                 Hash Key: country.code
                                 ->  Partial Seq Scan on qp_with_clause.country
                                       Output: country.code, country.name
         ->  Sequence
               Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
               ->  Shared Scan (Producer; slice1; share2)
                     Output: share2_ref1.name, share2_ref1.code, share2_ref1.c_city_cnt, share2_ref1.c_lang_cnt
                     ->  GroupAggregate
                           Output: share0_ref2.name_1, country_1.code, sum((count(share0_ref2.name))), count(DISTINCT countrylanguage.language)
                           Group Key: share0_ref2.name_1, country_1.code
                           ->  Sort
                                 Output: share0_ref2.name_1, (count(share0_ref2.name)), country_1.code, countrylanguage.language
                                 Sort Key: share0_ref2.name_1, country_1.code
                                 ->  Hash Join
                                       Output: share0_ref2.name_1, (count(share0_ref2.name)), country_1.code, countrylanguage.language
                                       Hash Cond: (share0_ref2.name_1 = country_1.name)
                                       ->  Sort
                                             Output: share0_ref2.district, share0_ref2.name_1, (count(share0_ref2.name))
                                             Sort Key: share0_ref2.district, share0_ref2.name_1
                                             ->  PX Hash 6:6  (slice4; segments: 6)
                                                   Output: share0_ref2.district, share0_ref2.name_1, (count(share0_ref2.name))
                                                   Hash Key: share0_ref2.name_1
                                                   ->  HashAggregate
                                                         Output: share0_ref2.district, share0_ref2.name_1, count(share0_ref2.name)
                                                         Group Key: share0_ref2.district, share0_ref2.name_1
                                                         ->  PX Hash 6:6  (slice5; segments: 6)
                                                               Output: share0_ref2.district, share0_ref2.name_1, share0_ref2.name, share0_ref2.population
                                                               Hash Key: share0_ref2.district, share0_ref2.name_1
                                                               ->  Result
                                                                     Output: share0_ref2.district, share0_ref2.name_1, share0_ref2.name, share0_ref2.population
                                                                     ->  Shared Scan (Consumer; slice5; share0)
                                                                           Output: share0_ref2.name, share0_ref2.id, share0_ref2.name_1, share0_ref2.district, share0_ref2.population
                                       ->  Hash
                                             Output: country_1.code, country_1.name, countrylanguage.language
                                             ->  PX Hash 6:6  (slice6; segments: 6)
                                                   Output: country_1.code, country_1.name, countrylanguage.language
                                                   Hash Key: country_1.name
                                                   ->  Hash Join
                                                         Output: country_1.code, country_1.name, countrylanguage.language
                                                         Hash Cond: (countrylanguage.countrycode = country_1.code)
                                                         ->  PX Hash 6:6  (slice7; segments: 6)
                                                               Output: countrylanguage.countrycode, countrylanguage.language
                                                               Hash Key: countrylanguage.countrycode
                                                               ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                                                     Output: countrylanguage.countrycode, countrylanguage.language
                                                         ->  Hash
                                                               Output: country_1.code, country_1.name
                                                               ->  PX Hash 6:6  (slice8; segments: 6)
                                                                     Output: country_1.code, country_1.name
                                                                     Hash Key: country_1.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                           Output: country_1.code, country_1.name
               ->  Sort
                     Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
                     Sort Key: (sum(share2_ref2.c_lang_cnt)), country_3.region
                     ->  Append
                           ->  Sort
                                 Output: (sum(share2_ref2.c_city_cnt)), (sum(share2_ref2.c_lang_cnt)), country_3.region
                                 Sort Key: country_3.region
                                 ->  HashAggregate
                                       Output: sum(share2_ref2.c_city_cnt), sum(share2_ref2.c_lang_cnt), country_3.region
                                       Group Key: country_3.region
                                       ->  Hash Join
                                             Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                             Hash Cond: (country_2.region = country_3.region)
                                             ->  PX Hash 6:6  (slice9; segments: 6)
                                                   Output: country_2.region
                                                   Hash Key: country_2.region
                                                   ->  Hash Join
                                                         Output: country_2.region
                                                         Hash Cond: (share2_ref3.code = country_2.code)
                                                         ->  PX Hash 6:6  (slice10; segments: 6)
                                                               Output: share2_ref3.code
                                                               Hash Key: share2_ref3.code
                                                               ->  Result
                                                                     Output: share2_ref3.code
                                                                     ->  Shared Scan (Consumer; slice10; share2)
                                                                           Output: share2_ref3.name, share2_ref3.code, share2_ref3.c_city_cnt, share2_ref3.c_lang_cnt
                                                         ->  Hash
                                                               Output: country_2.code, country_2.region
                                                               ->  PX Hash 6:6  (slice11; segments: 6)
                                                                     Output: country_2.code, country_2.region
                                                                     Hash Key: country_2.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                           Output: country_2.code, country_2.region
                                             ->  Hash
                                                   Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                   ->  PX Hash 6:6  (slice12; segments: 6)
                                                         Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                         Hash Key: country_3.region
                                                         ->  Hash Join
                                                               Output: country_3.region, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                               Hash Cond: (share2_ref2.code = country_3.code)
                                                               ->  PX Hash 6:6  (slice13; segments: 6)
                                                                     Output: share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                                     Hash Key: share2_ref2.code
                                                                     ->  Result
                                                                           Output: share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                                           Filter: ((share2_ref2.c_city_cnt / (share2_ref2.c_lang_cnt)::numeric) > '1'::numeric)
                                                                           ->  Shared Scan (Consumer; slice13; share2)
                                                                                 Output: share2_ref2.name, share2_ref2.code, share2_ref2.c_city_cnt, share2_ref2.c_lang_cnt
                                                               ->  Hash
                                                                     Output: country_3.region, country_3.code
                                                                     ->  PX Hash 6:6  (slice14; segments: 6)
                                                                           Output: country_3.region, country_3.code
                                                                           Hash Key: country_3.code
                                                                           ->  Nested Loop
                                                                                 Output: country_3.region, country_3.code
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice15; segments: 6)
                                                                                       Output: country_3.region, country_3.code, country_3.capital
                                                                                       ->  Partial Seq Scan on qp_with_clause.country country_3
                                                                                             Output: country_3.region, country_3.code, country_3.capital
                                                                                             Filter: (country_3.continent = 'Asia'::text)
                                                                                 ->  Partial Index Scan using city_pkey on qp_with_clause.city city_1
                                                                                       Index Cond: (city_1.id = country_3.capital)
                           ->  Sort
                                 Output: (sum(share2_ref4.c_city_cnt)), (sum(share2_ref4.c_lang_cnt)), country_5.region
                                 Sort Key: country_5.region
                                 ->  HashAggregate
                                       Output: sum(share2_ref4.c_city_cnt), sum(share2_ref4.c_lang_cnt), country_5.region
                                       Group Key: country_5.region
                                       ->  Hash Join
                                             Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                             Hash Cond: (country_4.region = country_5.region)
                                             ->  PX Hash 6:6  (slice16; segments: 6)
                                                   Output: country_4.region
                                                   Hash Key: country_4.region
                                                   ->  Hash Join
                                                         Output: country_4.region
                                                         Hash Cond: (share2_ref5.code = country_4.code)
                                                         ->  PX Hash 6:6  (slice17; segments: 6)
                                                               Output: share2_ref5.code
                                                               Hash Key: share2_ref5.code
                                                               ->  Result
                                                                     Output: share2_ref5.code
                                                                     ->  Shared Scan (Consumer; slice17; share2)
                                                                           Output: share2_ref5.name, share2_ref5.code, share2_ref5.c_city_cnt, share2_ref5.c_lang_cnt
                                                         ->  Hash
                                                               Output: country_4.code, country_4.region
                                                               ->  PX Hash 6:6  (slice18; segments: 6)
                                                                     Output: country_4.code, country_4.region
                                                                     Hash Key: country_4.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_4
                                                                           Output: country_4.code, country_4.region
                                             ->  Hash
                                                   Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                   ->  PX Hash 6:6  (slice19; segments: 6)
                                                         Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                         Hash Key: country_5.region
                                                         ->  Hash Join
                                                               Output: share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt, country_5.region
                                                               Hash Cond: (share2_ref4.code = country_5.code)
                                                               ->  Result
                                                                     Output: share2_ref4.code, share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt
                                                                     Filter: ((share2_ref4.c_city_cnt / (share2_ref4.c_lang_cnt)::numeric) > '1'::numeric)
                                                                     ->  Shared Scan (Consumer; slice19; share2)
                                                                           Output: share2_ref4.name, share2_ref4.code, share2_ref4.c_city_cnt, share2_ref4.c_lang_cnt
                                                               ->  Hash
                                                                     Output: country_5.code, country_5.region
                                                                     ->  PX Broadcast 6:6  (slice20; segments: 6)
                                                                           Output: country_5.code, country_5.region
                                                                           ->  Hash Join
                                                                                 Output: country_5.code, country_5.region
                                                                                 Hash Cond: (share0_ref3.id = country_5.capital)
                                                                                 ->  PX Hash 6:6  (slice21; segments: 6)
                                                                                       Output: share0_ref3.id
                                                                                       Hash Key: share0_ref3.id
                                                                                       ->  Result
                                                                                             Output: share0_ref3.id
                                                                                             ->  Shared Scan (Consumer; slice21; share0)
                                                                                                   Output: share0_ref3.name, share0_ref3.id, share0_ref3.name_1, share0_ref3.district, share0_ref3.population
                                                                                 ->  Hash
                                                                                       Output: country_5.code, country_5.region, country_5.capital
                                                                                       ->  PX Hash 6:6  (slice22; segments: 6)
                                                                                             Output: country_5.code, country_5.region, country_5.capital
                                                                                             Hash Key: country_5.capital
                                                                                             ->  Partial Seq Scan on qp_with_clause.country country_5
                                                                                                   Output: country_5.code, country_5.region, country_5.capital
                                                                                                   Filter: (country_5.continent = 'Europe'::text)
 Optimizer: PolarDB PX Optimizer
(200 rows)

-- queries using column lists for CTEs
/* -- query 1 use column list despite having no duplicate names
with capitals("C","ID","CAP") as 
(select country.code,id,city.name from city,country 
 where city.countrycode = country.code AND city.id = country.capital),

lang_total(LC,CC,CLC) as
( select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code) 

select country.name,"C","ID","CAP",lang_total.lc
from capitals,lang_total,country
where capitals."C" = country.code
and country.code = lang_total.cc;
*/
-- query 2 Check case sensitivity for quoted names in column list. This should error out
with "lang_total"("LC",CC,CLC) as
( select count(*) as lang_count,country.code,countrylanguage.countrycode
  from country join countrylanguage on (country.code=countrylanguage.countrycode and governmentform='Federal Republic')
  group by country.code,countrylanguage.countrycode order by country.code) 
select LC from lang_total;
ERROR:  column "lc" does not exist
LINE 21: select LC from lang_total;
                ^
HINT:  Perhaps you meant to reference the column "lang_total.cc" or the column "lang_total.clc".
-- query 3 use column list when there are duplicate names within the CTE
with capitals("CO_C","C_ID","CAPITAL",country) as 
(select country.code,id,city.name,country.name from city,country 
 where city.countrycode = country.code AND city.id = country.capital)
select "CO_C","C_ID","CAPITAL",COUNTRY from capitals where "CO_C"='SMR';
 CO_C | C_ID |  CAPITAL   |  country   
------+------+------------+------------
 SMR  | 3171 | San Marino | San Marino
(1 row)

                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, city.id, city.name, country.name
   ->  Nested Loop
         Output: country.code, city.id, city.name, country.name
         Join Filter: true
         ->  PX Broadcast 6:6  (slice2; segments: 6)
               Output: country.code, country.name, country.capital
               ->  Partial Index Scan using country_pkey on qp_with_clause.country
                     Output: country.code, country.name, country.capital
                     Index Cond: (country.code = 'SMR'::bpchar)
         ->  Partial Index Scan using city_pkey on qp_with_clause.city
               Output: city.id, city.name, city.countrycode
               Index Cond: (city.id = country.capital)
               Filter: (city.countrycode = country.code)
 Optimizer: PolarDB PX Optimizer
(15 rows)

-- query4 use column list within another CTE
with capitals("CO_C","C_ID","CAPITAL",country) as 
(select country.code,id,city.name,country.name from city,country 
 where city.countrycode = country.code AND city.id = country.capital),
south_asian_capitals(A_CO_C,"C_ID",A_C_NAME,A_CO_NAME) as 
(select "CO_C","C_ID","CAPITAL",country from capitals,country where capitals."CO_C"=country.code and country.region = 'Southern and Central Asia')
select "a_co_c","C_ID",A_c_NaMe,"a_co_name" from south_asian_capitals order by A_CO_C;-- queries using CTEs in initplans and main plan 
 a_co_c | C_ID | a_c_name  |  a_co_name   
--------+------+-----------+--------------
 AFG    |    1 | Kabul     | Afghanistan
 BGD    |  150 | Dhaka     | Bangladesh
 BTN    |  192 | Thimphu   | Bhutan
 IND    | 1109 | New Delhi | India
 IRN    | 1380 | Teheran   | Iran
 KAZ    | 1864 | Astana    | Kazakstan
 KGZ    | 2253 | Bishkek   | Kyrgyzstan
 LKA    | 3217 | Colombo   | Sri Lanka
 MDV    | 2463 | Male      | Maldives
 NPL    | 2729 | Kathmandu | Nepal
 PAK    | 2831 | Islamabad | Pakistan
 TJK    | 3261 | Dushanbe  | Tajikistan
 TKM    | 3419 | Ashgabat  | Turkmenistan
 UZB    | 3503 | Toskent   | Uzbekistan
(14 rows)

                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: country.code, city.id, city.name, country.name
   Merge Key: country.code
   ->  Sort
         Output: country.code, city.id, city.name, country.name
         Sort Key: country.code
         ->  Sort
               Output: country.code, city.id, city.name, country.name
               Sort Key: country.code
               ->  Hash Join
                     Output: country.code, city.id, city.name, country.name
                     Hash Cond: (country.code = country_1.code)
                     ->  Hash Join
                           Output: country.code, city.id, city.name, country.name
                           Hash Cond: ((city.countrycode = country.code) AND (city.id = country.capital))
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: city.id, city.name, city.countrycode
                                 Hash Key: city.countrycode
                                 ->  Partial Seq Scan on qp_with_clause.city
                                       Output: city.id, city.name, city.countrycode
                           ->  Hash
                                 Output: country.code, country.name, country.capital
                                 ->  PX Hash 6:6  (slice3; segments: 6)
                                       Output: country.code, country.name, country.capital
                                       Hash Key: country.code
                                       ->  Partial Seq Scan on qp_with_clause.country
                                             Output: country.code, country.name, country.capital
                     ->  Hash
                           Output: country_1.code
                           ->  PX Hash 6:6  (slice4; segments: 6)
                                 Output: country_1.code
                                 Hash Key: country_1.code
                                 ->  Partial Seq Scan on qp_with_clause.country country_1
                                       Output: country_1.code
                                       Filter: (country_1.region = 'Southern and Central Asia'::text)
 Optimizer: PolarDB PX Optimizer
(36 rows)

--query1 using CTE in the select list(initplan) . One CTE using another CTE in it's initplan
with gnpstats as 
(
select REG_GNP/REG_OLD_GNP as GNP_INDEX,region from
(select sum(gnpold) as REG_OLD_GNP,
 sum(gnp) as REG_GNP,region
 from country
 group by region) FOO
where (case when (REG_GNP/REG_OLD_GNP) > 0 then 1.2 * (REG_GNP/REG_OLD_GNP) else null end) between 0.5 and 1.5
order by region
),
gnp_index_compare as 
(
select (select max(GNP_INDEX) from gnpstats) M_GNP_IDX,(gnp/gnpold) as GNP_IDX,country.name from
country where  country.continent = 'Asia'
)
select (select min(GNP_IDX) from gnp_index_compare) MIN_COUNTRY_GNP_IDX, (select max(GNP_INDEX) from gnpstats) MAX_REG_GNP_IDX,city.name CAPITAL,country.name COUNTRY
 from city,country where city.id = country.capital and country.continent='Europe';
  min_country_gnp_idx   |  max_reg_gnp_idx   |              capital              |            country            
------------------------+--------------------+-----------------------------------+-------------------------------
 0.39526143942847043283 | 1.2055929013175585 | Amsterdam                         | Netherlands
 0.39526143942847043283 | 1.2055929013175585 | Tirana                            | Albania
 0.39526143942847043283 | 1.2055929013175585 | Andorra la Vella                  | Andorra
 0.39526143942847043283 | 1.2055929013175585 | Bruxelles [Brussel]               | Belgium
 0.39526143942847043283 | 1.2055929013175585 | Sarajevo                          | Bosnia and Herzegovina
 0.39526143942847043283 | 1.2055929013175585 | London                            | United Kingdom
 0.39526143942847043283 | 1.2055929013175585 | Sofija                            | Bulgaria
 0.39526143942847043283 | 1.2055929013175585 | Madrid                            | Spain
 0.39526143942847043283 | 1.2055929013175585 | Torshavn                          | Faroe Islands
 0.39526143942847043283 | 1.2055929013175585 | Gibraltar                         | Gibraltar
 0.39526143942847043283 | 1.2055929013175585 | Longyearbyen                      | Svalbard and Jan Mayen
 0.39526143942847043283 | 1.2055929013175585 | Dublin                            | Ireland
 0.39526143942847043283 | 1.2055929013175585 | Reykjavik                         | Iceland
 0.39526143942847043283 | 1.2055929013175585 | Roma                              | Italy
 0.39526143942847043283 | 1.2055929013175585 | Wien                              | Austria
 0.39526143942847043283 | 1.2055929013175585 | Beograd                           | Yugoslavia
 0.39526143942847043283 | 1.2055929013175585 | Athenai                           | Greece
 0.39526143942847043283 | 1.2055929013175585 | Zagreb                            | Croatia
 0.39526143942847043283 | 1.2055929013175585 | Riga                              | Latvia
 0.39526143942847043283 | 1.2055929013175585 | Vaduz                             | Liechtenstein
 0.39526143942847043283 | 1.2055929013175585 | Vilnius                           | Lithuania
 0.39526143942847043283 | 1.2055929013175585 | Luxembourg [Luxemburg/Letzebuerg] | Luxembourg
 0.39526143942847043283 | 1.2055929013175585 | Skopje                            | Macedonia
 0.39526143942847043283 | 1.2055929013175585 | Valletta                          | Malta
 0.39526143942847043283 | 1.2055929013175585 | Chisinau                          | Moldova
 0.39526143942847043283 | 1.2055929013175585 | Monaco-Ville                      | Monaco
 0.39526143942847043283 | 1.2055929013175585 | Oslo                              | Norway
 0.39526143942847043283 | 1.2055929013175585 | Lisboa                            | Portugal
 0.39526143942847043283 | 1.2055929013175585 | Warszawa                          | Poland
 0.39526143942847043283 | 1.2055929013175585 | Paris                             | France
 0.39526143942847043283 | 1.2055929013175585 | Bucuresti                         | Romania
 0.39526143942847043283 | 1.2055929013175585 | Stockholm                         | Sweden
 0.39526143942847043283 | 1.2055929013175585 | Berlin                            | Germany
 0.39526143942847043283 | 1.2055929013175585 | San Marino                        | San Marino
 0.39526143942847043283 | 1.2055929013175585 | Bratislava                        | Slovakia
 0.39526143942847043283 | 1.2055929013175585 | Ljubljana                         | Slovenia
 0.39526143942847043283 | 1.2055929013175585 | Helsinki [Helsingfors]            | Finland
 0.39526143942847043283 | 1.2055929013175585 | Bern                              | Switzerland
 0.39526143942847043283 | 1.2055929013175585 | Kobenhavn                         | Denmark
 0.39526143942847043283 | 1.2055929013175585 | Praha                             | Czech Republic
 0.39526143942847043283 | 1.2055929013175585 | Kyiv                              | Ukraine
 0.39526143942847043283 | 1.2055929013175585 | Budapest                          | Hungary
 0.39526143942847043283 | 1.2055929013175585 | Minsk                             | Belarus
 0.39526143942847043283 | 1.2055929013175585 | Citta del Vaticano                | Holy See (Vatican City State)
 0.39526143942847043283 | 1.2055929013175585 | Moscow                            | Russian Federation
 0.39526143942847043283 | 1.2055929013175585 | Tallinn                           | Estonia
(46 rows)

                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (min(((country_1.gnp / country_1.gnpold)))), (max(share0_ref2.gnp_index)), city.name, country_2.name
   ->  Sequence
         Output: (min(((country_1.gnp / country_1.gnpold)))), (max(share0_ref2.gnp_index)), city.name, country_2.name
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.gnp_index, share0_ref1.region
               ->  Sort
                     Output: (((sum(country.gnp)) / (sum(country.gnpold)))), country.region
                     Sort Key: country.region
                     ->  Result
                           Output: ((sum(country.gnp)) / (sum(country.gnpold))), country.region
                           Filter: ((CASE WHEN (((sum(country.gnp)) / (sum(country.gnpold))) > '0'::numeric) THEN (1.2 * ((sum(country.gnp)) / (sum(country.gnpold)))) ELSE NULL::numeric END >= 0.5) AND (CASE WHEN (((sum(country.gnp)) / (sum(country.gnpold))) > '0'::numeric) THEN (1.2 * ((sum(country.gnp)) / (sum(country.gnpold)))) ELSE NULL::numeric END <= 1.5))
                           ->  Finalize HashAggregate
                                 Output: sum(country.gnpold), sum(country.gnp), country.region
                                 Group Key: country.region
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: country.region, (PARTIAL sum(country.gnpold)), (PARTIAL sum(country.gnp))
                                       Hash Key: country.region
                                       ->  Partial HashAggregate
                                             Output: country.region, PARTIAL sum(country.gnpold), PARTIAL sum(country.gnp)
                                             Group Key: country.region
                                             ->  Partial Seq Scan on qp_with_clause.country
                                                   Output: country.region, country.gnp, country.gnpold
         ->  Nested Loop Left Join
               Output: (min(((country_1.gnp / country_1.gnpold)))), (max(share0_ref2.gnp_index)), city.name, country_2.name
               Join Filter: true
               ->  Nested Loop Left Join
                     Output: city.name, country_2.name, (min(((country_1.gnp / country_1.gnpold))))
                     Join Filter: true
                     ->  Nested Loop
                           Output: city.name, country_2.name
                           Join Filter: true
                           ->  PX Broadcast 6:6  (slice9; segments: 6)
                                 Output: country_2.name, country_2.capital
                                 ->  Partial Seq Scan on qp_with_clause.country country_2
                                       Output: country_2.name, country_2.capital
                                       Filter: (country_2.continent = 'Europe'::text)
                           ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                 Output: city.name
                                 Index Cond: (city.id = country_2.capital)
                     ->  Materialize
                           Output: (min(((country_1.gnp / country_1.gnpold))))
                           ->  PX Broadcast 1:6  (slice5)
                                 Output: (min(((country_1.gnp / country_1.gnpold))))
                                 ->  Finalize Aggregate
                                       Output: min(((country_1.gnp / country_1.gnpold)))
                                       ->  PX Coordinator 6:1  (slice6; segments: 6)
                                             Output: (PARTIAL min(((country_1.gnp / country_1.gnpold))))
                                             ->  Partial Aggregate
                                                   Output: PARTIAL min(((country_1.gnp / country_1.gnpold)))
                                                   ->  Nested Loop Left Join
                                                         Output: (max(share0_ref3.gnp_index)), (country_1.gnp / country_1.gnpold)
                                                         Join Filter: true
                                                         ->  Partial Seq Scan on qp_with_clause.country country_1
                                                               Output: country_1.gnp, country_1.gnpold
                                                               Filter: (country_1.continent = 'Asia'::text)
                                                         ->  Materialize
                                                               Output: (max(share0_ref3.gnp_index))
                                                               ->  PX Broadcast 1:6  (slice7)
                                                                     Output: (max(share0_ref3.gnp_index))
                                                                     ->  Finalize Aggregate
                                                                           Output: max(share0_ref3.gnp_index)
                                                                           ->  PX Coordinator 6:1  (slice8; segments: 6)
                                                                                 Output: (PARTIAL max(share0_ref3.gnp_index))
                                                                                 ->  Partial Aggregate
                                                                                       Output: PARTIAL max(share0_ref3.gnp_index)
                                                                                       ->  Shared Scan (Consumer; slice8; share0)
                                                                                             Output: share0_ref3.gnp_index, share0_ref3.region
               ->  Materialize
                     Output: (max(share0_ref2.gnp_index))
                     ->  PX Broadcast 1:6  (slice3)
                           Output: (max(share0_ref2.gnp_index))
                           ->  Finalize Aggregate
                                 Output: max(share0_ref2.gnp_index)
                                 ->  PX Coordinator 6:1  (slice4; segments: 6)
                                       Output: (PARTIAL max(share0_ref2.gnp_index))
                                       ->  Partial Aggregate
                                             Output: PARTIAL max(share0_ref2.gnp_index)
                                             ->  Shared Scan (Consumer; slice4; share0)
                                                   Output: share0_ref2.gnp_index, share0_ref2.region
 Optimizer: PolarDB PX Optimizer
(81 rows)

--query2 using the CTE in the where clause(initplan) of the main query. One CTE using another CTE in it's where clause as it's initplan
with diversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country, 
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) > 6) d
 where d.countrycode = country.code and country.gnp > 100000),
notdiversecountries as
(select country.code,country.name,country.capital,d.CNT
 from country,
 (select countrylanguage.countrycode,count(*) as CNT from countrylanguage group by countrycode
  HAVING count(*) < 3) d
 where d.countrycode = country.code and country.gnp > 100000
 and d.CNT < (select max(CNT) from diversecountries))
select LANG_CNT,name from
(
select count(*) LANG_CNT,country.name,country.code from country,countrylanguage
where country.code = countrylanguage.countrycode and country.continent = 'North America'
group by country.name,country.code
) FOO
where FOO.LANG_CNT between (select min(CNT) from notdiversecountries) AND (select max(CNT) from diversecountries);
 lang_cnt |               name               
----------+----------------------------------
        2 | Jamaica
        2 | Barbados
        2 | El Salvador
        2 | Greenland
        5 | Guatemala
        1 | Bermuda
       12 | United States
        3 | Trinidad and Tobago
        1 | Montserrat
        3 | Virgin Islands, U.S.
        2 | Haiti
        1 | Cuba
        4 | Nicaragua
       12 | Canada
        2 | Saint Vincent and the Grenadines
        2 | Dominican Republic
        2 | Bahamas
        2 | Antigua and Barbuda
        4 | Aruba
        4 | Costa Rica
        1 | Grenada
        2 | Saint Kitts and Nevis
        2 | Puerto Rico
        6 | Panama
        2 | Martinique
        1 | Anguilla
        1 | Virgin Islands, British
        1 | Cayman Islands
        4 | Honduras
        2 | Saint Lucia
        1 | Saint Pierre and Miquelon
        4 | Belize
        1 | Turks and Caicos Islands
        2 | Dominica
        6 | Mexico
        2 | Guadeloupe
        3 | Netherlands Antilles
(37 rows)

                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (count()), country_1.name
   ->  Sequence
         Output: (count()), country_1.name
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.code, share0_ref1.name, share0_ref1.capital, share0_ref1.cnt
               ->  Hash Join
                     Output: country.code, country.name, country.capital, (count())
                     Hash Cond: (countrylanguage.countrycode = country.code)
                     ->  Result
                           Output: countrylanguage.countrycode, (count())
                           Filter: ((count()) > 6)
                           ->  HashAggregate
                                 Output: count(), count(), countrylanguage.countrycode
                                 Group Key: countrylanguage.countrycode
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: countrylanguage.countrycode
                                       Hash Key: countrylanguage.countrycode
                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage
                                             Output: countrylanguage.countrycode
                     ->  Hash
                           Output: country.code, country.name, country.capital
                           ->  PX Hash 6:6  (slice3; segments: 6)
                                 Output: country.code, country.name, country.capital
                                 Hash Key: country.code
                                 ->  Partial Seq Scan on qp_with_clause.country
                                       Output: country.code, country.name, country.capital
                                       Filter: (country.gnp > '100000'::numeric)
         ->  Nested Loop
               Output: (count()), country_1.name
               Join Filter: ((count()) <= (max(share0_ref3.cnt)))
               ->  PX Broadcast 1:6  (slice12)
                     Output: (max(share0_ref3.cnt))
                     ->  Finalize Aggregate
                           Output: max(share0_ref3.cnt)
                           ->  PX Coordinator 6:1  (slice13; segments: 6)
                                 Output: (PARTIAL max(share0_ref3.cnt))
                                 ->  Partial Aggregate
                                       Output: PARTIAL max(share0_ref3.cnt)
                                       ->  Shared Scan (Consumer; slice13; share0)
                                             Output: share0_ref3.code, share0_ref3.name, share0_ref3.capital, share0_ref3.cnt
               ->  Materialize
                     Output: country_1.name, (count())
                     ->  Nested Loop
                           Output: country_1.name, (count())
                           Join Filter: ((count()) >= (min((count()))))
                           ->  PX Broadcast 1:6  (slice6)
                                 Output: (min((count())))
                                 ->  Finalize Aggregate
                                       Output: min((count()))
                                       ->  PX Coordinator 6:1  (slice7; segments: 6)
                                             Output: (PARTIAL min((count())))
                                             ->  Partial Aggregate
                                                   Output: PARTIAL min((count()))
                                                   ->  Hash Join
                                                         Output: (count())
                                                         Hash Cond: (countrylanguage_2.countrycode = country_2.code)
                                                         ->  Nested Loop
                                                               Output: (count()), countrylanguage_2.countrycode
                                                               Join Filter: ((count()) < (max(share0_ref2.cnt)))
                                                               ->  PX Broadcast 1:6  (slice9)
                                                                     Output: (max(share0_ref2.cnt))
                                                                     ->  Finalize Aggregate
                                                                           Output: max(share0_ref2.cnt)
                                                                           ->  PX Coordinator 6:1  (slice10; segments: 6)
                                                                                 Output: (PARTIAL max(share0_ref2.cnt))
                                                                                 ->  Partial Aggregate
                                                                                       Output: PARTIAL max(share0_ref2.cnt)
                                                                                       ->  Shared Scan (Consumer; slice10; share0)
                                                                                             Output: share0_ref2.code, share0_ref2.name, share0_ref2.capital, share0_ref2.cnt
                                                               ->  Materialize
                                                                     Output: (count()), countrylanguage_2.countrycode
                                                                     ->  Result
                                                                           Output: (count()), countrylanguage_2.countrycode
                                                                           Filter: ((count()) < 3)
                                                                           ->  HashAggregate
                                                                                 Output: count(), count(), countrylanguage_2.countrycode
                                                                                 Group Key: countrylanguage_2.countrycode
                                                                                 ->  PX Hash 6:6  (slice8; segments: 6)
                                                                                       Output: countrylanguage_2.countrycode
                                                                                       Hash Key: countrylanguage_2.countrycode
                                                                                       ->  Partial Seq Scan on qp_with_clause.countrylanguage countrylanguage_2
                                                                                             Output: countrylanguage_2.countrycode
                                                         ->  Hash
                                                               Output: country_2.code
                                                               ->  PX Hash 6:6  (slice11; segments: 6)
                                                                     Output: country_2.code
                                                                     Hash Key: country_2.code
                                                                     ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                           Output: country_2.code
                                                                           Filter: (country_2.gnp > '100000'::numeric)
                           ->  Materialize
                                 Output: (count()), country_1.name, country_1.code
                                 ->  HashAggregate
                                       Output: count(), country_1.name, country_1.code
                                       Group Key: country_1.name, country_1.code
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: country_1.code, country_1.name
                                             Hash Key: country_1.name, country_1.code
                                             ->  Nested Loop
                                                   Output: country_1.code, country_1.name
                                                   Join Filter: true
                                                   ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                         Output: country_1.code, country_1.name
                                                         ->  Partial Seq Scan on qp_with_clause.country country_1
                                                               Output: country_1.code, country_1.name
                                                               Filter: (country_1.continent = 'North America'::text)
                                                   ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage countrylanguage_1
                                                         Index Cond: (countrylanguage_1.countrycode = country_1.code)
 Optimizer: PolarDB PX Optimizer
(110 rows)

--query3 using CTE more than once in the same initplan and also more than once in the main query
with alleuropeanlanguages as 
(select country.code,country.name COUNTRY, city.name CAPITAL, language, isofficial, percentage
 FROM country,city,countrylanguage
 WHERE country.code = countrylanguage.countrycode
 and country.capital = city.id
 and country.continent = 'Europe'),
all_official_languages as
(
 select country.code,country.name,alleuropeanlanguages.language,alleuropeanlanguages.percentage
 from
 country,alleuropeanlanguages
 where country.code = alleuropeanlanguages.code and isofficial = 'True'
 and country.governmentform NOT  IN (select 'Commonwealth of the US' UNION ALL select 'Monarchy (Sultanate)' UNION ALL select 'Monarchy')
 and country.gnp > (select min(gnpold) from country where country.region = 'Western Europe')
)
SELECT avg(percentage),language
FROM
(
select country.name,city.name,percentage,language
from country,city,all_official_languages
where country.code = all_official_languages.code and country.capital = city.id and country.continent = 'Europe'
UNION ALL
select country.name,city.name,percentage,language
from country,city,all_official_languages
where country.code = all_official_languages.code and country.capital = city.id and country.continent = 'Asia'
) FOO 
group by FOO.language
HAVING avg(percentage) >=
(select avg(percentage) from 
( select percentage from all_official_languages,country where country.code = all_official_languages.code and country.region = 'British Islands'
  UNION
  select percentage from all_official_languages,country where country.code = all_official_languages.code and country.region = 'Western Europe'
) FOO )
order by FOO.language;  
       avg        |    language    
------------------+----------------
 97.9000015258789 | Albaniana
 65.5999984741211 | Belorussian
 83.1999969482422 | Bulgariana
 81.1999969482422 | Czech
             93.5 | Danish
 77.3999996185303 | Dutch
 65.9333348274231 | English
 65.3000030517578 | Estonian
 92.6999969482422 | Finnish
 56.5333335796992 | German
             98.5 | Greek
             98.5 | Hungarian
 95.6999969482422 | Icelandic
 50.8999991416931 | Italian
 55.0999984741211 | Latvian
 81.5999984741211 | Lithuanian
 64.4000015258789 | Luxembourgish
             66.5 | Macedonian
 95.8000030517578 | Maltese
 96.5999984741211 | Norwegian
 97.5999984741211 | Polish
               99 | Portuguese
 76.2999992370605 | Romanian
 59.2999992370605 | Russian
 90.0999984741211 | Serbo-Croatian
 85.5999984741211 | Slovak
 87.9000015258789 | Slovene
 74.4000015258789 | Spanish
 64.6999969482422 | Ukrainian
(29 rows)

                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (avg(share1_ref2.percentage)), share1_ref2.language
   Merge Key: share1_ref2.language
   ->  Sort
         Output: (avg(share1_ref2.percentage)), share1_ref2.language
         Sort Key: share1_ref2.language
         ->  Sequence
               Output: (avg(share1_ref2.percentage)), share1_ref2.language
               ->  Shared Scan (Producer; slice1; share1)
                     Output: share1_ref1.code, share1_ref1.name, share1_ref1.language, share1_ref1.percentage
                     ->  PX Hash 1:6  (slice2)
                           Output: country.code, country.name, countrylanguage.language, countrylanguage.percentage
                           ->  Hash Left Anti Semi (Not-In) Join
                                 Output: country.code, country.name, countrylanguage.language, countrylanguage.percentage
                                 Hash Cond: (country.governmentform = ('Commonwealth of the US'::text))
                                 ->  PX Coordinator 6:1  (slice3; segments: 6)
                                       Output: country.code, country.name, country.governmentform, countrylanguage.language, countrylanguage.percentage
                                       ->  Hash Join
                                             Output: country.code, country.name, country.governmentform, countrylanguage.language, countrylanguage.percentage
                                             Hash Cond: (country.code = country_2.code)
                                             ->  PX Hash 6:6  (slice4; segments: 6)
                                                   Output: country.code, country.name, country.governmentform
                                                   Hash Key: country.code
                                                   ->  Nested Loop
                                                         Output: country.code, country.name, country.governmentform
                                                         Join Filter: (country.gnp > (min(country_1.gnpold)))
                                                         ->  PX Broadcast 1:6  (slice5)
                                                               Output: (min(country_1.gnpold))
                                                               ->  Finalize Aggregate
                                                                     Output: min(country_1.gnpold)
                                                                     ->  PX Coordinator 6:1  (slice6; segments: 6)
                                                                           Output: (PARTIAL min(country_1.gnpold))
                                                                           ->  Partial Aggregate
                                                                                 Output: PARTIAL min(country_1.gnpold)
                                                                                 ->  Partial Seq Scan on qp_with_clause.country country_1
                                                                                       Output: country_1.gnpold
                                                                                       Filter: (country_1.region = 'Western Europe'::text)
                                                         ->  Partial Seq Scan on qp_with_clause.country
                                                               Output: country.code, country.name, country.gnp, country.governmentform
                                             ->  Hash
                                                   Output: country_2.code, countrylanguage.language, countrylanguage.percentage
                                                   ->  PX Hash 6:6  (slice7; segments: 6)
                                                         Output: country_2.code, countrylanguage.language, countrylanguage.percentage
                                                         Hash Key: country_2.code
                                                         ->  Nested Loop
                                                               Output: country_2.code, countrylanguage.language, countrylanguage.percentage
                                                               Join Filter: true
                                                               ->  PX Broadcast 6:6  (slice8; segments: 6)
                                                                     Output: country_2.code
                                                                     ->  Nested Loop
                                                                           Output: country_2.code
                                                                           Join Filter: true
                                                                           ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                                                 Output: country_2.code, country_2.capital
                                                                                 ->  Partial Seq Scan on qp_with_clause.country country_2
                                                                                       Output: country_2.code, country_2.capital
                                                                                       Filter: (country_2.continent = 'Europe'::text)
                                                                           ->  Partial Index Scan using city_pkey on qp_with_clause.city
                                                                                 Index Cond: (city.id = country_2.capital)
                                                               ->  Partial Index Scan using countrylanguage_pkey on qp_with_clause.countrylanguage
                                                                     Output: countrylanguage.language, countrylanguage.isofficial, countrylanguage.percentage
                                                                     Index Cond: (countrylanguage.countrycode = country_2.code)
                                                                     Filter: countrylanguage.isofficial
                                 ->  Hash
                                       Output: ('Commonwealth of the US'::text)
                                       ->  Append
                                             ->  Result
                                                   Output: 'Commonwealth of the US'::text
                                             ->  Result
                                                   Output: 'Monarchy (Sultanate)'::text
                                             ->  Result
                                                   Output: 'Monarchy'::text
               ->  Sort
                     Output: (avg(share1_ref2.percentage)), share1_ref2.language
                     Sort Key: share1_ref2.language
                     ->  Nested Loop
                           Output: (avg(share1_ref2.percentage)), share1_ref2.language
                           Join Filter: ((avg(share1_ref2.percentage)) >= (avg(share1_ref4.percentage)))
                           ->  PX Broadcast 1:6  (slice17)
                                 Output: (avg(share1_ref4.percentage))
                                 ->  Finalize Aggregate
                                       Output: avg(share1_ref4.percentage)
                                       ->  PX Coordinator 6:1  (slice18; segments: 6)
                                             Output: (PARTIAL avg(share1_ref4.percentage))
                                             ->  Partial Aggregate
                                                   Output: PARTIAL avg(share1_ref4.percentage)
                                                   ->  GroupAggregate
                                                         Output: share1_ref4.percentage
                                                         Group Key: share1_ref4.percentage
                                                         ->  Sort
                                                               Output: share1_ref4.percentage
                                                               Sort Key: share1_ref4.percentage
                                                               ->  PX Hash 6:6  (slice19; segments: 6)
                                                                     Output: share1_ref4.percentage
                                                                     Hash Key: share1_ref4.percentage
                                                                     ->  Append
                                                                           ->  Nested Loop
                                                                                 Output: share1_ref4.percentage
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice20; segments: 6)
                                                                                       Output: share1_ref4.code, share1_ref4.percentage
                                                                                       ->  Result
                                                                                             Output: share1_ref4.code, share1_ref4.percentage
                                                                                             ->  Shared Scan (Consumer; slice20; share1)
                                                                                                   Output: share1_ref4.code, share1_ref4.name, share1_ref4.language, share1_ref4.percentage
                                                                                 ->  Partial Index Scan using country_pkey on qp_with_clause.country country_5
                                                                                       Output: country_5.region
                                                                                       Index Cond: (country_5.code = share1_ref4.code)
                                                                                       Filter: (country_5.region = 'British Islands'::text)
                                                                           ->  Nested Loop
                                                                                 Output: share1_ref5.percentage
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice21; segments: 6)
                                                                                       Output: share1_ref5.code, share1_ref5.percentage
                                                                                       ->  Result
                                                                                             Output: share1_ref5.code, share1_ref5.percentage
                                                                                             ->  Shared Scan (Consumer; slice21; share1)
                                                                                                   Output: share1_ref5.code, share1_ref5.name, share1_ref5.language, share1_ref5.percentage
                                                                                 ->  Partial Index Scan using country_pkey on qp_with_clause.country country_6
                                                                                       Output: country_6.region
                                                                                       Index Cond: (country_6.code = share1_ref5.code)
                                                                                       Filter: (country_6.region = 'Western Europe'::text)
                           ->  HashAggregate
                                 Output: avg(share1_ref2.percentage), avg(share1_ref2.percentage), share1_ref2.language
                                 Group Key: share1_ref2.language
                                 ->  Materialize
                                       Output: share1_ref2.language, share1_ref2.percentage
                                       ->  PX Hash 6:6  (slice10; segments: 6)
                                             Output: share1_ref2.language, share1_ref2.percentage
                                             Hash Key: share1_ref2.language
                                             ->  Result
                                                   Output: share1_ref2.language, share1_ref2.percentage
                                                   ->  Append
                                                         ->  Hash Join
                                                               Output: share1_ref2.percentage, share1_ref2.language
                                                               Hash Cond: (city_1.id = country_3.capital)
                                                               ->  PX Hash 6:6  (slice11; segments: 6)
                                                                     Output: city_1.id
                                                                     Hash Key: city_1.id
                                                                     ->  Partial Seq Scan on qp_with_clause.city city_1
                                                                           Output: city_1.id
                                                               ->  Hash
                                                                     Output: country_3.capital, share1_ref2.language, share1_ref2.percentage
                                                                     ->  PX Hash 6:6  (slice12; segments: 6)
                                                                           Output: country_3.capital, share1_ref2.language, share1_ref2.percentage
                                                                           Hash Key: country_3.capital
                                                                           ->  Nested Loop
                                                                                 Output: country_3.capital, share1_ref2.language, share1_ref2.percentage
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice13; segments: 6)
                                                                                       Output: share1_ref2.code, share1_ref2.language, share1_ref2.percentage
                                                                                       ->  Result
                                                                                             Output: share1_ref2.code, share1_ref2.language, share1_ref2.percentage
                                                                                             ->  Shared Scan (Consumer; slice13; share1)
                                                                                                   Output: share1_ref2.code, share1_ref2.name, share1_ref2.language, share1_ref2.percentage
                                                                                 ->  Partial Index Scan using country_pkey on qp_with_clause.country country_3
                                                                                       Output: country_3.continent, country_3.capital
                                                                                       Index Cond: (country_3.code = share1_ref2.code)
                                                                                       Filter: (country_3.continent = 'Europe'::text)
                                                         ->  Hash Join
                                                               Output: share1_ref3.percentage, share1_ref3.language
                                                               Hash Cond: (city_2.id = country_4.capital)
                                                               ->  PX Hash 6:6  (slice14; segments: 6)
                                                                     Output: city_2.id
                                                                     Hash Key: city_2.id
                                                                     ->  Partial Seq Scan on qp_with_clause.city city_2
                                                                           Output: city_2.id
                                                               ->  Hash
                                                                     Output: country_4.capital, share1_ref3.language, share1_ref3.percentage
                                                                     ->  PX Hash 6:6  (slice15; segments: 6)
                                                                           Output: country_4.capital, share1_ref3.language, share1_ref3.percentage
                                                                           Hash Key: country_4.capital
                                                                           ->  Nested Loop
                                                                                 Output: country_4.capital, share1_ref3.language, share1_ref3.percentage
                                                                                 Join Filter: true
                                                                                 ->  PX Broadcast 6:6  (slice16; segments: 6)
                                                                                       Output: share1_ref3.code, share1_ref3.language, share1_ref3.percentage
                                                                                       ->  Result
                                                                                             Output: share1_ref3.code, share1_ref3.language, share1_ref3.percentage
                                                                                             ->  Shared Scan (Consumer; slice16; share1)
                                                                                                   Output: share1_ref3.code, share1_ref3.name, share1_ref3.language, share1_ref3.percentage
                                                                                 ->  Partial Index Scan using country_pkey on qp_with_clause.country country_4
                                                                                       Output: country_4.continent, country_4.capital
                                                                                       Index Cond: (country_4.code = share1_ref3.code)
                                                                                       Filter: (country_4.continent = 'Asia'::text)
 Optimizer: PolarDB PX Optimizer
(186 rows)

-- queries using deeply nested CTEs
-- query1 using a CTE at every subquery level 
select avg(population),CITY
from
(
with size0_cities(CITY,POPULATION) as (select city.name,city.population from city where city.population >= 100)
select CITY,POPULATION from 
(
  with size1_cities(CITY,POPULATION) as ( select city,population from size0_cities where population >= 1000 )
  select CITY,POPULATION from 
  (
     with size2_cities(CITY,POPULATION) as (select city,population from size1_cities where population >= 10000)
     select CITY,POPULATION from
     (
       with size3_cities as (select city,population from  size2_cities where population >= 20000)
       select CITY,POPULATION from
       (
        with size4_cities as (select city,population from  size3_cities where population >= 50000)
        select CITY,POPULATION from
        (
         with size5_cities as (select city,population from  size4_cities where population >= 80000)
         select CITY,POPULATION from
         (
          with size6_cities as (select city,population from  size5_cities where population >= 150000)
          select CITY,POPULATION from
          (
           with size7_cities as (select city,population from  size6_cities where population >= 200000)
           select CITY,POPULATION from
           (
            with size8_cities as (select city,population from  size7_cities where population >= 250000)
            select CITY,POPULATION from
            (
             with size9_cities as (select city,population from  size8_cities where population >= 300000)
             select city,population from
             (
              with size10_cities as (select city,population from  size9_cities where population >= 6500000)
              select CITY,POPULATION from
              (
               with size11_cities as (select city,population from  size10_cities where population >= 7000000)
               select s1.city,s1.population from size11_cities s1,size10_cities s2
              ) FOO11
             ) FOO10
            ) FOO9
           ) FOO8
          ) FOO7
         ) FOO6
        ) FOO5
       ) FOO4
     )FOO3
  ) FOO2
) FOO1 order by city
) FOO0 group by city order by city;
          avg          |       city       
-----------------------+------------------
  8591309.000000000000 | Ciudad de Mexico
  7206704.000000000000 | Delhi
  8787958.000000000000 | Istanbul
  9604900.000000000000 | Jakarta
  9269265.000000000000 | Karachi
  7285000.000000000000 | London
  8389200.000000000000 | Moscow
 10500000.000000000000 | Mumbai (Bombay)
  8008278.000000000000 | New York
  7472000.000000000000 | Peking
  9968485.000000000000 | Sao Paulo
  9981619.000000000000 | Seoul
  9696300.000000000000 | Shanghai
  7980230.000000000000 | Tokyo
(14 rows)

                                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (avg(share10_ref3.population)), share10_ref3.name
   Merge Key: share10_ref3.name
   ->  Finalize GroupAggregate
         Output: avg(share10_ref3.population), share10_ref3.name
         Group Key: share10_ref3.name
         ->  Sort
               Output: share10_ref3.name, (PARTIAL avg(share10_ref3.population))
               Sort Key: share10_ref3.name
               ->  PX Hash 6:6  (slice2; segments: 6)
                     Output: share10_ref3.name, (PARTIAL avg(share10_ref3.population))
                     Hash Key: share10_ref3.name
                     ->  Partial HashAggregate
                           Output: share10_ref3.name, PARTIAL avg(share10_ref3.population)
                           Group Key: share10_ref3.name
                           ->  Sort
                                 Output: share10_ref3.name, share10_ref3.population
                                 Sort Key: share10_ref3.name
                                 ->  Sequence
                                       Output: share10_ref3.name, share10_ref3.population
                                       ->  Shared Scan (Producer; slice2; share10)
                                             Output: share10_ref1.name, share10_ref1.population
                                             ->  Partial Seq Scan on qp_with_clause.city
                                                   Output: city.name, city.population
                                                   Filter: ((city.population >= 100) AND (city.population >= 1000) AND (city.population >= 10000) AND (city.population >= 20000) AND (city.population >= 50000) AND (city.population >= 80000) AND (city.population >= 150000) AND (city.population >= 200000) AND (city.population >= 250000) AND (city.population >= 300000) AND (city.population >= 6500000))
                                       ->  Nested Loop
                                             Output: share10_ref3.name, share10_ref3.population
                                             Join Filter: true
                                             ->  Result
                                                   Output: share10_ref3.name, share10_ref3.population
                                                   Filter: (share10_ref3.population >= 7000000)
                                                   ->  Shared Scan (Producer; slice2; share10)
                                                         Output: share10_ref3.name, share10_ref3.population
                                             ->  Materialize
                                                   ->  PX Broadcast 6:6  (slice3; segments: 6)
                                                         ->  Result
                                                               ->  Shared Scan (Consumer; slice3; share10)
                                                                     Output: share10_ref2.name, share10_ref2.population
 Optimizer: PolarDB PX Optimizer
(39 rows)

--query 2 deeply nested CTEs with shared scans in the plan 
select avg(population),CITY
from
(
with size0_cities(CITY,POPULATION) as (select city.name,city.population from city where city.population >= 100)
select CITY,POPULATION from 
(
  with size1_cities(CITY,POPULATION) as ( select city,population from size0_cities where population >= 1000 )
  select CITY,POPULATION from 
  (
     with size2_cities(CITY,POPULATION) as (select city,population from size1_cities where population >= 10000)
     select CITY,POPULATION from
     (
       with size3_cities as (select city,population from  size2_cities where population >= 20000)
       select CITY,POPULATION from
       (
        with size4_cities as (select city,population from  size3_cities where population >= 50000)
        select CITY,POPULATION from
        (
         with size5_cities as (select city,population from  size4_cities where population >= 80000)
         select CITY,POPULATION from
         (
          with size6_cities as (select city,population from  size5_cities where population >= 150000)
          select CITY,POPULATION from
          (
           with size7_cities as (select city,population from  size6_cities where population >= 200000)
           select CITY,POPULATION from
           (
            with size8_cities as (select city,population from  size7_cities where population >= 250000)
            select CITY,POPULATION from
            (
             with size9_cities as (select city,population from  size8_cities where population >= 300000)
             select city,population from
             (
              with size10_cities as (select city,population from  size9_cities where population >= 6500000)
              select CITY,POPULATION from
              (
               with size11_cities as (select city,population from  size10_cities where population >= 7000000)
               select s1.city,s1.population from size11_cities s1,size10_cities s2
              ) FOO11
             ) FOO10
            ) FOO9
           ) FOO8
          ) FOO7
         ) FOO6
        ) FOO5
       ) FOO4
     )FOO3
  ) FOO2
) FOO1 order by city
) FOO0 group by city order by city;
          avg          |       city       
-----------------------+------------------
  8591309.000000000000 | Ciudad de Mexico
  7206704.000000000000 | Delhi
  8787958.000000000000 | Istanbul
  9604900.000000000000 | Jakarta
  9269265.000000000000 | Karachi
  7285000.000000000000 | London
  8389200.000000000000 | Moscow
 10500000.000000000000 | Mumbai (Bombay)
  8008278.000000000000 | New York
  7472000.000000000000 | Peking
  9968485.000000000000 | Sao Paulo
  9981619.000000000000 | Seoul
  9696300.000000000000 | Shanghai
  7980230.000000000000 | Tokyo
(14 rows)

                                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: (avg(share10_ref3.population)), share10_ref3.name
   Merge Key: share10_ref3.name
   ->  Finalize GroupAggregate
         Output: avg(share10_ref3.population), share10_ref3.name
         Group Key: share10_ref3.name
         ->  Sort
               Output: share10_ref3.name, (PARTIAL avg(share10_ref3.population))
               Sort Key: share10_ref3.name
               ->  PX Hash 6:6  (slice2; segments: 6)
                     Output: share10_ref3.name, (PARTIAL avg(share10_ref3.population))
                     Hash Key: share10_ref3.name
                     ->  Partial HashAggregate
                           Output: share10_ref3.name, PARTIAL avg(share10_ref3.population)
                           Group Key: share10_ref3.name
                           ->  Sort
                                 Output: share10_ref3.name, share10_ref3.population
                                 Sort Key: share10_ref3.name
                                 ->  Sequence
                                       Output: share10_ref3.name, share10_ref3.population
                                       ->  Shared Scan (Producer; slice2; share10)
                                             Output: share10_ref1.name, share10_ref1.population
                                             ->  Partial Seq Scan on qp_with_clause.city
                                                   Output: city.name, city.population
                                                   Filter: ((city.population >= 100) AND (city.population >= 1000) AND (city.population >= 10000) AND (city.population >= 20000) AND (city.population >= 50000) AND (city.population >= 80000) AND (city.population >= 150000) AND (city.population >= 200000) AND (city.population >= 250000) AND (city.population >= 300000) AND (city.population >= 6500000))
                                       ->  Nested Loop
                                             Output: share10_ref3.name, share10_ref3.population
                                             Join Filter: true
                                             ->  Result
                                                   Output: share10_ref3.name, share10_ref3.population
                                                   Filter: (share10_ref3.population >= 7000000)
                                                   ->  Shared Scan (Producer; slice2; share10)
                                                         Output: share10_ref3.name, share10_ref3.population
                                             ->  Materialize
                                                   ->  PX Broadcast 6:6  (slice3; segments: 6)
                                                         ->  Result
                                                               ->  Shared Scan (Consumer; slice3; share10)
                                                                     Output: share10_ref2.name, share10_ref2.population
 Optimizer: PolarDB PX Optimizer
(39 rows)

-- query 3 deeply nested CTEs using every CTE defined 
select avg(population) avg_p,CITY
from
(
with size0_cities(CITY,POPULATION) as (select city.name,city.population from city where city.population >= 350000)
select CITY,POPULATION from 
(
  with size1_cities(CITY,POPULATION) as ( select city,population from size0_cities where population >= 360000 )
  select CITY,POPULATION from 
  (
     with size2_cities(CITY,POPULATION) as (select city,population from size1_cities where population >= 370000)
     select CITY,POPULATION from
     (
       with size3_cities as (select city,population from  size2_cities where population >= 380000)
       select CITY,POPULATION from
       (
        with size4_cities as (select city,population from  size3_cities where population >= 390000)
        select CITY,POPULATION from
        (
         with size5_cities as (select city,population from  size4_cities where population >= 400000)
         select CITY,POPULATION from
         (
          with size6_cities as (select city,population from  size5_cities where population >= 410000)
          select CITY,POPULATION from
          (
           with size7_cities as (select city,population from  size6_cities where population >= 420000)
           select CITY,POPULATION from
           (
            with size8_cities as (select city,population from  size7_cities where population >= 430000)
            select CITY,POPULATION from
            (
             with size9_cities as (select city,population from  size8_cities where population >= 440000)
             select city,population from
             (
              with size10_cities as (select city,population from  size9_cities where population >= 6500000)
              select CITY,POPULATION from
              (
               with size11_cities as (select city,population from  size10_cities where population >= 7000000)
               select s1.city,s1.population from size11_cities s1,size1_cities s2
               UNION
               select s1.city,s1.population from size10_cities s1,size2_cities s2
               UNION
               select s1.city,s1.population from size9_cities s1,size3_cities s2
               UNION
               select s1.city,s1.population from size8_cities s1,size4_cities s2
               UNION
               select s1.city,s1.population from size7_cities s1,size5_cities s2
               UNION
               select s1.city,s1.population from size6_cities s1,size6_cities s2
              ) FOO11
             ) FOO10
            ) FOO9
           ) FOO8
          ) FOO7
         ) FOO6
        ) FOO5
       ) FOO4
     )FOO3
  ) FOO2
) FOO1 order by city
) FOO0 group by city order by avg_p,city
LIMIT 20;
        avg_p        |      city      
---------------------+----------------
 410000.000000000000 | Port Harcourt
 410102.000000000000 | Alberton
 410407.000000000000 | Xiangfan
 410775.000000000000 | Pingdingshan
 411542.000000000000 | Bhubaneswar
 411822.000000000000 | General Santos
 412639.000000000000 | Kaunas
 415346.000000000000 | San Salvador
 415466.000000000000 | Panzhihua
 416100.000000000000 | al-Taif
 416289.000000000000 | Bikaner
 416428.000000000000 | Matamoros
 416474.000000000000 | Atlanta
 416988.000000000000 | Szczecin
 417517.000000000000 | Kisangani
 417597.000000000000 | Sialkot
 417610.000000000000 | Suez
 417748.000000000000 | Rasht
 417810.000000000000 | Kolwezi
 418624.000000000000 | Kirkuk
(20 rows)

                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (avg(share10_ref2.population)), share10_ref2.name
   ->  PX Coordinator 6:1  (slice1; segments: 6)
         Output: (avg(share10_ref2.population)), share10_ref2.name
         Merge Key: (avg(share10_ref2.population)), share10_ref2.name
         ->  Limit
               Output: (avg(share10_ref2.population)), share10_ref2.name
               ->  Sort
                     Output: (avg(share10_ref2.population)), share10_ref2.name
                     Sort Key: (avg(share10_ref2.population)), share10_ref2.name
                     ->  Finalize HashAggregate
                           Output: avg(share10_ref2.population), share10_ref2.name
                           Group Key: share10_ref2.name
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: share10_ref2.name, (PARTIAL avg(share10_ref2.population))
                                 Hash Key: share10_ref2.name
                                 ->  Partial HashAggregate
                                       Output: share10_ref2.name, PARTIAL avg(share10_ref2.population)
                                       Group Key: share10_ref2.name
                                       ->  Sort
                                             Output: share10_ref2.name, share10_ref2.population
                                             Sort Key: share10_ref2.name
                                             ->  Sequence
                                                   Output: share10_ref2.name, share10_ref2.population
                                                   ->  Shared Scan (Producer; slice2; share1)
                                                         Output: share1_ref1.name, share1_ref1.population
                                                         ->  Partial Seq Scan on qp_with_clause.city
                                                               Output: city.name, city.population
                                                               Filter: ((city.population >= 350000) AND (city.population >= 360000))
                                                   ->  Sequence
                                                         Output: share10_ref2.name, share10_ref2.population
                                                         ->  Shared Scan (Producer; slice2; share2)
                                                               Output: share2_ref1.name, share2_ref1.population
                                                               ->  Result
                                                                     Output: share1_ref2.name, share1_ref2.population
                                                                     Filter: (share1_ref2.population >= 370000)
                                                                     ->  Shared Scan (Producer; slice2; share1)
                                                                           Output: share1_ref2.name, share1_ref2.population
                                                         ->  Sequence
                                                               Output: share10_ref2.name, share10_ref2.population
                                                               ->  Shared Scan (Producer; slice2; share3)
                                                                     Output: share3_ref1.name, share3_ref1.population
                                                                     ->  Result
                                                                           Output: share2_ref2.name, share2_ref2.population
                                                                           Filter: (share2_ref2.population >= 380000)
                                                                           ->  Shared Scan (Producer; slice2; share2)
                                                                                 Output: share2_ref2.name, share2_ref2.population
                                                               ->  Sequence
                                                                     Output: share10_ref2.name, share10_ref2.population
                                                                     ->  Shared Scan (Producer; slice2; share4)
                                                                           Output: share4_ref1.name, share4_ref1.population
                                                                           ->  Result
                                                                                 Output: share3_ref2.name, share3_ref2.population
                                                                                 Filter: (share3_ref2.population >= 390000)
                                                                                 ->  Shared Scan (Producer; slice2; share3)
                                                                                       Output: share3_ref2.name, share3_ref2.population
                                                                     ->  Sequence
                                                                           Output: share10_ref2.name, share10_ref2.population
                                                                           ->  Shared Scan (Producer; slice2; share5)
                                                                                 Output: share5_ref1.name, share5_ref1.population
                                                                                 ->  Result
                                                                                       Output: share4_ref2.name, share4_ref2.population
                                                                                       Filter: (share4_ref2.population >= 400000)
                                                                                       ->  Shared Scan (Producer; slice2; share4)
                                                                                             Output: share4_ref2.name, share4_ref2.population
                                                                           ->  Sequence
                                                                                 Output: share10_ref2.name, share10_ref2.population
                                                                                 ->  Shared Scan (Producer; slice2; share6)
                                                                                       Output: share6_ref1.name, share6_ref1.population
                                                                                       ->  PX Hash 6:6  (slice3; segments: 6)
                                                                                             Output: share5_ref2.name, share5_ref2.population
                                                                                             Hash Key: share5_ref2.name, share5_ref2.population
                                                                                             ->  Result
                                                                                                   Output: share5_ref2.name, share5_ref2.population
                                                                                                   Filter: (share5_ref2.population >= 410000)
                                                                                                   ->  Shared Scan (Consumer; slice3; share5)
                                                                                                         Output: share5_ref2.name, share5_ref2.population
                                                                                 ->  Sequence
                                                                                       Output: share10_ref2.name, share10_ref2.population
                                                                                       ->  Shared Scan (Producer; slice2; share7)
                                                                                             Output: share7_ref1.name, share7_ref1.population
                                                                                             ->  Result
                                                                                                   Output: share6_ref2.name, share6_ref2.population
                                                                                                   Filter: (share6_ref2.population >= 420000)
                                                                                                   ->  Shared Scan (Producer; slice2; share6)
                                                                                                         Output: share6_ref2.name, share6_ref2.population
                                                                                       ->  Sequence
                                                                                             Output: share10_ref2.name, share10_ref2.population
                                                                                             ->  Shared Scan (Producer; slice2; share8)
                                                                                                   Output: share8_ref1.name, share8_ref1.population
                                                                                                   ->  Result
                                                                                                         Output: share7_ref2.name, share7_ref2.population
                                                                                                         Filter: (share7_ref2.population >= 430000)
                                                                                                         ->  Shared Scan (Producer; slice2; share7)
                                                                                                               Output: share7_ref2.name, share7_ref2.population
                                                                                             ->  Sequence
                                                                                                   Output: share10_ref2.name, share10_ref2.population
                                                                                                   ->  Shared Scan (Producer; slice2; share9)
                                                                                                         Output: share9_ref1.name, share9_ref1.population
                                                                                                         ->  Result
                                                                                                               Output: share8_ref2.name, share8_ref2.population
                                                                                                               Filter: (share8_ref2.population >= 440000)
                                                                                                               ->  Shared Scan (Producer; slice2; share8)
                                                                                                                     Output: share8_ref2.name, share8_ref2.population
                                                                                                   ->  Sequence
                                                                                                         Output: share10_ref2.name, share10_ref2.population
                                                                                                         ->  Shared Scan (Producer; slice2; share10)
                                                                                                               Output: share10_ref1.name, share10_ref1.population
                                                                                                               ->  Result
                                                                                                                     Output: share9_ref2.name, share9_ref2.population
                                                                                                                     Filter: (share9_ref2.population >= 6500000)
                                                                                                                     ->  Shared Scan (Producer; slice2; share9)
                                                                                                                           Output: share9_ref2.name, share9_ref2.population
                                                                                                         ->  HashAggregate
                                                                                                               Output: share10_ref2.name, share10_ref2.population
                                                                                                               Group Key: share10_ref2.name, share10_ref2.population
                                                                                                               ->  Append
                                                                                                                     ->  PX Hash 6:6  (slice4; segments: 6)
                                                                                                                           Output: share10_ref2.name, share10_ref2.population
                                                                                                                           Hash Key: share10_ref2.name, share10_ref2.population
                                                                                                                           ->  Nested Loop
                                                                                                                                 Output: share10_ref2.name, share10_ref2.population
                                                                                                                                 Join Filter: true
                                                                                                                                 ->  PX Broadcast 6:6  (slice5; segments: 6)
                                                                                                                                       Output: share10_ref2.name, share10_ref2.population
                                                                                                                                       ->  Result
                                                                                                                                             Output: share10_ref2.name, share10_ref2.population
                                                                                                                                             Filter: (share10_ref2.population >= 7000000)
                                                                                                                                             ->  Shared Scan (Consumer; slice5; share10)
                                                                                                                                                   Output: share10_ref2.name, share10_ref2.population
                                                                                                                                 ->  Shared Scan (Consumer; slice4; share1)
                                                                                                                                       Output: share1_ref3.name, share1_ref3.population
                                                                                                                     ->  PX Hash 6:6  (slice6; segments: 6)
                                                                                                                           Output: share10_ref3.name, share10_ref3.population
                                                                                                                           Hash Key: share10_ref3.name, share10_ref3.population
                                                                                                                           ->  Nested Loop
                                                                                                                                 Output: share10_ref3.name, share10_ref3.population
                                                                                                                                 Join Filter: true
                                                                                                                                 ->  PX Broadcast 6:6  (slice7; segments: 6)
                                                                                                                                       Output: share10_ref3.name, share10_ref3.population
                                                                                                                                       ->  Shared Scan (Consumer; slice7; share10)
                                                                                                                                             Output: share10_ref3.name, share10_ref3.population
                                                                                                                                 ->  Shared Scan (Consumer; slice6; share2)
                                                                                                                                       Output: share2_ref3.name, share2_ref3.population
                                                                                                                     ->  Nested Loop
                                                                                                                           Output: share9_ref3.name, share9_ref3.population
                                                                                                                           Join Filter: true
                                                                                                                           ->  Shared Scan (Producer; slice2; share9)
                                                                                                                                 Output: share9_ref3.name, share9_ref3.population
                                                                                                                           ->  Materialize
                                                                                                                                 ->  PX Broadcast 6:6  (slice8; segments: 6)
                                                                                                                                       ->  Result
                                                                                                                                             ->  Shared Scan (Consumer; slice8; share3)
                                                                                                                                                   Output: share3_ref3.name, share3_ref3.population
                                                                                                                     ->  Nested Loop
                                                                                                                           Output: share8_ref3.name, share8_ref3.population
                                                                                                                           Join Filter: true
                                                                                                                           ->  Shared Scan (Producer; slice2; share8)
                                                                                                                                 Output: share8_ref3.name, share8_ref3.population
                                                                                                                           ->  Materialize
                                                                                                                                 ->  PX Broadcast 6:6  (slice9; segments: 6)
                                                                                                                                       ->  Result
                                                                                                                                             ->  Shared Scan (Consumer; slice9; share4)
                                                                                                                                                   Output: share4_ref3.name, share4_ref3.population
                                                                                                                     ->  Nested Loop
                                                                                                                           Output: share7_ref3.name, share7_ref3.population
                                                                                                                           Join Filter: true
                                                                                                                           ->  Shared Scan (Producer; slice2; share7)
                                                                                                                                 Output: share7_ref3.name, share7_ref3.population
                                                                                                                           ->  Materialize
                                                                                                                                 ->  PX Broadcast 6:6  (slice10; segments: 6)
                                                                                                                                       ->  Result
                                                                                                                                             ->  Shared Scan (Consumer; slice10; share5)
                                                                                                                                                   Output: share5_ref3.name, share5_ref3.population
                                                                                                                     ->  Nested Loop
                                                                                                                           Output: share6_ref4.name, share6_ref4.population
                                                                                                                           Join Filter: true
                                                                                                                           ->  Shared Scan (Producer; slice2; share6)
                                                                                                                                 Output: share6_ref4.name, share6_ref4.population
                                                                                                                           ->  Materialize
                                                                                                                                 ->  PX Broadcast 6:6  (slice11; segments: 6)
                                                                                                                                       ->  Result
                                                                                                                                             ->  Shared Scan (Consumer; slice11; share6)
                                                                                                                                                   Output: share6_ref3.name, share6_ref3.population
 Optimizer: PolarDB PX Optimizer
(185 rows)

-- sanity tests with queries using CTEs in insert,update,delete and create
-- query 1 CTAS using CTE
create table bad_headofstates as 
(
with bad_headofstates as 
(
 select country.code,country.name,country.headofstate,countrylanguage.language
 from
 country,countrylanguage
 where country.code = countrylanguage.countrycode and countrylanguage.isofficial=true
 and (country.gnp < country.gnpold or country.gnp < 3000)
)
select OUTERMOST_FOO.*,bad_headofstates.headofstate from (
select avg(population),region from
(
select FOO.*,bad_headofstates.headofstate,city.name
from
(select bad_headofstates.code,country.capital,country.region,country.population from
bad_headofstates,country where bad_headofstates.code = country.code) FOO, bad_headofstates,city
where FOO.code = bad_headofstates.code and FOO.capital = city.id) OUTER_FOO
group by region ) OUTERMOST_FOO,bad_headofstates,country 
where country.code = bad_headofstates.code and country.region = OUTERMOST_FOO.region
order by OUTERMOST_FOO.region,bad_headofstates.headofstate LIMIT 40
);
select * from bad_headofstates order by region,headofstate;
          avg          |          region           |           headofstate            
-----------------------+---------------------------+----------------------------------
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
   744388.888888888889 | Caribbean                 | Beatrix
   744388.888888888889 | Caribbean                 | Beatrix
   744388.888888888889 | Caribbean                 | Beatrix
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Fidel Castro Ruz
   744388.888888888889 | Caribbean                 | George W. Bush
   744388.888888888889 | Caribbean                 | Jacques Chirac
  7651000.000000000000 | Central Africa            | Idriss Deby
  2657500.000000000000 | Central America           | Arnoldo Aleman Lacayo
  2657500.000000000000 | Central America           | Elisabeth II
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Bakili Muluzi
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | Isayas Afewerki [Isaias Afwerki]
  5982809.523809523810 | Eastern Africa            | Ismail Omar Guelleh
  5982809.523809523810 | Eastern Africa            | Jacques Chirac
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Robert G. Mugabe
 44173250.000000000000 | Eastern Asia              | Akihito
 44173250.000000000000 | Eastern Asia              | Jiang Zemin
 44173250.000000000000 | Eastern Asia              | Kim Dae-jung
(40 rows)

                               QUERY PLAN                                
-------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: avg, region, headofstate
   Merge Key: region, headofstate
   ->  Sort
         Output: avg, region, headofstate
         Sort Key: bad_headofstates.region, bad_headofstates.headofstate
         ->  Partial Seq Scan on qp_with_clause.bad_headofstates
               Output: avg, region, headofstate
 Optimizer: PolarDB PX Optimizer
(9 rows)

--query 2 insert using CTE
insert into bad_headofstates
(
with bad_headofstates as 
(
 select country.code,country.name,country.headofstate,countrylanguage.language
 from
 country,countrylanguage
 where country.code = countrylanguage.countrycode and countrylanguage.isofficial=true
 and (country.gnp < country.gnpold or country.gnp < 3000)
)
select OUTERMOST_FOO.*,bad_headofstates.headofstate from (
select avg(population),region from
(
select FOO.*,bad_headofstates.headofstate,city.name
from
(select bad_headofstates.code,country.capital,country.region,country.population from
bad_headofstates,country where bad_headofstates.code = country.code) FOO, bad_headofstates,city
where FOO.code = bad_headofstates.code and FOO.capital = city.id) OUTER_FOO
group by region ) OUTERMOST_FOO,bad_headofstates,country 
where country.code = bad_headofstates.code and country.region = OUTERMOST_FOO.region
order by OUTERMOST_FOO.region,bad_headofstates.headofstate LIMIT 40
);
select * from bad_headofstates order by region,headofstate;
          avg          |          region           |           headofstate            
-----------------------+---------------------------+----------------------------------
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
   744388.888888888889 | Caribbean                 | Beatrix
   744388.888888888889 | Caribbean                 | Beatrix
   744388.888888888889 | Caribbean                 | Beatrix
   744388.888888888889 | Caribbean                 | Beatrix
   744388.888888888889 | Caribbean                 | Beatrix
   744388.888888888889 | Caribbean                 | Beatrix
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Elisabeth II
   744388.888888888889 | Caribbean                 | Fidel Castro Ruz
   744388.888888888889 | Caribbean                 | Fidel Castro Ruz
   744388.888888888889 | Caribbean                 | George W. Bush
   744388.888888888889 | Caribbean                 | George W. Bush
   744388.888888888889 | Caribbean                 | Jacques Chirac
   744388.888888888889 | Caribbean                 | Jacques Chirac
  7651000.000000000000 | Central Africa            | Idriss Deby
  7651000.000000000000 | Central Africa            | Idriss Deby
  2657500.000000000000 | Central America           | Arnoldo Aleman Lacayo
  2657500.000000000000 | Central America           | Arnoldo Aleman Lacayo
  2657500.000000000000 | Central America           | Elisabeth II
  2657500.000000000000 | Central America           | Elisabeth II
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Bakili Muluzi
  5982809.523809523810 | Eastern Africa            | Bakili Muluzi
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | Isayas Afewerki [Isaias Afwerki]
  5982809.523809523810 | Eastern Africa            | Isayas Afewerki [Isaias Afwerki]
  5982809.523809523810 | Eastern Africa            | Ismail Omar Guelleh
  5982809.523809523810 | Eastern Africa            | Ismail Omar Guelleh
  5982809.523809523810 | Eastern Africa            | Jacques Chirac
  5982809.523809523810 | Eastern Africa            | Jacques Chirac
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Robert G. Mugabe
  5982809.523809523810 | Eastern Africa            | Robert G. Mugabe
 44173250.000000000000 | Eastern Asia              | Akihito
 44173250.000000000000 | Eastern Asia              | Akihito
 44173250.000000000000 | Eastern Asia              | Jiang Zemin
 44173250.000000000000 | Eastern Asia              | Jiang Zemin
 44173250.000000000000 | Eastern Asia              | Kim Dae-jung
 44173250.000000000000 | Eastern Asia              | Kim Dae-jung
(80 rows)

                               QUERY PLAN                                
-------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: avg, region, headofstate
   Merge Key: region, headofstate
   ->  Sort
         Output: avg, region, headofstate
         Sort Key: bad_headofstates.region, bad_headofstates.headofstate
         ->  Partial Seq Scan on qp_with_clause.bad_headofstates
               Output: avg, region, headofstate
 Optimizer: PolarDB PX Optimizer
(9 rows)

--query3 update using CTE
update bad_headofstates set region = cm.region FROM
(
with bad_headofstates as
(
 select country.code,country.name,country.headofstate,countrylanguage.language
 from
 country,countrylanguage
 where country.code = countrylanguage.countrycode and countrylanguage.isofficial=true
 and (country.gnp < country.gnpold or country.gnp < 3000)
)
select avg(OUTERMOST_FOO.AVG),OUTERMOST_FOO.region from (
select avg(population) AVG,region from
(
select FOO.*,bad_headofstates.headofstate,city.name
from
(select bad_headofstates.code,country.capital,country.region,country.population from
bad_headofstates,country where bad_headofstates.code = country.code) FOO, bad_headofstates,city
where FOO.code = bad_headofstates.code and FOO.capital = city.id) OUTER_FOO
group by region ) OUTERMOST_FOO,bad_headofstates,country
where country.code = bad_headofstates.code and country.region = OUTERMOST_FOO.region
and OUTERMOST_FOO.region = 'Central America'
group by OUTERMOST_FOO.region
order by OUTERMOST_FOO.region
) cm
where bad_headofstates.region = 'Caribbean';
 
select * from bad_headofstates order by avg,region,headofstate;
          avg          |          region           |           headofstate            
-----------------------+---------------------------+----------------------------------
   744388.888888888889 | Central America           | Beatrix
   744388.888888888889 | Central America           | Beatrix
   744388.888888888889 | Central America           | Beatrix
   744388.888888888889 | Central America           | Beatrix
   744388.888888888889 | Central America           | Beatrix
   744388.888888888889 | Central America           | Beatrix
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Elisabeth II
   744388.888888888889 | Central America           | Fidel Castro Ruz
   744388.888888888889 | Central America           | Fidel Castro Ruz
   744388.888888888889 | Central America           | George W. Bush
   744388.888888888889 | Central America           | George W. Bush
   744388.888888888889 | Central America           | Jacques Chirac
   744388.888888888889 | Central America           | Jacques Chirac
  2657500.000000000000 | Central America           | Arnoldo Aleman Lacayo
  2657500.000000000000 | Central America           | Arnoldo Aleman Lacayo
  2657500.000000000000 | Central America           | Elisabeth II
  2657500.000000000000 | Central America           | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Bakili Muluzi
  5982809.523809523810 | Eastern Africa            | Bakili Muluzi
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | Isayas Afewerki [Isaias Afwerki]
  5982809.523809523810 | Eastern Africa            | Isayas Afewerki [Isaias Afwerki]
  5982809.523809523810 | Eastern Africa            | Ismail Omar Guelleh
  5982809.523809523810 | Eastern Africa            | Ismail Omar Guelleh
  5982809.523809523810 | Eastern Africa            | Jacques Chirac
  5982809.523809523810 | Eastern Africa            | Jacques Chirac
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Robert G. Mugabe
  5982809.523809523810 | Eastern Africa            | Robert G. Mugabe
  7651000.000000000000 | Central Africa            | Idriss Deby
  7651000.000000000000 | Central Africa            | Idriss Deby
 44173250.000000000000 | Eastern Asia              | Akihito
 44173250.000000000000 | Eastern Asia              | Akihito
 44173250.000000000000 | Eastern Asia              | Jiang Zemin
 44173250.000000000000 | Eastern Asia              | Jiang Zemin
 44173250.000000000000 | Eastern Asia              | Kim Dae-jung
 44173250.000000000000 | Eastern Asia              | Kim Dae-jung
(80 rows)

                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: avg, region, headofstate
   Merge Key: avg, region, headofstate
   ->  Sort
         Output: avg, region, headofstate
         Sort Key: bad_headofstates.avg, bad_headofstates.region, bad_headofstates.headofstate
         ->  Partial Seq Scan on qp_with_clause.bad_headofstates
               Output: avg, region, headofstate
 Optimizer: PolarDB PX Optimizer
(9 rows)

--query4 delete using CTE
delete from bad_headofstates USING
(
with bad_headofstates as
(
 select country.code,country.name,country.headofstate,countrylanguage.language
 from
 country,countrylanguage
 where country.code = countrylanguage.countrycode and countrylanguage.isofficial=true
 and (country.gnp < country.gnpold or country.gnp < 3000)
)
select avg(OUTERMOST_FOO.AVG),OUTERMOST_FOO.region from (
select avg(population) AVG,region from
(
select FOO.*,bad_headofstates.headofstate,city.name
from
(select bad_headofstates.code,country.capital,country.region,country.population from
bad_headofstates,country where bad_headofstates.code = country.code) FOO, bad_headofstates,city
where FOO.code = bad_headofstates.code and FOO.capital = city.id) OUTER_FOO
group by region ) OUTERMOST_FOO,bad_headofstates,country
where country.code = bad_headofstates.code and country.region = OUTERMOST_FOO.region
and OUTERMOST_FOO.region = 'Central America'
group by OUTERMOST_FOO.region
order by OUTERMOST_FOO.region
) as  cm
where bad_headofstates.region = cm.region;
select * from bad_headofstates order by region,headofstate;
          avg          |          region           |           headofstate            
-----------------------+---------------------------+----------------------------------
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  7651000.000000000000 | Central Africa            | Idriss Deby
  7651000.000000000000 | Central Africa            | Idriss Deby
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Abdiqassim Salad Hassan
  5982809.523809523810 | Eastern Africa            | Bakili Muluzi
  5982809.523809523810 | Eastern Africa            | Bakili Muluzi
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | France-Albert Rene
  5982809.523809523810 | Eastern Africa            | Isayas Afewerki [Isaias Afwerki]
  5982809.523809523810 | Eastern Africa            | Isayas Afewerki [Isaias Afwerki]
  5982809.523809523810 | Eastern Africa            | Ismail Omar Guelleh
  5982809.523809523810 | Eastern Africa            | Ismail Omar Guelleh
  5982809.523809523810 | Eastern Africa            | Jacques Chirac
  5982809.523809523810 | Eastern Africa            | Jacques Chirac
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Paul Kagame
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Pierre Buyoya
  5982809.523809523810 | Eastern Africa            | Robert G. Mugabe
  5982809.523809523810 | Eastern Africa            | Robert G. Mugabe
 44173250.000000000000 | Eastern Asia              | Akihito
 44173250.000000000000 | Eastern Asia              | Akihito
 44173250.000000000000 | Eastern Asia              | Jiang Zemin
 44173250.000000000000 | Eastern Asia              | Jiang Zemin
 44173250.000000000000 | Eastern Asia              | Kim Dae-jung
 44173250.000000000000 | Eastern Asia              | Kim Dae-jung
(44 rows)

                               QUERY PLAN                                
-------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: avg, region, headofstate
   Merge Key: region, headofstate
   ->  Sort
         Output: avg, region, headofstate
         Sort Key: bad_headofstates.region, bad_headofstates.headofstate
         ->  Partial Seq Scan on qp_with_clause.bad_headofstates
               Output: avg, region, headofstate
 Optimizer: PolarDB PX Optimizer
(9 rows)

-- delete using CTE in its subplan
delete from bad_headofstates where bad_headofstates.avg NOT IN
(
with bad_headofstates as
(
 select country.code,country.name,country.headofstate,countrylanguage.language
 from
 country,countrylanguage
 where country.code = countrylanguage.countrycode and countrylanguage.isofficial=true
 and (country.gnp < country.gnpold or country.gnp < 3000)
)
select OUTERMOST_FOO.AVG from (
select avg(population) AVG,region from
(
select FOO.*,bad_headofstates.headofstate,city.name
from
(select bad_headofstates.code,country.capital,country.region,country.population from
bad_headofstates,country where bad_headofstates.code = country.code) FOO, bad_headofstates,city
where FOO.code = bad_headofstates.code and FOO.capital = city.id) OUTER_FOO
group by region ) OUTERMOST_FOO,bad_headofstates,country
where country.code = bad_headofstates.code and country.region = OUTERMOST_FOO.region
and OUTERMOST_FOO.region = 'Australia and New Zealand' or OUTERMOST_FOO.region = 'Eastern Asia'
order by OUTERMOST_FOO.region
);
select * from bad_headofstates order by region,headofstate;
          avg          |          region           | headofstate  
-----------------------+---------------------------+--------------
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
  4550620.000000000000 | Australia and New Zealand | Elisabeth II
 44173250.000000000000 | Eastern Asia              | Akihito
 44173250.000000000000 | Eastern Asia              | Akihito
 44173250.000000000000 | Eastern Asia              | Jiang Zemin
 44173250.000000000000 | Eastern Asia              | Jiang Zemin
 44173250.000000000000 | Eastern Asia              | Kim Dae-jung
 44173250.000000000000 | Eastern Asia              | Kim Dae-jung
(16 rows)

                               QUERY PLAN                                
-------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: avg, region, headofstate
   Merge Key: region, headofstate
   ->  Sort
         Output: avg, region, headofstate
         Sort Key: bad_headofstates.region, bad_headofstates.headofstate
         ->  Partial Seq Scan on qp_with_clause.bad_headofstates
               Output: avg, region, headofstate
 Optimizer: PolarDB PX Optimizer
(9 rows)

drop table bad_headofstates;
-- queries with views using CTEs
-- view1 with multiple CTEs being used multiple times
create view view_with_shared_scans as
(
with longlivingregions as 
(
select FOO.*,count(distinct language) as "lang_count"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       avg(lifeexpectancy) as "REGION_LIFETIME",region
     from
      country
     group by region
    ) FOO,countrylanguage,country
where
   country.code = countrylanguage.countrycode
   and FOO.region = country.region
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP",foo."REGION_LIFETIME"),
denseregions as 
(
select FOO.*,count(distinct language) as "lang_count",
       sum(surfacearea) as "REGION_SURFACE_AREA"
from(
     select
       sum(population) as "REGION_POP",
       sum(gnp) as "REGION_GNP",
       region
     from
      country
     group by region
    ) FOO,countrylanguage,country
where
   country.code = countrylanguage.countrycode
   and FOO.region = country.region
   and FOO."REGION_POP" != 0
group by
FOO.region,foo."REGION_POP",foo."REGION_GNP"
order by sum(surfacearea)/foo."REGION_POP" desc),
allcountrystats as 
( select country.code,country.name,count(distinct city.id) CITY_CNT,
  count(distinct countrylanguage.language) LANG_CNT
  from country,city,countrylanguage
  where country.code = city.countrycode
  and country.code = countrylanguage.countrycode
  group by country.code,country.name
)
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear between 1800 and 1850
UNION ALL
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear between 1850 and 1900
UNION ALL
select allcountrystats.CITY_CNT,allcountrystats.LANG_CNT,allcountrystats.name,
       "REGION_SURFACE_AREA","REGION_LIFETIME",longlivingregions."REGION_POP",longlivingregions.lang_count,longlivingregions."REGION_GNP",longlivingregions.region
from longlivingregions,denseregions,allcountrystats,country
where longlivingregions.region = denseregions.region and allcountrystats.code = country.code and country.region = longlivingregions.region
and country.indepyear > 1900
);
\d+ view_with_shared_scans;
                           View "qp_with_clause.view_with_shared_scans"
       Column        |       Type       | Collation | Nullable | Default | Storage  | Description 
---------------------+------------------+-----------+----------+---------+----------+-------------
 city_cnt            | bigint           |           |          |         | plain    | 
 lang_cnt            | bigint           |           |          |         | plain    | 
 name                | text             |           |          |         | extended | 
 REGION_SURFACE_AREA | numeric          |           |          |         | main     | 
 REGION_LIFETIME     | double precision |           |          |         | plain    | 
 REGION_POP          | bigint           |           |          |         | plain    | 
 lang_count          | bigint           |           |          |         | plain    | 
 REGION_GNP          | numeric          |           |          |         | main     | 
 region              | text             |           |          |         | extended | 
View definition:
 WITH longlivingregions AS (
         SELECT foo."REGION_POP",
            foo."REGION_GNP",
            foo."REGION_LIFETIME",
            foo.region,
            count(DISTINCT countrylanguage.language) AS lang_count
           FROM ( SELECT sum(country_1.population) AS "REGION_POP",
                    sum(country_1.gnp) AS "REGION_GNP",
                    avg(country_1.lifeexpectancy) AS "REGION_LIFETIME",
                    country_1.region
                   FROM country country_1
                  GROUP BY country_1.region) foo,
            countrylanguage,
            country
          WHERE country.code = countrylanguage.countrycode AND foo.region = country.region
          GROUP BY foo.region, foo."REGION_POP", foo."REGION_GNP", foo."REGION_LIFETIME"
        ), denseregions AS (
         SELECT foo."REGION_POP",
            foo."REGION_GNP",
            foo.region,
            count(DISTINCT countrylanguage.language) AS lang_count,
            sum(country.surfacearea) AS "REGION_SURFACE_AREA"
           FROM ( SELECT sum(country_1.population) AS "REGION_POP",
                    sum(country_1.gnp) AS "REGION_GNP",
                    country_1.region
                   FROM country country_1
                  GROUP BY country_1.region) foo,
            countrylanguage,
            country
          WHERE country.code = countrylanguage.countrycode AND foo.region = country.region AND foo."REGION_POP" <> 0
          GROUP BY foo.region, foo."REGION_POP", foo."REGION_GNP"
          ORDER BY (sum(country.surfacearea) / foo."REGION_POP"::numeric) DESC
        ), allcountrystats AS (
         SELECT country.code,
            country.name,
            count(DISTINCT city.id) AS city_cnt,
            count(DISTINCT countrylanguage.language) AS lang_cnt
           FROM country,
            city,
            countrylanguage
          WHERE country.code = city.countrycode AND country.code = countrylanguage.countrycode
          GROUP BY country.code, country.name
        )
 SELECT allcountrystats.city_cnt,
    allcountrystats.lang_cnt,
    allcountrystats.name,
    denseregions."REGION_SURFACE_AREA",
    longlivingregions."REGION_LIFETIME",
    longlivingregions."REGION_POP",
    longlivingregions.lang_count,
    longlivingregions."REGION_GNP",
    longlivingregions.region
   FROM longlivingregions,
    denseregions,
    allcountrystats,
    country
  WHERE longlivingregions.region = denseregions.region AND allcountrystats.code = country.code AND country.region = longlivingregions.region AND country.indepyear >= 1800 AND country.indepyear <= 1850
UNION ALL
 SELECT allcountrystats.city_cnt,
    allcountrystats.lang_cnt,
    allcountrystats.name,
    denseregions."REGION_SURFACE_AREA",
    longlivingregions."REGION_LIFETIME",
    longlivingregions."REGION_POP",
    longlivingregions.lang_count,
    longlivingregions."REGION_GNP",
    longlivingregions.region
   FROM longlivingregions,
    denseregions,
    allcountrystats,
    country
  WHERE longlivingregions.region = denseregions.region AND allcountrystats.code = country.code AND country.region = longlivingregions.region AND country.indepyear >= 1850 AND country.indepyear <= 1900
UNION ALL
 SELECT allcountrystats.city_cnt,
    allcountrystats.lang_cnt,
    allcountrystats.name,
    denseregions."REGION_SURFACE_AREA",
    longlivingregions."REGION_LIFETIME",
    longlivingregions."REGION_POP",
    longlivingregions.lang_count,
    longlivingregions."REGION_GNP",
    longlivingregions.region
   FROM longlivingregions,
    denseregions,
    allcountrystats,
    country
  WHERE longlivingregions.region = denseregions.region AND allcountrystats.code = country.code AND country.region = longlivingregions.region AND country.indepyear > 1900;

select city_cnt,lang_cnt,name,region from view_with_shared_scans order by name LIMIT 50;
 city_cnt | lang_cnt |                 name                  |          region           
----------+----------+---------------------------------------+---------------------------
        4 |        5 | Afghanistan                           | Southern and Central Asia
        1 |        3 | Albania                               | Southern Europe
       18 |        2 | Algeria                               | Northern Africa
        5 |        9 | Angola                                | Central Africa
        1 |        2 | Antigua and Barbuda                   | Caribbean
       57 |        3 | Argentina                             | South America
        3 |        2 | Armenia                               | Middle East
       14 |        8 | Australia                             | Australia and New Zealand
        6 |        8 | Austria                               | Western Europe
        4 |        4 | Azerbaijan                            | Middle East
        1 |        2 | Bahamas                               | Caribbean
        1 |        2 | Bahrain                               | Middle East
       24 |        7 | Bangladesh                            | Southern and Central Asia
        1 |        2 | Barbados                              | Caribbean
       16 |        4 | Belarus                               | Eastern Europe
        9 |        6 | Belgium                               | Western Europe
        2 |        4 | Belize                                | Central America
        4 |        7 | Benin                                 | Western Africa
        1 |        3 | Bhutan                                | Southern and Central Asia
        8 |        4 | Bolivia                               | South America
        3 |        1 | Bosnia and Herzegovina                | Southern Europe
        2 |        5 | Botswana                              | Southern Africa
      250 |        5 | Brazil                                | South America
        1 |        4 | Brunei                                | Southeast Asia
       10 |        4 | Bulgaria                              | Eastern Europe
        3 |        6 | Burkina Faso                          | Western Africa
        1 |        3 | Burundi                               | Eastern Africa
        3 |        4 | Cambodia                              | Southeast Asia
        7 |        8 | Cameroon                              | Central Africa
       49 |       12 | Canada                                | North America
        1 |        2 | Cape Verde                            | Western Africa
        1 |        6 | Central African Republic              | Central Africa
        2 |        8 | Chad                                  | Central Africa
       29 |        4 | Chile                                 | South America
       38 |        5 | Colombia                              | South America
        1 |        5 | Comoros                               | Eastern Africa
        2 |        6 | Congo                                 | Central Africa
       18 |       10 | Congo, The Democratic Republic of the | Central Africa
        1 |        4 | Costa Rica                            | Central America
        5 |        5 | Cote deIvoire                         | Western Africa
        4 |        2 | Croatia                               | Southern Europe
       14 |        1 | Cuba                                  | Caribbean
        2 |        2 | Cyprus                                | Middle East
       10 |        8 | Czech Republic                        | Eastern Europe
        1 |        3 | Djibouti                              | Eastern Africa
        1 |        2 | Dominica                              | Caribbean
        6 |        2 | Dominican Republic                    | Caribbean
       15 |        2 | Ecuador                               | South America
       37 |        2 | Egypt                                 | Northern Africa
        7 |        2 | El Salvador                           | Central America
(50 rows)

select city_cnt,lang_cnt,name,"REGION_POP","REGION_GNP",region from view_with_shared_scans where region = 'Eastern Europe';
 city_cnt | lang_cnt |        name        | REGION_POP | REGION_GNP |     region     
----------+----------+--------------------+------------+------------+----------------
       29 |        6 | Romania            |  307026000 |  659980.00 | Eastern Europe
       10 |        4 | Bulgaria           |  307026000 |  659980.00 | Eastern Europe
       16 |        4 | Belarus            |  307026000 |  659980.00 | Eastern Europe
       10 |        8 | Czech Republic     |  307026000 |  659980.00 | Eastern Europe
        9 |        6 | Hungary            |  307026000 |  659980.00 | Eastern Europe
        4 |        5 | Moldova            |  307026000 |  659980.00 | Eastern Europe
       44 |        4 | Poland             |  307026000 |  659980.00 | Eastern Europe
      189 |       12 | Russian Federation |  307026000 |  659980.00 | Eastern Europe
        3 |        5 | Slovakia           |  307026000 |  659980.00 | Eastern Europe
       57 |        7 | Ukraine            |  307026000 |  659980.00 | Eastern Europe
(10 rows)

drop view view_with_shared_scans;
-- start_ignore
drop table if exists tbl87;
NOTICE:  table "tbl87" does not exist, skipping
-- end_ignore
create table tbl87(code char(3), n numeric);
insert into tbl87 values ('abc',1);
insert into tbl87 values ('xyz',2);  
insert into tbl87 values ('def',3); 
with cte as 
	(
	select code, n, x 
	from tbl87 
	, (select 100 as x) d
	)
select code from tbl87 t where 1= (select count(*) from cte where cte.code::text=t.code::text or cte.code::text = t.code::text);
 code 
------
 abc
 xyz
 def
(3 rows)

                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: tbl87.code
   ->  Result
         Output: tbl87.code
         Filter: (1 = COALESCE((count()), '0'::bigint))
         ->  Hash Left Join
               Output: (count()), tbl87.code
               Hash Cond: ((tbl87.code)::text = (tbl87_1.code)::text)
               ->  PX Hash 6:6  (slice2; segments: 6)
                     Output: tbl87.code
                     Hash Key: (tbl87.code)::text
                     ->  Partial Seq Scan on qp_with_clause.tbl87
                           Output: tbl87.code
               ->  Hash
                     Output: tbl87_1.code, (count())
                     ->  PX Hash 6:6  (slice3; segments: 6)
                           Output: tbl87_1.code, (count())
                           Hash Key: (tbl87_1.code)::text
                           ->  GroupAggregate
                                 Output: tbl87_1.code, count()
                                 Group Key: tbl87_1.code
                                 ->  Sort
                                       Output: tbl87_1.code
                                       Sort Key: tbl87_1.code
                                       ->  PX Hash 6:6  (slice4; segments: 6)
                                             Output: tbl87_1.code
                                             Hash Key: tbl87_1.code
                                             ->  Nested Loop
                                                   Output: tbl87_1.code
                                                   Join Filter: true
                                                   ->  Partial Seq Scan on qp_with_clause.tbl87 tbl87_1
                                                         Output: tbl87_1.code
                                                   ->  Result
                                                         Output: 100
 Optimizer: PolarDB PX Optimizer
(35 rows)

with cte as
        (
        select count(*) from
        (
        select code, n, x
        from tbl87
        , (select 100 as x) d
        ) FOO
        )
select code from tbl87 t where 1= (select * from cte);
 code 
------
(0 rows)

                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: tbl87_1.code
   ->  Nested Loop
         Output: tbl87_1.code
         Join Filter: true
         ->  Partial Seq Scan on qp_with_clause.tbl87 tbl87_1
               Output: tbl87_1.code
         ->  Materialize
               ->  PX Broadcast 1:6  (slice2)
                     ->  Result
                           Filter: (1 = (count()))
                           ->  Aggregate
                                 Output: count()
                                 ->  PX Coordinator 6:1  (slice3; segments: 6)
                                       ->  Nested Loop
                                             Join Filter: true
                                             ->  Partial Seq Scan on qp_with_clause.tbl87
                                             ->  Result
                                                   Output: true
 Optimizer: PolarDB PX Optimizer
(20 rows)

with cte as
        (
        select count(*) from
        (
        select code, n, x
        from tbl87
        , (select 100 as x) d
        ) FOO
        )
select code from tbl87 t where 1= (select count(*) from cte);
 code 
------
 abc
 xyz
 def
(3 rows)

                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: tbl87_1.code
   ->  Nested Loop
         Output: tbl87_1.code
         Join Filter: true
         ->  Partial Seq Scan on qp_with_clause.tbl87 tbl87_1
               Output: tbl87_1.code
         ->  Materialize
               ->  PX Broadcast 1:6  (slice2)
                     ->  Result
                           Filter: (1 = (count()))
                           ->  Aggregate
                                 Output: count()
                                 ->  Aggregate
                                       Output: count()
                                       ->  PX Coordinator 6:1  (slice3; segments: 6)
                                             ->  Nested Loop
                                                   Join Filter: true
                                                   ->  Partial Seq Scan on qp_with_clause.tbl87
                                                   ->  Result
                                                         Output: true
 Optimizer: PolarDB PX Optimizer
(22 rows)

--start_ignore
drop table if exists foo;
NOTICE:  table "foo" does not exist, skipping
drop table if exists bar;
NOTICE:  table "bar" does not exist, skipping
drop table if exists emp;
NOTICE:  table "emp" does not exist, skipping
drop table if exists manager;
NOTICE:  table "manager" does not exist, skipping
--end_ignore
-------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE foo (key INTEGER, value INTEGER);
INSERT INTO foo SELECT i, i % 10 from generate_series(1, 100) i;
CREATE TABLE bar(bar_key INTEGER, bar_value INTEGER);
INSERT INTO bar SELECT i, i % 5 FROM generate_series(1, 1000) i;
SET enable_hashjoin = OFF;
SET enable_mergejoin = OFF;
SET enable_nestloop = ON;
-------------------
-- QUERY 1
-------------------
-- Query has WITH clause
-- WITH clause subquery used once 
-- The subquery in the WITH clause appears under a NLJ in the query plan
-- The sharing of CTE is disabled
--SET gp_cte_sharing = ON;
-- EXPLAIN
-- WITH o AS (SELECT * FROM foo AS o_key)
--     SELECT o.key, bar_value FROM o, bar
-- WHERE
-- o.key != bar_value
-- ORDER BY 1, 2 LIMIT 20;
WITH o AS (SELECT * FROM foo AS o_key)
    SELECT o.key, bar_value FROM o, bar
WHERE
o.key != bar_value
ORDER BY 1, 2 LIMIT 20;
 key | bar_value 
-----+-----------
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
(20 rows)

                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort
   Output: foo.key, bar.bar_value
   Sort Key: foo.key, bar.bar_value
   ->  Limit
         Output: foo.key, bar.bar_value
         ->  PX Coordinator 6:1  (slice1; segments: 6)
               Output: foo.key, bar.bar_value
               Merge Key: foo.key, bar.bar_value
               ->  Limit
                     Output: foo.key, bar.bar_value
                     ->  Sort
                           Output: foo.key, bar.bar_value
                           Sort Key: foo.key, bar.bar_value
                           ->  Nested Loop
                                 Output: foo.key, bar.bar_value
                                 Join Filter: (foo.key <> bar.bar_value)
                                 ->  PX Broadcast 6:6  (slice2; segments: 6)
                                       Output: foo.key
                                       ->  Partial Seq Scan on qp_with_clause.foo
                                             Output: foo.key
                                 ->  Partial Seq Scan on qp_with_clause.bar
                                       Output: bar.bar_value
 Optimizer: PolarDB PX Optimizer
(23 rows)

-------------------
-- Query 2, Query 3 
-------------------
-- Query has WITH clause
-- Subquery using WITH clause multiple times
-- The subquery in the WITH clause appears under a NLJ in the query plan
-- The sharing of CTE is enabled
--SET gp_cte_sharing = ON;
--EXPLAIN 
--WITH o AS (SELECT * FROM foo AS o_key)
--    SELECT o1.key, o2.value FROM o o1, o o2 
--    WHERE o1.key != o2.value ORDER BY 1, 2 DESC LIMIT 100;
explain (costs off)
WITH o AS (SELECT * FROM foo AS o_key)
   SELECT o1.key, o2.value FROM o o1, o o2 
   WHERE o1.key != o2.value ORDER BY 1, 2 DESC LIMIT 100;
                   QUERY PLAN                    
-------------------------------------------------
 Limit
   CTE o
     ->  Seq Scan on foo o_key
   ->  Sort
         Sort Key: o1.key, o2.value DESC
         ->  Nested Loop
               Join Filter: (o1.key <> o2.value)
               ->  CTE Scan on o o1
               ->  CTE Scan on o o2
(9 rows)

-- EXPLAIN
-- WITH o AS (SELECT * FROM foo),
--      n AS (SELECT * FROM foo)
-- SELECT o.key , n.value 
-- FROM 
-- o JOIN n ON o.key = n.key
-- WHERE 
-- o.key != n.value
-- ORDER BY 1, 2;
explain (costs off)
WITH o AS (SELECT * FROM foo),
     n AS (SELECT * FROM foo)
SELECT o.key , n.value 
FROM 
o JOIN n ON o.key = n.key
WHERE 
o.key != n.value
ORDER BY 1, 2;
                          QUERY PLAN                           
---------------------------------------------------------------
 Sort
   Sort Key: o.key, n.value
   CTE o
     ->  Seq Scan on foo
   CTE n
     ->  Seq Scan on foo foo_1
   ->  Nested Loop
         Join Filter: ((o.key <> n.value) AND (o.key = n.key))
         ->  CTE Scan on o
         ->  CTE Scan on n
(10 rows)

-------------------
-- Query 4, Query 5
-------------------
-- Query has WITH clause
-- Subquery with nested WITH clause appears under a NLJ in the query plan
-- The sharing of CTE is enabled
--SET gp_cte_sharing = ON;
--EXPLAIN
--WITH o AS (SELECT * FROM foo AS o_key),
--m AS (SELECT * FROM o WHERE o.key < 50)
--    SELECT m.key, bar_value FROM m, bar
--WHERE
--m.key != bar_value
--ORDER BY 1, 2 LIMIT 20;
WITH o AS (SELECT * FROM foo AS o_key),
m AS (SELECT * FROM o WHERE o.key < 50)
    SELECT m.key, bar_value FROM m, bar
WHERE
m.key != bar_value
ORDER BY 1, 2 LIMIT 20;
 key | bar_value 
-----+-----------
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
   1 |         0
(20 rows)

                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort
   Output: foo.key, bar.bar_value
   Sort Key: foo.key, bar.bar_value
   ->  Limit
         Output: foo.key, bar.bar_value
         ->  PX Coordinator 6:1  (slice1; segments: 6)
               Output: foo.key, bar.bar_value
               Merge Key: foo.key, bar.bar_value
               ->  Limit
                     Output: foo.key, bar.bar_value
                     ->  Sort
                           Output: foo.key, bar.bar_value
                           Sort Key: foo.key, bar.bar_value
                           ->  Nested Loop
                                 Output: foo.key, bar.bar_value
                                 Join Filter: (foo.key <> bar.bar_value)
                                 ->  PX Broadcast 6:6  (slice2; segments: 6)
                                       Output: foo.key
                                       ->  Partial Seq Scan on qp_with_clause.foo
                                             Output: foo.key
                                             Filter: (foo.key < 50)
                                 ->  Partial Seq Scan on qp_with_clause.bar
                                       Output: bar.bar_value
 Optimizer: PolarDB PX Optimizer
(24 rows)

-- EXPLAIN 
-- WITH o AS (SELECT * FROM foo AS o_key),
-- m AS (SELECT * from o WHERE o.key < 50)
--     SELECT m1.key, m2.value FROM m m1, m m2
--     WHERE m1.key != m2.value
--     ORDER BY 1, 2 DESC LIMIT 100;
WITH o AS (SELECT * FROM foo AS o_key),
m AS (SELECT * from o WHERE o.key < 50)
    SELECT m1.key, m2.value FROM m m1, m m2
    WHERE m1.key != m2.value
    ORDER BY 1, 2 DESC LIMIT 100;
 key | value 
-----+-------
   1 |     9
   1 |     9
   1 |     9
   1 |     9
   1 |     9
   1 |     8
   1 |     8
   1 |     8
   1 |     8
   1 |     8
   1 |     7
   1 |     7
   1 |     7
   1 |     7
   1 |     7
   1 |     6
   1 |     6
   1 |     6
   1 |     6
   1 |     6
   1 |     5
   1 |     5
   1 |     5
   1 |     5
   1 |     5
   1 |     4
   1 |     4
   1 |     4
   1 |     4
   1 |     4
   1 |     3
   1 |     3
   1 |     3
   1 |     3
   1 |     3
   1 |     2
   1 |     2
   1 |     2
   1 |     2
   1 |     2
   1 |     0
   1 |     0
   1 |     0
   1 |     0
   2 |     9
   2 |     9
   2 |     9
   2 |     9
   2 |     9
   2 |     8
   2 |     8
   2 |     8
   2 |     8
   2 |     8
   2 |     7
   2 |     7
   2 |     7
   2 |     7
   2 |     7
   2 |     6
   2 |     6
   2 |     6
   2 |     6
   2 |     6
   2 |     5
   2 |     5
   2 |     5
   2 |     5
   2 |     5
   2 |     4
   2 |     4
   2 |     4
   2 |     4
   2 |     4
   2 |     3
   2 |     3
   2 |     3
   2 |     3
   2 |     3
   2 |     1
   2 |     1
   2 |     1
   2 |     1
   2 |     1
   2 |     0
   2 |     0
   2 |     0
   2 |     0
   3 |     9
   3 |     9
   3 |     9
   3 |     9
   3 |     9
   3 |     8
   3 |     8
   3 |     8
   3 |     8
   3 |     8
   3 |     7
   3 |     7
(100 rows)

                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share1_ref3.key, share1_ref2.value
   Merge Key: share1_ref3.key, share1_ref2.value
   ->  Sort
         Output: share1_ref3.key, share1_ref2.value
         Sort Key: share1_ref3.key, share1_ref2.value DESC
         ->  Sequence
               Output: share1_ref3.key, share1_ref2.value
               ->  Shared Scan (Producer; slice1; share1)
                     Output: share1_ref1.key, share1_ref1.value
                     ->  Partial Seq Scan on qp_with_clause.foo
                           Output: foo.key, foo.value
                           Filter: (foo.key < 50)
               ->  PX Hash 1:6  (slice2)
                     Output: share1_ref3.key, share1_ref2.value
                     ->  Limit
                           Output: share1_ref3.key, share1_ref2.value
                           ->  PX Coordinator 6:1  (slice3; segments: 6)
                                 Output: share1_ref3.key, share1_ref2.value
                                 Merge Key: share1_ref3.key, share1_ref2.value
                                 ->  Limit
                                       Output: share1_ref3.key, share1_ref2.value
                                       ->  Sort
                                             Output: share1_ref3.key, share1_ref2.value
                                             Sort Key: share1_ref3.key, share1_ref2.value DESC
                                             ->  Nested Loop
                                                   Output: share1_ref3.key, share1_ref2.value
                                                   Join Filter: (share1_ref3.key <> share1_ref2.value)
                                                   ->  Shared Scan (Consumer; slice3; share1)
                                                         Output: share1_ref3.key, share1_ref3.value
                                                   ->  Materialize
                                                         Output: share1_ref2.value
                                                         ->  PX Broadcast 6:6  (slice4; segments: 6)
                                                               Output: share1_ref2.value
                                                               ->  Result
                                                                     Output: share1_ref2.value
                                                                     ->  Shared Scan (Consumer; slice4; share1)
                                                                           Output: share1_ref2.key, share1_ref2.value
 Optimizer: PolarDB PX Optimizer
(39 rows)

-------------------
-- Query 6, Query 7
-------------------
-- Query has WITH clause
-- Subquery with nested WITH clause appears under a NLJ in the query plan
-- Nested WITH clause involves join in query plan
-- The sharing of CTE is enabled
--SET gp_cte_sharing = ON;
--EXPLAIN 
--WITH o AS (SELECT * FROM foo AS o_key),
--m AS (SELECT * FROM o join bar ON o.key < bar_value) 
--    SELECT m.value, m.bar_key, bar.bar_value 
--    FROM m, bar
--    WHERE m.bar_key = bar.bar_value
--    ORDER BY 2, 1 DESC LIMIT 100;
explain (costs off)
WITH o AS (SELECT * FROM foo AS o_key),
m AS (SELECT * FROM o join bar ON o.key < bar_value)
    SELECT m1.key, m2.value FROM m m1, m m2
    WHERE m1.key != m2.value
    ORDER BY 1, 2 DESC LIMIT 100;
                   QUERY PLAN                    
-------------------------------------------------
 Limit
   CTE o
     ->  Seq Scan on foo o_key
   CTE m
     ->  Nested Loop
           Join Filter: (o.key < bar.bar_value)
           ->  CTE Scan on o
           ->  Materialize
                 ->  Seq Scan on bar
   ->  Sort
         Sort Key: m1.key, m2.value DESC
         ->  Nested Loop
               Join Filter: (m1.key <> m2.value)
               ->  CTE Scan on m m1
               ->  CTE Scan on m m2
(15 rows)

-------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE emp (ename CHARACTER VARYING(50), empno INTEGER, mgr INTEGER, deptno INTEGER);
INSERT INTO emp SELECT i || 'NAME', i, i%6, i%16 FROM generate_series(1, 100) i;
CREATE TABLE manager (dept_mgr_no INTEGER);
INSERT INTO manager SELECT i FROM generate_series(1, 100) i;
SET enable_hashjoin = OFF;
SET enable_mergejoin = OFF;
SET enable_nestloop = ON;
-------------------
-- Query 8
-------------------
-- The sharing of CTE is enabled
--SET gp_cte_sharing = ON;
--EXPLAIN
--WITH dept_count AS 
--    (SELECT deptno, COUNT(*) AS dept_count FROM emp 
--     GROUP BY deptno)                                                                                                                                                                                        SELECT e.ename AS employee_name, 
--       dc.dept_count AS emp_dept_count 
--FROM emp e, dept_count dc 
--WHERE  e.deptno = dc.deptno
--ORDER BY 1, 2 DESC LIMIT 20;
WITH dept_count AS 
    (SELECT deptno, COUNT(*) AS dept_count FROM emp 
     GROUP BY deptno)                                                                                                                                                                                        SELECT e.ename AS employee_name, 
       dc.dept_count AS emp_dept_count 
FROM emp e, dept_count dc 
WHERE  e.deptno = dc.deptno
ORDER BY 1, 2 DESC LIMIT 20;
 employee_name | emp_dept_count 
---------------+----------------
 100NAME       |              7
 10NAME        |              6
 11NAME        |              6
 12NAME        |              6
 13NAME        |              6
 14NAME        |              6
 15NAME        |              6
 16NAME        |              6
 17NAME        |              7
 18NAME        |              7
 19NAME        |              7
 1NAME         |              7
 20NAME        |              7
 21NAME        |              6
 22NAME        |              6
 23NAME        |              6
 24NAME        |              6
 25NAME        |              6
 26NAME        |              6
 27NAME        |              6
(20 rows)

                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort
   Output: emp.ename, (count())
   Sort Key: emp.ename, (count()) DESC
   ->  Limit
         Output: emp.ename, (count())
         ->  PX Coordinator 6:1  (slice1; segments: 6)
               Output: emp.ename, (count())
               Merge Key: emp.ename, (count())
               ->  Limit
                     Output: emp.ename, (count())
                     ->  Sort
                           Output: emp.ename, (count())
                           Sort Key: emp.ename, (count()) DESC
                           ->  Hash Join
                                 Output: emp.ename, (count())
                                 Hash Cond: (emp.deptno = emp_1.deptno)
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: emp.ename, emp.deptno
                                       Hash Key: emp.deptno
                                       ->  Partial Seq Scan on qp_with_clause.emp
                                             Output: emp.ename, emp.deptno
                                 ->  Hash
                                       Output: (count()), emp_1.deptno
                                       ->  GroupAggregate
                                             Output: count(), emp_1.deptno
                                             Group Key: emp_1.deptno
                                             ->  Sort
                                                   Output: emp_1.deptno
                                                   Sort Key: emp_1.deptno
                                                   ->  PX Hash 6:6  (slice3; segments: 6)
                                                         Output: emp_1.deptno
                                                         Hash Key: emp_1.deptno
                                                         ->  Partial Seq Scan on qp_with_clause.emp emp_1
                                                               Output: emp_1.deptno
 Optimizer: PolarDB PX Optimizer
(35 rows)

-------------------
-- Query 9
-------------------
-- The sharing of CTE is enabled
--SET gp_cte_sharing = ON;
--EXPLAIN
--WITH dept_count AS ( SELECT deptno, COUNT(*) AS dept_count 
--                     FROM emp 
--                     GROUP BY deptno)
--SELECT e.ename AS employee_name, 
--       dc1.dept_count AS emp_dept_count,
--       m.ename AS manager_name,
--       dc2.dept_count AS mgr_dept_count
--FROM emp e,
--     dept_count dc1, 
--     emp m, 
--     dept_count dc2 
--WHERE e.deptno = dc1.deptno AND
--      e.mgr = m.empno AND 
--      m.deptno = dc2.deptno
--ORDER BY 1, 2, 3, 4 DESC LIMIT 25;
WITH dept_count AS ( SELECT deptno, COUNT(*) AS dept_count 
                     FROM emp 
                     GROUP BY deptno)
SELECT e.ename AS employee_name, 
       dc1.dept_count AS emp_dept_count,
       m.ename AS manager_name,
       dc2.dept_count AS mgr_dept_count
FROM emp e,
     dept_count dc1, 
     emp m, 
     dept_count dc2 
WHERE e.deptno = dc1.deptno AND
      e.mgr = m.empno AND 
      m.deptno = dc2.deptno
ORDER BY 1, 2, 3, 4 DESC LIMIT 25;
 employee_name | emp_dept_count | manager_name | mgr_dept_count 
---------------+----------------+--------------+----------------
 100NAME       |              7 | 4NAME        |              7
 10NAME        |              6 | 4NAME        |              7
 11NAME        |              6 | 5NAME        |              6
 13NAME        |              6 | 1NAME        |              7
 14NAME        |              6 | 2NAME        |              7
 15NAME        |              6 | 3NAME        |              7
 16NAME        |              6 | 4NAME        |              7
 17NAME        |              7 | 5NAME        |              6
 19NAME        |              7 | 1NAME        |              7
 1NAME         |              7 | 1NAME        |              7
 20NAME        |              7 | 2NAME        |              7
 21NAME        |              6 | 3NAME        |              7
 22NAME        |              6 | 4NAME        |              7
 23NAME        |              6 | 5NAME        |              6
 25NAME        |              6 | 1NAME        |              7
 26NAME        |              6 | 2NAME        |              7
 27NAME        |              6 | 3NAME        |              7
 28NAME        |              6 | 4NAME        |              7
 29NAME        |              6 | 5NAME        |              6
 2NAME         |              7 | 2NAME        |              7
 31NAME        |              6 | 1NAME        |              7
 32NAME        |              6 | 2NAME        |              7
 33NAME        |              7 | 3NAME        |              7
 34NAME        |              7 | 4NAME        |              7
 35NAME        |              7 | 5NAME        |              6
(25 rows)

                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: emp_1.ename, share0_ref3.dept_count, emp_2.ename, share0_ref2.dept_count
   Merge Key: emp_1.ename, share0_ref3.dept_count, emp_2.ename, share0_ref2.dept_count
   ->  Sort
         Output: emp_1.ename, share0_ref3.dept_count, emp_2.ename, share0_ref2.dept_count
         Sort Key: emp_1.ename, share0_ref3.dept_count, emp_2.ename, share0_ref2.dept_count DESC
         ->  Sequence
               Output: emp_1.ename, share0_ref3.dept_count, emp_2.ename, share0_ref2.dept_count
               ->  Shared Scan (Producer; slice1; share0)
                     Output: share0_ref1.deptno, share0_ref1.dept_count
                     ->  GroupAggregate
                           Output: emp.deptno, count()
                           Group Key: emp.deptno
                           ->  Sort
                                 Output: emp.deptno
                                 Sort Key: emp.deptno
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: emp.deptno
                                       Hash Key: emp.deptno
                                       ->  Partial Seq Scan on qp_with_clause.emp
                                             Output: emp.deptno
               ->  PX Hash 1:6  (slice3)
                     Output: emp_1.ename, share0_ref3.dept_count, emp_2.ename, share0_ref2.dept_count
                     ->  Limit
                           Output: emp_1.ename, share0_ref3.dept_count, emp_2.ename, share0_ref2.dept_count
                           ->  PX Coordinator 6:1  (slice4; segments: 6)
                                 Output: emp_1.ename, share0_ref3.dept_count, emp_2.ename, share0_ref2.dept_count
                                 Merge Key: emp_1.ename, share0_ref3.dept_count, emp_2.ename, share0_ref2.dept_count
                                 ->  Limit
                                       Output: emp_1.ename, share0_ref3.dept_count, emp_2.ename, share0_ref2.dept_count
                                       ->  Sort
                                             Output: emp_1.ename, share0_ref3.dept_count, emp_2.ename, share0_ref2.dept_count
                                             Sort Key: emp_1.ename, share0_ref3.dept_count, emp_2.ename, share0_ref2.dept_count DESC
                                             ->  Hash Join
                                                   Output: emp_1.ename, share0_ref3.dept_count, emp_2.ename, share0_ref2.dept_count
                                                   Hash Cond: (emp_2.deptno = share0_ref2.deptno)
                                                   ->  PX Hash 6:6  (slice5; segments: 6)
                                                         Output: emp_1.ename, share0_ref3.dept_count, emp_2.ename, emp_2.deptno
                                                         Hash Key: emp_2.deptno
                                                         ->  Hash Join
                                                               Output: emp_1.ename, share0_ref3.dept_count, emp_2.ename, emp_2.deptno
                                                               Hash Cond: (emp_1.mgr = emp_2.empno)
                                                               ->  PX Hash 6:6  (slice6; segments: 6)
                                                                     Output: emp_1.ename, emp_1.mgr, share0_ref3.dept_count
                                                                     Hash Key: emp_1.mgr
                                                                     ->  Hash Join
                                                                           Output: emp_1.ename, emp_1.mgr, share0_ref3.dept_count
                                                                           Hash Cond: (emp_1.deptno = share0_ref3.deptno)
                                                                           ->  PX Hash 6:6  (slice7; segments: 6)
                                                                                 Output: emp_1.ename, emp_1.mgr, emp_1.deptno
                                                                                 Hash Key: emp_1.deptno
                                                                                 ->  Partial Seq Scan on qp_with_clause.emp emp_1
                                                                                       Output: emp_1.ename, emp_1.mgr, emp_1.deptno
                                                                           ->  Hash
                                                                                 Output: share0_ref3.deptno, share0_ref3.dept_count
                                                                                 ->  Shared Scan (Consumer; slice6; share0)
                                                                                       Output: share0_ref3.deptno, share0_ref3.dept_count
                                                               ->  Hash
                                                                     Output: emp_2.ename, emp_2.empno, emp_2.deptno
                                                                     ->  PX Hash 6:6  (slice8; segments: 6)
                                                                           Output: emp_2.ename, emp_2.empno, emp_2.deptno
                                                                           Hash Key: emp_2.empno
                                                                           ->  Partial Seq Scan on qp_with_clause.emp emp_2
                                                                                 Output: emp_2.ename, emp_2.empno, emp_2.deptno
                                                   ->  Hash
                                                         Output: share0_ref2.deptno, share0_ref2.dept_count
                                                         ->  Shared Scan (Consumer; slice4; share0)
                                                               Output: share0_ref2.deptno, share0_ref2.dept_count
 Optimizer: PolarDB PX Optimizer
(69 rows)

-------------------
-- Query 10
-------------------
-- The sharing of CTE is enabled
--SET gp_cte_sharing = ON;
--EXPLAIN
--WITH dept_count AS 
--    (SELECT deptno, COUNT(*) AS dept_count 
--    FROM emp 
--    GROUP BY deptno)                                                                                                                                                                                        SELECT e.ename AS employee_name, 
--       dc1.dept_count AS emp_dept_count,
--       m.ename AS manager_name
--FROM emp e,
--     dept_count dc1, emp m
--WHERE  e.deptno = dc1.deptno AND
--       e.mgr = m.empno
--ORDER BY 1, 2, 3 ASC LIMIT 20;
WITH dept_count AS 
    (SELECT deptno, COUNT(*) AS dept_count 
    FROM emp 
    GROUP BY deptno)                                                                                                                                                                                        SELECT e.ename AS employee_name, 
       dc1.dept_count AS emp_dept_count,
       m.ename AS manager_name
FROM emp e,
     dept_count dc1, emp m
WHERE  e.deptno = dc1.deptno AND
       e.mgr = m.empno
ORDER BY 1, 2, 3 ASC LIMIT 20;
 employee_name | emp_dept_count | manager_name 
---------------+----------------+--------------
 100NAME       |              7 | 4NAME
 10NAME        |              6 | 4NAME
 11NAME        |              6 | 5NAME
 13NAME        |              6 | 1NAME
 14NAME        |              6 | 2NAME
 15NAME        |              6 | 3NAME
 16NAME        |              6 | 4NAME
 17NAME        |              7 | 5NAME
 19NAME        |              7 | 1NAME
 1NAME         |              7 | 1NAME
 20NAME        |              7 | 2NAME
 21NAME        |              6 | 3NAME
 22NAME        |              6 | 4NAME
 23NAME        |              6 | 5NAME
 25NAME        |              6 | 1NAME
 26NAME        |              6 | 2NAME
 27NAME        |              6 | 3NAME
 28NAME        |              6 | 4NAME
 29NAME        |              6 | 5NAME
 2NAME         |              7 | 2NAME
(20 rows)

                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort
   Output: emp.ename, (count()), emp_1.ename
   Sort Key: emp.ename, (count()), emp_1.ename
   ->  Limit
         Output: emp.ename, (count()), emp_1.ename
         ->  PX Coordinator 6:1  (slice1; segments: 6)
               Output: emp.ename, (count()), emp_1.ename
               Merge Key: emp.ename, (count()), emp_1.ename
               ->  Limit
                     Output: emp.ename, (count()), emp_1.ename
                     ->  Sort
                           Output: emp.ename, (count()), emp_1.ename
                           Sort Key: emp.ename, (count()), emp_1.ename
                           ->  Hash Join
                                 Output: emp.ename, (count()), emp_1.ename
                                 Hash Cond: (emp.deptno = emp_2.deptno)
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: emp.ename, emp.deptno, emp_1.ename
                                       Hash Key: emp.deptno
                                       ->  Hash Join
                                             Output: emp.ename, emp.deptno, emp_1.ename
                                             Hash Cond: (emp.mgr = emp_1.empno)
                                             ->  PX Hash 6:6  (slice3; segments: 6)
                                                   Output: emp.ename, emp.mgr, emp.deptno
                                                   Hash Key: emp.mgr
                                                   ->  Partial Seq Scan on qp_with_clause.emp
                                                         Output: emp.ename, emp.mgr, emp.deptno
                                             ->  Hash
                                                   Output: emp_1.ename, emp_1.empno
                                                   ->  PX Hash 6:6  (slice4; segments: 6)
                                                         Output: emp_1.ename, emp_1.empno
                                                         Hash Key: emp_1.empno
                                                         ->  Partial Seq Scan on qp_with_clause.emp emp_1
                                                               Output: emp_1.ename, emp_1.empno
                                 ->  Hash
                                       Output: (count()), emp_2.deptno
                                       ->  GroupAggregate
                                             Output: count(), emp_2.deptno
                                             Group Key: emp_2.deptno
                                             ->  Sort
                                                   Output: emp_2.deptno
                                                   Sort Key: emp_2.deptno
                                                   ->  PX Hash 6:6  (slice5; segments: 6)
                                                         Output: emp_2.deptno
                                                         Hash Key: emp_2.deptno
                                                         ->  Partial Seq Scan on qp_with_clause.emp emp_2
                                                               Output: emp_2.deptno
 Optimizer: PolarDB PX Optimizer
(48 rows)

-------------------
-- Query 11
-------------------
-- The sharing of CTE is enabled
--SET gp_cte_sharing = ON;
--EXPLAIN
--WITH dept_count AS (SELECT deptno, COUNT(*) AS dept_count 
--                    FROM emp 
--                    GROUP BY deptno),
--mgr_count AS (SELECT dept_mgr_no, COUNT(*) AS mgr_count
--              FROM manager
--              GROUP BY dept_mgr_no)
--SELECT e.ename AS employee_name, 
--       dc1.dept_count AS emp_dept_count,
--       m.ename AS manager_name,
--       dmc1.mgr_count AS mgr_dept_count
--FROM emp e,
--     dept_count dc1, emp m, 
--     mgr_count dmc1 
--WHERE  e.deptno = dc1.deptno AND
--       e.mgr = m.empno AND 
--       m.deptno = dmc1.dept_mgr_no
--ORDER BY 1, 2, 3, 4 DESC LIMIT 25;
WITH dept_count AS (SELECT deptno, COUNT(*) AS dept_count 
                    FROM emp 
                    GROUP BY deptno),
mgr_count AS (SELECT dept_mgr_no, COUNT(*) AS mgr_count
              FROM manager
              GROUP BY dept_mgr_no)
SELECT e.ename AS employee_name, 
       dc1.dept_count AS emp_dept_count,
       m.ename AS manager_name,
       dmc1.mgr_count AS mgr_dept_count
FROM emp e,
     dept_count dc1, emp m, 
     mgr_count dmc1 
WHERE  e.deptno = dc1.deptno AND
       e.mgr = m.empno AND 
       m.deptno = dmc1.dept_mgr_no
ORDER BY 1, 2, 3, 4 DESC LIMIT 25;
 employee_name | emp_dept_count | manager_name | mgr_dept_count 
---------------+----------------+--------------+----------------
 100NAME       |              7 | 4NAME        |              1
 10NAME        |              6 | 4NAME        |              1
 11NAME        |              6 | 5NAME        |              1
 13NAME        |              6 | 1NAME        |              1
 14NAME        |              6 | 2NAME        |              1
 15NAME        |              6 | 3NAME        |              1
 16NAME        |              6 | 4NAME        |              1
 17NAME        |              7 | 5NAME        |              1
 19NAME        |              7 | 1NAME        |              1
 1NAME         |              7 | 1NAME        |              1
 20NAME        |              7 | 2NAME        |              1
 21NAME        |              6 | 3NAME        |              1
 22NAME        |              6 | 4NAME        |              1
 23NAME        |              6 | 5NAME        |              1
 25NAME        |              6 | 1NAME        |              1
 26NAME        |              6 | 2NAME        |              1
 27NAME        |              6 | 3NAME        |              1
 28NAME        |              6 | 4NAME        |              1
 29NAME        |              6 | 5NAME        |              1
 2NAME         |              7 | 2NAME        |              1
 31NAME        |              6 | 1NAME        |              1
 32NAME        |              6 | 2NAME        |              1
 33NAME        |              7 | 3NAME        |              1
 34NAME        |              7 | 4NAME        |              1
 35NAME        |              7 | 5NAME        |              1
(25 rows)

                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: emp.ename, (count()), emp_2.ename, (count())
   Sort Key: emp.ename, (count()), emp_2.ename, (count()) DESC
   ->  Limit
         Output: emp.ename, (count()), emp_2.ename, (count())
         ->  PX Coordinator 6:1  (slice1; segments: 6)
               Output: emp.ename, (count()), emp_2.ename, (count())
               Merge Key: emp.ename, (count()), emp_2.ename, (count())
               ->  Limit
                     Output: emp.ename, (count()), emp_2.ename, (count())
                     ->  Sort
                           Output: emp.ename, (count()), emp_2.ename, (count())
                           Sort Key: emp.ename, (count()), emp_2.ename, (count()) DESC
                           ->  Hash Join
                                 Output: emp.ename, (count()), emp_2.ename, (count())
                                 Hash Cond: (emp_2.deptno = manager.dept_mgr_no)
                                 ->  PX Hash 6:6  (slice2; segments: 6)
                                       Output: emp.ename, (count()), emp_2.ename, emp_2.deptno
                                       Hash Key: emp_2.deptno
                                       ->  Hash Join
                                             Output: emp.ename, (count()), emp_2.ename, emp_2.deptno
                                             Hash Cond: (emp.mgr = emp_2.empno)
                                             ->  PX Hash 6:6  (slice3; segments: 6)
                                                   Output: emp.ename, emp.mgr, (count())
                                                   Hash Key: emp.mgr
                                                   ->  Hash Join
                                                         Output: emp.ename, emp.mgr, (count())
                                                         Hash Cond: (emp.deptno = emp_1.deptno)
                                                         ->  PX Hash 6:6  (slice4; segments: 6)
                                                               Output: emp.ename, emp.mgr, emp.deptno
                                                               Hash Key: emp.deptno
                                                               ->  Partial Seq Scan on qp_with_clause.emp
                                                                     Output: emp.ename, emp.mgr, emp.deptno
                                                         ->  Hash
                                                               Output: (count()), emp_1.deptno
                                                               ->  GroupAggregate
                                                                     Output: count(), emp_1.deptno
                                                                     Group Key: emp_1.deptno
                                                                     ->  Sort
                                                                           Output: emp_1.deptno
                                                                           Sort Key: emp_1.deptno
                                                                           ->  PX Hash 6:6  (slice5; segments: 6)
                                                                                 Output: emp_1.deptno
                                                                                 Hash Key: emp_1.deptno
                                                                                 ->  Partial Seq Scan on qp_with_clause.emp emp_1
                                                                                       Output: emp_1.deptno
                                             ->  Hash
                                                   Output: emp_2.ename, emp_2.empno, emp_2.deptno
                                                   ->  PX Hash 6:6  (slice6; segments: 6)
                                                         Output: emp_2.ename, emp_2.empno, emp_2.deptno
                                                         Hash Key: emp_2.empno
                                                         ->  Partial Seq Scan on qp_with_clause.emp emp_2
                                                               Output: emp_2.ename, emp_2.empno, emp_2.deptno
                                 ->  Hash
                                       Output: (count()), manager.dept_mgr_no
                                       ->  GroupAggregate
                                             Output: count(), manager.dept_mgr_no
                                             Group Key: manager.dept_mgr_no
                                             ->  Sort
                                                   Output: manager.dept_mgr_no
                                                   Sort Key: manager.dept_mgr_no
                                                   ->  PX Hash 6:6  (slice7; segments: 6)
                                                         Output: manager.dept_mgr_no
                                                         Hash Key: manager.dept_mgr_no
                                                         ->  Partial Seq Scan on qp_with_clause.manager
                                                               Output: manager.dept_mgr_no
 Optimizer: PolarDB PX Optimizer
(67 rows)

-- Test that SharedInputScan within the same slice is always executed 
----set gp_cte_sharing=on;
-- start_ignore
CREATE TABLE car (a int, b int);
CREATE TABLE zoo (c int, d int);
insert into car select i, (i+1) from generate_series(1,10) i;
insert into zoo values (4,4);
-- end_ignore
WITH c as (SELECT sum(a) as a_sum, b FROM car GROUP BY b)
SELECT * FROM c as c1, zoo WHERE zoo.c != 4 AND c1.b = zoo.c
UNION ALL
SELECT * FROM c as c1, zoo WHERE zoo.c = c1.b;
 a_sum | b | c | d 
-------+---+---+---
     3 | 4 | 4 | 4
(1 row)

                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 PX Coordinator 6:1  (slice1; segments: 6)
   Output: share0_ref2.a_sum, share0_ref2.b, zoo.c, zoo.d
   ->  Sequence
         Output: share0_ref2.a_sum, share0_ref2.b, zoo.c, zoo.d
         ->  Shared Scan (Producer; slice1; share0)
               Output: share0_ref1.a_sum, share0_ref1.b
               ->  GroupAggregate
                     Output: sum(car.a), car.b
                     Group Key: car.b
                     ->  Sort
                           Output: car.a, car.b
                           Sort Key: car.b
                           ->  PX Hash 6:6  (slice2; segments: 6)
                                 Output: car.a, car.b
                                 Hash Key: car.b
                                 ->  Partial Seq Scan on qp_with_clause.car
                                       Output: car.a, car.b
         ->  Append
               ->  Hash Join
                     Output: share0_ref2.a_sum, share0_ref2.b, zoo.c, zoo.d
                     Hash Cond: (share0_ref2.b = zoo.c)
                     ->  Result
                           Output: share0_ref2.a_sum, share0_ref2.b
                           Filter: (share0_ref2.b <> ALL ('{4}'::integer[]))
                           ->  Shared Scan (Producer; slice1; share0)
                                 Output: share0_ref2.a_sum, share0_ref2.b
                     ->  Hash
                           Output: zoo.c, zoo.d
                           ->  PX Broadcast 6:6  (slice3; segments: 6)
                                 Output: zoo.c, zoo.d
                                 ->  Partial Seq Scan on qp_with_clause.zoo
                                       Output: zoo.c, zoo.d
                                       Filter: ((zoo.c <> 4) AND (zoo.c <> ALL ('{4}'::integer[])))
               ->  Hash Join
                     Output: share0_ref3.a_sum, share0_ref3.b, zoo_1.c, zoo_1.d
                     Hash Cond: (share0_ref3.b = zoo_1.c)
                     ->  Shared Scan (Producer; slice1; share0)
                           Output: share0_ref3.a_sum, share0_ref3.b
                     ->  Hash
                           Output: zoo_1.c, zoo_1.d
                           ->  PX Broadcast 6:6  (slice4; segments: 6)
                                 Output: zoo_1.c, zoo_1.d
                                 ->  Partial Seq Scan on qp_with_clause.zoo zoo_1
                                       Output: zoo_1.c, zoo_1.d
 Optimizer: PolarDB PX Optimizer
(45 rows)

-- start_ignore
set client_min_messages='warning';
drop schema qp_with_clause cascade;
-- end_ignore
