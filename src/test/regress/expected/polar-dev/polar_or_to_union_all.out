create table unionor_t1 (a int, b int);
create table unionor_t2 (a int, b int);
create table unionor_t3 (a int, b int);
insert into unionor_t1 values (1, 1), (1, 1);
insert into unionor_t2 values (1, 1), (1, 2);
insert into unionor_t3 values (1, 1), (1, 2);
set polar_enable_convert_or_to_union_all = off;
select * from unionor_t1 t1, unionor_t2 t2 where t1.a = t2.a and (t1.a = 1 or t2.b = 2);
 a | b | a | b 
---+---+---+---
 1 | 1 | 1 | 1
 1 | 1 | 1 | 2
 1 | 1 | 1 | 1
 1 | 1 | 1 | 2
(4 rows)

explain (costs false) select * from unionor_t1 t1, unionor_t2 t2 where t1.a = t2.a and (t1.a = 1 or t2.b = 2);
                QUERY PLAN                 
-------------------------------------------
 Merge Join
   Merge Cond: (t1.a = t2.a)
   Join Filter: ((t1.a = 1) OR (t2.b = 2))
   ->  Sort
         Sort Key: t1.a
         ->  Seq Scan on unionor_t1 t1
   ->  Sort
         Sort Key: t2.a
         ->  Seq Scan on unionor_t2 t2
(9 rows)

set polar_enable_convert_or_to_union_all = on;
select * from unionor_t1 t1, unionor_t2 t2 where t1.a = t2.a and (t1.a = 1 or t2.b = 2);
 a | b | a | b 
---+---+---+---
 1 | 1 | 1 | 1
 1 | 1 | 1 | 2
 1 | 1 | 1 | 1
 1 | 1 | 1 | 2
(4 rows)

explain (costs false) select * from unionor_t1 t1, unionor_t2 t2 where t1.a = t2.a and (t1.a = 1 or t2.b = 2);
                         QUERY PLAN                         
------------------------------------------------------------
 Append
   ->  Nested Loop
         ->  Seq Scan on unionor_t1 t1
               Filter: (a = 1)
         ->  Materialize
               ->  Seq Scan on unionor_t2 t2
                     Filter: (a = 1)
   ->  Hash Join
         Hash Cond: (t1.a = t2.a)
         ->  Seq Scan on unionor_t1 t1
               Filter: ((NOT (a = 1)) OR ((a = 1) IS NULL))
         ->  Hash
               ->  Seq Scan on unionor_t2 t2
                     Filter: (b = 2)
(14 rows)

-- testing cost base plan selection
insert into unionor_t1 select generate_series(3, 10000), generate_series(3, 10000);
insert into unionor_t2 select generate_series(3, 10000), generate_series(3, 10000);
insert into unionor_t3 select generate_series(3, 10000), generate_series(3, 10000);
create index idx_unionor_t1_a on unionor_t1(a);
create index idx_unionor_t2_a on unionor_t2(a);
create index idx_unionor_t3_a on unionor_t3(a);
analyze unionor_t1;
analyze unionor_t2;
analyze unionor_t3;
-- union all plan
explain (costs false) select * from unionor_t1 t1, unionor_t2 t2 where t1.a = t2.a and (t1.a = 5000 or t2.a = 5000);
                            QUERY PLAN                            
------------------------------------------------------------------
 Append
   ->  Nested Loop
         ->  Index Scan using idx_unionor_t1_a on unionor_t1 t1
               Index Cond: (a = 5000)
         ->  Index Scan using idx_unionor_t2_a on unionor_t2 t2
               Index Cond: (a = 5000)
   ->  Nested Loop
         ->  Index Scan using idx_unionor_t1_a on unionor_t1 t1
               Index Cond: (a = 5000)
               Filter: ((NOT (a = 5000)) OR ((a = 5000) IS NULL))
         ->  Index Scan using idx_unionor_t2_a on unionor_t2 t2
               Index Cond: (a = 5000)
(12 rows)

-- join plan
explain (costs false) select * from unionor_t1 t1, unionor_t2 t2 where t1.a = t2.a and (t1.a > 5000 or t2.a > 5000);
                   QUERY PLAN                    
-------------------------------------------------
 Hash Join
   Hash Cond: (t1.a = t2.a)
   Join Filter: ((t1.a > 5000) OR (t2.a > 5000))
   ->  Seq Scan on unionor_t1 t1
   ->  Hash
         ->  Seq Scan on unionor_t2 t2
(6 rows)

-- for code coverage test
explain (costs false) select * from unionor_t1 t1, unionor_t2 t2 
where t1.a = t2.a and (t1.a = 5000 or t2.b = 5000 or t2.b + t1.a = 5000);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Hash Join
   Hash Cond: (t1.a = t2.a)
   Join Filter: ((t1.a = 5000) OR (t2.b = 5000) OR ((t2.b + t1.a) = 5000))
   ->  Seq Scan on unionor_t1 t1
   ->  Hash
         ->  Seq Scan on unionor_t2 t2
(6 rows)

explain (costs false) select * from unionor_t1 t1, unionor_t2 t2 
where t1.a = t2.a and (t1.a = 5000 or t2.b = 5000) and random() * 1000 > t1.a;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Hash Join
   Hash Cond: (t2.a = t1.a)
   Join Filter: ((t1.a = 5000) OR (t2.b = 5000))
   ->  Seq Scan on unionor_t2 t2
   ->  Hash
         ->  Seq Scan on unionor_t1 t1
               Filter: ((random() * '1000'::double precision) > (a)::double precision)
(7 rows)

explain (costs false) select count(*) from unionor_t1 t1 full join unionor_t2 t2 
on true where (t1.a = 5000 or t2.b = 5000);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate
   ->  Append
         ->  Nested Loop Left Join
               ->  Index Only Scan using idx_unionor_t1_a on unionor_t1 t1
                     Index Cond: (a = 5000)
               ->  Seq Scan on unionor_t2 t2
         ->  Nested Loop Left Join
               Filter: ((NOT (t1.a = 5000)) OR ((t1.a = 5000) IS NULL))
               ->  Seq Scan on unionor_t2 t2
                     Filter: (b = 5000)
               ->  Seq Scan on unionor_t1 t1
(11 rows)

explain (costs false) select * from unionor_t1 t1, unionor_t2 t2 
where t1.a = t2.a and (t1.a = 5000 or t2.a = 5000 or t1.a = 3000);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Append
   ->  Nested Loop
         ->  Bitmap Heap Scan on unionor_t1 t1
               Recheck Cond: ((a = 5000) OR (a = 3000))
               ->  BitmapOr
                     ->  Bitmap Index Scan on idx_unionor_t1_a
                           Index Cond: (a = 5000)
                     ->  Bitmap Index Scan on idx_unionor_t1_a
                           Index Cond: (a = 3000)
         ->  Index Scan using idx_unionor_t2_a on unionor_t2 t2
               Index Cond: (a = t1.a)
   ->  Nested Loop
         ->  Index Scan using idx_unionor_t1_a on unionor_t1 t1
               Index Cond: (a = 5000)
               Filter: ((NOT ((a = 5000) OR (a = 3000))) OR (((a = 5000) OR (a = 3000)) IS NULL))
         ->  Index Scan using idx_unionor_t2_a on unionor_t2 t2
               Index Cond: (a = 5000)
(17 rows)

-- additional test
explain (costs false) select * from unionor_t1 t1, unionor_t2 t2
where t1.a = t2.a and (t1.a = 5000 or t1.b = 2000 or t2.a = 5000);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Append
   ->  Nested Loop
         ->  Seq Scan on unionor_t1 t1
               Filter: ((a = 5000) OR (b = 2000))
         ->  Index Scan using idx_unionor_t2_a on unionor_t2 t2
               Index Cond: (a = t1.a)
   ->  Nested Loop
         ->  Index Scan using idx_unionor_t1_a on unionor_t1 t1
               Index Cond: (a = 5000)
               Filter: ((NOT ((a = 5000) OR (b = 2000))) OR (((a = 5000) OR (b = 2000)) IS NULL))
         ->  Index Scan using idx_unionor_t2_a on unionor_t2 t2
               Index Cond: (a = 5000)
(12 rows)

explain (costs false) select * from unionor_t1 t1, unionor_t2 t2
where t1.a = t2.a and (t1.a = 5000 or t2.a = 2000) and (t1.a = 5000 or t2.a=3000);
                            QUERY PLAN                            
------------------------------------------------------------------
 Append
   ->  Nested Loop
         Join Filter: ((t1.a = 5000) OR (t2.a = 3000))
         ->  Index Scan using idx_unionor_t1_a on unionor_t1 t1
               Index Cond: (a = 5000)
         ->  Index Scan using idx_unionor_t2_a on unionor_t2 t2
               Index Cond: (a = 5000)
   ->  Nested Loop
         Join Filter: ((t1.a = 5000) OR (t2.a = 3000))
         ->  Index Scan using idx_unionor_t1_a on unionor_t1 t1
               Index Cond: (a = 2000)
               Filter: ((NOT (a = 5000)) OR ((a = 5000) IS NULL))
         ->  Index Scan using idx_unionor_t2_a on unionor_t2 t2
               Index Cond: (a = 2000)
(14 rows)

explain (costs false) select * from unionor_t1 t1, unionor_t2 t2, unionor_t3 t3
where t1.a = t2.a and t2.a = t3.a and (t1.a = 1000 or t2.b = 2000 or t3.a = 3000);
                               QUERY PLAN                               
------------------------------------------------------------------------
 Append
   ->  Nested Loop
         ->  Nested Loop
               ->  Index Scan using idx_unionor_t1_a on unionor_t1 t1
                     Index Cond: (a = 1000)
               ->  Index Scan using idx_unionor_t2_a on unionor_t2 t2
                     Index Cond: (a = 1000)
         ->  Index Scan using idx_unionor_t3_a on unionor_t3 t3
               Index Cond: (a = 1000)
   ->  Nested Loop
         ->  Nested Loop
               ->  Seq Scan on unionor_t2 t2
                     Filter: (b = 2000)
               ->  Index Scan using idx_unionor_t1_a on unionor_t1 t1
                     Index Cond: (a = t2.a)
                     Filter: ((NOT (a = 1000)) OR ((a = 1000) IS NULL))
         ->  Index Scan using idx_unionor_t3_a on unionor_t3 t3
               Index Cond: (a = t1.a)
   ->  Nested Loop
         ->  Nested Loop
               ->  Index Scan using idx_unionor_t1_a on unionor_t1 t1
                     Index Cond: (a = 3000)
                     Filter: ((NOT (a = 1000)) OR ((a = 1000) IS NULL))
               ->  Index Scan using idx_unionor_t2_a on unionor_t2 t2
                     Index Cond: (a = 3000)
                     Filter: ((NOT (b = 2000)) OR ((b = 2000) IS NULL))
         ->  Index Scan using idx_unionor_t3_a on unionor_t3 t3
               Index Cond: (a = 3000)
(28 rows)

explain (costs false) select count(*) from unionor_t1 t1 full join unionor_t2 t2 on true full join unionor_t3 t3
on true where t1.a = t3.b and (t1.a = 1000 or t2.b = 2000 or t3.a = 3000);
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Aggregate
   ->  Append
         ->  Nested Loop Left Join
               ->  Nested Loop
                     ->  Index Only Scan using idx_unionor_t1_a on unionor_t1 t1
                           Index Cond: (a = 1000)
                     ->  Seq Scan on unionor_t3 t3
                           Filter: (b = 1000)
               ->  Seq Scan on unionor_t2 t2
         ->  Nested Loop
               ->  Seq Scan on unionor_t2 t2
                     Filter: (b = 2000)
               ->  Hash Join
                     Hash Cond: (t1.a = t3.b)
                     ->  Seq Scan on unionor_t1 t1
                           Filter: ((NOT (a = 1000)) OR ((a = 1000) IS NULL))
                     ->  Hash
                           ->  Seq Scan on unionor_t3 t3
         ->  Nested Loop Left Join
               Filter: ((NOT (t2.b = 2000)) OR ((t2.b = 2000) IS NULL))
               ->  Nested Loop
                     ->  Index Scan using idx_unionor_t3_a on unionor_t3 t3
                           Index Cond: (a = 3000)
                     ->  Index Only Scan using idx_unionor_t1_a on unionor_t1 t1
                           Index Cond: (a = t3.b)
                           Filter: ((NOT (a = 1000)) OR ((a = 1000) IS NULL))
               ->  Seq Scan on unionor_t2 t2
(27 rows)

-- result of union all
select * from unionor_t1 t1, unionor_t2 t2
where t1.a = t2.a and (t1.a = 5000 or t1.b = 2000 or t2.a = 5000);
  a   |  b   |  a   |  b   
------+------+------+------
 2000 | 2000 | 2000 | 2000
 5000 | 5000 | 5000 | 5000
(2 rows)

select * from unionor_t1 t1, unionor_t2 t2
where t1.a = t2.a and (t1.a = 5000 or t2.a = 2000) and (t1.a = 5000 or t2.a=3000);
  a   |  b   |  a   |  b   
------+------+------+------
 5000 | 5000 | 5000 | 5000
(1 row)

select * from unionor_t1 t1, unionor_t2 t2, unionor_t3 t3
where t1.a = t2.a and t2.a = t3.a and (t1.a = 1000 or t2.b = 2000 or t3.a = 3000);
  a   |  b   |  a   |  b   |  a   |  b   
------+------+------+------+------+------
 1000 | 1000 | 1000 | 1000 | 1000 | 1000
 2000 | 2000 | 2000 | 2000 | 2000 | 2000
 3000 | 3000 | 3000 | 3000 | 3000 | 3000
(3 rows)

select count(*) from unionor_t1 t1 full join unionor_t2 t2 on true full join unionor_t3 t3
on true where t1.a = t3.b and (t1.a = 1000 or t2.b = 2000 or t3.a = 3000);
 count 
-------
 29998
(1 row)

set polar_enable_convert_or_to_union_all = off;
-- result of join
select * from unionor_t1 t1, unionor_t2 t2
where t1.a = t2.a and (t1.a = 5000 or t1.b = 2000 or t2.a = 5000);
  a   |  b   |  a   |  b   
------+------+------+------
 2000 | 2000 | 2000 | 2000
 5000 | 5000 | 5000 | 5000
(2 rows)

select * from unionor_t1 t1, unionor_t2 t2
where t1.a = t2.a and (t1.a = 5000 or t2.a = 2000) and (t1.a = 5000 or t2.a=3000);
  a   |  b   |  a   |  b   
------+------+------+------
 5000 | 5000 | 5000 | 5000
(1 row)

select * from unionor_t1 t1, unionor_t2 t2, unionor_t3 t3
where t1.a = t2.a and t2.a = t3.a and (t1.a = 1000 or t2.b = 2000 or t3.a = 3000);
  a   |  b   |  a   |  b   |  a   |  b   
------+------+------+------+------+------
 1000 | 1000 | 1000 | 1000 | 1000 | 1000
 2000 | 2000 | 2000 | 2000 | 2000 | 2000
 3000 | 3000 | 3000 | 3000 | 3000 | 3000
(3 rows)

select count(*) from unionor_t1 t1 full join unionor_t2 t2 on true full join unionor_t3 t3
on true where t1.a = t3.b and (t1.a = 1000 or t2.b = 2000 or t3.a = 3000);
 count 
-------
 29998
(1 row)

drop table unionor_t1;
drop table unionor_t2;
drop table unionor_t3;
