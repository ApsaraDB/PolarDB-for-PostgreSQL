-- create regular user
create user t_user;
-- create polar_superuser
create user p_user with polar_superuser;
-- create event trigger function
\c - p_user;
create function test_event_trigger_for_polar() returns event_trigger as $$
BEGIN
    RAISE NOTICE 'test_event_trigger_for_polar: % %', tg_event, tg_tag;
END
$$ language plpgsql;
\c - postgres
create function test_event_trigger_for_super() returns event_trigger as $$
BEGIN
    RAISE NOTICE 'test_event_trigger_for_super: % %', tg_event, tg_tag;
END
$$ language plpgsql;
-- create event trigger 
--regular t_user
\c - t_user
-- failed not privileges
create event trigger polar_event_trigger on ddl_command_start
   execute procedure test_event_trigger_for_polar();
ERROR:  permission denied to create event trigger "polar_event_trigger"
HINT:  Must be superuser or polar_superuser to create an event trigger.
-- polar_superuser
\c - p_user
-- OK
create event trigger polar_event_trigger on ddl_command_start
   execute procedure test_event_trigger_for_polar();
-- success call trigger function
create table test(id int);
NOTICE:  test_event_trigger_for_polar: ddl_command_start CREATE TABLE
drop table test;
NOTICE:  test_event_trigger_for_polar: ddl_command_start DROP TABLE
--regular t_user
\c - t_user
-- success call trigger function
create table test(id int);
NOTICE:  test_event_trigger_for_polar: ddl_command_start CREATE TABLE
drop table test;
NOTICE:  test_event_trigger_for_polar: ddl_command_start DROP TABLE
-- superuser
\c - postgres
-- failed call trigger function
create table test(id int);
WARNING:  superuser don't call function "test_event_trigger_for_polar" .
HINT:  It's filtered , you can trigger them by set polar_super_trigger_all_event = true
drop table test;
WARNING:  superuser don't call function "test_event_trigger_for_polar" .
HINT:  It's filtered , you can trigger them by set polar_super_trigger_all_event = true
-- superuser create event trigger
create event trigger super_event_trigger on ddl_command_start
   execute procedure test_event_trigger_for_super();
--success call trigger function
create table test(id int);
WARNING:  superuser don't call function "test_event_trigger_for_polar" .
HINT:  It's filtered , you can trigger them by set polar_super_trigger_all_event = true
NOTICE:  test_event_trigger_for_super: ddl_command_start CREATE TABLE
drop table test;
WARNING:  superuser don't call function "test_event_trigger_for_polar" .
HINT:  It's filtered , you can trigger them by set polar_super_trigger_all_event = true
NOTICE:  test_event_trigger_for_super: ddl_command_start DROP TABLE
-- polar_superuser
\c - p_user
create table test(id int);
NOTICE:  test_event_trigger_for_polar: ddl_command_start CREATE TABLE
NOTICE:  test_event_trigger_for_super: ddl_command_start CREATE TABLE
drop table test;
NOTICE:  test_event_trigger_for_polar: ddl_command_start DROP TABLE
NOTICE:  test_event_trigger_for_super: ddl_command_start DROP TABLE
--regular t_user
\c - t_user
create table test(id int);
NOTICE:  test_event_trigger_for_polar: ddl_command_start CREATE TABLE
NOTICE:  test_event_trigger_for_super: ddl_command_start CREATE TABLE
drop table test;
NOTICE:  test_event_trigger_for_polar: ddl_command_start DROP TABLE
NOTICE:  test_event_trigger_for_super: ddl_command_start DROP TABLE
-- revoke privileges on function
\c - postgres
drop  event trigger polar_event_trigger;
drop function test_event_trigger_for_polar cascade;
NOTICE:  test_event_trigger_for_super: ddl_command_start DROP FUNCTION
create function test_event_trigger_for_polar() returns event_trigger as $$
BEGIN
    RAISE NOTICE 'test_event_trigger_for_polar: % %', tg_event, tg_tag;
END
$$ language plpgsql;
NOTICE:  test_event_trigger_for_super: ddl_command_start CREATE FUNCTION
REVOKE ALL  PRIVILEGES ON FUNCTION test_event_trigger_for_polar FROM PUBLIC;
NOTICE:  test_event_trigger_for_super: ddl_command_start REVOKE
\c - p_user
create event trigger polar_event_trigger on ddl_command_start
   execute procedure test_event_trigger_for_polar();
ERROR:  permission denied for function test_event_trigger_for_polar
\c - postgres
drop function test_event_trigger_for_polar cascade; 
NOTICE:  test_event_trigger_for_super: ddl_command_start DROP FUNCTION
-- polar_superuser
\c - p_user
create or replace function test_event_trigger_for_polar() returns event_trigger as $$
BEGIN
    alter user p_user with superuser;
    -- create table test1(id int);
    -- alter event trigger polar_event_trigger disable;
    RAISE NOTICE 'test_event_trigger_for_polar: % %', tg_event, tg_tag;
END
$$ language plpgsql;
NOTICE:  test_event_trigger_for_super: ddl_command_start CREATE FUNCTION
drop event trigger polar_event_trigger;
ERROR:  event trigger "polar_event_trigger" does not exist
create event trigger polar_event_trigger on ddl_command_start
   execute procedure test_event_trigger_for_polar();
create table test(id int);
WARNING:  role is altered to polar_superusers instead of superuser
NOTICE:  role "p_user" is already a member of role "pg_polar_superuser"
NOTICE:  test_event_trigger_for_polar: ddl_command_start CREATE TABLE
NOTICE:  test_event_trigger_for_super: ddl_command_start CREATE TABLE
drop table test;
WARNING:  role is altered to polar_superusers instead of superuser
NOTICE:  role "p_user" is already a member of role "pg_polar_superuser"
NOTICE:  test_event_trigger_for_polar: ddl_command_start DROP TABLE
NOTICE:  test_event_trigger_for_super: ddl_command_start DROP TABLE
-- superuser
\c - postgres
create table test(id int);
WARNING:  superuser don't call function "test_event_trigger_for_polar" .
HINT:  It's filtered , you can trigger them by set polar_super_trigger_all_event = true
NOTICE:  test_event_trigger_for_super: ddl_command_start CREATE TABLE
drop table test;
WARNING:  superuser don't call function "test_event_trigger_for_polar" .
HINT:  It's filtered , you can trigger them by set polar_super_trigger_all_event = true
NOTICE:  test_event_trigger_for_super: ddl_command_start DROP TABLE
set polar_super_call_all_trigger_event = true;
create table test(id int);
WARNING:  role is altered to polar_superusers instead of superuser
NOTICE:  role "p_user" is already a member of role "pg_polar_superuser"
NOTICE:  test_event_trigger_for_polar: ddl_command_start CREATE TABLE
NOTICE:  test_event_trigger_for_super: ddl_command_start CREATE TABLE
drop table test;
WARNING:  role is altered to polar_superusers instead of superuser
NOTICE:  role "p_user" is already a member of role "pg_polar_superuser"
NOTICE:  test_event_trigger_for_polar: ddl_command_start DROP TABLE
NOTICE:  test_event_trigger_for_super: ddl_command_start DROP TABLE
\c - p_user;
show polar_super_call_all_trigger_event;
 polar_super_call_all_trigger_event 
------------------------------------
 off
(1 row)

set polar_super_call_all_trigger_event = true;
ERROR:  permission denied to set parameter "polar_super_call_all_trigger_event"
\c - postgres
drop  event trigger polar_event_trigger;
create table test(id int);
NOTICE:  test_event_trigger_for_super: ddl_command_start CREATE TABLE
drop table test;
NOTICE:  test_event_trigger_for_super: ddl_command_start DROP TABLE
drop  event trigger super_event_trigger;
create table test(id int);
drop table test;
--clean up
drop function test_event_trigger_for_super cascade;
drop function test_event_trigger_for_polar cascade;
drop user t_user;
drop user p_user;
