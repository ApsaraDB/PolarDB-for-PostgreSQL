--
-- TRANSACTIONS
--
BEGIN;
SELECT *
   INTO TABLE xacttest
   FROM aggtest;
ERROR:  cannot execute SELECT INTO in a read-only transaction
INSERT INTO xacttest (a, b) VALUES (777, 777.777);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
END;
-- should retrieve one value--
SELECT a FROM xacttest WHERE a > 100;
  a  
-----
 777
(1 row)

BEGIN;
CREATE TABLE disappear (a int4);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
DELETE FROM aggtest;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
-- should be empty
SELECT * FROM aggtest;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ABORT;
-- should not exist
SELECT oid FROM pg_class WHERE relname = 'disappear';
 oid 
-----
(0 rows)

-- should have members again
SELECT * FROM aggtest;
  a  |    b    
-----+---------
  56 |     7.8
 100 |  99.097
   0 | 0.09561
  42 |  324.78
(4 rows)

-- Read-only tests
CREATE TABLE writetest (a int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE TEMPORARY TABLE temptest (a int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
BEGIN;
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE, READ ONLY, DEFERRABLE; -- ok
ERROR:  cannot use serializable mode in a hot standby
HINT:  You can use REPEATABLE READ instead.
SELECT * FROM writetest; -- ok
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SET TRANSACTION READ WRITE; --fail
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
BEGIN;
SET TRANSACTION READ ONLY; -- ok
SET TRANSACTION READ WRITE; -- ok
ERROR:  cannot set transaction read-write mode during recovery
SET TRANSACTION READ ONLY; -- ok
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT * FROM writetest; -- ok
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SAVEPOINT x;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SET TRANSACTION READ ONLY; -- ok
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT * FROM writetest; -- ok
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SET TRANSACTION READ ONLY; -- ok
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SET TRANSACTION READ WRITE; --fail
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
BEGIN;
SET TRANSACTION READ WRITE; -- ok
ERROR:  cannot set transaction read-write mode during recovery
SAVEPOINT x;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SET TRANSACTION READ WRITE; -- ok
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SET TRANSACTION READ ONLY; -- ok
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT * FROM writetest; -- ok
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SET TRANSACTION READ ONLY; -- ok
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SET TRANSACTION READ WRITE; --fail
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
BEGIN;
SET TRANSACTION READ WRITE; -- ok
ERROR:  cannot set transaction read-write mode during recovery
SAVEPOINT x;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SET TRANSACTION READ ONLY; -- ok
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT * FROM writetest; -- ok
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK TO SAVEPOINT x;
ERROR:  savepoint "x" does not exist
SHOW transaction_read_only;  -- off
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SAVEPOINT y;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SET TRANSACTION READ ONLY; -- ok
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT * FROM writetest; -- ok
ERROR:  current transaction is aborted, commands ignored until end of transaction block
RELEASE SAVEPOINT y;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SHOW transaction_read_only;  -- off
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
SET SESSION CHARACTERISTICS AS TRANSACTION READ ONLY;
DROP TABLE writetest; -- fail
ERROR:  cannot execute DROP TABLE in a read-only transaction
INSERT INTO writetest VALUES (1); -- fail
ERROR:  cannot execute INSERT in a read-only transaction
SELECT * FROM writetest; -- ok
 a 
---
(0 rows)

DELETE FROM temptest; -- ok
ERROR:  relation "temptest" does not exist
LINE 1: DELETE FROM temptest;
                    ^
UPDATE temptest SET a = 0 FROM writetest WHERE temptest.a = 1 AND writetest.a = temptest.a; -- ok
ERROR:  relation "temptest" does not exist
LINE 1: UPDATE temptest SET a = 0 FROM writetest WHERE temptest.a = ...
               ^
PREPARE test AS UPDATE writetest SET a = 0; -- ok
EXECUTE test; -- fail
ERROR:  cannot execute UPDATE in a read-only transaction
SELECT * FROM writetest, temptest; -- ok
ERROR:  relation "temptest" does not exist
LINE 1: SELECT * FROM writetest, temptest;
                                 ^
CREATE TABLE test AS SELECT * FROM writetest; -- fail
ERROR:  cannot execute CREATE TABLE AS in a read-only transaction
START TRANSACTION READ WRITE;
ERROR:  cannot set transaction read-write mode during recovery
DROP TABLE writetest; -- ok
ERROR:  cannot execute DROP TABLE in a read-only transaction
COMMIT;
WARNING:  there is no transaction in progress
-- Subtransactions, basic tests
-- create & drop tables
SET SESSION CHARACTERISTICS AS TRANSACTION READ WRITE;
CREATE TABLE trans_foobar (a int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
BEGIN;
	CREATE TABLE trans_foo (a int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
	SAVEPOINT one;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		DROP TABLE trans_foo;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		CREATE TABLE trans_bar (a int);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	ROLLBACK TO SAVEPOINT one;
ERROR:  savepoint "one" does not exist
	RELEASE SAVEPOINT one;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	SAVEPOINT two;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		CREATE TABLE trans_baz (a int);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	RELEASE SAVEPOINT two;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	drop TABLE trans_foobar;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	CREATE TABLE trans_barbaz (a int);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
-- should exist: trans_barbaz, trans_baz, trans_foo
SELECT * FROM trans_foo;		-- should be empty
 a 
---
(0 rows)

SELECT * FROM trans_bar;		-- shouldn't exist
ERROR:  relation "trans_bar" does not exist
LINE 1: SELECT * FROM trans_bar;
                      ^
SELECT * FROM trans_barbaz;	-- should be empty
 a 
---
(0 rows)

SELECT * FROM trans_baz;		-- should be empty
 a 
---
(0 rows)

-- inserts
BEGIN;
	INSERT INTO trans_foo VALUES (1);
ERROR:  cannot execute INSERT in a read-only transaction
	SAVEPOINT one;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		INSERT into trans_bar VALUES (1);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	ROLLBACK TO one;
ERROR:  savepoint "one" does not exist
	RELEASE SAVEPOINT one;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	SAVEPOINT two;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		INSERT into trans_barbaz VALUES (1);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	RELEASE two;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	SAVEPOINT three;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		SAVEPOINT four;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
			INSERT INTO trans_foo VALUES (2);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		RELEASE SAVEPOINT four;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	ROLLBACK TO SAVEPOINT three;
ERROR:  savepoint "three" does not exist
	RELEASE SAVEPOINT three;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	INSERT INTO trans_foo VALUES (3);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
SELECT * FROM trans_foo;		-- should have 1 and 3
 a 
---
 1
 3
(2 rows)

SELECT * FROM trans_barbaz;	-- should have 1
 a 
---
 1
(1 row)

-- test whole-tree commit
BEGIN;
	SAVEPOINT one;
		SELECT trans_foo;
ERROR:  column "trans_foo" does not exist
LINE 1: SELECT trans_foo;
               ^
	ROLLBACK TO SAVEPOINT one;
	RELEASE SAVEPOINT one;
	SAVEPOINT two;
		CREATE TABLE savepoints (a int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
		SAVEPOINT three;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
			INSERT INTO savepoints VALUES (1);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
			SAVEPOINT four;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
				INSERT INTO savepoints VALUES (2);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
				SAVEPOINT five;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
					INSERT INTO savepoints VALUES (3);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
				ROLLBACK TO SAVEPOINT five;
ERROR:  savepoint "five" does not exist
COMMIT;
COMMIT;		-- should not be in a transaction block
WARNING:  there is no transaction in progress
SELECT * FROM savepoints;
 a 
---
 1
 2
(2 rows)

-- test whole-tree rollback
BEGIN;
	SAVEPOINT one;
		DELETE FROM savepoints WHERE a=1;
ERROR:  cannot execute DELETE in a read-only transaction
	RELEASE SAVEPOINT one;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	SAVEPOINT two;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		DELETE FROM savepoints WHERE a=1;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		SAVEPOINT three;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
			DELETE FROM savepoints WHERE a=2;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
COMMIT;		-- should not be in a transaction block
WARNING:  there is no transaction in progress
SELECT * FROM savepoints;
 a 
---
 1
 2
(2 rows)

-- test whole-tree commit on an aborted subtransaction
BEGIN;
	INSERT INTO savepoints VALUES (4);
ERROR:  cannot execute INSERT in a read-only transaction
	SAVEPOINT one;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		INSERT INTO savepoints VALUES (5);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		SELECT trans_foo;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
SELECT * FROM savepoints;
 a 
---
 1
 2
(2 rows)

BEGIN;
	INSERT INTO savepoints VALUES (6);
ERROR:  cannot execute INSERT in a read-only transaction
	SAVEPOINT one;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		INSERT INTO savepoints VALUES (7);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	RELEASE SAVEPOINT one;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	INSERT INTO savepoints VALUES (8);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
-- rows 6 and 8 should have been created by the same xact
SELECT a.xmin = b.xmin FROM savepoints a, savepoints b WHERE a.a=6 AND b.a=8;
 ?column? 
----------
 t
(1 row)

-- rows 6 and 7 should have been created by different xacts
SELECT a.xmin = b.xmin FROM savepoints a, savepoints b WHERE a.a=6 AND b.a=7;
 ?column? 
----------
 f
(1 row)

BEGIN;
	INSERT INTO savepoints VALUES (9);
ERROR:  cannot execute INSERT in a read-only transaction
	SAVEPOINT one;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		INSERT INTO savepoints VALUES (10);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	ROLLBACK TO SAVEPOINT one;
ERROR:  savepoint "one" does not exist
		INSERT INTO savepoints VALUES (11);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
SELECT a FROM savepoints WHERE a in (9, 10, 11);
 a  
----
  9
 11
(2 rows)

-- rows 9 and 11 should have been created by different xacts
SELECT a.xmin = b.xmin FROM savepoints a, savepoints b WHERE a.a=9 AND b.a=11;
 ?column? 
----------
 f
(1 row)

BEGIN;
	INSERT INTO savepoints VALUES (12);
ERROR:  cannot execute INSERT in a read-only transaction
	SAVEPOINT one;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		INSERT INTO savepoints VALUES (13);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		SAVEPOINT two;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
			INSERT INTO savepoints VALUES (14);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	ROLLBACK TO SAVEPOINT one;
ERROR:  savepoint "one" does not exist
		INSERT INTO savepoints VALUES (15);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		SAVEPOINT two;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
			INSERT INTO savepoints VALUES (16);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
			SAVEPOINT three;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
				INSERT INTO savepoints VALUES (17);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
SELECT a FROM savepoints WHERE a BETWEEN 12 AND 17;
 a  
----
 12
 15
 16
 17
(4 rows)

BEGIN;
	INSERT INTO savepoints VALUES (18);
ERROR:  cannot execute INSERT in a read-only transaction
	SAVEPOINT one;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		INSERT INTO savepoints VALUES (19);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		SAVEPOINT two;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
			INSERT INTO savepoints VALUES (20);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	ROLLBACK TO SAVEPOINT one;
ERROR:  savepoint "one" does not exist
		INSERT INTO savepoints VALUES (21);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	ROLLBACK TO SAVEPOINT one;
ERROR:  savepoint "one" does not exist
		INSERT INTO savepoints VALUES (22);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
SELECT a FROM savepoints WHERE a BETWEEN 18 AND 22;
 a  
----
 18
 22
(2 rows)

DROP TABLE savepoints;
ERROR:  cannot execute DROP TABLE in a read-only transaction
-- only in a transaction block:
SAVEPOINT one;
ERROR:  SAVEPOINT can only be used in transaction blocks
ROLLBACK TO SAVEPOINT one;
ERROR:  ROLLBACK TO SAVEPOINT can only be used in transaction blocks
RELEASE SAVEPOINT one;
ERROR:  RELEASE SAVEPOINT can only be used in transaction blocks
-- Only "rollback to" allowed in aborted state
BEGIN;
  SAVEPOINT one;
  SELECT 0/0;
ERROR:  division by zero
  SAVEPOINT two;    -- ignored till the end of ...
ERROR:  current transaction is aborted, commands ignored until end of transaction block
  RELEASE SAVEPOINT one;      -- ignored till the end of ...
ERROR:  current transaction is aborted, commands ignored until end of transaction block
  ROLLBACK TO SAVEPOINT one;
  SELECT 1;
 ?column? 
----------
        1
(1 row)

COMMIT;
SELECT 1;			-- this should work
 ?column? 
----------
        1
(1 row)

-- check non-transactional behavior of cursors
BEGIN;
	DECLARE c CURSOR FOR SELECT unique2 FROM tenk1 ORDER BY unique2;
	SAVEPOINT one;
		FETCH 10 FROM c;
 unique2 
---------
       0
       1
       2
       3
       4
       5
       6
       7
       8
       9
(10 rows)

	ROLLBACK TO SAVEPOINT one;
		FETCH 10 FROM c;
 unique2 
---------
      10
      11
      12
      13
      14
      15
      16
      17
      18
      19
(10 rows)

	RELEASE SAVEPOINT one;
	FETCH 10 FROM c;
 unique2 
---------
      20
      21
      22
      23
      24
      25
      26
      27
      28
      29
(10 rows)

	CLOSE c;
	DECLARE c CURSOR FOR SELECT unique2/0 FROM tenk1 ORDER BY unique2;
	SAVEPOINT two;
		FETCH 10 FROM c;
ERROR:  division by zero
	ROLLBACK TO SAVEPOINT two;
	-- c is now dead to the world ...
		FETCH 10 FROM c;
ERROR:  portal "c" cannot be run
	ROLLBACK TO SAVEPOINT two;
	RELEASE SAVEPOINT two;
	FETCH 10 FROM c;
ERROR:  portal "c" cannot be run
COMMIT;
--
-- Check that "stable" functions are really stable.  They should not be
-- able to see the partial results of the calling query.  (Ideally we would
-- also check that they don't see commits of concurrent transactions, but
-- that's a mite hard to do within the limitations of pg_regress.)
--
select * from xacttest;
  a  |    b    
-----+---------
  56 |     7.8
 100 |  99.097
   0 | 0.09561
  42 |  324.78
 777 | 777.777
(5 rows)

create or replace function max_xacttest() returns smallint language sql as
'select max(a) from xacttest' stable;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
begin;
update xacttest set a = max_xacttest() + 10 where a > 0;
ERROR:  cannot execute UPDATE in a read-only transaction
select * from xacttest;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
rollback;
-- But a volatile function can see the partial results of the calling query
create or replace function max_xacttest() returns smallint language sql as
'select max(a) from xacttest' volatile;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
begin;
update xacttest set a = max_xacttest() + 10 where a > 0;
ERROR:  cannot execute UPDATE in a read-only transaction
select * from xacttest;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
rollback;
-- Now the same test with plpgsql (since it depends on SPI which is different)
create or replace function max_xacttest() returns smallint language plpgsql as
'begin return max(a) from xacttest; end' stable;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
begin;
update xacttest set a = max_xacttest() + 10 where a > 0;
ERROR:  cannot execute UPDATE in a read-only transaction
select * from xacttest;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
rollback;
create or replace function max_xacttest() returns smallint language plpgsql as
'begin return max(a) from xacttest; end' volatile;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
begin;
update xacttest set a = max_xacttest() + 10 where a > 0;
ERROR:  cannot execute UPDATE in a read-only transaction
select * from xacttest;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
rollback;
-- test case for problems with dropping an open relation during abort
BEGIN;
	savepoint x;
		CREATE TABLE koju (a INT UNIQUE);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
		INSERT INTO koju VALUES (1);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
		INSERT INTO koju VALUES (1);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	rollback to x;
	CREATE TABLE koju (a INT UNIQUE);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
	INSERT INTO koju VALUES (1);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
	INSERT INTO koju VALUES (1);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
DROP TABLE trans_foo;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP TABLE trans_baz;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP TABLE trans_barbaz;
ERROR:  cannot execute DROP TABLE in a read-only transaction
-- test case for problems with revalidating an open relation during abort
create function inverse(int) returns float8 as
$$
begin
  analyze revalidate_bug;
  return 1::float8/$1;
exception
  when division_by_zero then return 0;
end$$ language plpgsql volatile;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
create table revalidate_bug (c float8 unique);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
insert into revalidate_bug values (1);
ERROR:  cannot execute INSERT in a read-only transaction
insert into revalidate_bug values (inverse(0));
ERROR:  cannot execute INSERT in a read-only transaction
drop table revalidate_bug;
ERROR:  cannot execute DROP TABLE in a read-only transaction
drop function inverse(int);
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
-- verify that cursors created during an aborted subtransaction are
-- closed, but that we do not rollback the effect of any FETCHs
-- performed in the aborted subtransaction
begin;
savepoint x;
create table abc (a int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
insert into abc values (5);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
insert into abc values (10);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
declare foo cursor for select * from abc;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
fetch from foo;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
rollback to x;
-- should fail
fetch from foo;
ERROR:  cursor "foo" does not exist
commit;
begin;
create table abc (a int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
insert into abc values (5);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
insert into abc values (10);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
insert into abc values (15);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
declare foo cursor for select * from abc;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
fetch from foo;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
savepoint x;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
fetch from foo;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
rollback to x;
ERROR:  savepoint "x" does not exist
fetch from foo;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
abort;
-- Test for proper cleanup after a failure in a cursor portal
-- that was created in an outer subtransaction
CREATE FUNCTION invert(x float8) RETURNS float8 LANGUAGE plpgsql AS
$$ begin return 1/x; end $$;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
CREATE FUNCTION create_temp_tab() RETURNS text
LANGUAGE plpgsql AS $$
BEGIN
  CREATE TEMP TABLE new_table (f1 float8);
  -- case of interest is that we fail while holding an open
  -- relcache reference to new_table
  INSERT INTO new_table SELECT invert(0.0);
  RETURN 'foo';
END $$;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
BEGIN;
DECLARE ok CURSOR FOR SELECT * FROM int8_tbl;
DECLARE ctt CURSOR FOR SELECT create_temp_tab();
FETCH ok;
 q1  | q2  
-----+-----
 123 | 456
(1 row)

SAVEPOINT s1;
FETCH ok;  -- should work
 q1  |        q2        
-----+------------------
 123 | 4567890123456789
(1 row)

FETCH ctt; -- error occurs here
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CONTEXT:  SQL statement "CREATE TEMP TABLE new_table (f1 float8)"
PL/pgSQL function create_temp_tab() line 3 at SQL statement
ROLLBACK TO s1;
FETCH ok;  -- should work
        q1        | q2  
------------------+-----
 4567890123456789 | 123
(1 row)

FETCH ctt; -- must be rejected
ERROR:  portal "ctt" cannot be run
COMMIT;
DROP FUNCTION create_temp_tab();
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
DROP FUNCTION invert(x float8);
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
-- Test assorted behaviors around the implicit transaction block created
-- when multiple SQL commands are sent in a single Query message.  These
-- tests rely on the fact that psql will not break SQL commands apart at a
-- backslash-quoted semicolon, but will send them as one Query.
create temp table i_table (f1 int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
-- psql will show only the last result in a multi-statement Query
SELECT 1\; SELECT 2\; SELECT 3;
 ?column? 
----------
        3
(1 row)

-- this implicitly commits:
insert into i_table values(1)\; select * from i_table;
ERROR:  relation "i_table" does not exist
LINE 1: insert into i_table values(1); select * from i_table;
                    ^
-- 1/0 error will cause rolling back the whole implicit transaction
insert into i_table values(2)\; select * from i_table\; select 1/0;
ERROR:  relation "i_table" does not exist
LINE 1: insert into i_table values(2); select * from i_table; select...
                    ^
select * from i_table;
ERROR:  relation "i_table" does not exist
LINE 1: select * from i_table;
                      ^
rollback;  -- we are not in a transaction at this point
WARNING:  there is no transaction in progress
-- can use regular begin/commit/rollback within a single Query
begin\; insert into i_table values(3)\; commit;
ERROR:  relation "i_table" does not exist
LINE 1: begin; insert into i_table values(3); commit;
                           ^
rollback;  -- we are not in a transaction at this point
begin\; insert into i_table values(4)\; rollback;
ERROR:  relation "i_table" does not exist
LINE 1: begin; insert into i_table values(4); rollback;
                           ^
rollback;  -- we are not in a transaction at this point
-- begin converts implicit transaction into a regular one that
-- can extend past the end of the Query
select 1\; begin\; insert into i_table values(5);
ERROR:  relation "i_table" does not exist
LINE 1: select 1; begin; insert into i_table values(5);
                                     ^
commit;
select 1\; begin\; insert into i_table values(6);
ERROR:  relation "i_table" does not exist
LINE 1: select 1; begin; insert into i_table values(6);
                                     ^
rollback;
-- commit in implicit-transaction state commits but issues a warning.
insert into i_table values(7)\; commit\; insert into i_table values(8)\; select 1/0;
ERROR:  relation "i_table" does not exist
LINE 1: insert into i_table values(7); commit; insert into i_table v...
                    ^
-- similarly, rollback aborts but issues a warning.
insert into i_table values(9)\; rollback\; select 2;
ERROR:  relation "i_table" does not exist
LINE 1: insert into i_table values(9); rollback; select 2;
                    ^
select * from i_table;
ERROR:  relation "i_table" does not exist
LINE 1: select * from i_table;
                      ^
rollback;  -- we are not in a transaction at this point
WARNING:  there is no transaction in progress
-- implicit transaction block is still a transaction block, for e.g. VACUUM
SELECT 1\; VACUUM;
ERROR:  cannot execute VACUUM during recovery
SELECT 1\; COMMIT\; VACUUM;
WARNING:  there is no transaction in progress
ERROR:  cannot execute VACUUM during recovery
-- we disallow savepoint-related commands in implicit-transaction state
SELECT 1\; SAVEPOINT sp;
ERROR:  SAVEPOINT can only be used in transaction blocks
SELECT 1\; COMMIT\; SAVEPOINT sp;
WARNING:  there is no transaction in progress
ERROR:  SAVEPOINT can only be used in transaction blocks
ROLLBACK TO SAVEPOINT sp\; SELECT 2;
ERROR:  ROLLBACK TO SAVEPOINT can only be used in transaction blocks
SELECT 2\; RELEASE SAVEPOINT sp\; SELECT 3;
ERROR:  RELEASE SAVEPOINT can only be used in transaction blocks
-- but this is OK, because the BEGIN converts it to a regular xact
SELECT 1\; BEGIN\; SAVEPOINT sp\; ROLLBACK TO SAVEPOINT sp\; COMMIT;
-- Test for successful cleanup of an aborted transaction at session exit.
-- THIS MUST BE THE LAST TEST IN THIS FILE.
begin;
select 1/0;
ERROR:  division by zero
rollback to X;
ERROR:  savepoint "x" does not exist
-- DO NOT ADD ANYTHING HERE.
