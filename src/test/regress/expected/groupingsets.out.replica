--
-- grouping sets
--
-- test data sources
create temp view gstest1(a,b,v)
  as values (1,1,10),(1,1,11),(1,2,12),(1,2,13),(1,3,14),
            (2,3,15),
            (3,3,16),(3,4,17),
            (4,1,18),(4,1,19);
ERROR:  cannot execute CREATE VIEW in a read-only transaction
create temp table gstest2 (a integer, b integer, c integer, d integer,
                           e integer, f integer, g integer, h integer);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
copy gstest2 from stdin;
ERROR:  relation "gstest2" does not exist
create temp table gstest3 (a integer, b integer, c integer, d integer);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
copy gstest3 from stdin;
ERROR:  relation "gstest3" does not exist
alter table gstest3 add primary key (a);
ERROR:  cannot execute ALTER TABLE in a read-only transaction
create temp table gstest4(id integer, v integer,
                          unhashable_col bit(4), unsortable_col xid);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
insert into gstest4
values (1,1,b'0000','1'), (2,2,b'0001','1'),
       (3,4,b'0010','2'), (4,8,b'0011','2'),
       (5,16,b'0000','2'), (6,32,b'0001','2'),
       (7,64,b'0010','1'), (8,128,b'0011','1');
ERROR:  relation "gstest4" does not exist
LINE 1: insert into gstest4
                    ^
create temp table gstest_empty (a integer, b integer, v integer);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
create function gstest_data(v integer, out a integer, out b integer)
  returns setof record
  as $f$
    begin
      return query select v, i from generate_series(1,3) i;
    end;
  $f$ language plpgsql;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
-- basic functionality
set enable_hashagg = false;  -- test hashing explicitly later
-- simple rollup with multiple plain aggregates, with and without ordering
-- (and with ordering differing from grouping)
select a, b, grouping(a,b), sum(v), count(*), max(v)
  from gstest1 group by rollup (a,b);
ERROR:  relation "gstest1" does not exist
LINE 2:   from gstest1 group by rollup (a,b);
               ^
select a, b, grouping(a,b), sum(v), count(*), max(v)
  from gstest1 group by rollup (a,b) order by a,b;
ERROR:  relation "gstest1" does not exist
LINE 2:   from gstest1 group by rollup (a,b) order by a,b;
               ^
select a, b, grouping(a,b), sum(v), count(*), max(v)
  from gstest1 group by rollup (a,b) order by b desc, a;
ERROR:  relation "gstest1" does not exist
LINE 2:   from gstest1 group by rollup (a,b) order by b desc, a;
               ^
select a, b, grouping(a,b), sum(v), count(*), max(v)
  from gstest1 group by rollup (a,b) order by coalesce(a,0)+coalesce(b,0);
ERROR:  relation "gstest1" does not exist
LINE 2:   from gstest1 group by rollup (a,b) order by coalesce(a,0)+...
               ^
-- various types of ordered aggs
select a, b, grouping(a,b),
       array_agg(v order by v),
       string_agg(v::text, ':' order by v desc),
       percentile_disc(0.5) within group (order by v),
       rank(1,2,12) within group (order by a,b,v)
  from gstest1 group by rollup (a,b) order by a,b;
ERROR:  relation "gstest1" does not exist
LINE 6:   from gstest1 group by rollup (a,b) order by a,b;
               ^
-- test usage of grouped columns in direct args of aggs
select grouping(a), a, array_agg(b),
       rank(a) within group (order by b nulls first),
       rank(a) within group (order by b nulls last)
  from (values (1,1),(1,4),(1,5),(3,1),(3,2)) v(a,b)
 group by rollup (a) order by a;
 grouping | a |  array_agg  | rank | rank 
----------+---+-------------+------+------
        0 | 1 | {1,4,5}     |    1 |    1
        0 | 3 | {1,2}       |    3 |    3
        1 |   | {1,4,5,1,2} |    1 |    6
(3 rows)

-- nesting with window functions
select a, b, sum(c), sum(sum(c)) over (order by a,b) as rsum
  from gstest2 group by rollup (a,b) order by rsum, a, b;
ERROR:  relation "gstest2" does not exist
LINE 2:   from gstest2 group by rollup (a,b) order by rsum, a, b;
               ^
-- nesting with grouping sets
select sum(c) from gstest2
  group by grouping sets((), grouping sets((), grouping sets(())))
  order by 1 desc;
ERROR:  relation "gstest2" does not exist
LINE 1: select sum(c) from gstest2
                           ^
select sum(c) from gstest2
  group by grouping sets((), grouping sets((), grouping sets(((a, b)))))
  order by 1 desc;
ERROR:  relation "gstest2" does not exist
LINE 1: select sum(c) from gstest2
                           ^
select sum(c) from gstest2
  group by grouping sets(grouping sets(rollup(c), grouping sets(cube(c))))
  order by 1 desc;
ERROR:  relation "gstest2" does not exist
LINE 1: select sum(c) from gstest2
                           ^
select sum(c) from gstest2
  group by grouping sets(a, grouping sets(a, cube(b)))
  order by 1 desc;
ERROR:  relation "gstest2" does not exist
LINE 1: select sum(c) from gstest2
                           ^
select sum(c) from gstest2
  group by grouping sets(grouping sets((a, (b))))
  order by 1 desc;
ERROR:  relation "gstest2" does not exist
LINE 1: select sum(c) from gstest2
                           ^
select sum(c) from gstest2
  group by grouping sets(grouping sets((a, b)))
  order by 1 desc;
ERROR:  relation "gstest2" does not exist
LINE 1: select sum(c) from gstest2
                           ^
select sum(c) from gstest2
  group by grouping sets(grouping sets(a, grouping sets(a), a))
  order by 1 desc;
ERROR:  relation "gstest2" does not exist
LINE 1: select sum(c) from gstest2
                           ^
select sum(c) from gstest2
  group by grouping sets(grouping sets(a, grouping sets(a, grouping sets(a), ((a)), a, grouping sets(a), (a)), a))
  order by 1 desc;
ERROR:  relation "gstest2" does not exist
LINE 1: select sum(c) from gstest2
                           ^
select sum(c) from gstest2
  group by grouping sets((a,(a,b)), grouping sets((a,(a,b)),a))
  order by 1 desc;
ERROR:  relation "gstest2" does not exist
LINE 1: select sum(c) from gstest2
                           ^
-- empty input: first is 0 rows, second 1, third 3 etc.
select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),a);
ERROR:  relation "gstest_empty" does not exist
LINE 1: select a, b, sum(v), count(*) from gstest_empty group by gro...
                                           ^
select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),());
ERROR:  relation "gstest_empty" does not exist
LINE 1: select a, b, sum(v), count(*) from gstest_empty group by gro...
                                           ^
select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),(),(),());
ERROR:  relation "gstest_empty" does not exist
LINE 1: select a, b, sum(v), count(*) from gstest_empty group by gro...
                                           ^
select sum(v), count(*) from gstest_empty group by grouping sets ((),(),());
ERROR:  relation "gstest_empty" does not exist
LINE 1: select sum(v), count(*) from gstest_empty group by grouping ...
                                     ^
-- empty input with joins tests some important code paths
select t1.a, t2.b, sum(t1.v), count(*) from gstest_empty t1, gstest_empty t2
 group by grouping sets ((t1.a,t2.b),());
ERROR:  relation "gstest_empty" does not exist
LINE 1: select t1.a, t2.b, sum(t1.v), count(*) from gstest_empty t1,...
                                                    ^
-- simple joins, var resolution, GROUPING on join vars
select t1.a, t2.b, grouping(t1.a, t2.b), sum(t1.v), max(t2.a)
  from gstest1 t1, gstest2 t2
 group by grouping sets ((t1.a, t2.b), ());
ERROR:  relation "gstest1" does not exist
LINE 2:   from gstest1 t1, gstest2 t2
               ^
select t1.a, t2.b, grouping(t1.a, t2.b), sum(t1.v), max(t2.a)
  from gstest1 t1 join gstest2 t2 on (t1.a=t2.a)
 group by grouping sets ((t1.a, t2.b), ());
ERROR:  relation "gstest1" does not exist
LINE 2:   from gstest1 t1 join gstest2 t2 on (t1.a=t2.a)
               ^
select a, b, grouping(a, b), sum(t1.v), max(t2.c)
  from gstest1 t1 join gstest2 t2 using (a,b)
 group by grouping sets ((a, b), ());
ERROR:  relation "gstest1" does not exist
LINE 2:   from gstest1 t1 join gstest2 t2 using (a,b)
               ^
-- check that functionally dependent cols are not nulled
select a, d, grouping(a,b,c)
  from gstest3
 group by grouping sets ((a,b), (a,c));
ERROR:  relation "gstest3" does not exist
LINE 2:   from gstest3
               ^
-- check that distinct grouping columns are kept separate
-- even if they are equal()
explain (costs off)
select g as alias1, g as alias2
  from generate_series(1,3) g
 group by alias1, rollup(alias2);
                   QUERY PLAN                   
------------------------------------------------
 GroupAggregate
   Group Key: g, g
   Group Key: g
   ->  Sort
         Sort Key: g
         ->  Function Scan on generate_series g
(6 rows)

select g as alias1, g as alias2
  from generate_series(1,3) g
 group by alias1, rollup(alias2);
 alias1 | alias2 
--------+--------
      1 |      1
      1 |       
      2 |      2
      2 |       
      3 |      3
      3 |       
(6 rows)

-- check that pulled-up subquery outputs still go to null when appropriate
select four, x
  from (select four, ten, 'foo'::text as x from tenk1) as t
  group by grouping sets (four, x)
  having x = 'foo';
 four |  x  
------+-----
      | foo
(1 row)

select four, x || 'x'
  from (select four, ten, 'foo'::text as x from tenk1) as t
  group by grouping sets (four, x)
  order by four;
 four | ?column? 
------+----------
    0 | 
    1 | 
    2 | 
    3 | 
      | foox
(5 rows)

select (x+y)*1, sum(z)
 from (select 1 as x, 2 as y, 3 as z) s
 group by grouping sets (x+y, x);
 ?column? | sum 
----------+-----
        3 |   3
          |   3
(2 rows)

select x, not x as not_x, q2 from
  (select *, q1 = 1 as x from int8_tbl i1) as t
  group by grouping sets(x, q2)
  order by x, q2;
 x | not_x |        q2         
---+-------+-------------------
 f | t     |                  
   |       | -4567890123456789
   |       |               123
   |       |               456
   |       |  4567890123456789
(5 rows)

-- simple rescan tests
select a, b, sum(v.x)
  from (values (1),(2)) v(x), gstest_data(v.x)
 group by rollup (a,b);
 a | b | sum 
---+---+-----
 1 | 1 |   1
 1 | 2 |   1
 1 | 3 |   1
 1 |   |   3
 2 | 1 |   2
 2 | 2 |   2
 2 | 3 |   2
 2 |   |   6
   |   |   9
(9 rows)

select *
  from (values (1),(2)) v(x),
       lateral (select a, b, sum(v.x) from gstest_data(v.x) group by rollup (a,b)) s;
ERROR:  aggregate functions are not allowed in FROM clause of their own query level
LINE 3:        lateral (select a, b, sum(v.x) from gstest_data(v.x) ...
                                     ^
-- min max optimization should still work with GROUP BY ()
explain (costs off)
  select min(unique1) from tenk1 GROUP BY ();
                         QUERY PLAN                         
------------------------------------------------------------
 Result
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Index Only Scan using tenk1_unique1 on tenk1
                 Index Cond: (unique1 IS NOT NULL)
(5 rows)

-- Views with GROUPING SET queries
CREATE VIEW gstest_view AS select a, b, grouping(a,b), sum(c), count(*), max(c)
  from gstest2 group by rollup ((a,b,c),(c,d));
ERROR:  cannot execute CREATE VIEW in a read-only transaction
select pg_get_viewdef('gstest_view'::regclass, true);
ERROR:  relation "gstest_view" does not exist
LINE 1: select pg_get_viewdef('gstest_view'::regclass, true);
                              ^
-- Nested queries with 3 or more levels of nesting
select(select (select grouping(a,b) from (values (1)) v2(c)) from (values (1,2)) v1(a,b) group by (a,b)) from (values(6,7)) v3(e,f) GROUP BY ROLLUP(e,f);
 grouping 
----------
        0
        0
        0
(3 rows)

select(select (select grouping(e,f) from (values (1)) v2(c)) from (values (1,2)) v1(a,b) group by (a,b)) from (values(6,7)) v3(e,f) GROUP BY ROLLUP(e,f);
 grouping 
----------
        0
        1
        3
(3 rows)

select(select (select grouping(c) from (values (1)) v2(c) GROUP BY c) from (values (1,2)) v1(a,b) group by (a,b)) from (values(6,7)) v3(e,f) GROUP BY ROLLUP(e,f);
 grouping 
----------
        0
        0
        0
(3 rows)

-- Combinations of operations
select a, b, c, d from gstest2 group by rollup(a,b),grouping sets(c,d);
ERROR:  relation "gstest2" does not exist
LINE 1: select a, b, c, d from gstest2 group by rollup(a,b),grouping...
                               ^
select a, b from (values (1,2),(2,3)) v(a,b) group by a,b, grouping sets(a);
 a | b 
---+---
 1 | 2
 2 | 3
(2 rows)

-- Tests for chained aggregates
select a, b, grouping(a,b), sum(v), count(*), max(v)
  from gstest1 group by grouping sets ((a,b),(a+1,b+1),(a+2,b+2)) order by 3,6;
ERROR:  relation "gstest1" does not exist
LINE 2:   from gstest1 group by grouping sets ((a,b),(a+1,b+1),(a+2,...
               ^
select(select (select grouping(a,b) from (values (1)) v2(c)) from (values (1,2)) v1(a,b) group by (a,b)) from (values(6,7)) v3(e,f) GROUP BY ROLLUP((e+1),(f+1));
 grouping 
----------
        0
        0
        0
(3 rows)

select(select (select grouping(a,b) from (values (1)) v2(c)) from (values (1,2)) v1(a,b) group by (a,b)) from (values(6,7)) v3(e,f) GROUP BY CUBE((e+1),(f+1)) ORDER BY (e+1),(f+1);
 grouping 
----------
        0
        0
        0
        0
(4 rows)

select a, b, sum(c), sum(sum(c)) over (order by a,b) as rsum
  from gstest2 group by cube (a,b) order by rsum, a, b;
ERROR:  relation "gstest2" does not exist
LINE 2:   from gstest2 group by cube (a,b) order by rsum, a, b;
               ^
select a, b, sum(c) from (values (1,1,10),(1,1,11),(1,2,12),(1,2,13),(1,3,14),(2,3,15),(3,3,16),(3,4,17),(4,1,18),(4,1,19)) v(a,b,c) group by rollup (a,b);
 a | b | sum 
---+---+-----
 1 | 1 |  21
 1 | 2 |  25
 1 | 3 |  14
 1 |   |  60
 2 | 3 |  15
 2 |   |  15
 3 | 3 |  16
 3 | 4 |  17
 3 |   |  33
 4 | 1 |  37
 4 |   |  37
   |   | 145
(12 rows)

select a, b, sum(v.x)
  from (values (1),(2)) v(x), gstest_data(v.x)
 group by cube (a,b) order by a,b;
 a | b | sum 
---+---+-----
 1 | 1 |   1
 1 | 2 |   1
 1 | 3 |   1
 1 |   |   3
 2 | 1 |   2
 2 | 2 |   2
 2 | 3 |   2
 2 |   |   6
   | 1 |   3
   | 2 |   3
   | 3 |   3
   |   |   9
(12 rows)

-- Agg level check. This query should error out.
select (select grouping(a,b) from gstest2) from gstest2 group by a,b;
ERROR:  relation "gstest2" does not exist
LINE 1: select (select grouping(a,b) from gstest2) from gstest2 grou...
                                                        ^
--Nested queries
select a, b, sum(c), count(*) from gstest2 group by grouping sets (rollup(a,b),a);
ERROR:  relation "gstest2" does not exist
LINE 1: select a, b, sum(c), count(*) from gstest2 group by grouping...
                                           ^
-- HAVING queries
select ten, sum(distinct four) from onek a
group by grouping sets((ten,four),(ten))
having exists (select 1 from onek b where sum(distinct a.four) = b.four);
 ten | sum 
-----+-----
   0 |   0
   0 |   2
   0 |   2
   1 |   1
   1 |   3
   2 |   0
   2 |   2
   2 |   2
   3 |   1
   3 |   3
   4 |   0
   4 |   2
   4 |   2
   5 |   1
   5 |   3
   6 |   0
   6 |   2
   6 |   2
   7 |   1
   7 |   3
   8 |   0
   8 |   2
   8 |   2
   9 |   1
   9 |   3
(25 rows)

-- Tests around pushdown of HAVING clauses, partially testing against previous bugs
select a,count(*) from gstest2 group by rollup(a) order by a;
ERROR:  relation "gstest2" does not exist
LINE 1: select a,count(*) from gstest2 group by rollup(a) order by a...
                               ^
select a,count(*) from gstest2 group by rollup(a) having a is distinct from 1 order by a;
ERROR:  relation "gstest2" does not exist
LINE 1: select a,count(*) from gstest2 group by rollup(a) having a i...
                               ^
explain (costs off)
  select a,count(*) from gstest2 group by rollup(a) having a is distinct from 1 order by a;
ERROR:  relation "gstest2" does not exist
LINE 2:   select a,count(*) from gstest2 group by rollup(a) having a...
                                 ^
select v.c, (select count(*) from gstest2 group by () having v.c)
  from (values (false),(true)) v(c) order by v.c;
ERROR:  relation "gstest2" does not exist
LINE 1: select v.c, (select count(*) from gstest2 group by () having...
                                          ^
explain (costs off)
  select v.c, (select count(*) from gstest2 group by () having v.c)
    from (values (false),(true)) v(c) order by v.c;
ERROR:  relation "gstest2" does not exist
LINE 2:   select v.c, (select count(*) from gstest2 group by () havi...
                                            ^
-- HAVING with GROUPING queries
select ten, grouping(ten) from onek
group by grouping sets(ten) having grouping(ten) >= 0
order by 2,1;
 ten | grouping 
-----+----------
   0 |        0
   1 |        0
   2 |        0
   3 |        0
   4 |        0
   5 |        0
   6 |        0
   7 |        0
   8 |        0
   9 |        0
(10 rows)

select ten, grouping(ten) from onek
group by grouping sets(ten, four) having grouping(ten) > 0
order by 2,1;
 ten | grouping 
-----+----------
     |        1
     |        1
     |        1
     |        1
(4 rows)

select ten, grouping(ten) from onek
group by rollup(ten) having grouping(ten) > 0
order by 2,1;
 ten | grouping 
-----+----------
     |        1
(1 row)

select ten, grouping(ten) from onek
group by cube(ten) having grouping(ten) > 0
order by 2,1;
 ten | grouping 
-----+----------
     |        1
(1 row)

select ten, grouping(ten) from onek
group by (ten) having grouping(ten) >= 0
order by 2,1;
 ten | grouping 
-----+----------
   0 |        0
   1 |        0
   2 |        0
   3 |        0
   4 |        0
   5 |        0
   6 |        0
   7 |        0
   8 |        0
   9 |        0
(10 rows)

-- FILTER queries
select ten, sum(distinct four) filter (where four::text ~ '123') from onek a
group by rollup(ten);
 ten | sum 
-----+-----
   0 |    
   1 |    
   2 |    
   3 |    
   4 |    
   5 |    
   6 |    
   7 |    
   8 |    
   9 |    
     |    
(11 rows)

-- More rescan tests
select * from (values (1),(2)) v(a) left join lateral (select v.a, four, ten, count(*) from onek group by cube(four,ten)) s on true order by v.a,four,ten;
 a | a | four | ten | count 
---+---+------+-----+-------
 1 | 1 |    0 |   0 |    50
 1 | 1 |    0 |   2 |    50
 1 | 1 |    0 |   4 |    50
 1 | 1 |    0 |   6 |    50
 1 | 1 |    0 |   8 |    50
 1 | 1 |    0 |     |   250
 1 | 1 |    1 |   1 |    50
 1 | 1 |    1 |   3 |    50
 1 | 1 |    1 |   5 |    50
 1 | 1 |    1 |   7 |    50
 1 | 1 |    1 |   9 |    50
 1 | 1 |    1 |     |   250
 1 | 1 |    2 |   0 |    50
 1 | 1 |    2 |   2 |    50
 1 | 1 |    2 |   4 |    50
 1 | 1 |    2 |   6 |    50
 1 | 1 |    2 |   8 |    50
 1 | 1 |    2 |     |   250
 1 | 1 |    3 |   1 |    50
 1 | 1 |    3 |   3 |    50
 1 | 1 |    3 |   5 |    50
 1 | 1 |    3 |   7 |    50
 1 | 1 |    3 |   9 |    50
 1 | 1 |    3 |     |   250
 1 | 1 |      |   0 |   100
 1 | 1 |      |   1 |   100
 1 | 1 |      |   2 |   100
 1 | 1 |      |   3 |   100
 1 | 1 |      |   4 |   100
 1 | 1 |      |   5 |   100
 1 | 1 |      |   6 |   100
 1 | 1 |      |   7 |   100
 1 | 1 |      |   8 |   100
 1 | 1 |      |   9 |   100
 1 | 1 |      |     |  1000
 2 | 2 |    0 |   0 |    50
 2 | 2 |    0 |   2 |    50
 2 | 2 |    0 |   4 |    50
 2 | 2 |    0 |   6 |    50
 2 | 2 |    0 |   8 |    50
 2 | 2 |    0 |     |   250
 2 | 2 |    1 |   1 |    50
 2 | 2 |    1 |   3 |    50
 2 | 2 |    1 |   5 |    50
 2 | 2 |    1 |   7 |    50
 2 | 2 |    1 |   9 |    50
 2 | 2 |    1 |     |   250
 2 | 2 |    2 |   0 |    50
 2 | 2 |    2 |   2 |    50
 2 | 2 |    2 |   4 |    50
 2 | 2 |    2 |   6 |    50
 2 | 2 |    2 |   8 |    50
 2 | 2 |    2 |     |   250
 2 | 2 |    3 |   1 |    50
 2 | 2 |    3 |   3 |    50
 2 | 2 |    3 |   5 |    50
 2 | 2 |    3 |   7 |    50
 2 | 2 |    3 |   9 |    50
 2 | 2 |    3 |     |   250
 2 | 2 |      |   0 |   100
 2 | 2 |      |   1 |   100
 2 | 2 |      |   2 |   100
 2 | 2 |      |   3 |   100
 2 | 2 |      |   4 |   100
 2 | 2 |      |   5 |   100
 2 | 2 |      |   6 |   100
 2 | 2 |      |   7 |   100
 2 | 2 |      |   8 |   100
 2 | 2 |      |   9 |   100
 2 | 2 |      |     |  1000
(70 rows)

select array(select row(v.a,s1.*) from (select two,four, count(*) from onek group by cube(two,four) order by two,four) s1) from (values (1),(2)) v(a);
                                                                        array                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------
 {"(1,0,0,250)","(1,0,2,250)","(1,0,,500)","(1,1,1,250)","(1,1,3,250)","(1,1,,500)","(1,,0,250)","(1,,1,250)","(1,,2,250)","(1,,3,250)","(1,,,1000)"}
 {"(2,0,0,250)","(2,0,2,250)","(2,0,,500)","(2,1,1,250)","(2,1,3,250)","(2,1,,500)","(2,,0,250)","(2,,1,250)","(2,,2,250)","(2,,3,250)","(2,,,1000)"}
(2 rows)

-- Grouping on text columns
select sum(ten) from onek group by two, rollup(four::text) order by 1;
 sum  
------
 1000
 1000
 1250
 1250
 2000
 2500
(6 rows)

select sum(ten) from onek group by rollup(four::text), two order by 1;
 sum  
------
 1000
 1000
 1250
 1250
 2000
 2500
(6 rows)

-- hashing support
set enable_hashagg = true;
-- failure cases
select count(*) from gstest4 group by rollup(unhashable_col,unsortable_col);
ERROR:  relation "gstest4" does not exist
LINE 1: select count(*) from gstest4 group by rollup(unhashable_col,...
                             ^
select array_agg(v order by v) from gstest4 group by grouping sets ((id,unsortable_col),(id));
ERROR:  relation "gstest4" does not exist
LINE 1: select array_agg(v order by v) from gstest4 group by groupin...
                                            ^
-- simple cases
select a, b, grouping(a,b), sum(v), count(*), max(v)
  from gstest1 group by grouping sets ((a),(b)) order by 3,1,2;
ERROR:  relation "gstest1" does not exist
LINE 2:   from gstest1 group by grouping sets ((a),(b)) order by 3,1...
               ^
explain (costs off) select a, b, grouping(a,b), sum(v), count(*), max(v)
  from gstest1 group by grouping sets ((a),(b)) order by 3,1,2;
ERROR:  relation "gstest1" does not exist
LINE 2:   from gstest1 group by grouping sets ((a),(b)) order by 3,1...
               ^
select a, b, grouping(a,b), sum(v), count(*), max(v)
  from gstest1 group by cube(a,b) order by 3,1,2;
ERROR:  relation "gstest1" does not exist
LINE 2:   from gstest1 group by cube(a,b) order by 3,1,2;
               ^
explain (costs off) select a, b, grouping(a,b), sum(v), count(*), max(v)
  from gstest1 group by cube(a,b) order by 3,1,2;
ERROR:  relation "gstest1" does not exist
LINE 2:   from gstest1 group by cube(a,b) order by 3,1,2;
               ^
-- shouldn't try and hash
explain (costs off)
  select a, b, grouping(a,b), array_agg(v order by v)
    from gstest1 group by cube(a,b);
ERROR:  relation "gstest1" does not exist
LINE 3:     from gstest1 group by cube(a,b);
                 ^
-- unsortable cases
select unsortable_col, count(*)
  from gstest4 group by grouping sets ((unsortable_col),(unsortable_col))
  order by unsortable_col::text;
ERROR:  relation "gstest4" does not exist
LINE 2:   from gstest4 group by grouping sets ((unsortable_col),(uns...
               ^
-- mixed hashable/sortable cases
select unhashable_col, unsortable_col,
       grouping(unhashable_col, unsortable_col),
       count(*), sum(v)
  from gstest4 group by grouping sets ((unhashable_col),(unsortable_col))
 order by 3, 5;
ERROR:  relation "gstest4" does not exist
LINE 4:   from gstest4 group by grouping sets ((unhashable_col),(uns...
               ^
explain (costs off)
  select unhashable_col, unsortable_col,
         grouping(unhashable_col, unsortable_col),
         count(*), sum(v)
    from gstest4 group by grouping sets ((unhashable_col),(unsortable_col))
   order by 3,5;
ERROR:  relation "gstest4" does not exist
LINE 5:     from gstest4 group by grouping sets ((unhashable_col),(u...
                 ^
select unhashable_col, unsortable_col,
       grouping(unhashable_col, unsortable_col),
       count(*), sum(v)
  from gstest4 group by grouping sets ((v,unhashable_col),(v,unsortable_col))
 order by 3,5;
ERROR:  relation "gstest4" does not exist
LINE 4:   from gstest4 group by grouping sets ((v,unhashable_col),(v...
               ^
explain (costs off)
  select unhashable_col, unsortable_col,
         grouping(unhashable_col, unsortable_col),
         count(*), sum(v)
    from gstest4 group by grouping sets ((v,unhashable_col),(v,unsortable_col))
   order by 3,5;
ERROR:  relation "gstest4" does not exist
LINE 5:     from gstest4 group by grouping sets ((v,unhashable_col),...
                 ^
-- empty input: first is 0 rows, second 1, third 3 etc.
select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),a);
ERROR:  relation "gstest_empty" does not exist
LINE 1: select a, b, sum(v), count(*) from gstest_empty group by gro...
                                           ^
explain (costs off)
  select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),a);
ERROR:  relation "gstest_empty" does not exist
LINE 2:   select a, b, sum(v), count(*) from gstest_empty group by g...
                                             ^
select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),());
ERROR:  relation "gstest_empty" does not exist
LINE 1: select a, b, sum(v), count(*) from gstest_empty group by gro...
                                           ^
select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),(),(),());
ERROR:  relation "gstest_empty" does not exist
LINE 1: select a, b, sum(v), count(*) from gstest_empty group by gro...
                                           ^
explain (costs off)
  select a, b, sum(v), count(*) from gstest_empty group by grouping sets ((a,b),(),(),());
ERROR:  relation "gstest_empty" does not exist
LINE 2:   select a, b, sum(v), count(*) from gstest_empty group by g...
                                             ^
select sum(v), count(*) from gstest_empty group by grouping sets ((),(),());
ERROR:  relation "gstest_empty" does not exist
LINE 1: select sum(v), count(*) from gstest_empty group by grouping ...
                                     ^
explain (costs off)
  select sum(v), count(*) from gstest_empty group by grouping sets ((),(),());
ERROR:  relation "gstest_empty" does not exist
LINE 2:   select sum(v), count(*) from gstest_empty group by groupin...
                                       ^
-- check that functionally dependent cols are not nulled
select a, d, grouping(a,b,c)
  from gstest3
 group by grouping sets ((a,b), (a,c));
ERROR:  relation "gstest3" does not exist
LINE 2:   from gstest3
               ^
explain (costs off)
  select a, d, grouping(a,b,c)
    from gstest3
   group by grouping sets ((a,b), (a,c));
ERROR:  relation "gstest3" does not exist
LINE 3:     from gstest3
                 ^
-- simple rescan tests
select a, b, sum(v.x)
  from (values (1),(2)) v(x), gstest_data(v.x)
 group by grouping sets (a,b)
 order by 1, 2, 3;
 a | b | sum 
---+---+-----
 1 |   |   3
 2 |   |   6
   | 1 |   3
   | 2 |   3
   | 3 |   3
(5 rows)

explain (costs off)
  select a, b, sum(v.x)
    from (values (1),(2)) v(x), gstest_data(v.x)
   group by grouping sets (a,b)
   order by 3, 1, 2;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Sort
   Sort Key: (sum("*VALUES*".column1)), gstest_data.a, gstest_data.b
   ->  HashAggregate
         Hash Key: gstest_data.a
         Hash Key: gstest_data.b
         ->  Nested Loop
               ->  Values Scan on "*VALUES*"
               ->  Function Scan on gstest_data
(8 rows)

select *
  from (values (1),(2)) v(x),
       lateral (select a, b, sum(v.x) from gstest_data(v.x) group by grouping sets (a,b)) s;
ERROR:  aggregate functions are not allowed in FROM clause of their own query level
LINE 3:        lateral (select a, b, sum(v.x) from gstest_data(v.x) ...
                                     ^
explain (costs off)
  select *
    from (values (1),(2)) v(x),
         lateral (select a, b, sum(v.x) from gstest_data(v.x) group by grouping sets (a,b)) s;
ERROR:  aggregate functions are not allowed in FROM clause of their own query level
LINE 4:          lateral (select a, b, sum(v.x) from gstest_data(v.x...
                                       ^
-- Tests for chained aggregates
select a, b, grouping(a,b), sum(v), count(*), max(v)
  from gstest1 group by grouping sets ((a,b),(a+1,b+1),(a+2,b+2)) order by 3,6;
ERROR:  relation "gstest1" does not exist
LINE 2:   from gstest1 group by grouping sets ((a,b),(a+1,b+1),(a+2,...
               ^
explain (costs off)
  select a, b, grouping(a,b), sum(v), count(*), max(v)
    from gstest1 group by grouping sets ((a,b),(a+1,b+1),(a+2,b+2)) order by 3,6;
ERROR:  relation "gstest1" does not exist
LINE 3:     from gstest1 group by grouping sets ((a,b),(a+1,b+1),(a+...
                 ^
select a, b, sum(c), sum(sum(c)) over (order by a,b) as rsum
  from gstest2 group by cube (a,b) order by rsum, a, b;
ERROR:  relation "gstest2" does not exist
LINE 2:   from gstest2 group by cube (a,b) order by rsum, a, b;
               ^
explain (costs off)
  select a, b, sum(c), sum(sum(c)) over (order by a,b) as rsum
    from gstest2 group by cube (a,b) order by rsum, a, b;
ERROR:  relation "gstest2" does not exist
LINE 3:     from gstest2 group by cube (a,b) order by rsum, a, b;
                 ^
select a, b, sum(v.x)
  from (values (1),(2)) v(x), gstest_data(v.x)
 group by cube (a,b) order by a,b;
 a | b | sum 
---+---+-----
 1 | 1 |   1
 1 | 2 |   1
 1 | 3 |   1
 1 |   |   3
 2 | 1 |   2
 2 | 2 |   2
 2 | 3 |   2
 2 |   |   6
   | 1 |   3
   | 2 |   3
   | 3 |   3
   |   |   9
(12 rows)

explain (costs off)
  select a, b, sum(v.x)
    from (values (1),(2)) v(x), gstest_data(v.x)
   group by cube (a,b) order by a,b;
                   QUERY PLAN                   
------------------------------------------------
 Sort
   Sort Key: gstest_data.a, gstest_data.b
   ->  MixedAggregate
         Hash Key: gstest_data.a, gstest_data.b
         Hash Key: gstest_data.a
         Hash Key: gstest_data.b
         Group Key: ()
         ->  Nested Loop
               ->  Values Scan on "*VALUES*"
               ->  Function Scan on gstest_data
(10 rows)

-- More rescan tests
select * from (values (1),(2)) v(a) left join lateral (select v.a, four, ten, count(*) from onek group by cube(four,ten)) s on true order by v.a,four,ten;
 a | a | four | ten | count 
---+---+------+-----+-------
 1 | 1 |    0 |   0 |    50
 1 | 1 |    0 |   2 |    50
 1 | 1 |    0 |   4 |    50
 1 | 1 |    0 |   6 |    50
 1 | 1 |    0 |   8 |    50
 1 | 1 |    0 |     |   250
 1 | 1 |    1 |   1 |    50
 1 | 1 |    1 |   3 |    50
 1 | 1 |    1 |   5 |    50
 1 | 1 |    1 |   7 |    50
 1 | 1 |    1 |   9 |    50
 1 | 1 |    1 |     |   250
 1 | 1 |    2 |   0 |    50
 1 | 1 |    2 |   2 |    50
 1 | 1 |    2 |   4 |    50
 1 | 1 |    2 |   6 |    50
 1 | 1 |    2 |   8 |    50
 1 | 1 |    2 |     |   250
 1 | 1 |    3 |   1 |    50
 1 | 1 |    3 |   3 |    50
 1 | 1 |    3 |   5 |    50
 1 | 1 |    3 |   7 |    50
 1 | 1 |    3 |   9 |    50
 1 | 1 |    3 |     |   250
 1 | 1 |      |   0 |   100
 1 | 1 |      |   1 |   100
 1 | 1 |      |   2 |   100
 1 | 1 |      |   3 |   100
 1 | 1 |      |   4 |   100
 1 | 1 |      |   5 |   100
 1 | 1 |      |   6 |   100
 1 | 1 |      |   7 |   100
 1 | 1 |      |   8 |   100
 1 | 1 |      |   9 |   100
 1 | 1 |      |     |  1000
 2 | 2 |    0 |   0 |    50
 2 | 2 |    0 |   2 |    50
 2 | 2 |    0 |   4 |    50
 2 | 2 |    0 |   6 |    50
 2 | 2 |    0 |   8 |    50
 2 | 2 |    0 |     |   250
 2 | 2 |    1 |   1 |    50
 2 | 2 |    1 |   3 |    50
 2 | 2 |    1 |   5 |    50
 2 | 2 |    1 |   7 |    50
 2 | 2 |    1 |   9 |    50
 2 | 2 |    1 |     |   250
 2 | 2 |    2 |   0 |    50
 2 | 2 |    2 |   2 |    50
 2 | 2 |    2 |   4 |    50
 2 | 2 |    2 |   6 |    50
 2 | 2 |    2 |   8 |    50
 2 | 2 |    2 |     |   250
 2 | 2 |    3 |   1 |    50
 2 | 2 |    3 |   3 |    50
 2 | 2 |    3 |   5 |    50
 2 | 2 |    3 |   7 |    50
 2 | 2 |    3 |   9 |    50
 2 | 2 |    3 |     |   250
 2 | 2 |      |   0 |   100
 2 | 2 |      |   1 |   100
 2 | 2 |      |   2 |   100
 2 | 2 |      |   3 |   100
 2 | 2 |      |   4 |   100
 2 | 2 |      |   5 |   100
 2 | 2 |      |   6 |   100
 2 | 2 |      |   7 |   100
 2 | 2 |      |   8 |   100
 2 | 2 |      |   9 |   100
 2 | 2 |      |     |  1000
(70 rows)

select array(select row(v.a,s1.*) from (select two,four, count(*) from onek group by cube(two,four) order by two,four) s1) from (values (1),(2)) v(a);
                                                                        array                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------
 {"(1,0,0,250)","(1,0,2,250)","(1,0,,500)","(1,1,1,250)","(1,1,3,250)","(1,1,,500)","(1,,0,250)","(1,,1,250)","(1,,2,250)","(1,,3,250)","(1,,,1000)"}
 {"(2,0,0,250)","(2,0,2,250)","(2,0,,500)","(2,1,1,250)","(2,1,3,250)","(2,1,,500)","(2,,0,250)","(2,,1,250)","(2,,2,250)","(2,,3,250)","(2,,,1000)"}
(2 rows)

-- Rescan logic changes when there are no empty grouping sets, so test
-- that too:
select * from (values (1),(2)) v(a) left join lateral (select v.a, four, ten, count(*) from onek group by grouping sets(four,ten)) s on true order by v.a,four,ten;
 a | a | four | ten | count 
---+---+------+-----+-------
 1 | 1 |    0 |     |   250
 1 | 1 |    1 |     |   250
 1 | 1 |    2 |     |   250
 1 | 1 |    3 |     |   250
 1 | 1 |      |   0 |   100
 1 | 1 |      |   1 |   100
 1 | 1 |      |   2 |   100
 1 | 1 |      |   3 |   100
 1 | 1 |      |   4 |   100
 1 | 1 |      |   5 |   100
 1 | 1 |      |   6 |   100
 1 | 1 |      |   7 |   100
 1 | 1 |      |   8 |   100
 1 | 1 |      |   9 |   100
 2 | 2 |    0 |     |   250
 2 | 2 |    1 |     |   250
 2 | 2 |    2 |     |   250
 2 | 2 |    3 |     |   250
 2 | 2 |      |   0 |   100
 2 | 2 |      |   1 |   100
 2 | 2 |      |   2 |   100
 2 | 2 |      |   3 |   100
 2 | 2 |      |   4 |   100
 2 | 2 |      |   5 |   100
 2 | 2 |      |   6 |   100
 2 | 2 |      |   7 |   100
 2 | 2 |      |   8 |   100
 2 | 2 |      |   9 |   100
(28 rows)

select array(select row(v.a,s1.*) from (select two,four, count(*) from onek group by grouping sets(two,four) order by two,four) s1) from (values (1),(2)) v(a);
                                      array                                      
---------------------------------------------------------------------------------
 {"(1,0,,500)","(1,1,,500)","(1,,0,250)","(1,,1,250)","(1,,2,250)","(1,,3,250)"}
 {"(2,0,,500)","(2,1,,500)","(2,,0,250)","(2,,1,250)","(2,,2,250)","(2,,3,250)"}
(2 rows)

-- test the knapsack
set enable_indexscan = false;
set work_mem = '64kB';
explain (costs off)
  select unique1,
         count(two), count(four), count(ten),
         count(hundred), count(thousand), count(twothousand),
         count(*)
    from tenk1 group by grouping sets (unique1,twothousand,thousand,hundred,ten,four,two);
          QUERY PLAN           
-------------------------------
 MixedAggregate
   Hash Key: two
   Hash Key: four
   Hash Key: ten
   Hash Key: hundred
   Group Key: unique1
   Sort Key: twothousand
     Group Key: twothousand
   Sort Key: thousand
     Group Key: thousand
   ->  Sort
         Sort Key: unique1
         ->  Seq Scan on tenk1
(13 rows)

explain (costs off)
  select unique1,
         count(two), count(four), count(ten),
         count(hundred), count(thousand), count(twothousand),
         count(*)
    from tenk1 group by grouping sets (unique1,hundred,ten,four,two);
          QUERY PLAN           
-------------------------------
 MixedAggregate
   Hash Key: two
   Hash Key: four
   Hash Key: ten
   Hash Key: hundred
   Group Key: unique1
   ->  Sort
         Sort Key: unique1
         ->  Seq Scan on tenk1
(9 rows)

set work_mem = '384kB';
explain (costs off)
  select unique1,
         count(two), count(four), count(ten),
         count(hundred), count(thousand), count(twothousand),
         count(*)
    from tenk1 group by grouping sets (unique1,twothousand,thousand,hundred,ten,four,two);
          QUERY PLAN           
-------------------------------
 MixedAggregate
   Hash Key: two
   Hash Key: four
   Hash Key: ten
   Hash Key: hundred
   Hash Key: thousand
   Group Key: unique1
   Sort Key: twothousand
     Group Key: twothousand
   ->  Sort
         Sort Key: unique1
         ->  Seq Scan on tenk1
(12 rows)

-- check collation-sensitive matching between grouping expressions
-- (similar to a check for aggregates, but there are additional code
-- paths for GROUPING, so check again here)
select v||'a', case grouping(v||'a') when 1 then 1 else 0 end, count(*)
  from unnest(array[1,1], array['a','b']) u(i,v)
 group by rollup(i, v||'a') order by 1,3;
 ?column? | case | count 
----------+------+-------
 aa       |    0 |     1
 ba       |    0 |     1
          |    1 |     2
          |    1 |     2
(4 rows)

select v||'a', case when grouping(v||'a') = 1 then 1 else 0 end, count(*)
  from unnest(array[1,1], array['a','b']) u(i,v)
 group by rollup(i, v||'a') order by 1,3;
 ?column? | case | count 
----------+------+-------
 aa       |    0 |     1
 ba       |    0 |     1
          |    1 |     2
          |    1 |     2
(4 rows)

-- end
