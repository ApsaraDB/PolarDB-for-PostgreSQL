--
-- Test access privileges
--
-- Clean up in case a prior regression run failed
-- Suppress NOTICE messages when users/groups don't exist
SET client_min_messages TO 'warning';
DROP ROLE IF EXISTS regress_priv_group1;
ERROR:  cannot execute DROP ROLE in a read-only transaction
DROP ROLE IF EXISTS regress_priv_group2;
ERROR:  cannot execute DROP ROLE in a read-only transaction
DROP ROLE IF EXISTS regress_priv_user1;
ERROR:  cannot execute DROP ROLE in a read-only transaction
DROP ROLE IF EXISTS regress_priv_user2;
ERROR:  cannot execute DROP ROLE in a read-only transaction
DROP ROLE IF EXISTS regress_priv_user3;
ERROR:  cannot execute DROP ROLE in a read-only transaction
DROP ROLE IF EXISTS regress_priv_user4;
ERROR:  cannot execute DROP ROLE in a read-only transaction
DROP ROLE IF EXISTS regress_priv_user5;
ERROR:  cannot execute DROP ROLE in a read-only transaction
DROP ROLE IF EXISTS regress_priv_user6;
ERROR:  cannot execute DROP ROLE in a read-only transaction
SELECT lo_unlink(oid) FROM pg_largeobject_metadata WHERE oid >= 1000 AND oid < 3000 ORDER BY oid;
 lo_unlink 
-----------
(0 rows)

RESET client_min_messages;
-- test proper begins here
CREATE USER regress_priv_user1;
ERROR:  cannot execute CREATE ROLE in a read-only transaction
CREATE USER regress_priv_user2;
ERROR:  cannot execute CREATE ROLE in a read-only transaction
CREATE USER regress_priv_user3;
ERROR:  cannot execute CREATE ROLE in a read-only transaction
CREATE USER regress_priv_user4;
ERROR:  cannot execute CREATE ROLE in a read-only transaction
CREATE USER regress_priv_user5;
ERROR:  cannot execute CREATE ROLE in a read-only transaction
CREATE USER regress_priv_user5;	-- duplicate
ERROR:  cannot execute CREATE ROLE in a read-only transaction
CREATE GROUP regress_priv_group1;
ERROR:  cannot execute CREATE ROLE in a read-only transaction
CREATE GROUP regress_priv_group2 WITH USER regress_priv_user1, regress_priv_user2;
ERROR:  cannot execute CREATE ROLE in a read-only transaction
ALTER GROUP regress_priv_group1 ADD USER regress_priv_user4;
ERROR:  cannot execute ALTER ROLE in a read-only transaction
ALTER GROUP regress_priv_group2 ADD USER regress_priv_user2;	-- duplicate
ERROR:  cannot execute ALTER ROLE in a read-only transaction
ALTER GROUP regress_priv_group2 DROP USER regress_priv_user2;
ERROR:  cannot execute ALTER ROLE in a read-only transaction
GRANT regress_priv_group2 TO regress_priv_user4 WITH ADMIN OPTION;
ERROR:  cannot execute GRANT ROLE in a read-only transaction
-- test owner privileges
SET SESSION AUTHORIZATION regress_priv_user1;
SELECT session_user, current_user;
    session_user    |    current_user    
--------------------+--------------------
 regress_priv_user1 | regress_priv_user1
(1 row)

CREATE TABLE atest1 ( a int, b text );
ERROR:  cannot execute CREATE TABLE in a read-only transaction
SELECT * FROM atest1;
 a | b 
---+---
(0 rows)

INSERT INTO atest1 VALUES (1, 'one');
ERROR:  cannot execute INSERT in a read-only transaction
DELETE FROM atest1;
ERROR:  cannot execute DELETE in a read-only transaction
UPDATE atest1 SET a = 1 WHERE b = 'blech';
ERROR:  cannot execute UPDATE in a read-only transaction
TRUNCATE atest1;
ERROR:  cannot execute TRUNCATE TABLE in a read-only transaction
BEGIN;
LOCK atest1 IN ACCESS EXCLUSIVE MODE;
ERROR:  cannot execute LOCK TABLE during recovery
COMMIT;
REVOKE ALL ON atest1 FROM PUBLIC;
ERROR:  cannot execute REVOKE in a read-only transaction
SELECT * FROM atest1;
 a | b 
---+---
(0 rows)

GRANT ALL ON atest1 TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT SELECT ON atest1 TO regress_priv_user3, regress_priv_user4;
ERROR:  cannot execute GRANT in a read-only transaction
SELECT * FROM atest1;
 a | b 
---+---
(0 rows)

CREATE TABLE atest2 (col1 varchar(10), col2 boolean);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
GRANT SELECT ON atest2 TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT UPDATE ON atest2 TO regress_priv_user3;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT INSERT ON atest2 TO regress_priv_user4;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT TRUNCATE ON atest2 TO regress_priv_user5;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user2;
SELECT session_user, current_user;
    session_user    |    current_user    
--------------------+--------------------
 regress_priv_user2 | regress_priv_user2
(1 row)

-- try various combinations of queries on atest1 and atest2
SELECT * FROM atest1; -- ok
 a | b 
---+---
(0 rows)

SELECT * FROM atest2; -- ok
 col1 | col2 
------+------
(0 rows)

INSERT INTO atest1 VALUES (2, 'two'); -- ok
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO atest2 VALUES ('foo', true); -- fail
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO atest1 SELECT 1, b FROM atest1; -- ok
ERROR:  cannot execute INSERT in a read-only transaction
UPDATE atest1 SET a = 1 WHERE a = 2; -- ok
ERROR:  cannot execute UPDATE in a read-only transaction
UPDATE atest2 SET col2 = NOT col2; -- fail
ERROR:  cannot execute UPDATE in a read-only transaction
SELECT * FROM atest1 FOR UPDATE; -- ok
ERROR:  cannot execute SELECT FOR UPDATE in a read-only transaction
SELECT * FROM atest2 FOR UPDATE; -- fail
ERROR:  cannot execute SELECT FOR UPDATE in a read-only transaction
DELETE FROM atest2; -- fail
ERROR:  cannot execute DELETE in a read-only transaction
TRUNCATE atest2; -- fail
ERROR:  cannot execute TRUNCATE TABLE in a read-only transaction
BEGIN;
LOCK atest2 IN ACCESS EXCLUSIVE MODE; -- fail
ERROR:  cannot execute LOCK TABLE during recovery
COMMIT;
COPY atest2 FROM stdin; -- fail
ERROR:  permission denied for table atest2
GRANT ALL ON atest1 TO PUBLIC; -- fail
ERROR:  cannot execute GRANT in a read-only transaction
-- checks in subquery, both ok
SELECT * FROM atest1 WHERE ( b IN ( SELECT col1 FROM atest2 ) );
 a | b 
---+---
(0 rows)

SELECT * FROM atest2 WHERE ( col1 IN ( SELECT b FROM atest1 ) );
 col1 | col2 
------+------
(0 rows)

SET SESSION AUTHORIZATION regress_priv_user3;
SELECT session_user, current_user;
    session_user    |    current_user    
--------------------+--------------------
 regress_priv_user3 | regress_priv_user3
(1 row)

SELECT * FROM atest1; -- ok
 a |  b  
---+-----
 1 | two
 1 | two
(2 rows)

SELECT * FROM atest2; -- fail
ERROR:  permission denied for table atest2
INSERT INTO atest1 VALUES (2, 'two'); -- fail
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO atest2 VALUES ('foo', true); -- fail
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO atest1 SELECT 1, b FROM atest1; -- fail
ERROR:  cannot execute INSERT in a read-only transaction
UPDATE atest1 SET a = 1 WHERE a = 2; -- fail
ERROR:  cannot execute UPDATE in a read-only transaction
UPDATE atest2 SET col2 = NULL; -- ok
ERROR:  cannot execute UPDATE in a read-only transaction
UPDATE atest2 SET col2 = NOT col2; -- fails; requires SELECT on atest2
ERROR:  cannot execute UPDATE in a read-only transaction
UPDATE atest2 SET col2 = true FROM atest1 WHERE atest1.a = 5; -- ok
ERROR:  cannot execute UPDATE in a read-only transaction
SELECT * FROM atest1 FOR UPDATE; -- fail
ERROR:  cannot execute SELECT FOR UPDATE in a read-only transaction
SELECT * FROM atest2 FOR UPDATE; -- fail
ERROR:  cannot execute SELECT FOR UPDATE in a read-only transaction
DELETE FROM atest2; -- fail
ERROR:  cannot execute DELETE in a read-only transaction
TRUNCATE atest2; -- fail
ERROR:  cannot execute TRUNCATE TABLE in a read-only transaction
BEGIN;
LOCK atest2 IN ACCESS EXCLUSIVE MODE; -- ok
ERROR:  cannot execute LOCK TABLE during recovery
COMMIT;
COPY atest2 FROM stdin; -- fail
ERROR:  permission denied for table atest2
-- checks in subquery, both fail
SELECT * FROM atest1 WHERE ( b IN ( SELECT col1 FROM atest2 ) );
ERROR:  permission denied for table atest2
SELECT * FROM atest2 WHERE ( col1 IN ( SELECT b FROM atest1 ) );
ERROR:  permission denied for table atest2
SET SESSION AUTHORIZATION regress_priv_user4;
COPY atest2 FROM stdin; -- ok
ERROR:  cannot execute COPY FROM in a read-only transaction
SELECT * FROM atest1; -- ok
 a |  b  
---+-----
 1 | two
 1 | two
(2 rows)

-- test leaky-function protections in selfuncs
-- regress_priv_user1 will own a table and provide a view for it.
SET SESSION AUTHORIZATION regress_priv_user1;
CREATE TABLE atest12 as
  SELECT x AS a, 10001 - x AS b FROM generate_series(1,10000) x;
ERROR:  cannot execute CREATE TABLE AS in a read-only transaction
CREATE INDEX ON atest12 (a);
ERROR:  cannot execute CREATE INDEX in a read-only transaction
CREATE INDEX ON atest12 (abs(a));
ERROR:  cannot execute CREATE INDEX in a read-only transaction
VACUUM ANALYZE atest12;
ERROR:  cannot execute VACUUM during recovery
CREATE FUNCTION leak(integer,integer) RETURNS boolean
  AS $$begin return $1 < $2; end$$
  LANGUAGE plpgsql immutable;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
CREATE OPERATOR <<< (procedure = leak, leftarg = integer, rightarg = integer,
                     restrict = scalarltsel);
ERROR:  cannot execute CREATE OPERATOR in a read-only transaction
-- view with leaky operator
CREATE VIEW atest12v AS
  SELECT * FROM atest12 WHERE b <<< 5;
ERROR:  cannot execute CREATE VIEW in a read-only transaction
GRANT SELECT ON atest12v TO PUBLIC;
ERROR:  cannot execute GRANT in a read-only transaction
-- This plan should use nestloop, knowing that few rows will be selected.
EXPLAIN (COSTS OFF) SELECT * FROM atest12v x, atest12v y WHERE x.a = y.b;
                   QUERY PLAN                    
-------------------------------------------------
 Nested Loop
   ->  Seq Scan on atest12 atest12_1
         Filter: (b <<< 5)
   ->  Index Scan using atest12_a_idx on atest12
         Index Cond: (a = atest12_1.b)
         Filter: (b <<< 5)
(6 rows)

-- And this one.
EXPLAIN (COSTS OFF) SELECT * FROM atest12 x, atest12 y
  WHERE x.a = y.b and abs(y.a) <<< 5;
                    QUERY PLAN                     
---------------------------------------------------
 Nested Loop
   ->  Seq Scan on atest12 y
         Filter: (abs(a) <<< 5)
   ->  Index Scan using atest12_a_idx on atest12 x
         Index Cond: (a = y.b)
(5 rows)

-- Check if regress_priv_user2 can break security.
SET SESSION AUTHORIZATION regress_priv_user2;
CREATE FUNCTION leak2(integer,integer) RETURNS boolean
  AS $$begin raise notice 'leak % %', $1, $2; return $1 > $2; end$$
  LANGUAGE plpgsql immutable;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
CREATE OPERATOR >>> (procedure = leak2, leftarg = integer, rightarg = integer,
                     restrict = scalargtsel);
ERROR:  cannot execute CREATE OPERATOR in a read-only transaction
-- This should not show any "leak" notices before failing.
EXPLAIN (COSTS OFF) SELECT * FROM atest12 WHERE a >>> 0;
ERROR:  permission denied for table atest12
-- This plan should use hashjoin, as it will expect many rows to be selected.
EXPLAIN (COSTS OFF) SELECT * FROM atest12v x, atest12v y WHERE x.a = y.b;
                QUERY PLAN                 
-------------------------------------------
 Hash Join
   Hash Cond: (atest12.a = atest12_1.b)
   ->  Seq Scan on atest12
         Filter: (b <<< 5)
   ->  Hash
         ->  Seq Scan on atest12 atest12_1
               Filter: (b <<< 5)
(7 rows)

-- Now regress_priv_user1 grants sufficient access to regress_priv_user2.
SET SESSION AUTHORIZATION regress_priv_user1;
GRANT SELECT (a, b) ON atest12 TO PUBLIC;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user2;
-- Now regress_priv_user2 will also get a good row estimate.
EXPLAIN (COSTS OFF) SELECT * FROM atest12v x, atest12v y WHERE x.a = y.b;
                   QUERY PLAN                    
-------------------------------------------------
 Nested Loop
   ->  Seq Scan on atest12 atest12_1
         Filter: (b <<< 5)
   ->  Index Scan using atest12_a_idx on atest12
         Index Cond: (a = atest12_1.b)
         Filter: (b <<< 5)
(6 rows)

-- But not for this, due to lack of table-wide permissions needed
-- to make use of the expression index's statistics.
EXPLAIN (COSTS OFF) SELECT * FROM atest12 x, atest12 y
  WHERE x.a = y.b and abs(y.a) <<< 5;
              QUERY PLAN              
--------------------------------------
 Hash Join
   Hash Cond: (x.a = y.b)
   ->  Seq Scan on atest12 x
   ->  Hash
         ->  Seq Scan on atest12 y
               Filter: (abs(a) <<< 5)
(6 rows)

-- clean up (regress_priv_user1's objects are all dropped later)
DROP FUNCTION leak2(integer, integer) CASCADE;
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
-- groups
SET SESSION AUTHORIZATION regress_priv_user3;
CREATE TABLE atest3 (one int, two int, three int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
GRANT DELETE ON atest3 TO GROUP regress_priv_group2;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user1;
SELECT * FROM atest3; -- fail
ERROR:  permission denied for table atest3
DELETE FROM atest3; -- ok
ERROR:  cannot execute DELETE in a read-only transaction
-- views
SET SESSION AUTHORIZATION regress_priv_user3;
CREATE VIEW atestv1 AS SELECT * FROM atest1; -- ok
ERROR:  cannot execute CREATE VIEW in a read-only transaction
/* The next *should* fail, but it's not implemented that way yet. */
CREATE VIEW atestv2 AS SELECT * FROM atest2;
ERROR:  cannot execute CREATE VIEW in a read-only transaction
CREATE VIEW atestv3 AS SELECT * FROM atest3; -- ok
ERROR:  cannot execute CREATE VIEW in a read-only transaction
/* Empty view is a corner case that failed in 9.2. */
CREATE VIEW atestv0 AS SELECT 0 as x WHERE false; -- ok
ERROR:  cannot execute CREATE VIEW in a read-only transaction
SELECT * FROM atestv1; -- ok
 a |  b  
---+-----
 1 | two
 1 | two
(2 rows)

SELECT * FROM atestv2; -- fail
ERROR:  permission denied for table atest2
GRANT SELECT ON atestv1, atestv3 TO regress_priv_user4;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT SELECT ON atestv2 TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user4;
SELECT * FROM atestv1; -- ok
 a |  b  
---+-----
 1 | two
 1 | two
(2 rows)

SELECT * FROM atestv2; -- fail
ERROR:  permission denied for view atestv2
SELECT * FROM atestv3; -- ok
 one | two | three 
-----+-----+-------
(0 rows)

SELECT * FROM atestv0; -- fail
ERROR:  permission denied for view atestv0
-- Appendrels excluded by constraints failed to check permissions in 8.4-9.2.
select * from
  ((select a.q1 as x from int8_tbl a offset 0)
   union all
   (select b.q2 as x from int8_tbl b offset 0)) ss
where false;
ERROR:  permission denied for table int8_tbl
set constraint_exclusion = on;
select * from
  ((select a.q1 as x, random() from int8_tbl a where q1 > 0)
   union all
   (select b.q2 as x, random() from int8_tbl b where q2 > 0)) ss
where x < 0;
ERROR:  permission denied for table int8_tbl
reset constraint_exclusion;
CREATE VIEW atestv4 AS SELECT * FROM atestv3; -- nested view
ERROR:  cannot execute CREATE VIEW in a read-only transaction
SELECT * FROM atestv4; -- ok
 one | two | three 
-----+-----+-------
(0 rows)

GRANT SELECT ON atestv4 TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user2;
-- Two complex cases:
SELECT * FROM atestv3; -- fail
ERROR:  permission denied for view atestv3
SELECT * FROM atestv4; -- ok (even though regress_priv_user2 cannot access underlying atestv3)
 one | two | three 
-----+-----+-------
(0 rows)

SELECT * FROM atest2; -- ok
 col1 | col2 
------+------
 bar  | t
(1 row)

SELECT * FROM atestv2; -- fail (even though regress_priv_user2 can access underlying atest2)
ERROR:  permission denied for table atest2
-- Test column level permissions
SET SESSION AUTHORIZATION regress_priv_user1;
CREATE TABLE atest5 (one int, two int unique, three int, four int unique);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE TABLE atest6 (one int, two int, blue int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
GRANT SELECT (one), INSERT (two), UPDATE (three) ON atest5 TO regress_priv_user4;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT ALL (one) ON atest5 TO regress_priv_user3;
ERROR:  cannot execute GRANT in a read-only transaction
INSERT INTO atest5 VALUES (1,2,3);
ERROR:  cannot execute INSERT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user4;
SELECT * FROM atest5; -- fail
ERROR:  permission denied for table atest5
SELECT one FROM atest5; -- ok
 one 
-----
   1
(1 row)

COPY atest5 (one) TO stdout; -- ok
1
SELECT two FROM atest5; -- fail
ERROR:  permission denied for table atest5
COPY atest5 (two) TO stdout; -- fail
ERROR:  permission denied for table atest5
SELECT atest5 FROM atest5; -- fail
ERROR:  permission denied for table atest5
COPY atest5 (one,two) TO stdout; -- fail
ERROR:  permission denied for table atest5
SELECT 1 FROM atest5; -- ok
 ?column? 
----------
        1
(1 row)

SELECT 1 FROM atest5 a JOIN atest5 b USING (one); -- ok
 ?column? 
----------
        1
(1 row)

SELECT 1 FROM atest5 a JOIN atest5 b USING (two); -- fail
ERROR:  permission denied for table atest5
SELECT 1 FROM atest5 a NATURAL JOIN atest5 b; -- fail
ERROR:  permission denied for table atest5
SELECT (j.*) IS NULL FROM (atest5 a JOIN atest5 b USING (one)) j; -- fail
ERROR:  permission denied for table atest5
SELECT 1 FROM atest5 WHERE two = 2; -- fail
ERROR:  permission denied for table atest5
SELECT * FROM atest1, atest5; -- fail
ERROR:  permission denied for table atest5
SELECT atest1.* FROM atest1, atest5; -- ok
 a |  b  
---+-----
 1 | two
 1 | two
(2 rows)

SELECT atest1.*,atest5.one FROM atest1, atest5; -- ok
 a |  b  | one 
---+-----+-----
 1 | two |   1
 1 | two |   1
(2 rows)

SELECT atest1.*,atest5.one FROM atest1 JOIN atest5 ON (atest1.a = atest5.two); -- fail
ERROR:  permission denied for table atest5
SELECT atest1.*,atest5.one FROM atest1 JOIN atest5 ON (atest1.a = atest5.one); -- ok
 a |  b  | one 
---+-----+-----
 1 | two |   1
 1 | two |   1
(2 rows)

SELECT one, two FROM atest5; -- fail
ERROR:  permission denied for table atest5
SET SESSION AUTHORIZATION regress_priv_user1;
GRANT SELECT (one,two) ON atest6 TO regress_priv_user4;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user4;
SELECT one, two FROM atest5 NATURAL JOIN atest6; -- fail still
ERROR:  permission denied for table atest5
SET SESSION AUTHORIZATION regress_priv_user1;
GRANT SELECT (two) ON atest5 TO regress_priv_user4;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user4;
SELECT one, two FROM atest5 NATURAL JOIN atest6; -- ok now
 one | two 
-----+-----
(0 rows)

-- test column-level privileges for INSERT and UPDATE
INSERT INTO atest5 (two) VALUES (3); -- ok
ERROR:  cannot execute INSERT in a read-only transaction
COPY atest5 FROM stdin; -- fail
ERROR:  permission denied for table atest5
COPY atest5 (two) FROM stdin; -- ok
ERROR:  cannot execute COPY FROM in a read-only transaction
INSERT INTO atest5 (three) VALUES (4); -- fail
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO atest5 VALUES (5,5,5); -- fail
ERROR:  cannot execute INSERT in a read-only transaction
UPDATE atest5 SET three = 10; -- ok
ERROR:  cannot execute UPDATE in a read-only transaction
UPDATE atest5 SET one = 8; -- fail
ERROR:  cannot execute UPDATE in a read-only transaction
UPDATE atest5 SET three = 5, one = 2; -- fail
ERROR:  cannot execute UPDATE in a read-only transaction
-- Check that column level privs are enforced in RETURNING
-- Ok.
INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set three = 10;
ERROR:  cannot execute INSERT in a read-only transaction
-- Error. No SELECT on column three.
INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set three = 10 RETURNING atest5.three;
ERROR:  cannot execute INSERT in a read-only transaction
-- Ok.  May SELECT on column "one":
INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set three = 10 RETURNING atest5.one;
ERROR:  cannot execute INSERT in a read-only transaction
-- Check that column level privileges are enforced for EXCLUDED
-- Ok. we may select one
INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set three = EXCLUDED.one;
ERROR:  cannot execute INSERT in a read-only transaction
-- Error. No select rights on three
INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set three = EXCLUDED.three;
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set one = 8; -- fails (due to UPDATE)
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO atest5(three) VALUES (4) ON CONFLICT (two) DO UPDATE set three = 10; -- fails (due to INSERT)
ERROR:  cannot execute INSERT in a read-only transaction
-- Check that the columns in the inference require select privileges
INSERT INTO atest5(four) VALUES (4); -- fail
ERROR:  cannot execute INSERT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user1;
GRANT INSERT (four) ON atest5 TO regress_priv_user4;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user4;
INSERT INTO atest5(four) VALUES (4) ON CONFLICT (four) DO UPDATE set three = 3; -- fails (due to SELECT)
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO atest5(four) VALUES (4) ON CONFLICT ON CONSTRAINT atest5_four_key DO UPDATE set three = 3; -- fails (due to SELECT)
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO atest5(four) VALUES (4); -- ok
ERROR:  cannot execute INSERT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user1;
GRANT SELECT (four) ON atest5 TO regress_priv_user4;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user4;
INSERT INTO atest5(four) VALUES (4) ON CONFLICT (four) DO UPDATE set three = 3; -- ok
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO atest5(four) VALUES (4) ON CONFLICT ON CONSTRAINT atest5_four_key DO UPDATE set three = 3; -- ok
ERROR:  cannot execute INSERT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user1;
REVOKE ALL (one) ON atest5 FROM regress_priv_user4;
ERROR:  cannot execute REVOKE in a read-only transaction
GRANT SELECT (one,two,blue) ON atest6 TO regress_priv_user4;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user4;
SELECT one FROM atest5; -- fail
ERROR:  permission denied for table atest5
UPDATE atest5 SET one = 1; -- fail
ERROR:  cannot execute UPDATE in a read-only transaction
SELECT atest6 FROM atest6; -- ok
 atest6 
--------
(0 rows)

COPY atest6 TO stdout; -- ok
-- check error reporting with column privs
SET SESSION AUTHORIZATION regress_priv_user1;
CREATE TABLE t1 (c1 int, c2 int, c3 int check (c3 < 5), primary key (c1, c2));
ERROR:  cannot execute CREATE TABLE in a read-only transaction
GRANT SELECT (c1) ON t1 TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT INSERT (c1, c2, c3) ON t1 TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT UPDATE (c1, c2, c3) ON t1 TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
-- seed data
INSERT INTO t1 VALUES (1, 1, 1);
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO t1 VALUES (1, 2, 1);
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO t1 VALUES (2, 1, 2);
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO t1 VALUES (2, 2, 2);
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO t1 VALUES (3, 1, 3);
ERROR:  cannot execute INSERT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user2;
INSERT INTO t1 (c1, c2) VALUES (1, 1); -- fail, but row not shown
ERROR:  cannot execute INSERT in a read-only transaction
UPDATE t1 SET c2 = 1; -- fail, but row not shown
ERROR:  cannot execute UPDATE in a read-only transaction
INSERT INTO t1 (c1, c2) VALUES (null, null); -- fail, but see columns being inserted
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO t1 (c3) VALUES (null); -- fail, but see columns being inserted or have SELECT
ERROR:  cannot execute INSERT in a read-only transaction
INSERT INTO t1 (c1) VALUES (5); -- fail, but see columns being inserted or have SELECT
ERROR:  cannot execute INSERT in a read-only transaction
UPDATE t1 SET c3 = 10; -- fail, but see columns with SELECT rights, or being modified
ERROR:  cannot execute UPDATE in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user1;
DROP TABLE t1;
ERROR:  cannot execute DROP TABLE in a read-only transaction
-- test column-level privileges when involved with DELETE
SET SESSION AUTHORIZATION regress_priv_user1;
ALTER TABLE atest6 ADD COLUMN three integer;
ERROR:  cannot execute ALTER TABLE in a read-only transaction
GRANT DELETE ON atest5 TO regress_priv_user3;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT SELECT (two) ON atest5 TO regress_priv_user3;
ERROR:  cannot execute GRANT in a read-only transaction
REVOKE ALL (one) ON atest5 FROM regress_priv_user3;
ERROR:  cannot execute REVOKE in a read-only transaction
GRANT SELECT (one) ON atest5 TO regress_priv_user4;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user4;
SELECT atest6 FROM atest6; -- fail
ERROR:  permission denied for table atest6
SELECT one FROM atest5 NATURAL JOIN atest6; -- fail
ERROR:  permission denied for table atest5
SET SESSION AUTHORIZATION regress_priv_user1;
ALTER TABLE atest6 DROP COLUMN three;
ERROR:  cannot execute ALTER TABLE in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user4;
SELECT atest6 FROM atest6; -- ok
 atest6 
--------
(0 rows)

SELECT one FROM atest5 NATURAL JOIN atest6; -- ok
 one 
-----
(0 rows)

SET SESSION AUTHORIZATION regress_priv_user1;
ALTER TABLE atest6 DROP COLUMN two;
ERROR:  cannot execute ALTER TABLE in a read-only transaction
REVOKE SELECT (one,blue) ON atest6 FROM regress_priv_user4;
ERROR:  cannot execute REVOKE in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user4;
SELECT * FROM atest6; -- fail
ERROR:  permission denied for table atest6
SELECT 1 FROM atest6; -- fail
ERROR:  permission denied for table atest6
SET SESSION AUTHORIZATION regress_priv_user3;
DELETE FROM atest5 WHERE one = 1; -- fail
ERROR:  cannot execute DELETE in a read-only transaction
DELETE FROM atest5 WHERE two = 2; -- ok
ERROR:  cannot execute DELETE in a read-only transaction
-- check inheritance cases
SET SESSION AUTHORIZATION regress_priv_user1;
CREATE TABLE atestp1 (f1 int, f2 int) WITH OIDS;
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE TABLE atestp2 (fx int, fy int) WITH OIDS;
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE TABLE atestc (fz int) INHERITS (atestp1, atestp2);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
GRANT SELECT(fx,fy,oid) ON atestp2 TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT SELECT(fx) ON atestc TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user2;
SELECT fx FROM atestp2; -- ok
 fx 
----
(0 rows)

SELECT fy FROM atestp2; -- ok
 fy 
----
(0 rows)

SELECT atestp2 FROM atestp2; -- ok
 atestp2 
---------
(0 rows)

SELECT oid FROM atestp2; -- ok
 oid 
-----
(0 rows)

SELECT fy FROM atestc; -- fail
ERROR:  permission denied for table atestc
SET SESSION AUTHORIZATION regress_priv_user1;
GRANT SELECT(fy,oid) ON atestc TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user2;
SELECT fx FROM atestp2; -- still ok
 fx 
----
(0 rows)

SELECT fy FROM atestp2; -- ok
 fy 
----
(0 rows)

SELECT atestp2 FROM atestp2; -- ok
 atestp2 
---------
(0 rows)

SELECT oid FROM atestp2; -- ok
 oid 
-----
(0 rows)

-- privileges on functions, languages
-- switch to superuser
\c -
REVOKE ALL PRIVILEGES ON LANGUAGE sql FROM PUBLIC;
ERROR:  cannot execute REVOKE in a read-only transaction
GRANT USAGE ON LANGUAGE sql TO regress_priv_user1; -- ok
ERROR:  cannot execute GRANT in a read-only transaction
GRANT USAGE ON LANGUAGE c TO PUBLIC; -- fail
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user1;
GRANT USAGE ON LANGUAGE sql TO regress_priv_user2; -- fail
ERROR:  cannot execute GRANT in a read-only transaction
CREATE FUNCTION priv_testfunc1(int) RETURNS int AS 'select 2 * $1;' LANGUAGE sql;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
CREATE FUNCTION priv_testfunc2(int) RETURNS int AS 'select 3 * $1;' LANGUAGE sql;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
CREATE AGGREGATE priv_testagg1(int) (sfunc = int4pl, stype = int4);
ERROR:  cannot execute CREATE AGGREGATE in a read-only transaction
CREATE PROCEDURE priv_testproc1(int) AS 'select $1;' LANGUAGE sql;
ERROR:  cannot execute CREATE PROCEDURE in a read-only transaction
REVOKE ALL ON FUNCTION priv_testfunc1(int), priv_testfunc2(int), priv_testagg1(int) FROM PUBLIC;
ERROR:  cannot execute REVOKE in a read-only transaction
GRANT EXECUTE ON FUNCTION priv_testfunc1(int), priv_testfunc2(int), priv_testagg1(int) TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
REVOKE ALL ON FUNCTION priv_testproc1(int) FROM PUBLIC; -- fail, not a function
ERROR:  cannot execute REVOKE in a read-only transaction
REVOKE ALL ON PROCEDURE priv_testproc1(int) FROM PUBLIC;
ERROR:  cannot execute REVOKE in a read-only transaction
GRANT EXECUTE ON PROCEDURE priv_testproc1(int) TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT USAGE ON FUNCTION priv_testfunc1(int) TO regress_priv_user3; -- semantic error
ERROR:  cannot execute GRANT in a read-only transaction
GRANT USAGE ON FUNCTION priv_testagg1(int) TO regress_priv_user3; -- semantic error
ERROR:  cannot execute GRANT in a read-only transaction
GRANT USAGE ON PROCEDURE priv_testproc1(int) TO regress_priv_user3; -- semantic error
ERROR:  cannot execute GRANT in a read-only transaction
GRANT ALL PRIVILEGES ON FUNCTION priv_testfunc1(int) TO regress_priv_user4;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT ALL PRIVILEGES ON FUNCTION priv_testfunc_nosuch(int) TO regress_priv_user4;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT ALL PRIVILEGES ON FUNCTION priv_testagg1(int) TO regress_priv_user4;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT ALL PRIVILEGES ON PROCEDURE priv_testproc1(int) TO regress_priv_user4;
ERROR:  cannot execute GRANT in a read-only transaction
CREATE FUNCTION priv_testfunc4(boolean) RETURNS text
  AS 'select col1 from atest2 where col2 = $1;'
  LANGUAGE sql SECURITY DEFINER;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
GRANT EXECUTE ON FUNCTION priv_testfunc4(boolean) TO regress_priv_user3;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user2;
SELECT priv_testfunc1(5), priv_testfunc2(5); -- ok
 priv_testfunc1 | priv_testfunc2 
----------------+----------------
             10 |             15
(1 row)

CREATE FUNCTION priv_testfunc3(int) RETURNS int AS 'select 2 * $1;' LANGUAGE sql; -- fail
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
SELECT priv_testagg1(x) FROM (VALUES (1), (2), (3)) _(x); -- ok
 priv_testagg1 
---------------
             6
(1 row)

CALL priv_testproc1(6); -- ok
SET SESSION AUTHORIZATION regress_priv_user3;
SELECT priv_testfunc1(5); -- fail
ERROR:  permission denied for function priv_testfunc1
SELECT priv_testagg1(x) FROM (VALUES (1), (2), (3)) _(x); -- fail
ERROR:  permission denied for aggregate priv_testagg1
CALL priv_testproc1(6); -- fail
ERROR:  permission denied for procedure priv_testproc1
SELECT col1 FROM atest2 WHERE col2 = true; -- fail
ERROR:  permission denied for table atest2
SELECT priv_testfunc4(true); -- ok
 priv_testfunc4 
----------------
 bar
(1 row)

SET SESSION AUTHORIZATION regress_priv_user4;
SELECT priv_testfunc1(5); -- ok
 priv_testfunc1 
----------------
             10
(1 row)

SELECT priv_testagg1(x) FROM (VALUES (1), (2), (3)) _(x); -- ok
 priv_testagg1 
---------------
             6
(1 row)

CALL priv_testproc1(6); -- ok
DROP FUNCTION priv_testfunc1(int); -- fail
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
DROP AGGREGATE priv_testagg1(int); -- fail
ERROR:  cannot execute DROP AGGREGATE in a read-only transaction
DROP PROCEDURE priv_testproc1(int); -- fail
ERROR:  cannot execute DROP PROCEDURE in a read-only transaction
\c -
DROP FUNCTION priv_testfunc1(int); -- ok
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
-- restore to sanity
GRANT ALL PRIVILEGES ON LANGUAGE sql TO PUBLIC;
ERROR:  cannot execute GRANT in a read-only transaction
-- verify privilege checks on array-element coercions
BEGIN;
SELECT '{1}'::int4[]::int8[];
 int8 
------
 {1}
(1 row)

REVOKE ALL ON FUNCTION int8(integer) FROM PUBLIC;
ERROR:  cannot execute REVOKE in a read-only transaction
SELECT '{1}'::int4[]::int8[]; --superuser, suceed
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SET SESSION AUTHORIZATION regress_priv_user4;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT '{1}'::int4[]::int8[]; --other user, fail
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
-- privileges on types
-- switch to superuser
\c -
CREATE TYPE priv_testtype1 AS (a int, b text);
ERROR:  cannot execute CREATE TYPE in a read-only transaction
REVOKE USAGE ON TYPE priv_testtype1 FROM PUBLIC;
ERROR:  cannot execute REVOKE in a read-only transaction
GRANT USAGE ON TYPE priv_testtype1 TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT USAGE ON TYPE _priv_testtype1 TO regress_priv_user2; -- fail
ERROR:  cannot execute GRANT in a read-only transaction
GRANT USAGE ON DOMAIN priv_testtype1 TO regress_priv_user2; -- fail
ERROR:  cannot execute GRANT in a read-only transaction
CREATE DOMAIN priv_testdomain1 AS int;
ERROR:  cannot execute CREATE DOMAIN in a read-only transaction
REVOKE USAGE on DOMAIN priv_testdomain1 FROM PUBLIC;
ERROR:  cannot execute REVOKE in a read-only transaction
GRANT USAGE ON DOMAIN priv_testdomain1 TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT USAGE ON TYPE priv_testdomain1 TO regress_priv_user2; -- ok
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user1;
-- commands that should fail
CREATE AGGREGATE priv_testagg1a(priv_testdomain1) (sfunc = int4_sum, stype = bigint);
ERROR:  cannot execute CREATE AGGREGATE in a read-only transaction
CREATE DOMAIN priv_testdomain2a AS priv_testdomain1;
ERROR:  cannot execute CREATE DOMAIN in a read-only transaction
CREATE DOMAIN priv_testdomain3a AS int;
ERROR:  cannot execute CREATE DOMAIN in a read-only transaction
CREATE FUNCTION castfunc(int) RETURNS priv_testdomain3a AS $$ SELECT $1::priv_testdomain3a $$ LANGUAGE SQL;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
CREATE CAST (priv_testdomain1 AS priv_testdomain3a) WITH FUNCTION castfunc(int);
ERROR:  cannot execute CREATE CAST in a read-only transaction
DROP FUNCTION castfunc(int) CASCADE;
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
DROP DOMAIN priv_testdomain3a;
ERROR:  cannot execute DROP DOMAIN in a read-only transaction
CREATE FUNCTION priv_testfunc5a(a priv_testdomain1) RETURNS int LANGUAGE SQL AS $$ SELECT $1 $$;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
CREATE FUNCTION priv_testfunc6a(b int) RETURNS priv_testdomain1 LANGUAGE SQL AS $$ SELECT $1::priv_testdomain1 $$;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
CREATE OPERATOR !+! (PROCEDURE = int4pl, LEFTARG = priv_testdomain1, RIGHTARG = priv_testdomain1);
ERROR:  cannot execute CREATE OPERATOR in a read-only transaction
CREATE TABLE test5a (a int, b priv_testdomain1);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE TABLE test6a OF priv_testtype1;
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE TABLE test10a (a int[], b priv_testtype1[]);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE TABLE test9a (a int, b int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
ALTER TABLE test9a ADD COLUMN c priv_testdomain1;
ERROR:  cannot execute ALTER TABLE in a read-only transaction
ALTER TABLE test9a ALTER COLUMN b TYPE priv_testdomain1;
ERROR:  cannot execute ALTER TABLE in a read-only transaction
CREATE TYPE test7a AS (a int, b priv_testdomain1);
ERROR:  cannot execute CREATE TYPE in a read-only transaction
CREATE TYPE test8a AS (a int, b int);
ERROR:  cannot execute CREATE TYPE in a read-only transaction
ALTER TYPE test8a ADD ATTRIBUTE c priv_testdomain1;
ERROR:  cannot execute ALTER TYPE in a read-only transaction
ALTER TYPE test8a ALTER ATTRIBUTE b TYPE priv_testdomain1;
ERROR:  cannot execute ALTER TYPE in a read-only transaction
CREATE TABLE test11a AS (SELECT 1::priv_testdomain1 AS a);
ERROR:  cannot execute CREATE TABLE AS in a read-only transaction
REVOKE ALL ON TYPE priv_testtype1 FROM PUBLIC;
ERROR:  cannot execute REVOKE in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user2;
-- commands that should succeed
CREATE AGGREGATE priv_testagg1b(priv_testdomain1) (sfunc = int4_sum, stype = bigint);
ERROR:  cannot execute CREATE AGGREGATE in a read-only transaction
CREATE DOMAIN priv_testdomain2b AS priv_testdomain1;
ERROR:  cannot execute CREATE DOMAIN in a read-only transaction
CREATE DOMAIN priv_testdomain3b AS int;
ERROR:  cannot execute CREATE DOMAIN in a read-only transaction
CREATE FUNCTION castfunc(int) RETURNS priv_testdomain3b AS $$ SELECT $1::priv_testdomain3b $$ LANGUAGE SQL;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
CREATE CAST (priv_testdomain1 AS priv_testdomain3b) WITH FUNCTION castfunc(int);
ERROR:  cannot execute CREATE CAST in a read-only transaction
CREATE FUNCTION priv_testfunc5b(a priv_testdomain1) RETURNS int LANGUAGE SQL AS $$ SELECT $1 $$;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
CREATE FUNCTION priv_testfunc6b(b int) RETURNS priv_testdomain1 LANGUAGE SQL AS $$ SELECT $1::priv_testdomain1 $$;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
CREATE OPERATOR !! (PROCEDURE = priv_testfunc5b, RIGHTARG = priv_testdomain1);
ERROR:  cannot execute CREATE OPERATOR in a read-only transaction
CREATE TABLE test5b (a int, b priv_testdomain1);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE TABLE test6b OF priv_testtype1;
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE TABLE test10b (a int[], b priv_testtype1[]);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE TABLE test9b (a int, b int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
ALTER TABLE test9b ADD COLUMN c priv_testdomain1;
ERROR:  cannot execute ALTER TABLE in a read-only transaction
ALTER TABLE test9b ALTER COLUMN b TYPE priv_testdomain1;
ERROR:  cannot execute ALTER TABLE in a read-only transaction
CREATE TYPE test7b AS (a int, b priv_testdomain1);
ERROR:  cannot execute CREATE TYPE in a read-only transaction
CREATE TYPE test8b AS (a int, b int);
ERROR:  cannot execute CREATE TYPE in a read-only transaction
ALTER TYPE test8b ADD ATTRIBUTE c priv_testdomain1;
ERROR:  cannot execute ALTER TYPE in a read-only transaction
ALTER TYPE test8b ALTER ATTRIBUTE b TYPE priv_testdomain1;
ERROR:  cannot execute ALTER TYPE in a read-only transaction
CREATE TABLE test11b AS (SELECT 1::priv_testdomain1 AS a);
ERROR:  cannot execute CREATE TABLE AS in a read-only transaction
REVOKE ALL ON TYPE priv_testtype1 FROM PUBLIC;
ERROR:  cannot execute REVOKE in a read-only transaction
\c -
DROP AGGREGATE priv_testagg1b(priv_testdomain1);
ERROR:  cannot execute DROP AGGREGATE in a read-only transaction
DROP DOMAIN priv_testdomain2b;
ERROR:  cannot execute DROP DOMAIN in a read-only transaction
DROP OPERATOR !! (NONE, priv_testdomain1);
ERROR:  cannot execute DROP OPERATOR in a read-only transaction
DROP FUNCTION priv_testfunc5b(a priv_testdomain1);
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
DROP FUNCTION priv_testfunc6b(b int);
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
DROP TABLE test5b;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP TABLE test6b;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP TABLE test9b;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP TABLE test10b;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP TYPE test7b;
ERROR:  cannot execute DROP TYPE in a read-only transaction
DROP TYPE test8b;
ERROR:  cannot execute DROP TYPE in a read-only transaction
DROP CAST (priv_testdomain1 AS priv_testdomain3b);
ERROR:  cannot execute DROP CAST in a read-only transaction
DROP FUNCTION castfunc(int) CASCADE;
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
DROP DOMAIN priv_testdomain3b;
ERROR:  cannot execute DROP DOMAIN in a read-only transaction
DROP TABLE test11b;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP TYPE priv_testtype1; -- ok
ERROR:  cannot execute DROP TYPE in a read-only transaction
DROP DOMAIN priv_testdomain1; -- ok
ERROR:  cannot execute DROP DOMAIN in a read-only transaction
-- truncate
SET SESSION AUTHORIZATION regress_priv_user5;
TRUNCATE atest2; -- ok
ERROR:  cannot execute TRUNCATE TABLE in a read-only transaction
TRUNCATE atest3; -- fail
ERROR:  cannot execute TRUNCATE TABLE in a read-only transaction
-- has_table_privilege function
-- bad-input checks
select has_table_privilege(NULL,'pg_authid','select');
 has_table_privilege 
---------------------
 
(1 row)

select has_table_privilege('pg_shad','select');
ERROR:  relation "pg_shad" does not exist
select has_table_privilege('nosuchuser','pg_authid','select');
ERROR:  role "nosuchuser" does not exist
select has_table_privilege('pg_authid','sel');
ERROR:  unrecognized privilege type: "sel"
select has_table_privilege(-999999,'pg_authid','update');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(1,'select');
 has_table_privilege 
---------------------
 
(1 row)

-- superuser
\c -
select has_table_privilege(current_user,'pg_authid','select');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(current_user,'pg_authid','insert');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,'pg_authid','update')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,'pg_authid','delete')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

-- 'rule' privilege no longer exists, but for backwards compatibility
-- has_table_privilege still recognizes the keyword and says FALSE
select has_table_privilege(current_user,t1.oid,'rule')
from (select oid from pg_class where relname = 'pg_authid') as t1;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(current_user,t1.oid,'references')
from (select oid from pg_class where relname = 'pg_authid') as t1;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,t1.oid,'select')
from (select oid from pg_class where relname = 'pg_authid') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,t1.oid,'insert')
from (select oid from pg_class where relname = 'pg_authid') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege('pg_authid','update');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege('pg_authid','delete');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege('pg_authid','truncate');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t1.oid,'select')
from (select oid from pg_class where relname = 'pg_authid') as t1;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t1.oid,'trigger')
from (select oid from pg_class where relname = 'pg_authid') as t1;
 has_table_privilege 
---------------------
 t
(1 row)

-- non-superuser
SET SESSION AUTHORIZATION regress_priv_user3;
select has_table_privilege(current_user,'pg_class','select');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(current_user,'pg_class','insert');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,'pg_class','update')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,'pg_class','delete')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(current_user,t1.oid,'references')
from (select oid from pg_class where relname = 'pg_class') as t1;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,t1.oid,'select')
from (select oid from pg_class where relname = 'pg_class') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,t1.oid,'insert')
from (select oid from pg_class where relname = 'pg_class') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('pg_class','update');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('pg_class','delete');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('pg_class','truncate');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t1.oid,'select')
from (select oid from pg_class where relname = 'pg_class') as t1;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t1.oid,'trigger')
from (select oid from pg_class where relname = 'pg_class') as t1;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(current_user,'atest1','select');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(current_user,'atest1','insert');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,'atest1','update')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,'atest1','delete')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(current_user,t1.oid,'references')
from (select oid from pg_class where relname = 'atest1') as t1;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,t1.oid,'select')
from (select oid from pg_class where relname = 'atest1') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,t1.oid,'insert')
from (select oid from pg_class where relname = 'atest1') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('atest1','update');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('atest1','delete');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('atest1','truncate');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t1.oid,'select')
from (select oid from pg_class where relname = 'atest1') as t1;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t1.oid,'trigger')
from (select oid from pg_class where relname = 'atest1') as t1;
 has_table_privilege 
---------------------
 f
(1 row)

-- has_column_privilege function
-- bad-input checks (as non-super-user)
select has_column_privilege('pg_authid',NULL,'select');
 has_column_privilege 
----------------------
 
(1 row)

select has_column_privilege('pg_authid','nosuchcol','select');
ERROR:  column "nosuchcol" of relation "pg_authid" does not exist
select has_column_privilege(9999,'nosuchcol','select');
 has_column_privilege 
----------------------
 
(1 row)

select has_column_privilege(9999,99::int2,'select');
 has_column_privilege 
----------------------
 
(1 row)

select has_column_privilege('pg_authid',99::int2,'select');
 has_column_privilege 
----------------------
 
(1 row)

select has_column_privilege(9999,99::int2,'select');
 has_column_privilege 
----------------------
 
(1 row)

create temp table mytable(f1 int, f2 int, f3 int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
alter table mytable drop column f2;
ERROR:  cannot execute ALTER TABLE in a read-only transaction
select has_column_privilege('mytable','f2','select');
ERROR:  relation "mytable" does not exist
select has_column_privilege('mytable','........pg.dropped.2........','select');
ERROR:  relation "mytable" does not exist
select has_column_privilege('mytable',2::int2,'select');
ERROR:  relation "mytable" does not exist
revoke select on table mytable from regress_priv_user3;
ERROR:  cannot execute REVOKE in a read-only transaction
select has_column_privilege('mytable',2::int2,'select');
ERROR:  relation "mytable" does not exist
drop table mytable;
ERROR:  cannot execute DROP TABLE in a read-only transaction
-- Grant options
SET SESSION AUTHORIZATION regress_priv_user1;
CREATE TABLE atest4 (a int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
GRANT SELECT ON atest4 TO regress_priv_user2 WITH GRANT OPTION;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT UPDATE ON atest4 TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT SELECT ON atest4 TO GROUP regress_priv_group1 WITH GRANT OPTION;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user2;
GRANT SELECT ON atest4 TO regress_priv_user3;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT UPDATE ON atest4 TO regress_priv_user3; -- fail
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user1;
REVOKE SELECT ON atest4 FROM regress_priv_user3; -- does nothing
ERROR:  cannot execute REVOKE in a read-only transaction
SELECT has_table_privilege('regress_priv_user3', 'atest4', 'SELECT'); -- true
 has_table_privilege 
---------------------
 t
(1 row)

REVOKE SELECT ON atest4 FROM regress_priv_user2; -- fail
ERROR:  cannot execute REVOKE in a read-only transaction
REVOKE GRANT OPTION FOR SELECT ON atest4 FROM regress_priv_user2 CASCADE; -- ok
ERROR:  cannot execute REVOKE in a read-only transaction
SELECT has_table_privilege('regress_priv_user2', 'atest4', 'SELECT'); -- true
 has_table_privilege 
---------------------
 t
(1 row)

SELECT has_table_privilege('regress_priv_user3', 'atest4', 'SELECT'); -- false
 has_table_privilege 
---------------------
 f
(1 row)

SELECT has_table_privilege('regress_priv_user1', 'atest4', 'SELECT WITH GRANT OPTION'); -- true
 has_table_privilege 
---------------------
 t
(1 row)

-- Admin options
SET SESSION AUTHORIZATION regress_priv_user4;
CREATE FUNCTION dogrant_ok() RETURNS void LANGUAGE sql SECURITY DEFINER AS
	'GRANT regress_priv_group2 TO regress_priv_user5';
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
GRANT regress_priv_group2 TO regress_priv_user5; -- ok: had ADMIN OPTION
ERROR:  cannot execute GRANT ROLE in a read-only transaction
SET ROLE regress_priv_group2;
GRANT regress_priv_group2 TO regress_priv_user5; -- fails: SET ROLE suspended privilege
ERROR:  cannot execute GRANT ROLE in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user1;
GRANT regress_priv_group2 TO regress_priv_user5; -- fails: no ADMIN OPTION
ERROR:  cannot execute GRANT ROLE in a read-only transaction
SELECT dogrant_ok();			-- ok: SECURITY DEFINER conveys ADMIN
ERROR:  cannot execute GRANT ROLE in a read-only transaction
CONTEXT:  SQL function "dogrant_ok" statement 1
SET ROLE regress_priv_group2;
GRANT regress_priv_group2 TO regress_priv_user5; -- fails: SET ROLE did not help
ERROR:  cannot execute GRANT ROLE in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_group2;
GRANT regress_priv_group2 TO regress_priv_user5; -- ok: a role can self-admin
ERROR:  cannot execute GRANT ROLE in a read-only transaction
CREATE FUNCTION dogrant_fails() RETURNS void LANGUAGE sql SECURITY DEFINER AS
	'GRANT regress_priv_group2 TO regress_priv_user5';
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
SELECT dogrant_fails();			-- fails: no self-admin in SECURITY DEFINER
ERROR:  cannot execute GRANT ROLE in a read-only transaction
CONTEXT:  SQL function "dogrant_fails" statement 1
DROP FUNCTION dogrant_fails();
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
SET SESSION AUTHORIZATION regress_priv_user4;
DROP FUNCTION dogrant_ok();
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
REVOKE regress_priv_group2 FROM regress_priv_user5;
ERROR:  cannot execute REVOKE ROLE in a read-only transaction
-- has_sequence_privilege tests
\c -
CREATE SEQUENCE x_seq;
ERROR:  cannot execute CREATE SEQUENCE in a read-only transaction
GRANT USAGE on x_seq to regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
SELECT has_sequence_privilege('regress_priv_user1', 'atest1', 'SELECT');
ERROR:  "atest1" is not a sequence
SELECT has_sequence_privilege('regress_priv_user1', 'x_seq', 'INSERT');
ERROR:  unrecognized privilege type: "INSERT"
SELECT has_sequence_privilege('regress_priv_user1', 'x_seq', 'SELECT');
 has_sequence_privilege 
------------------------
 f
(1 row)

SET SESSION AUTHORIZATION regress_priv_user2;
SELECT has_sequence_privilege('x_seq', 'USAGE');
 has_sequence_privilege 
------------------------
 t
(1 row)

-- largeobject privilege tests
\c -
SET SESSION AUTHORIZATION regress_priv_user1;
SELECT lo_create(1001);
ERROR:  cannot assign TransactionIds during recovery
SELECT lo_create(1002);
ERROR:  cannot assign TransactionIds during recovery
SELECT lo_create(1003);
ERROR:  cannot assign TransactionIds during recovery
SELECT lo_create(1004);
ERROR:  cannot assign TransactionIds during recovery
SELECT lo_create(1005);
ERROR:  cannot assign TransactionIds during recovery
GRANT ALL ON LARGE OBJECT 1001 TO PUBLIC;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT SELECT ON LARGE OBJECT 1003 TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT SELECT,UPDATE ON LARGE OBJECT 1004 TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT ALL ON LARGE OBJECT 1005 TO regress_priv_user2;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT SELECT ON LARGE OBJECT 1005 TO regress_priv_user2 WITH GRANT OPTION;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT SELECT, INSERT ON LARGE OBJECT 1001 TO PUBLIC;	-- to be failed
ERROR:  cannot execute GRANT in a read-only transaction
GRANT SELECT, UPDATE ON LARGE OBJECT 1001 TO nosuchuser;	-- to be failed
ERROR:  cannot execute GRANT in a read-only transaction
GRANT SELECT, UPDATE ON LARGE OBJECT  999 TO PUBLIC;	-- to be failed
ERROR:  cannot execute GRANT in a read-only transaction
\c -
SET SESSION AUTHORIZATION regress_priv_user2;
SELECT lo_create(2001);
ERROR:  cannot assign TransactionIds during recovery
SELECT lo_create(2002);
ERROR:  cannot assign TransactionIds during recovery
SELECT loread(lo_open(1001, x'20000'::int), 32);	-- allowed, for now
 loread 
--------
 \x
(1 row)

SELECT lowrite(lo_open(1001, x'40000'::int), 'abcd');	-- fail, wrong mode
ERROR:  large object descriptor 0 was not opened for writing
SELECT loread(lo_open(1001, x'40000'::int), 32);
 loread 
--------
 \x
(1 row)

SELECT loread(lo_open(1002, x'40000'::int), 32);	-- to be denied
ERROR:  permission denied for large object 1002
SELECT loread(lo_open(1003, x'40000'::int), 32);
 loread 
--------
 \x
(1 row)

SELECT loread(lo_open(1004, x'40000'::int), 32);
 loread 
--------
 \x
(1 row)

SELECT lowrite(lo_open(1001, x'20000'::int), 'abcd');
ERROR:  cannot assign TransactionIds during recovery
SELECT lowrite(lo_open(1002, x'20000'::int), 'abcd');	-- to be denied
ERROR:  permission denied for large object 1002
SELECT lowrite(lo_open(1003, x'20000'::int), 'abcd');	-- to be denied
ERROR:  permission denied for large object 1003
SELECT lowrite(lo_open(1004, x'20000'::int), 'abcd');
ERROR:  cannot assign TransactionIds during recovery
GRANT SELECT ON LARGE OBJECT 1005 TO regress_priv_user3;
ERROR:  cannot execute GRANT in a read-only transaction
GRANT UPDATE ON LARGE OBJECT 1006 TO regress_priv_user3;	-- to be denied
ERROR:  cannot execute GRANT in a read-only transaction
REVOKE ALL ON LARGE OBJECT 2001, 2002 FROM PUBLIC;
ERROR:  cannot execute REVOKE in a read-only transaction
GRANT ALL ON LARGE OBJECT 2001 TO regress_priv_user3;
ERROR:  cannot execute GRANT in a read-only transaction
SELECT lo_unlink(1001);		-- to be denied
ERROR:  must be owner of large object 1001
SELECT lo_unlink(2002);
ERROR:  large object 2002 does not exist
\c -
-- confirm ACL setting
SELECT oid, pg_get_userbyid(lomowner) ownername, lomacl FROM pg_largeobject_metadata WHERE oid >= 1000 AND oid < 3000 ORDER BY oid;
 oid  |     ownername      |                                                            lomacl                                                            
------+--------------------+------------------------------------------------------------------------------------------------------------------------------
 1001 | regress_priv_user1 | {regress_priv_user1=rw/regress_priv_user1,=rw/regress_priv_user1}
 1002 | regress_priv_user1 | 
 1003 | regress_priv_user1 | {regress_priv_user1=rw/regress_priv_user1,regress_priv_user2=r/regress_priv_user1}
 1004 | regress_priv_user1 | {regress_priv_user1=rw/regress_priv_user1,regress_priv_user2=rw/regress_priv_user1}
 1005 | regress_priv_user1 | {regress_priv_user1=rw/regress_priv_user1,regress_priv_user2=r*w/regress_priv_user1,regress_priv_user3=r/regress_priv_user2}
 2001 | regress_priv_user2 | {regress_priv_user2=rw/regress_priv_user2,regress_priv_user3=rw/regress_priv_user2}
(6 rows)

SET SESSION AUTHORIZATION regress_priv_user3;
SELECT loread(lo_open(1001, x'40000'::int), 32);
   loread   
------------
 \x61626364
(1 row)

SELECT loread(lo_open(1003, x'40000'::int), 32);	-- to be denied
ERROR:  permission denied for large object 1003
SELECT loread(lo_open(1005, x'40000'::int), 32);
 loread 
--------
 \x
(1 row)

SELECT lo_truncate(lo_open(1005, x'20000'::int), 10);	-- to be denied
ERROR:  permission denied for large object 1005
SELECT lo_truncate(lo_open(2001, x'20000'::int), 10);
ERROR:  cannot assign TransactionIds during recovery
-- compatibility mode in largeobject permission
\c -
SET lo_compat_privileges = false;	-- default setting
SET SESSION AUTHORIZATION regress_priv_user4;
SELECT loread(lo_open(1002, x'40000'::int), 32);	-- to be denied
ERROR:  permission denied for large object 1002
SELECT lowrite(lo_open(1002, x'20000'::int), 'abcd');	-- to be denied
ERROR:  permission denied for large object 1002
SELECT lo_truncate(lo_open(1002, x'20000'::int), 10);	-- to be denied
ERROR:  permission denied for large object 1002
SELECT lo_put(1002, 1, 'abcd');				-- to be denied
ERROR:  permission denied for large object 1002
SELECT lo_unlink(1002);					-- to be denied
ERROR:  must be owner of large object 1002
SELECT lo_export(1001, '/dev/null');			-- to be denied
ERROR:  permission denied for function lo_export
SELECT lo_import('/dev/null');				-- to be denied
ERROR:  permission denied for function lo_import
SELECT lo_import('/dev/null', 2003);			-- to be denied
ERROR:  permission denied for function lo_import
\c -
SET lo_compat_privileges = true;	-- compatibility mode
SET SESSION AUTHORIZATION regress_priv_user4;
SELECT loread(lo_open(1002, x'40000'::int), 32);
 loread 
--------
 \x
(1 row)

SELECT lowrite(lo_open(1002, x'20000'::int), 'abcd');
ERROR:  cannot assign TransactionIds during recovery
SELECT lo_truncate(lo_open(1002, x'20000'::int), 10);
ERROR:  cannot assign TransactionIds during recovery
SELECT lo_unlink(1002);
ERROR:  cannot acquire lock mode AccessExclusiveLock on database objects while recovery is in progress
HINT:  Only RowExclusiveLock or less can be acquired on database objects during recovery.
SELECT lo_export(1001, '/dev/null');			-- to be denied
ERROR:  permission denied for function lo_export
-- don't allow unpriv users to access pg_largeobject contents
\c -
SELECT * FROM pg_largeobject LIMIT 0;
 loid | pageno | data 
------+--------+------
(0 rows)

SET SESSION AUTHORIZATION regress_priv_user1;
SELECT * FROM pg_largeobject LIMIT 0;			-- to be denied
ERROR:  permission denied for table pg_largeobject
-- test default ACLs
\c -
CREATE SCHEMA testns;
ERROR:  cannot execute CREATE SCHEMA in a read-only transaction
GRANT ALL ON SCHEMA testns TO regress_priv_user1;
ERROR:  cannot execute GRANT in a read-only transaction
CREATE TABLE testns.acltest1 (x int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
SELECT has_table_privilege('regress_priv_user1', 'testns.acltest1', 'SELECT'); -- no
 has_table_privilege 
---------------------
 f
(1 row)

SELECT has_table_privilege('regress_priv_user1', 'testns.acltest1', 'INSERT'); -- no
 has_table_privilege 
---------------------
 f
(1 row)

ALTER DEFAULT PRIVILEGES IN SCHEMA testns GRANT SELECT ON TABLES TO public;
ERROR:  cannot execute ALTER DEFAULT PRIVILEGES in a read-only transaction
SELECT has_table_privilege('regress_priv_user1', 'testns.acltest1', 'SELECT'); -- no
 has_table_privilege 
---------------------
 f
(1 row)

SELECT has_table_privilege('regress_priv_user1', 'testns.acltest1', 'INSERT'); -- no
 has_table_privilege 
---------------------
 f
(1 row)

DROP TABLE testns.acltest1;
ERROR:  cannot execute DROP TABLE in a read-only transaction
CREATE TABLE testns.acltest1 (x int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
SELECT has_table_privilege('regress_priv_user1', 'testns.acltest1', 'SELECT'); -- yes
 has_table_privilege 
---------------------
 t
(1 row)

SELECT has_table_privilege('regress_priv_user1', 'testns.acltest1', 'INSERT'); -- no
 has_table_privilege 
---------------------
 f
(1 row)

ALTER DEFAULT PRIVILEGES IN SCHEMA testns GRANT INSERT ON TABLES TO regress_priv_user1;
ERROR:  cannot execute ALTER DEFAULT PRIVILEGES in a read-only transaction
DROP TABLE testns.acltest1;
ERROR:  cannot execute DROP TABLE in a read-only transaction
CREATE TABLE testns.acltest1 (x int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
SELECT has_table_privilege('regress_priv_user1', 'testns.acltest1', 'SELECT'); -- yes
 has_table_privilege 
---------------------
 t
(1 row)

SELECT has_table_privilege('regress_priv_user1', 'testns.acltest1', 'INSERT'); -- yes
 has_table_privilege 
---------------------
 t
(1 row)

ALTER DEFAULT PRIVILEGES IN SCHEMA testns REVOKE INSERT ON TABLES FROM regress_priv_user1;
ERROR:  cannot execute ALTER DEFAULT PRIVILEGES in a read-only transaction
DROP TABLE testns.acltest1;
ERROR:  cannot execute DROP TABLE in a read-only transaction
CREATE TABLE testns.acltest1 (x int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
SELECT has_table_privilege('regress_priv_user1', 'testns.acltest1', 'SELECT'); -- yes
 has_table_privilege 
---------------------
 t
(1 row)

SELECT has_table_privilege('regress_priv_user1', 'testns.acltest1', 'INSERT'); -- no
 has_table_privilege 
---------------------
 f
(1 row)

ALTER DEFAULT PRIVILEGES FOR ROLE regress_priv_user1 REVOKE EXECUTE ON FUNCTIONS FROM public;
ERROR:  cannot execute ALTER DEFAULT PRIVILEGES in a read-only transaction
ALTER DEFAULT PRIVILEGES IN SCHEMA testns GRANT USAGE ON SCHEMAS TO regress_priv_user2; -- error
ERROR:  cannot execute ALTER DEFAULT PRIVILEGES in a read-only transaction
--
-- Testing blanket default grants is very hazardous since it might change
-- the privileges attached to objects created by concurrent regression tests.
-- To avoid that, be sure to revoke the privileges again before committing.
--
BEGIN;
ALTER DEFAULT PRIVILEGES GRANT USAGE ON SCHEMAS TO regress_priv_user2;
ERROR:  cannot execute ALTER DEFAULT PRIVILEGES in a read-only transaction
CREATE SCHEMA testns2;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT has_schema_privilege('regress_priv_user2', 'testns2', 'USAGE'); -- yes
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT has_schema_privilege('regress_priv_user2', 'testns2', 'CREATE'); -- no
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ALTER DEFAULT PRIVILEGES REVOKE USAGE ON SCHEMAS FROM regress_priv_user2;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
CREATE SCHEMA testns3;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT has_schema_privilege('regress_priv_user2', 'testns3', 'USAGE'); -- no
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT has_schema_privilege('regress_priv_user2', 'testns3', 'CREATE'); -- no
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ALTER DEFAULT PRIVILEGES GRANT ALL ON SCHEMAS TO regress_priv_user2;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
CREATE SCHEMA testns4;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT has_schema_privilege('regress_priv_user2', 'testns4', 'USAGE'); -- yes
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT has_schema_privilege('regress_priv_user2', 'testns4', 'CREATE'); -- yes
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ALTER DEFAULT PRIVILEGES REVOKE ALL ON SCHEMAS FROM regress_priv_user2;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
CREATE SCHEMA testns5;
ERROR:  cannot execute CREATE SCHEMA in a read-only transaction
SELECT has_schema_privilege('regress_priv_user2', 'testns5', 'USAGE'); -- no
 has_schema_privilege 
----------------------
 f
(1 row)

SELECT has_schema_privilege('regress_priv_user2', 'testns5', 'CREATE'); -- no
 has_schema_privilege 
----------------------
 f
(1 row)

SET ROLE regress_priv_user1;
CREATE FUNCTION testns.foo() RETURNS int AS 'select 1' LANGUAGE sql;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
CREATE AGGREGATE testns.agg1(int) (sfunc = int4pl, stype = int4);
ERROR:  cannot execute CREATE AGGREGATE in a read-only transaction
CREATE PROCEDURE testns.bar() AS 'select 1' LANGUAGE sql;
ERROR:  cannot execute CREATE PROCEDURE in a read-only transaction
SELECT has_function_privilege('regress_priv_user2', 'testns.foo()', 'EXECUTE'); -- no
 has_function_privilege 
------------------------
 f
(1 row)

SELECT has_function_privilege('regress_priv_user2', 'testns.agg1(int)', 'EXECUTE'); -- no
 has_function_privilege 
------------------------
 f
(1 row)

SELECT has_function_privilege('regress_priv_user2', 'testns.bar()', 'EXECUTE'); -- no
 has_function_privilege 
------------------------
 f
(1 row)

ALTER DEFAULT PRIVILEGES IN SCHEMA testns GRANT EXECUTE ON ROUTINES to public;
ERROR:  cannot execute ALTER DEFAULT PRIVILEGES in a read-only transaction
DROP FUNCTION testns.foo();
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
CREATE FUNCTION testns.foo() RETURNS int AS 'select 1' LANGUAGE sql;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
DROP AGGREGATE testns.agg1(int);
ERROR:  cannot execute DROP AGGREGATE in a read-only transaction
CREATE AGGREGATE testns.agg1(int) (sfunc = int4pl, stype = int4);
ERROR:  cannot execute CREATE AGGREGATE in a read-only transaction
DROP PROCEDURE testns.bar();
ERROR:  cannot execute DROP PROCEDURE in a read-only transaction
CREATE PROCEDURE testns.bar() AS 'select 1' LANGUAGE sql;
ERROR:  cannot execute CREATE PROCEDURE in a read-only transaction
SELECT has_function_privilege('regress_priv_user2', 'testns.foo()', 'EXECUTE'); -- yes
 has_function_privilege 
------------------------
 t
(1 row)

SELECT has_function_privilege('regress_priv_user2', 'testns.agg1(int)', 'EXECUTE'); -- yes
 has_function_privilege 
------------------------
 t
(1 row)

SELECT has_function_privilege('regress_priv_user2', 'testns.bar()', 'EXECUTE'); -- yes (counts as function here)
 has_function_privilege 
------------------------
 t
(1 row)

DROP FUNCTION testns.foo();
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
DROP AGGREGATE testns.agg1(int);
ERROR:  cannot execute DROP AGGREGATE in a read-only transaction
DROP PROCEDURE testns.bar();
ERROR:  cannot execute DROP PROCEDURE in a read-only transaction
ALTER DEFAULT PRIVILEGES FOR ROLE regress_priv_user1 REVOKE USAGE ON TYPES FROM public;
ERROR:  cannot execute ALTER DEFAULT PRIVILEGES in a read-only transaction
CREATE DOMAIN testns.priv_testdomain1 AS int;
ERROR:  cannot execute CREATE DOMAIN in a read-only transaction
SELECT has_type_privilege('regress_priv_user2', 'testns.priv_testdomain1', 'USAGE'); -- no
 has_type_privilege 
--------------------
 f
(1 row)

ALTER DEFAULT PRIVILEGES IN SCHEMA testns GRANT USAGE ON TYPES to public;
ERROR:  cannot execute ALTER DEFAULT PRIVILEGES in a read-only transaction
DROP DOMAIN testns.priv_testdomain1;
ERROR:  cannot execute DROP DOMAIN in a read-only transaction
CREATE DOMAIN testns.priv_testdomain1 AS int;
ERROR:  cannot execute CREATE DOMAIN in a read-only transaction
SELECT has_type_privilege('regress_priv_user2', 'testns.priv_testdomain1', 'USAGE'); -- yes
 has_type_privilege 
--------------------
 t
(1 row)

DROP DOMAIN testns.priv_testdomain1;
ERROR:  cannot execute DROP DOMAIN in a read-only transaction
RESET ROLE;
SELECT count(*)
  FROM pg_default_acl d LEFT JOIN pg_namespace n ON defaclnamespace = n.oid
  WHERE nspname = 'testns';
 count 
-------
     3
(1 row)

DROP SCHEMA testns CASCADE;
ERROR:  cannot execute DROP SCHEMA in a read-only transaction
DROP SCHEMA testns2 CASCADE;
ERROR:  cannot execute DROP SCHEMA in a read-only transaction
DROP SCHEMA testns3 CASCADE;
ERROR:  cannot execute DROP SCHEMA in a read-only transaction
DROP SCHEMA testns4 CASCADE;
ERROR:  cannot execute DROP SCHEMA in a read-only transaction
DROP SCHEMA testns5 CASCADE;
ERROR:  cannot execute DROP SCHEMA in a read-only transaction
SELECT d.*     -- check that entries went away
  FROM pg_default_acl d LEFT JOIN pg_namespace n ON defaclnamespace = n.oid
  WHERE nspname IS NULL AND defaclnamespace != 0;
 defaclrole | defaclnamespace | defaclobjtype | defaclacl 
------------+-----------------+---------------+-----------
(0 rows)

-- Grant on all objects of given type in a schema
\c -
CREATE SCHEMA testns;
ERROR:  cannot execute CREATE SCHEMA in a read-only transaction
CREATE TABLE testns.t1 (f1 int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE TABLE testns.t2 (f1 int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
SELECT has_table_privilege('regress_priv_user1', 'testns.t1', 'SELECT'); -- false
 has_table_privilege 
---------------------
 f
(1 row)

GRANT ALL ON ALL TABLES IN SCHEMA testns TO regress_priv_user1;
ERROR:  cannot execute GRANT in a read-only transaction
SELECT has_table_privilege('regress_priv_user1', 'testns.t1', 'SELECT'); -- true
 has_table_privilege 
---------------------
 t
(1 row)

SELECT has_table_privilege('regress_priv_user1', 'testns.t2', 'SELECT'); -- true
 has_table_privilege 
---------------------
 t
(1 row)

REVOKE ALL ON ALL TABLES IN SCHEMA testns FROM regress_priv_user1;
ERROR:  cannot execute REVOKE in a read-only transaction
SELECT has_table_privilege('regress_priv_user1', 'testns.t1', 'SELECT'); -- false
 has_table_privilege 
---------------------
 f
(1 row)

SELECT has_table_privilege('regress_priv_user1', 'testns.t2', 'SELECT'); -- false
 has_table_privilege 
---------------------
 f
(1 row)

CREATE FUNCTION testns.priv_testfunc(int) RETURNS int AS 'select 3 * $1;' LANGUAGE sql;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
CREATE AGGREGATE testns.priv_testagg(int) (sfunc = int4pl, stype = int4);
ERROR:  cannot execute CREATE AGGREGATE in a read-only transaction
CREATE PROCEDURE testns.priv_testproc(int) AS 'select 3' LANGUAGE sql;
ERROR:  cannot execute CREATE PROCEDURE in a read-only transaction
SELECT has_function_privilege('regress_priv_user1', 'testns.priv_testfunc(int)', 'EXECUTE'); -- true by default
 has_function_privilege 
------------------------
 t
(1 row)

SELECT has_function_privilege('regress_priv_user1', 'testns.priv_testagg(int)', 'EXECUTE'); -- true by default
 has_function_privilege 
------------------------
 t
(1 row)

SELECT has_function_privilege('regress_priv_user1', 'testns.priv_testproc(int)', 'EXECUTE'); -- true by default
 has_function_privilege 
------------------------
 t
(1 row)

REVOKE ALL ON ALL FUNCTIONS IN SCHEMA testns FROM PUBLIC;
ERROR:  cannot execute REVOKE in a read-only transaction
SELECT has_function_privilege('regress_priv_user1', 'testns.priv_testfunc(int)', 'EXECUTE'); -- false
 has_function_privilege 
------------------------
 f
(1 row)

SELECT has_function_privilege('regress_priv_user1', 'testns.priv_testagg(int)', 'EXECUTE'); -- false
 has_function_privilege 
------------------------
 f
(1 row)

SELECT has_function_privilege('regress_priv_user1', 'testns.priv_testproc(int)', 'EXECUTE'); -- still true, not a function
 has_function_privilege 
------------------------
 t
(1 row)

REVOKE ALL ON ALL PROCEDURES IN SCHEMA testns FROM PUBLIC;
ERROR:  cannot execute REVOKE in a read-only transaction
SELECT has_function_privilege('regress_priv_user1', 'testns.priv_testproc(int)', 'EXECUTE'); -- now false
 has_function_privilege 
------------------------
 f
(1 row)

GRANT ALL ON ALL ROUTINES IN SCHEMA testns TO PUBLIC;
ERROR:  cannot execute GRANT in a read-only transaction
SELECT has_function_privilege('regress_priv_user1', 'testns.priv_testfunc(int)', 'EXECUTE'); -- true
 has_function_privilege 
------------------------
 t
(1 row)

SELECT has_function_privilege('regress_priv_user1', 'testns.priv_testagg(int)', 'EXECUTE'); -- true
 has_function_privilege 
------------------------
 t
(1 row)

SELECT has_function_privilege('regress_priv_user1', 'testns.priv_testproc(int)', 'EXECUTE'); -- true
 has_function_privilege 
------------------------
 t
(1 row)

\set VERBOSITY terse \\ -- suppress cascade details
DROP SCHEMA testns CASCADE;
ERROR:  cannot execute DROP SCHEMA in a read-only transaction
\set VERBOSITY default
-- Change owner of the schema & and rename of new schema owner
\c -
CREATE ROLE regress_schemauser1 superuser login;
ERROR:  cannot execute CREATE ROLE in a read-only transaction
CREATE ROLE regress_schemauser2 superuser login;
ERROR:  cannot execute CREATE ROLE in a read-only transaction
SET SESSION ROLE regress_schemauser1;
CREATE SCHEMA testns;
ERROR:  cannot execute CREATE SCHEMA in a read-only transaction
SELECT nspname, rolname FROM pg_namespace, pg_roles WHERE pg_namespace.nspname = 'testns' AND pg_namespace.nspowner = pg_roles.oid;
 nspname |       rolname       
---------+---------------------
 testns  | regress_schemauser1
(1 row)

ALTER SCHEMA testns OWNER TO regress_schemauser2;
ERROR:  cannot execute ALTER SCHEMA in a read-only transaction
ALTER ROLE regress_schemauser2 RENAME TO regress_schemauser_renamed;
ERROR:  cannot execute ALTER ROLE in a read-only transaction
SELECT nspname, rolname FROM pg_namespace, pg_roles WHERE pg_namespace.nspname = 'testns' AND pg_namespace.nspowner = pg_roles.oid;
 nspname |          rolname           
---------+----------------------------
 testns  | regress_schemauser_renamed
(1 row)

set session role regress_schemauser_renamed;
\set VERBOSITY terse \\ -- suppress cascade details
DROP SCHEMA testns CASCADE;
ERROR:  cannot execute DROP SCHEMA in a read-only transaction
\set VERBOSITY default
-- clean up
\c -
DROP ROLE regress_schemauser1;
ERROR:  cannot execute DROP ROLE in a read-only transaction
DROP ROLE regress_schemauser_renamed;
ERROR:  cannot execute DROP ROLE in a read-only transaction
-- test that dependent privileges are revoked (or not) properly
\c -
set session role regress_priv_user1;
create table dep_priv_test (a int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
grant select on dep_priv_test to regress_priv_user2 with grant option;
ERROR:  cannot execute GRANT in a read-only transaction
grant select on dep_priv_test to regress_priv_user3 with grant option;
ERROR:  cannot execute GRANT in a read-only transaction
set session role regress_priv_user2;
grant select on dep_priv_test to regress_priv_user4 with grant option;
ERROR:  cannot execute GRANT in a read-only transaction
set session role regress_priv_user3;
grant select on dep_priv_test to regress_priv_user4 with grant option;
ERROR:  cannot execute GRANT in a read-only transaction
set session role regress_priv_user4;
grant select on dep_priv_test to regress_priv_user5;
ERROR:  cannot execute GRANT in a read-only transaction
\dp dep_priv_test
set session role regress_priv_user2;
revoke select on dep_priv_test from regress_priv_user4 cascade;
ERROR:  cannot execute REVOKE in a read-only transaction
\dp dep_priv_test
set session role regress_priv_user3;
revoke select on dep_priv_test from regress_priv_user4 cascade;
ERROR:  cannot execute REVOKE in a read-only transaction
\dp dep_priv_test
set session role regress_priv_user1;
drop table dep_priv_test;
ERROR:  cannot execute DROP TABLE in a read-only transaction
-- clean up
\c
drop sequence x_seq;
ERROR:  cannot execute DROP SEQUENCE in a read-only transaction
DROP AGGREGATE priv_testagg1(int);
ERROR:  cannot execute DROP AGGREGATE in a read-only transaction
DROP FUNCTION priv_testfunc2(int);
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
DROP FUNCTION priv_testfunc4(boolean);
ERROR:  cannot execute DROP FUNCTION in a read-only transaction
DROP PROCEDURE priv_testproc1(int);
ERROR:  cannot execute DROP PROCEDURE in a read-only transaction
DROP VIEW atestv0;
ERROR:  cannot execute DROP VIEW in a read-only transaction
DROP VIEW atestv1;
ERROR:  cannot execute DROP VIEW in a read-only transaction
DROP VIEW atestv2;
ERROR:  cannot execute DROP VIEW in a read-only transaction
-- this should cascade to drop atestv4
DROP VIEW atestv3 CASCADE;
ERROR:  cannot execute DROP VIEW in a read-only transaction
-- this should complain "does not exist"
DROP VIEW atestv4;
ERROR:  cannot execute DROP VIEW in a read-only transaction
DROP TABLE atest1;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP TABLE atest2;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP TABLE atest3;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP TABLE atest4;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP TABLE atest5;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP TABLE atest6;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP TABLE atestc;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP TABLE atestp1;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP TABLE atestp2;
ERROR:  cannot execute DROP TABLE in a read-only transaction
SELECT lo_unlink(oid) FROM pg_largeobject_metadata WHERE oid >= 1000 AND oid < 3000 ORDER BY oid;
 lo_unlink 
-----------
(0 rows)

DROP GROUP regress_priv_group1;
ERROR:  cannot execute DROP ROLE in a read-only transaction
DROP GROUP regress_priv_group2;
ERROR:  cannot execute DROP ROLE in a read-only transaction
-- these are needed to clean up permissions
REVOKE USAGE ON LANGUAGE sql FROM regress_priv_user1;
ERROR:  cannot execute REVOKE in a read-only transaction
DROP OWNED BY regress_priv_user1;
ERROR:  cannot execute DROP OWNED in a read-only transaction
DROP USER regress_priv_user1;
ERROR:  cannot execute DROP ROLE in a read-only transaction
DROP USER regress_priv_user2;
ERROR:  cannot execute DROP ROLE in a read-only transaction
DROP USER regress_priv_user3;
ERROR:  cannot execute DROP ROLE in a read-only transaction
DROP USER regress_priv_user4;
ERROR:  cannot execute DROP ROLE in a read-only transaction
DROP USER regress_priv_user5;
ERROR:  cannot execute DROP ROLE in a read-only transaction
DROP USER regress_priv_user6;
ERROR:  cannot execute DROP ROLE in a read-only transaction
-- permissions with LOCK TABLE
CREATE USER regress_locktable_user;
ERROR:  cannot execute CREATE ROLE in a read-only transaction
CREATE TABLE lock_table (a int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
-- LOCK TABLE and SELECT permission
GRANT SELECT ON lock_table TO regress_locktable_user;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_locktable_user;
BEGIN;
LOCK TABLE lock_table IN ROW EXCLUSIVE MODE; -- should fail
ERROR:  permission denied for table lock_table
ROLLBACK;
BEGIN;
LOCK TABLE lock_table IN ACCESS SHARE MODE; -- should pass
COMMIT;
BEGIN;
LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE; -- should fail
ERROR:  cannot execute LOCK TABLE during recovery
ROLLBACK;
\c
REVOKE SELECT ON lock_table FROM regress_locktable_user;
ERROR:  cannot execute REVOKE in a read-only transaction
-- LOCK TABLE and INSERT permission
GRANT INSERT ON lock_table TO regress_locktable_user;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_locktable_user;
BEGIN;
LOCK TABLE lock_table IN ROW EXCLUSIVE MODE; -- should pass
COMMIT;
BEGIN;
LOCK TABLE lock_table IN ACCESS SHARE MODE; -- should fail
ERROR:  permission denied for table lock_table
ROLLBACK;
BEGIN;
LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE; -- should fail
ERROR:  cannot execute LOCK TABLE during recovery
ROLLBACK;
\c
REVOKE INSERT ON lock_table FROM regress_locktable_user;
ERROR:  cannot execute REVOKE in a read-only transaction
-- LOCK TABLE and UPDATE permission
GRANT UPDATE ON lock_table TO regress_locktable_user;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_locktable_user;
BEGIN;
LOCK TABLE lock_table IN ROW EXCLUSIVE MODE; -- should pass
COMMIT;
BEGIN;
LOCK TABLE lock_table IN ACCESS SHARE MODE; -- should fail
ERROR:  permission denied for table lock_table
ROLLBACK;
BEGIN;
LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE; -- should pass
ERROR:  cannot execute LOCK TABLE during recovery
COMMIT;
\c
REVOKE UPDATE ON lock_table FROM regress_locktable_user;
ERROR:  cannot execute REVOKE in a read-only transaction
-- LOCK TABLE and DELETE permission
GRANT DELETE ON lock_table TO regress_locktable_user;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_locktable_user;
BEGIN;
LOCK TABLE lock_table IN ROW EXCLUSIVE MODE; -- should pass
COMMIT;
BEGIN;
LOCK TABLE lock_table IN ACCESS SHARE MODE; -- should fail
ERROR:  permission denied for table lock_table
ROLLBACK;
BEGIN;
LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE; -- should pass
ERROR:  cannot execute LOCK TABLE during recovery
COMMIT;
\c
REVOKE DELETE ON lock_table FROM regress_locktable_user;
ERROR:  cannot execute REVOKE in a read-only transaction
-- LOCK TABLE and TRUNCATE permission
GRANT TRUNCATE ON lock_table TO regress_locktable_user;
ERROR:  cannot execute GRANT in a read-only transaction
SET SESSION AUTHORIZATION regress_locktable_user;
BEGIN;
LOCK TABLE lock_table IN ROW EXCLUSIVE MODE; -- should pass
COMMIT;
BEGIN;
LOCK TABLE lock_table IN ACCESS SHARE MODE; -- should fail
ERROR:  permission denied for table lock_table
ROLLBACK;
BEGIN;
LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE; -- should pass
ERROR:  cannot execute LOCK TABLE during recovery
COMMIT;
\c
REVOKE TRUNCATE ON lock_table FROM regress_locktable_user;
ERROR:  cannot execute REVOKE in a read-only transaction
-- clean up
DROP TABLE lock_table;
ERROR:  cannot execute DROP TABLE in a read-only transaction
DROP USER regress_locktable_user;
ERROR:  cannot execute DROP ROLE in a read-only transaction
