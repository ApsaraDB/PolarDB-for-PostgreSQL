--
-- TEMP
-- Test temp relations and indexes
--
-- test temp table/index masking
CREATE TABLE temptest(col int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE INDEX i_temptest ON temptest(col);
ERROR:  cannot execute CREATE INDEX in a read-only transaction
CREATE TEMP TABLE temptest(tcol int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE INDEX i_temptest ON temptest(tcol);
ERROR:  cannot execute CREATE INDEX in a read-only transaction
SELECT * FROM temptest;
 col 
-----
(0 rows)

DROP INDEX i_temptest;
ERROR:  cannot execute DROP INDEX in a read-only transaction
DROP TABLE temptest;
ERROR:  cannot execute DROP TABLE in a read-only transaction
SELECT * FROM temptest;
 col 
-----
(0 rows)

DROP INDEX i_temptest;
ERROR:  cannot execute DROP INDEX in a read-only transaction
DROP TABLE temptest;
ERROR:  cannot execute DROP TABLE in a read-only transaction
-- test temp table selects
CREATE TABLE temptest(col int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
INSERT INTO temptest VALUES (1);
ERROR:  cannot execute INSERT in a read-only transaction
CREATE TEMP TABLE temptest(tcol float);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
INSERT INTO temptest VALUES (2.1);
ERROR:  cannot execute INSERT in a read-only transaction
SELECT * FROM temptest;
 col 
-----
   1
(1 row)

DROP TABLE temptest;
ERROR:  cannot execute DROP TABLE in a read-only transaction
SELECT * FROM temptest;
 col 
-----
   1
(1 row)

DROP TABLE temptest;
ERROR:  cannot execute DROP TABLE in a read-only transaction
-- test temp table deletion
CREATE TEMP TABLE temptest(col int);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
\c
SELECT * FROM temptest;
ERROR:  relation "temptest" does not exist
LINE 1: SELECT * FROM temptest;
                      ^
-- Test ON COMMIT DELETE ROWS
CREATE TEMP TABLE temptest(col int) ON COMMIT DELETE ROWS;
ERROR:  cannot execute CREATE TABLE in a read-only transaction
BEGIN;
INSERT INTO temptest VALUES (1);
ERROR:  relation "temptest" does not exist
LINE 1: INSERT INTO temptest VALUES (1);
                    ^
INSERT INTO temptest VALUES (2);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT * FROM temptest;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
SELECT * FROM temptest;
ERROR:  relation "temptest" does not exist
LINE 1: SELECT * FROM temptest;
                      ^
DROP TABLE temptest;
ERROR:  cannot execute DROP TABLE in a read-only transaction
BEGIN;
CREATE TEMP TABLE temptest(col) ON COMMIT DELETE ROWS AS SELECT 1;
ERROR:  cannot execute CREATE TABLE AS in a read-only transaction
SELECT * FROM temptest;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
SELECT * FROM temptest;
ERROR:  relation "temptest" does not exist
LINE 1: SELECT * FROM temptest;
                      ^
DROP TABLE temptest;
ERROR:  cannot execute DROP TABLE in a read-only transaction
-- Test ON COMMIT DROP
BEGIN;
CREATE TEMP TABLE temptest(col int) ON COMMIT DROP;
ERROR:  cannot execute CREATE TABLE in a read-only transaction
INSERT INTO temptest VALUES (1);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
INSERT INTO temptest VALUES (2);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT * FROM temptest;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
SELECT * FROM temptest;
ERROR:  relation "temptest" does not exist
LINE 1: SELECT * FROM temptest;
                      ^
BEGIN;
CREATE TEMP TABLE temptest(col) ON COMMIT DROP AS SELECT 1;
ERROR:  cannot execute CREATE TABLE AS in a read-only transaction
SELECT * FROM temptest;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
SELECT * FROM temptest;
ERROR:  relation "temptest" does not exist
LINE 1: SELECT * FROM temptest;
                      ^
-- ON COMMIT is only allowed for TEMP
CREATE TABLE temptest(col int) ON COMMIT DELETE ROWS;
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE TABLE temptest(col) ON COMMIT DELETE ROWS AS SELECT 1;
ERROR:  cannot execute CREATE TABLE AS in a read-only transaction
-- Test foreign keys
BEGIN;
CREATE TEMP TABLE temptest1(col int PRIMARY KEY);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE TEMP TABLE temptest2(col int REFERENCES temptest1)
  ON COMMIT DELETE ROWS;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
INSERT INTO temptest1 VALUES (1);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
INSERT INTO temptest2 VALUES (1);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
SELECT * FROM temptest1;
ERROR:  relation "temptest1" does not exist
LINE 1: SELECT * FROM temptest1;
                      ^
SELECT * FROM temptest2;
ERROR:  relation "temptest2" does not exist
LINE 1: SELECT * FROM temptest2;
                      ^
BEGIN;
CREATE TEMP TABLE temptest3(col int PRIMARY KEY) ON COMMIT DELETE ROWS;
ERROR:  cannot execute CREATE TABLE in a read-only transaction
CREATE TEMP TABLE temptest4(col int REFERENCES temptest3);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
COMMIT;
-- Test manipulation of temp schema's placement in search path
create table public.whereami (f1 text);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
insert into public.whereami values ('public');
ERROR:  cannot execute INSERT in a read-only transaction
create temp table whereami (f1 text);
ERROR:  cannot execute CREATE TABLE in a read-only transaction
insert into whereami values ('temp');
ERROR:  cannot execute INSERT in a read-only transaction
create function public.whoami() returns text
  as $$select 'public'::text$$ language sql;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
create function pg_temp.whoami() returns text
  as $$select 'temp'::text$$ language sql;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
-- default should have pg_temp implicitly first, but only for tables
select * from whereami;
   f1   
--------
 public
(1 row)

select whoami();
 whoami 
--------
 public
(1 row)

-- can list temp first explicitly, but it still doesn't affect functions
set search_path = pg_temp, public;
select * from whereami;
   f1   
--------
 public
(1 row)

select whoami();
 whoami 
--------
 public
(1 row)

-- or put it last for security
set search_path = public, pg_temp;
select * from whereami;
   f1   
--------
 public
(1 row)

select whoami();
 whoami 
--------
 public
(1 row)

-- you can invoke a temp function explicitly, though
select pg_temp.whoami();
ERROR:  schema "pg_temp" does not exist
LINE 1: select pg_temp.whoami();
               ^
drop table public.whereami;
ERROR:  cannot execute DROP TABLE in a read-only transaction
-- For partitioned temp tables, ON COMMIT actions ignore storage-less
-- partitioned tables.
begin;
create temp table temp_parted_oncommit (a int)
  partition by list (a) on commit delete rows;
ERROR:  cannot execute CREATE TABLE in a read-only transaction
create temp table temp_parted_oncommit_1
  partition of temp_parted_oncommit
  for values in (1) on commit delete rows;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
insert into temp_parted_oncommit values (1);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
commit;
-- partitions are emptied by the previous commit
select * from temp_parted_oncommit;
ERROR:  relation "temp_parted_oncommit" does not exist
LINE 1: select * from temp_parted_oncommit;
                      ^
drop table temp_parted_oncommit;
ERROR:  cannot execute DROP TABLE in a read-only transaction
-- Check dependencies between ON COMMIT actions with a partitioned
-- table and its partitions.  Using ON COMMIT DROP on a parent removes
-- the whole set.
begin;
create temp table temp_parted_oncommit_test (a int)
  partition by list (a) on commit drop;
ERROR:  cannot execute CREATE TABLE in a read-only transaction
create temp table temp_parted_oncommit_test1
  partition of temp_parted_oncommit_test
  for values in (1) on commit delete rows;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
create temp table temp_parted_oncommit_test2
  partition of temp_parted_oncommit_test
  for values in (2) on commit drop;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
insert into temp_parted_oncommit_test values (1), (2);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
commit;
-- no relations remain in this case.
select relname from pg_class where relname like 'temp_parted_oncommit_test%';
 relname 
---------
(0 rows)

-- Using ON COMMIT DELETE on a partitioned table does not remove
-- all rows if partitions preserve their data.
begin;
create temp table temp_parted_oncommit_test (a int)
  partition by list (a) on commit delete rows;
ERROR:  cannot execute CREATE TABLE in a read-only transaction
create temp table temp_parted_oncommit_test1
  partition of temp_parted_oncommit_test
  for values in (1) on commit preserve rows;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
create temp table temp_parted_oncommit_test2
  partition of temp_parted_oncommit_test
  for values in (2) on commit drop;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
insert into temp_parted_oncommit_test values (1), (2);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
commit;
-- Data from the remaining partition is still here as its rows are
-- preserved.
select * from temp_parted_oncommit_test;
ERROR:  relation "temp_parted_oncommit_test" does not exist
LINE 1: select * from temp_parted_oncommit_test;
                      ^
-- two relations remain in this case.
select relname from pg_class where relname like 'temp_parted_oncommit_test%';
          relname           
----------------------------
 temp_parted_oncommit_test
 temp_parted_oncommit_test1
(2 rows)

drop table temp_parted_oncommit_test;
ERROR:  cannot execute DROP TABLE in a read-only transaction
-- Check dependencies between ON COMMIT actions with inheritance trees.
-- Using ON COMMIT DROP on a parent removes the whole set.
begin;
create temp table temp_inh_oncommit_test (a int) on commit drop;
ERROR:  cannot execute CREATE TABLE in a read-only transaction
create temp table temp_inh_oncommit_test1 ()
  inherits(temp_inh_oncommit_test) on commit delete rows;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
insert into temp_inh_oncommit_test1 values (1);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
commit;
-- no relations remain in this case
select relname from pg_class where relname like 'temp_inh_oncommit_test%';
 relname 
---------
(0 rows)

-- Data on the parent is removed, and the child goes away.
begin;
create temp table temp_inh_oncommit_test (a int) on commit delete rows;
ERROR:  cannot execute CREATE TABLE in a read-only transaction
create temp table temp_inh_oncommit_test1 ()
  inherits(temp_inh_oncommit_test) on commit drop;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
insert into temp_inh_oncommit_test1 values (1);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
insert into temp_inh_oncommit_test values (1);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
commit;
select * from temp_inh_oncommit_test;
ERROR:  relation "temp_inh_oncommit_test" does not exist
LINE 1: select * from temp_inh_oncommit_test;
                      ^
-- one relation remains
select relname from pg_class where relname like 'temp_inh_oncommit_test%';
        relname         
------------------------
 temp_inh_oncommit_test
(1 row)

drop table temp_inh_oncommit_test;
ERROR:  cannot execute DROP TABLE in a read-only transaction
-- Tests with two-phase commit
-- Transactions creating objects in a temporary namespace cannot be used
-- with two-phase commit.
-- These cases generate errors about temporary namespace.
-- Function creation
begin;
create function pg_temp.twophase_func() returns void as
  $$ select '2pc_func'::text $$ language sql;
ERROR:  cannot execute CREATE FUNCTION in a read-only transaction
prepare transaction 'twophase_func';
ERROR:  cannot execute PREPARE TRANSACTION during recovery
-- Function drop
create function pg_temp.twophase_func() returns void as
  $$ select '2pc_func'::text $$ language sql;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
begin;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
drop function pg_temp.twophase_func();
ERROR:  current transaction is aborted, commands ignored until end of transaction block
prepare transaction 'twophase_func';
ERROR:  cannot execute PREPARE TRANSACTION during recovery
-- Operator creation
begin;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
create operator pg_temp.@@ (leftarg = int4, rightarg = int4, procedure = int4mi);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
prepare transaction 'twophase_operator';
ERROR:  cannot execute PREPARE TRANSACTION during recovery
-- These generate errors about temporary tables.
begin;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
create type pg_temp.twophase_type as (a int);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
prepare transaction 'twophase_type';
ERROR:  cannot execute PREPARE TRANSACTION during recovery
begin;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
create view pg_temp.twophase_view as select 1;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
prepare transaction 'twophase_view';
ERROR:  cannot execute PREPARE TRANSACTION during recovery
begin;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
create sequence pg_temp.twophase_seq;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
prepare transaction 'twophase_sequence';
ERROR:  cannot execute PREPARE TRANSACTION during recovery
-- Temporary tables cannot be used with two-phase commit.
create temp table twophase_tab (a int);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
begin;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
select a from twophase_tab;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
prepare transaction 'twophase_tab';
ERROR:  cannot execute PREPARE TRANSACTION during recovery
begin;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
insert into twophase_tab values (1);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
prepare transaction 'twophase_tab';
ERROR:  cannot execute PREPARE TRANSACTION during recovery
begin;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
lock twophase_tab in access exclusive mode;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
prepare transaction 'twophase_tab';
ERROR:  cannot execute PREPARE TRANSACTION during recovery
begin;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
drop table twophase_tab;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
prepare transaction 'twophase_tab';
ERROR:  cannot execute PREPARE TRANSACTION during recovery
-- Corner case: current_schema may create a temporary schema if namespace
-- creation is pending, so check after that.  First reset the connection
-- to remove the temporary namespace, and make sure that non-parallel plans
-- are used.
\c -
SET max_parallel_workers = 0;
SET max_parallel_workers_per_gather = 0;
SET search_path TO 'pg_temp';
BEGIN;
SELECT current_schema() ~ 'pg_temp' AS is_temp_schema;
ERROR:  cannot create temporary tables during recovery
PREPARE TRANSACTION 'twophase_search';
ERROR:  cannot execute PREPARE TRANSACTION during recovery
