CREATE EXTENSION test_cancel_key;
-- disable cancel key
select pg_backend_pid() != 0 as result;
 result 
--------
 t
(1 row)

select count(*) from pg_stat_activity where pid = 0;
 count 
-------
     0
(1 row)

select count(*) from pg_stat_get_activity(pg_backend_pid()) where pid = 0;
 count 
-------
     0
(1 row)

select count(*) from pg_stat_get_activity(-1) where pid = 0;
 count 
-------
     0
(1 row)

select count(*) from pg_stat_get_activity(-2) where pid = 0;
 count 
-------
     0
(1 row)

set polar_virtual_pid = 0;
ERROR:  POLAR: Unable to set virtual pid when not under proxy mode
select pg_backend_pid() != 0 as result;
 result 
--------
 t
(1 row)

set polar_virtual_pid = 999;
ERROR:  POLAR: Unable to set virtual pid when not under proxy mode
select pg_backend_pid() != 999 as result;
 result 
--------
 t
(1 row)

set polar_virtual_pid = 10000009;
ERROR:  POLAR: Unable to set virtual pid when not under proxy mode
select pg_backend_pid() != 10000009 as result;
 result 
--------
 t
(1 row)

select count(*) from pg_stat_activity where pid > 10000000;
 count 
-------
     0
(1 row)

select count(*) from pg_stat_get_activity(pg_backend_pid()) where pid > 10000000;
 count 
-------
     0
(1 row)

select count(*) from pg_stat_get_activity(-1) where pid > 10000000;
 count 
-------
     0
(1 row)

select count(*) from pg_stat_get_activity(-2) where pid > 10000000;
 count 
-------
     0
(1 row)

set polar_cancel_key = 0;
ERROR:  POLAR: Unable to set cancel key when not under proxy mode
set polar_cancel_key = -1;
ERROR:  POLAR: Unable to set cancel key when not under proxy mode
set polar_cancel_key = 999;
ERROR:  POLAR: Unable to set cancel key when not under proxy mode
select pg_cancel_backend(pg_backend_pid());
ERROR:  canceling statement due to user request
-- enable cancel key, we can set vpid and ckey
SELECT test_cancel_key(true);
 test_cancel_key 
-----------------
 
(1 row)

select pg_backend_pid() != 0 as result;
 result 
--------
 t
(1 row)

select count(*) from pg_stat_activity where pid = 0;
 count 
-------
     0
(1 row)

select count(*) from pg_stat_get_activity(pg_backend_pid()) where pid = 0;
 count 
-------
     0
(1 row)

select count(*) from pg_stat_get_activity(-1) where pid = 0;
 count 
-------
     0
(1 row)

select count(*) from pg_stat_get_activity(-2) where pid = 0;
 count 
-------
     0
(1 row)

set polar_virtual_pid = 0;
ERROR:  POLAR: Invalid virtual pid: 0, should between (10^7, 2*10^7)
select pg_backend_pid() != 0 as result;
 result 
--------
 t
(1 row)

set polar_virtual_pid = 999;
ERROR:  POLAR: Invalid virtual pid: 999, should between (10^7, 2*10^7)
select pg_backend_pid() != 999 as result;
 result 
--------
 t
(1 row)

set polar_virtual_pid = 10000009;
select pg_backend_pid() = 10000009 as result;
 result 
--------
 t
(1 row)

select count(*) from pg_stat_activity where pid > 10000000;
 count 
-------
     1
(1 row)

select count(*) from pg_stat_get_activity(pg_backend_pid()) where pid > 10000000;
 count 
-------
     1
(1 row)

select count(*) from pg_stat_get_activity(-1) where pid > 10000000;
 count 
-------
     1
(1 row)

select count(*) from pg_stat_get_activity(-2) where pid > 10000000;
 count 
-------
     0
(1 row)

set polar_cancel_key = 0;
set polar_cancel_key = -1;
set polar_cancel_key = 999;
select pg_cancel_backend(pg_backend_pid());
ERROR:  canceling statement due to user request
-- disable cancel key again, vpid is gone
SELECT test_cancel_key(false);
 test_cancel_key 
-----------------
 
(1 row)

select pg_backend_pid() = 10000009 as result;
 result 
--------
 f
(1 row)

select count(*) from pg_stat_activity where pid > 10000000;
 count 
-------
     0
(1 row)

select count(*) from pg_stat_get_activity(pg_backend_pid()) where pid > 10000000;
 count 
-------
     0
(1 row)

select count(*) from pg_stat_get_activity(-1) where pid > 10000000;
 count 
-------
     0
(1 row)

select count(*) from pg_stat_get_activity(-2) where pid > 10000000;
 count 
-------
     0
(1 row)

-- parallel woker test
SELECT test_cancel_key(true);
 test_cancel_key 
-----------------
 
(1 row)

select pg_backend_pid() = 10000009 as result;
 result 
--------
 t
(1 row)

create table t(id int);
insert into t select generate_series(1,1234567);
explain (costs off) select count(*) from t;
                QUERY PLAN                
------------------------------------------
 Finalize Aggregate
   ->  Gather
         Workers Planned: 2
         ->  Partial Aggregate
               ->  Parallel Seq Scan on t
(5 rows)

select count(*) from t;
  count  
---------
 1234567
(1 row)

DROP EXTENSION test_cancel_key;
