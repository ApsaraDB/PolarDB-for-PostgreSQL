--
-- PARALLEL
--
create or replace function parallel_restricted(int) returns int as
  $$begin return $1; end$$ language plpgsql parallel restricted;
-- Serializable isolation would disable parallel query, so explicitly use an
-- arbitrary other level.
begin isolation level repeatable read;
-- encourage use of parallel plans
set parallel_setup_cost=0;
set parallel_tuple_cost=0;
set min_parallel_table_scan_size=0;
set max_parallel_workers_per_gather=4;
explain (costs off)
  select count(*) from a_star;
             QUERY PLAN             
------------------------------------
 Aggregate
   ->  Append
         ->  Foreign Scan on a_star
         ->  Foreign Scan on b_star
         ->  Foreign Scan on c_star
         ->  Foreign Scan on d_star
         ->  Foreign Scan on e_star
         ->  Foreign Scan on f_star
(8 rows)

select count(*) from a_star;
 count 
-------
    50
(1 row)

-- test that parallel_restricted function doesn't run in worker
alter table tenk1 set (parallel_workers = 4);
explain (verbose, costs off)
select parallel_restricted(unique1) from tenk1
  where stringu1 = 'GRAAAA' order by 1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Sort
   Output: (parallel_restricted(unique1))
   Sort Key: (parallel_restricted(tenk1.unique1))
   ->  Foreign Scan on public.tenk1
         Output: parallel_restricted(unique1)
         Remote SQL: SELECT unique1 FROM public.tenk1 WHERE ((stringu1 = 'GRAAAA'::name))
(6 rows)

-- test parallel plan when group by expression is in target list.
explain (costs off)
	select length(stringu1) from tenk1 group by length(stringu1);
              QUERY PLAN               
---------------------------------------
 HashAggregate
   Group Key: length((stringu1)::text)
   ->  Foreign Scan on tenk1
(3 rows)

select length(stringu1) from tenk1 group by length(stringu1);
 length 
--------
      6
(1 row)

explain (costs off)
	select stringu1, count(*) from tenk1 group by stringu1 order by stringu1;
            QUERY PLAN             
-----------------------------------
 Sort
   Sort Key: stringu1
   ->  HashAggregate
         Group Key: stringu1
         ->  Foreign Scan on tenk1
(5 rows)

-- test that parallel plan for aggregates is not selected when
-- target list contains parallel restricted clause.
explain (costs off)
	select  sum(parallel_restricted(unique1)) from tenk1
	group by(parallel_restricted(unique1));
                QUERY PLAN                 
-------------------------------------------
 HashAggregate
   Group Key: parallel_restricted(unique1)
   ->  Foreign Scan on tenk1
(3 rows)

-- test prepared statement
prepare tenk1_count(integer) As select  count((unique1)) from tenk1 where hundred > $1;
explain (costs off) execute tenk1_count(1);
         QUERY PLAN          
-----------------------------
 Aggregate
   ->  Foreign Scan on tenk1
(2 rows)

execute tenk1_count(1);
 count 
-------
  9800
(1 row)

deallocate tenk1_count;
-- test parallel plans for queries containing un-correlated subplans.
alter table tenk2 set (parallel_workers = 0);
explain (costs off)
	select count(*) from tenk1 where (two, four) not in
	(select hundred, thousand from tenk2 where thousand > 100);
                QUERY PLAN                
------------------------------------------
 Aggregate
   ->  Foreign Scan on tenk1
         Filter: (NOT (hashed SubPlan 1))
         SubPlan 1
           ->  Foreign Scan on tenk2
(5 rows)

select count(*) from tenk1 where (two, four) not in
	(select hundred, thousand from tenk2 where thousand > 100);
 count 
-------
 10000
(1 row)

-- this is not parallel-safe due to use of random() within SubLink's testexpr:
explain (costs off)
	select * from tenk1 where (unique1 + random())::integer not in
	(select ten from tenk2);
             QUERY PLAN             
------------------------------------
 Foreign Scan on tenk1
   Filter: (NOT (hashed SubPlan 1))
   SubPlan 1
     ->  Foreign Scan on tenk2
(4 rows)

alter table tenk2 reset (parallel_workers);
-- test parallel index scans.
set enable_seqscan to off;
set enable_bitmapscan to off;
explain (costs off)
	select  count((unique1)) from tenk1 where hundred > 1;
         QUERY PLAN          
-----------------------------
 Aggregate
   ->  Foreign Scan on tenk1
(2 rows)

select  count((unique1)) from tenk1 where hundred > 1;
 count 
-------
  9800
(1 row)

-- test parallel index-only scans.
explain (costs off)
	select  count(*) from tenk1 where thousand > 95;
         QUERY PLAN          
-----------------------------
 Aggregate
   ->  Foreign Scan on tenk1
(2 rows)

select  count(*) from tenk1 where thousand > 95;
 count 
-------
  9040
(1 row)

-- test rescan cases too
set enable_material = false;
explain (costs off)
select * from
  (select count(unique1) from tenk1 where hundred > 10) ss
  right join (values (1),(2),(3)) v(x) on true;
            QUERY PLAN             
-----------------------------------
 Nested Loop Left Join
   ->  Values Scan on "*VALUES*"
   ->  Aggregate
         ->  Foreign Scan on tenk1
(4 rows)

select * from
  (select count(unique1) from tenk1 where hundred > 10) ss
  right join (values (1),(2),(3)) v(x) on true;
 count | x 
-------+---
  8900 | 1
  8900 | 2
  8900 | 3
(3 rows)

explain (costs off)
select * from
  (select count(*) from tenk1 where thousand > 99) ss
  right join (values (1),(2),(3)) v(x) on true;
            QUERY PLAN             
-----------------------------------
 Nested Loop Left Join
   ->  Values Scan on "*VALUES*"
   ->  Aggregate
         ->  Foreign Scan on tenk1
(4 rows)

select * from
  (select count(*) from tenk1 where thousand > 99) ss
  right join (values (1),(2),(3)) v(x) on true;
 count | x 
-------+---
  9000 | 1
  9000 | 2
  9000 | 3
(3 rows)

reset enable_material;
reset enable_seqscan;
reset enable_bitmapscan;
-- test parallel bitmap heap scan.
set enable_seqscan to off;
set enable_indexscan to off;
set enable_hashjoin to off;
set enable_mergejoin to off;
set enable_material to off;
-- test prefetching, if the platform allows it
--DO $$
--BEGIN
-- SET effective_io_concurrency = 50;
--END $$;
set work_mem='64kB';  --set small work mem to force lossy pages
explain (costs off)
	select count(*) from tenk1, tenk2 where tenk1.hundred > 1 and tenk2.thousand=0;
            QUERY PLAN             
-----------------------------------
 Aggregate
   ->  Nested Loop
         ->  Foreign Scan on tenk2
         ->  Foreign Scan on tenk1
(4 rows)

select count(*) from tenk1, tenk2 where tenk1.hundred > 1 and tenk2.thousand=0;
 count 
-------
 98000
(1 row)

create table bmscantest (a int, t text);
insert into bmscantest select r, 'fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo' FROM generate_series(1,100000) r;
create index i_bmtest ON bmscantest(a);
select count(*) from bmscantest where a>1;
 count 
-------
 99999
(1 row)

-- test accumulation of stats for parallel nodes
reset enable_seqscan;
alter table tenk2 set (parallel_workers = 0);
explain (analyze, timing off, summary off, costs off)
   select count(*) from tenk1, tenk2 where tenk1.hundred > 1
        and tenk2.thousand=0;
                          QUERY PLAN                           
---------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Nested Loop (actual rows=98000 loops=1)
         ->  Foreign Scan on tenk2 (actual rows=10 loops=1)
         ->  Foreign Scan on tenk1 (actual rows=9800 loops=10)
(4 rows)

alter table tenk2 reset (parallel_workers);
reset enable_indexscan;
reset enable_hashjoin;
reset enable_mergejoin;
reset enable_material;
reset effective_io_concurrency;
reset work_mem;
drop table bmscantest;
-- test parallel merge join path.
set enable_hashjoin to off;
set enable_nestloop to off;
explain (costs off)
	select  count(*) from tenk1, tenk2 where tenk1.unique1 = tenk2.unique1;
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   ->  Foreign Scan
         Relations: (public.tenk1) INNER JOIN (public.tenk2)
(3 rows)

select  count(*) from tenk1, tenk2 where tenk1.unique1 = tenk2.unique1;
 count 
-------
 10000
(1 row)

reset enable_hashjoin;
reset enable_nestloop;
-- test gather merge
set enable_hashagg = false;
explain (costs off)
   select count(*) from tenk1 group by twenty;
         QUERY PLAN          
-----------------------------
 GroupAggregate
   Group Key: twenty
   ->  Foreign Scan on tenk1
(3 rows)

select count(*) from tenk1 group by twenty;
 count 
-------
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
(20 rows)

-- test handling of SRFs in targetlist (bug in 10.0)
explain (costs off)
   select count(*), generate_series(1,2) from tenk1 group by twenty;
            QUERY PLAN             
-----------------------------------
 ProjectSet
   ->  GroupAggregate
         Group Key: twenty
         ->  Foreign Scan on tenk1
(4 rows)

select count(*), generate_series(1,2) from tenk1 group by twenty;
 count | generate_series 
-------+-----------------
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
(40 rows)

--test rescan behavior of gather merge
set enable_material = false;
explain (costs off)
select * from
  (select string4, count(unique2)
   from tenk1 group by string4 order by string4) ss
  right join (values (1),(2),(3)) v(x) on true;
            QUERY PLAN             
-----------------------------------
 Nested Loop Left Join
   ->  Values Scan on "*VALUES*"
   ->  GroupAggregate
         Group Key: tenk1.string4
         ->  Foreign Scan on tenk1
(5 rows)

select * from
  (select string4, count(unique2)
   from tenk1 group by string4 order by string4) ss
  right join (values (1),(2),(3)) v(x) on true;
 string4 | count | x 
---------+-------+---
 AAAAxx  |  2500 | 1
 HHHHxx  |  2500 | 1
 OOOOxx  |  2500 | 1
 VVVVxx  |  2500 | 1
 AAAAxx  |  2500 | 2
 HHHHxx  |  2500 | 2
 OOOOxx  |  2500 | 2
 VVVVxx  |  2500 | 2
 AAAAxx  |  2500 | 3
 HHHHxx  |  2500 | 3
 OOOOxx  |  2500 | 3
 VVVVxx  |  2500 | 3
(12 rows)

reset enable_material;
-- gather merge test with 0 worker
set max_parallel_workers = 0;
explain (costs off)
   select string4 from tenk1 order by string4 limit 5;
         QUERY PLAN          
-----------------------------
 Limit
   ->  Foreign Scan on tenk1
(2 rows)

select string4 from tenk1 order by string4 limit 5;
 string4 
---------
 AAAAxx
 AAAAxx
 AAAAxx
 AAAAxx
 AAAAxx
(5 rows)

reset max_parallel_workers;
reset enable_hashagg;
-- check parallelized int8 aggregate (bug #14897)
explain (costs off)
select avg(unique1::int8) from tenk1;
         QUERY PLAN          
-----------------------------
 Aggregate
   ->  Foreign Scan on tenk1
(2 rows)

select avg(unique1::int8) from tenk1;
          avg          
-----------------------
 4999.5000000000000000
(1 row)

-- test the sanity of parallel query after the active role is dropped.
--drop role if exists regress_parallel_worker;
--create role regress_parallel_worker;
--set role regress_parallel_worker;
reset session authorization;
--drop role regress_parallel_worker;
set force_parallel_mode = 1;
select count(*) from tenk1;
 count 
-------
 10000
(1 row)

reset force_parallel_mode;
reset role;
set force_parallel_mode=1;
explain (costs off)
  select stringu1::int2 from tenk1 where unique1 = 1;
      QUERY PLAN       
-----------------------
 Foreign Scan on tenk1
(1 row)

-- Window function calculation can't be pushed to workers.
explain (costs off, verbose)
  select count(*) from tenk1 a where (unique1, two) in
    (select unique1, row_number() over() from tenk1 b);
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*)
   ->  Hash Semi Join
         Hash Cond: ((a.unique1 = b.unique1) AND (a.two = (row_number() OVER (?))))
         ->  Foreign Scan on public.tenk1 a
               Output: a.unique1, a.unique2, a.two, a.four, a.ten, a.twenty, a.hundred, a.thousand, a.twothousand, a.fivethous, a.tenthous, a.odd, a.even, a.stringu1, a.stringu2, a.string4
               Remote SQL: SELECT unique1, two FROM public.tenk1
         ->  Hash
               Output: b.unique1, (row_number() OVER (?))
               ->  WindowAgg
                     Output: b.unique1, row_number() OVER (?)
                     ->  Foreign Scan on public.tenk1 b
                           Output: b.unique1, b.unique2, b.two, b.four, b.ten, b.twenty, b.hundred, b.thousand, b.twothousand, b.fivethous, b.tenthous, b.odd, b.even, b.stringu1, b.stringu2, b.string4
                           Remote SQL: SELECT unique1 FROM public.tenk1
(14 rows)

-- LIMIT/OFFSET within sub-selects can't be pushed to workers.
explain (costs off)
  select * from tenk1 a where two in
    (select two from tenk1 b where stringu1 like '%AAAA' limit 3);
                       QUERY PLAN                        
---------------------------------------------------------
 Hash Semi Join
   Hash Cond: (a.two = b.two)
   ->  Foreign Scan on tenk1 a
   ->  Hash
         ->  Limit
               ->  Foreign Scan on tenk1 b
                     Filter: (stringu1 ~~ '%AAAA'::text)
(7 rows)

-- to increase the parallel query test coverage
EXPLAIN (timing off, summary off, costs off) SELECT * FROM tenk1;
      QUERY PLAN       
-----------------------
 Foreign Scan on tenk1
(1 row)

EXPLAIN (analyze, timing off, summary off, costs off) SELECT * FROM tenk1;
                    QUERY PLAN                     
---------------------------------------------------
 Foreign Scan on tenk1 (actual rows=10000 loops=1)
(1 row)

-- test passing expanded-value representations to workers
CREATE FUNCTION make_some_array(int,int) returns int[] as
$$declare x int[];
  begin
    x[1] := $1;
    x[2] := $2;
    return x;
  end$$ language plpgsql parallel safe;
CREATE TABLE fooarr(f1 text, f2 int[], f3 text);
INSERT INTO fooarr VALUES('1', ARRAY[1,2], 'one');
PREPARE pstmt(text, int[]) AS SELECT * FROM fooarr WHERE f1 = $1 AND f2 = $2;
EXPLAIN (COSTS OFF) EXECUTE pstmt('1', make_some_array(1,2));
       QUERY PLAN       
------------------------
 Foreign Scan on fooarr
(1 row)

EXECUTE pstmt('1', make_some_array(1,2));
 f1 |  f2   | f3  
----+-------+-----
 1  | {1,2} | one
(1 row)

DEALLOCATE pstmt;
-- provoke error in worker
select stringu1::int2 from tenk1 where unique1 = 1;
ERROR:  invalid input syntax for integer: "BAAAAA"
rollback;
