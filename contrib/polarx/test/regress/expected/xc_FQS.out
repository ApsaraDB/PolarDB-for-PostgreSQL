-- A function to create table on specified nodes 
create or replace function cr_table(tab_schema varchar, nodenums int[], distribution varchar)
returns void language plpgsql as $$
declare
	cr_command	varchar;
	nodes		varchar[];
	nodename	varchar;
	nodenames_query varchar;
	nodenames 	varchar;
	node 		int;
	sep			varchar;
	tmp_node	int;
	num_nodes	int;
begin
	nodenames_query := 'SELECT node_name FROM pgxc_node WHERE node_type = ''D'''; 
	cr_command := 'CREATE TABLE ' || tab_schema || ' DISTRIBUTE BY ' || distribution || ' TO NODE (';
	for nodename in execute nodenames_query loop
		nodes := array_append(nodes, nodename);
	end loop;
	nodenames := '';
	sep := '';
	num_nodes := array_length(nodes, 1);
	foreach node in array nodenums loop
		tmp_node := node;
		if (tmp_node < 1 or tmp_node > num_nodes) then
			tmp_node := tmp_node % num_nodes;
			if (tmp_node < 1) then
				tmp_node := num_nodes; 
			end if;
		end if;
		nodenames := nodenames || sep || nodes[tmp_node];
		sep := ', ';
	end loop;
	cr_command := cr_command || nodenames;
	cr_command := cr_command || ')';

	execute cr_command;
end;
$$;
-- This file contains tests for Fast Query Shipping (FQS) for queries involving
-- a single table
-- Testset 1 for distributed table (by roundrobin)
select create_table_nodes('tab1_rr(val int, val2 int)', '{1, 2, 3}'::int[], 'roundrobin', NULL);
 create_table_nodes 
--------------------
 
(1 row)

insert into tab1_rr values (1, 2);
insert into tab1_rr values (2, 4);
insert into tab1_rr values (5, 3);
insert into tab1_rr values (7, 8);
insert into tab1_rr values (9, 2);
explain (verbose on, nodes off, num_nodes on, costs off) insert into tab1_rr values (9, 2);
                            QUERY PLAN                            
------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: 9, 2
   Remote query: INSERT INTO tab1_rr (val, val2) VALUES (9, 2)
   ->  Insert on public.tab1_rr
         ->  Result
               Output: 9, 2
(6 rows)

-- simple select
-- should get FQSed
select val, val2 + 2, case val when val2 then 'val and val2 are same' else 'val and val2 are not same' end from tab1_rr where val2 = 4;
 val | ?column? |           case            
-----+----------+---------------------------
   2 |        6 | val and val2 are not same
(1 row)

explain (verbose on, nodes off, costs off) select val, val2 + 2, case val when val2 then 'val and val2 are same' else 'val and val2 are not same' end from tab1_rr where val2 = 4;
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: tab1_rr.val, (tab1_rr.val2 + 2), CASE tab1_rr.val WHEN tab1_rr.val2 THEN 'val and val2 are same'::text ELSE 'val and val2 are not same'::text END
   Remote query: SELECT val, (val2 + 2), CASE val WHEN val2 THEN 'val and val2 are same'::text ELSE 'val and val2 are not same'::text END AS "case" FROM tab1_rr WHERE (val2 = 4)
   ->  Seq Scan on public.tab1_rr
         Output: val, (val2 + 2), CASE val WHEN val2 THEN 'val and val2 are same'::text ELSE 'val and val2 are not same'::text END
         Filter: (tab1_rr.val2 = 4)
(6 rows)

-- should not get FQSed because of aggregates
select sum(val), avg(val), count(*) from tab1_rr;
 sum |        avg         | count 
-----+--------------------+-------
  24 | 4.8000000000000000 |     5
(1 row)

explain (verbose on, nodes off, costs off) select sum(val), avg(val), count(*) from tab1_rr;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Finalize Aggregate
   Output: sum(val), avg(val), count(*)
   ->  Remote Subquery Scan on all
         Output: PARTIAL sum(val), PARTIAL avg(val), PARTIAL count(*)
         ->  Partial Aggregate
               Output: PARTIAL sum(val), PARTIAL avg(val), PARTIAL count(*)
               ->  Seq Scan on public.tab1_rr
                     Output: val, val2
(8 rows)

-- should not get FQSed because of window functions
select first_value(val) over (partition by val2 order by val) from tab1_rr;
 first_value 
-------------
           1
           1
           5
           2
           7
(5 rows)

explain (verbose on, nodes off, costs off) select first_value(val) over (partition by val2 order by val) from tab1_rr;
                    QUERY PLAN                     
---------------------------------------------------
 WindowAgg
   Output: first_value(val) OVER (?), val, val2
   ->  Remote Subquery Scan on all
         Output: val, val2
         Sort Key: tab1_rr.val2, tab1_rr.val
         ->  Sort
               Output: val, val2
               Sort Key: tab1_rr.val2, tab1_rr.val
               ->  Seq Scan on public.tab1_rr
                     Output: val, val2
(10 rows)

-- should not get FQSed because of LIMIT clause
select * from tab1_rr where val2 = 3 limit 1;
 val | val2 
-----+------
   5 |    3
(1 row)

explain (verbose on, nodes off, costs off) select * from tab1_rr where val2 = 3 limit 1;
                   QUERY PLAN                   
------------------------------------------------
 Limit
   Output: val, val2
   ->  Remote Subquery Scan on all
         Output: val, val2
         ->  Limit
               Output: val, val2
               ->  Seq Scan on public.tab1_rr
                     Output: val, val2
                     Filter: (tab1_rr.val2 = 3)
(9 rows)

-- should not FQSed because of OFFSET clause
select * from tab1_rr where val2 = 4 offset 1;
 val | val2 
-----+------
(0 rows)

explain (verbose on, nodes off, costs off) select * from tab1_rr where val2 = 4 offset 1;
                QUERY PLAN                
------------------------------------------
 Limit
   Output: val, val2
   ->  Remote Subquery Scan on all
         Output: val, val2
         ->  Seq Scan on public.tab1_rr
               Output: val, val2
               Filter: (tab1_rr.val2 = 4)
(7 rows)

-- should not get FQSed because of SORT clause
select * from tab1_rr order by val;
 val | val2 
-----+------
   1 |    2
   2 |    4
   5 |    3
   7 |    8
   9 |    2
(5 rows)

explain (verbose on, nodes off, costs off) select * from tab1_rr order by val;
               QUERY PLAN               
----------------------------------------
 Remote Subquery Scan on all
   Output: val, val2
   Sort Key: tab1_rr.val
   ->  Sort
         Output: val, val2
         Sort Key: tab1_rr.val
         ->  Seq Scan on public.tab1_rr
               Output: val, val2
(8 rows)

-- should not get FQSed because of DISTINCT clause
select distinct val, val2 from tab1_rr where val2 = 8;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off) select distinct val, val2 from tab1_rr where val2 = 8;
                   QUERY PLAN                   
------------------------------------------------
 Unique
   Output: val, val2
   ->  Remote Subquery Scan on all
         Output: val, val2
         Sort Key: tab1_rr.val
         ->  Sort
               Output: val, val2
               Sort Key: tab1_rr.val
               ->  Seq Scan on public.tab1_rr
                     Output: val, val2
                     Filter: (tab1_rr.val2 = 8)
(11 rows)

-- should not get FQSed because of GROUP clause
select val, val2 from tab1_rr where val2 = 8 group by val, val2;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off) select val, val2 from tab1_rr where val2 = 8 group by val, val2;
                   QUERY PLAN                   
------------------------------------------------
 Group
   Output: val, val2
   Group Key: tab1_rr.val, tab1_rr.val2
   ->  Remote Subquery Scan on all
         Output: val, val2
         Sort Key: tab1_rr.val
         ->  Sort
               Output: val, val2
               Sort Key: tab1_rr.val
               ->  Seq Scan on public.tab1_rr
                     Output: val, val2
                     Filter: (tab1_rr.val2 = 8)
(12 rows)

-- should not get FQSed because of HAVING clause
select sum(val) from tab1_rr where val2 = 2 group by val2 having sum(val) > 1;
 sum 
-----
  10
(1 row)

explain (verbose on, nodes off, costs off) select sum(val) from tab1_rr where val2 = 2 group by val2 having sum(val) > 1;
                QUERY PLAN                
------------------------------------------
 GroupAggregate
   Output: sum(val), val2
   Group Key: tab1_rr.val2
   Filter: (sum(tab1_rr.val) > 1)
   ->  Remote Subquery Scan on all
         Output: val2, val
         ->  Seq Scan on public.tab1_rr
               Output: val2, val
               Filter: (tab1_rr.val2 = 2)
(9 rows)

-- tests for node reduction by application of quals, for roundrobin node
-- reduction is not applicable. Having query not FQSed because of existence of ORDER BY,
-- implies that nodes did not get reduced.
select * from tab1_rr where val = 7;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off) select * from tab1_rr where val = 7;
                          QUERY PLAN                           
---------------------------------------------------------------
 Remote Fast Query Execution
   Output: tab1_rr.val, tab1_rr.val2
   Remote query: SELECT val, val2 FROM tab1_rr WHERE (val = 7)
   ->  Seq Scan on public.tab1_rr
         Output: val, val2
         Filter: (tab1_rr.val = 7)
(6 rows)

select * from tab1_rr where val = 7 or val = 2 order by val;
 val | val2 
-----+------
   2 |    4
   7 |    8
(2 rows)

explain (verbose on, nodes off, costs off) select * from tab1_rr where val = 7 or val = 2 order by val;
                           QUERY PLAN                           
----------------------------------------------------------------
 Remote Subquery Scan on all
   Output: val, val2
   Sort Key: tab1_rr.val
   ->  Sort
         Output: val, val2
         Sort Key: tab1_rr.val
         ->  Seq Scan on public.tab1_rr
               Output: val, val2
               Filter: ((tab1_rr.val = 7) OR (tab1_rr.val = 2))
(9 rows)

select * from tab1_rr where val = 7 and val2 = 8;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off) select * from tab1_rr where val = 7 and val2 = 8 order by val;
                         QUERY PLAN                         
------------------------------------------------------------
 Remote Subquery Scan on all
   Output: val, val2
   ->  Seq Scan on public.tab1_rr
         Output: val, val2
         Filter: ((tab1_rr.val = 7) AND (tab1_rr.val2 = 8))
(5 rows)

select * from tab1_rr where val = 3 + 4 and val2 = 8 order by val;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off) select * from tab1_rr where val = 3 + 4 order by val;
            QUERY PLAN             
-----------------------------------
 Remote Subquery Scan on all
   Output: val, val2
   ->  Seq Scan on public.tab1_rr
         Output: val, val2
         Filter: (tab1_rr.val = 7)
(5 rows)

select * from tab1_rr where val = char_length('len')+4 order by val;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off) select * from tab1_rr where val = char_length('len')+4 order by val;
            QUERY PLAN             
-----------------------------------
 Remote Subquery Scan on all
   Output: val, val2
   ->  Seq Scan on public.tab1_rr
         Output: val, val2
         Filter: (tab1_rr.val = 7)
(5 rows)

-- insert some more values 
insert into tab1_rr values (7, 2); 
select avg(val) from tab1_rr where val = 7;
        avg         
--------------------
 7.0000000000000000
(1 row)

explain (verbose on, nodes off, costs off) select avg(val) from tab1_rr where val = 7;
                  QUERY PLAN                   
-----------------------------------------------
 Finalize Aggregate
   Output: avg(val)
   ->  Remote Subquery Scan on all
         Output: PARTIAL avg(val)
         ->  Partial Aggregate
               Output: PARTIAL avg(val)
               ->  Seq Scan on public.tab1_rr
                     Output: val, val2
                     Filter: (tab1_rr.val = 7)
(9 rows)

select val, val2 from tab1_rr where val = 7 order by val2;
 val | val2 
-----+------
   7 |    2
   7 |    8
(2 rows)

explain (verbose on, nodes off, costs off) select val, val2 from tab1_rr where val = 7 order by val2;
               QUERY PLAN                
-----------------------------------------
 Remote Subquery Scan on all
   Output: val, val2
   Sort Key: tab1_rr.val2
   ->  Sort
         Output: val, val2
         Sort Key: tab1_rr.val2
         ->  Seq Scan on public.tab1_rr
               Output: val, val2
               Filter: (tab1_rr.val = 7)
(9 rows)

select distinct val2 from tab1_rr where val = 7 order by val2;
 val2 
------
    2
    8
(2 rows)

explain (verbose on, nodes off, costs off) select distinct val2 from tab1_rr where val = 7 order by val2;
                  QUERY PLAN                   
-----------------------------------------------
 Unique
   Output: val2
   ->  Remote Subquery Scan on all
         Output: val2
         Sort Key: tab1_rr.val2
         ->  Sort
               Output: val2
               Sort Key: tab1_rr.val2
               ->  Seq Scan on public.tab1_rr
                     Output: val2
                     Filter: (tab1_rr.val = 7)
(11 rows)

-- DMLs
update tab1_rr set val2 = 1000 where val = 7; 
explain (verbose on, nodes off, costs off) update tab1_rr set val2 = 1000 where val = 7; 
                           QUERY PLAN                           
----------------------------------------------------------------
 Remote Fast Query Execution
   Output: 1000
   Remote query: UPDATE tab1_rr SET val2 = 1000 WHERE (val = 7)
   ->  Update on public.tab1_rr
         ->  Seq Scan on public.tab1_rr
               Output: val, 1000, ctid
               Filter: (tab1_rr.val = 7)
(7 rows)

select * from tab1_rr where val = 7;
 val | val2 
-----+------
   7 | 1000
   7 | 1000
(2 rows)

delete from tab1_rr where val = 7; 
explain (verbose on, costs off) delete from tab1_rr where val = 7; 
                     QUERY PLAN                      
-----------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   Remote query: DELETE FROM tab1_rr WHERE (val = 7)
   ->  Delete on public.tab1_rr
         ->  Seq Scan on public.tab1_rr
               Output: ctid
               Filter: (tab1_rr.val = 7)
(7 rows)

select * from tab1_rr where val = 7;
 val | val2 
-----+------
(0 rows)

-- Testset 2 for distributed tables (by hash)
select cr_table('tab1_hash(val int, val2 int)', '{1, 2, 3}'::int[], 'hash(val)');
 cr_table 
----------
 
(1 row)

insert into tab1_hash values (1, 2);
insert into tab1_hash values (2, 4);
insert into tab1_hash values (5, 3);
insert into tab1_hash values (7, 8);
insert into tab1_hash values (9, 2);
explain (verbose on, costs off) insert into tab1_hash values (9, 2);
                           QUERY PLAN                            
-----------------------------------------------------------------
 Remote Fast Query Execution
   Output: 9, 2
   Node expr: 9
   Remote query: INSERT INTO tab1_hash (val, val2) VALUES (9, 2)
   ->  Insert on public.tab1_hash
         ->  Result
               Output: 9, 2
(7 rows)

-- simple select
-- should get FQSed
select val, val2 + 2, case val when val2 then 'val and val2 are same' else 'val and val2 are not same' end from tab1_hash where val2 = 4;
 val | ?column? |           case            
-----+----------+---------------------------
   2 |        6 | val and val2 are not same
(1 row)

explain (verbose on, nodes off, costs off) select val, val2 + 2, case val when val2 then 'val and val2 are same' else 'val and val2 are not same' end from tab1_hash where val2 = 2;
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: tab1_hash.val, (tab1_hash.val2 + 2), CASE tab1_hash.val WHEN tab1_hash.val2 THEN 'val and val2 are same'::text ELSE 'val and val2 are not same'::text END
   Remote query: SELECT val, (val2 + 2), CASE val WHEN val2 THEN 'val and val2 are same'::text ELSE 'val and val2 are not same'::text END AS "case" FROM tab1_hash WHERE (val2 = 2)
   ->  Seq Scan on public.tab1_hash
         Output: val, (val2 + 2), CASE val WHEN val2 THEN 'val and val2 are same'::text ELSE 'val and val2 are not same'::text END
         Filter: (tab1_hash.val2 = 2)
(6 rows)

-- should not get FQSed because of aggregates
select sum(val), avg(val), count(*) from tab1_hash;
 sum |        avg         | count 
-----+--------------------+-------
  24 | 4.8000000000000000 |     5
(1 row)

explain (verbose on, nodes off, costs off) select sum(val), avg(val), count(*) from tab1_hash;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Finalize Aggregate
   Output: sum(val), avg(val), count(*)
   ->  Remote Subquery Scan on all
         Output: PARTIAL sum(val), PARTIAL avg(val), PARTIAL count(*)
         ->  Partial Aggregate
               Output: PARTIAL sum(val), PARTIAL avg(val), PARTIAL count(*)
               ->  Seq Scan on public.tab1_hash
                     Output: val, val2
(8 rows)

-- should not get FQSed because of window functions
select first_value(val) over (partition by val2 order by val) from tab1_hash;
 first_value 
-------------
           1
           1
           5
           2
           7
(5 rows)

explain (verbose on, nodes off, costs off) select first_value(val) over (partition by val2 order by val) from tab1_hash;
                      QUERY PLAN                       
-------------------------------------------------------
 WindowAgg
   Output: first_value(val) OVER (?), val, val2
   ->  Remote Subquery Scan on all
         Output: val, val2
         Sort Key: tab1_hash.val2, tab1_hash.val
         ->  Sort
               Output: val, val2
               Sort Key: tab1_hash.val2, tab1_hash.val
               ->  Seq Scan on public.tab1_hash
                     Output: val, val2
(10 rows)

-- should not get FQSed because of LIMIT clause
select * from tab1_hash where val2 = 3 limit 1;
 val | val2 
-----+------
   5 |    3
(1 row)

explain (verbose on, nodes off, costs off) select * from tab1_hash where val2 = 3 limit 1;
                    QUERY PLAN                    
--------------------------------------------------
 Limit
   Output: val, val2
   ->  Remote Subquery Scan on all
         Output: val, val2
         ->  Limit
               Output: val, val2
               ->  Seq Scan on public.tab1_hash
                     Output: val, val2
                     Filter: (tab1_hash.val2 = 3)
(9 rows)

-- should not FQSed because of OFFSET clause
select * from tab1_hash where val2 = 4 offset 1;
 val | val2 
-----+------
(0 rows)

explain (verbose on, nodes off, costs off) select * from tab1_hash where val2 = 4 offset 1;
                 QUERY PLAN                 
--------------------------------------------
 Limit
   Output: val, val2
   ->  Remote Subquery Scan on all
         Output: val, val2
         ->  Seq Scan on public.tab1_hash
               Output: val, val2
               Filter: (tab1_hash.val2 = 4)
(7 rows)

-- should not get FQSed because of SORT clause
select * from tab1_hash order by val;
 val | val2 
-----+------
   1 |    2
   2 |    4
   5 |    3
   7 |    8
   9 |    2
(5 rows)

explain (verbose on, nodes off, costs off) select * from tab1_hash order by val;
                QUERY PLAN                
------------------------------------------
 Remote Subquery Scan on all
   Output: val, val2
   Sort Key: tab1_hash.val
   ->  Sort
         Output: val, val2
         Sort Key: tab1_hash.val
         ->  Seq Scan on public.tab1_hash
               Output: val, val2
(8 rows)

-- should get FQSed because DISTINCT clause contains distkey
select distinct val, val2 from tab1_hash where val2 = 8;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off) select distinct val, val2 from tab1_hash where val2 = 8;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: tab1_hash.val, tab1_hash.val2
   Remote query: SELECT DISTINCT val, val2 FROM tab1_hash WHERE (val2 = 8)
   ->  Unique
         Output: val, val2
         ->  Sort
               Output: val, val2
               Sort Key: tab1_hash.val
               ->  Seq Scan on public.tab1_hash
                     Output: val, val2
                     Filter: (tab1_hash.val2 = 8)
(11 rows)

-- should get FQSed because GROUP BY clause uses distkey
select val, val2 from tab1_hash where val2 = 8 group by val, val2;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off) select val, val2 from tab1_hash where val2 = 8 group by val, val2;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: tab1_hash.val, tab1_hash.val2
   Remote query: SELECT val, val2 FROM tab1_hash WHERE (val2 = 8) GROUP BY val, val2
   ->  Group
         Output: val, val2
         Group Key: tab1_hash.val, tab1_hash.val2
         ->  Sort
               Output: val, val2
               Sort Key: tab1_hash.val
               ->  Seq Scan on public.tab1_hash
                     Output: val, val2
                     Filter: (tab1_hash.val2 = 8)
(12 rows)

-- should not get FQSed because of HAVING clause
select sum(val) from tab1_hash where val2 = 2 group by val2 having sum(val) > 1;
 sum 
-----
  10
(1 row)

explain (verbose on, nodes off, costs off) select sum(val) from tab1_hash where val2 = 2 group by val2 having sum(val) > 1;
                 QUERY PLAN                 
--------------------------------------------
 GroupAggregate
   Output: sum(val), val2
   Group Key: tab1_hash.val2
   Filter: (sum(tab1_hash.val) > 1)
   ->  Remote Subquery Scan on all
         Output: val2, val
         ->  Seq Scan on public.tab1_hash
               Output: val2, val
               Filter: (tab1_hash.val2 = 2)
(9 rows)

-- tests for node reduction by application of quals. Having query FQSed because of
-- existence of ORDER BY, implies that nodes got reduced.
select * from tab1_hash where val = 7;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off, num_nodes on) select * from tab1_hash where val = 7;
                            QUERY PLAN                            
------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_hash.val, tab1_hash.val2
   Remote query: SELECT val, val2 FROM tab1_hash WHERE (val = 7)
   ->  Seq Scan on public.tab1_hash
         Output: val, val2
         Filter: (tab1_hash.val = 7)
(6 rows)

select * from tab1_hash where val = 7 or val = 2 order by val;
 val | val2 
-----+------
   2 |    4
   7 |    8
(2 rows)

explain (verbose on, nodes off, costs off) select * from tab1_hash where val = 7 or val = 2 order by val;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Remote Subquery Scan on all
   Output: val, val2
   Sort Key: tab1_hash.val
   ->  Sort
         Output: val, val2
         Sort Key: tab1_hash.val
         ->  Seq Scan on public.tab1_hash
               Output: val, val2
               Filter: ((tab1_hash.val = 7) OR (tab1_hash.val = 2))
(9 rows)

select * from tab1_hash where val = 7 and val2 = 8;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off, num_nodes on) select * from tab1_hash where val = 7 and val2 = 8;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_hash.val, tab1_hash.val2
   Remote query: SELECT val, val2 FROM tab1_hash WHERE ((val = 7) AND (val2 = 8))
   ->  Seq Scan on public.tab1_hash
         Output: val, val2
         Filter: ((tab1_hash.val = 7) AND (tab1_hash.val2 = 8))
(6 rows)

select * from tab1_hash where val = 3 + 4 and val2 = 8;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off, num_nodes on) select * from tab1_hash where val = 3 + 4;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_hash.val, tab1_hash.val2
   Remote query: SELECT val, val2 FROM tab1_hash WHERE (val = (3 + 4))
   ->  Seq Scan on public.tab1_hash
         Output: val, val2
         Filter: (tab1_hash.val = 7)
(6 rows)

select * from tab1_hash where val = char_length('len')+4;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off, num_nodes on) select * from tab1_hash where val = char_length('len')+4;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_hash.val, tab1_hash.val2
   Remote query: SELECT val, val2 FROM tab1_hash WHERE (val = (char_length('len'::text) + 4))
   ->  Seq Scan on public.tab1_hash
         Output: val, val2
         Filter: (tab1_hash.val = 7)
(6 rows)

-- insert some more values 
insert into tab1_hash values (7, 2); 
select avg(val) from tab1_hash where val = 7;
        avg         
--------------------
 7.0000000000000000
(1 row)

explain (verbose on, nodes off, costs off, num_nodes on) select avg(val) from tab1_hash where val = 7;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: avg(tab1_hash.val)
   Remote query: SELECT avg(val) AS avg FROM tab1_hash WHERE (val = 7)
   ->  Aggregate
         Output: avg(val)
         ->  Seq Scan on public.tab1_hash
               Output: val, val2
               Filter: (tab1_hash.val = 7)
(8 rows)

select val, val2 from tab1_hash where val = 7 order by val2;
 val | val2 
-----+------
   7 |    2
   7 |    8
(2 rows)

explain (verbose on, nodes off, costs off, num_nodes on) select val, val2 from tab1_hash where val = 7 order by val2;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_hash.val, tab1_hash.val2
   Remote query: SELECT val, val2 FROM tab1_hash WHERE (val = 7) ORDER BY val2
   ->  Sort
         Output: val, val2
         Sort Key: tab1_hash.val2
         ->  Seq Scan on public.tab1_hash
               Output: val, val2
               Filter: (tab1_hash.val = 7)
(9 rows)

select distinct val2 from tab1_hash where val = 7 order by val2;
 val2 
------
    2
    8
(2 rows)

explain (verbose on, nodes off, costs off, num_nodes on) select distinct val2 from tab1_hash where val = 7 order by val2;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_hash.val2
   Remote query: SELECT DISTINCT val2 FROM tab1_hash WHERE (val = 7) ORDER BY val2
   ->  Unique
         Output: val2
         ->  Sort
               Output: val2
               Sort Key: tab1_hash.val2
               ->  Seq Scan on public.tab1_hash
                     Output: val2
                     Filter: (tab1_hash.val = 7)
(11 rows)

-- DMLs
update tab1_hash set val2 = 1000 where val = 7; 
explain (verbose on, nodes off, costs off) update tab1_hash set val2 = 1000 where val = 7; 
                            QUERY PLAN                            
------------------------------------------------------------------
 Remote Fast Query Execution
   Output: 1000
   Remote query: UPDATE tab1_hash SET val2 = 1000 WHERE (val = 7)
   ->  Update on public.tab1_hash
         ->  Seq Scan on public.tab1_hash
               Output: val, 1000, ctid
               Filter: (tab1_hash.val = 7)
(7 rows)

select * from tab1_hash where val = 7;
 val | val2 
-----+------
   7 | 1000
   7 | 1000
(2 rows)

delete from tab1_hash where val = 7; 
explain (verbose on, costs off) delete from tab1_hash where val = 7; 
                      QUERY PLAN                       
-------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   Remote query: DELETE FROM tab1_hash WHERE (val = 7)
   ->  Delete on public.tab1_hash
         ->  Seq Scan on public.tab1_hash
               Output: ctid
               Filter: (tab1_hash.val = 7)
(7 rows)

select * from tab1_hash where val = 7;
 val | val2 
-----+------
(0 rows)

-- Testset 3 for distributed tables (by modulo)
select cr_table('tab1_modulo(val int, val2 int)', '{1, 2, 3}'::int[], 'modulo(val)');
 cr_table 
----------
 
(1 row)

insert into tab1_modulo values (1, 2);
insert into tab1_modulo values (2, 4);
insert into tab1_modulo values (5, 3);
insert into tab1_modulo values (7, 8);
insert into tab1_modulo values (9, 2);
explain (verbose on, costs off) insert into tab1_modulo values (9, 2);
                            QUERY PLAN                             
-------------------------------------------------------------------
 Remote Fast Query Execution
   Output: 9, 2
   Node expr: 9
   Remote query: INSERT INTO tab1_modulo (val, val2) VALUES (9, 2)
   ->  Insert on public.tab1_modulo
         ->  Result
               Output: 9, 2
(7 rows)

-- simple select
-- should get FQSed
select val, val2 + 2, case val when val2 then 'val and val2 are same' else 'val and val2 are not same' end from tab1_modulo where val2 = 4;
 val | ?column? |           case            
-----+----------+---------------------------
   2 |        6 | val and val2 are not same
(1 row)

explain (verbose on, nodes off, costs off) select val, val2 + 2, case val when val2 then 'val and val2 are same' else 'val and val2 are not same' end from tab1_modulo where val2 = 4;
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: tab1_modulo.val, (tab1_modulo.val2 + 2), CASE tab1_modulo.val WHEN tab1_modulo.val2 THEN 'val and val2 are same'::text ELSE 'val and val2 are not same'::text END
   Remote query: SELECT val, (val2 + 2), CASE val WHEN val2 THEN 'val and val2 are same'::text ELSE 'val and val2 are not same'::text END AS "case" FROM tab1_modulo WHERE (val2 = 4)
   ->  Seq Scan on public.tab1_modulo
         Output: val, (val2 + 2), CASE val WHEN val2 THEN 'val and val2 are same'::text ELSE 'val and val2 are not same'::text END
         Filter: (tab1_modulo.val2 = 4)
(6 rows)

-- should not get FQSed because of aggregates
select sum(val), avg(val), count(*) from tab1_modulo;
 sum |        avg         | count 
-----+--------------------+-------
  24 | 4.8000000000000000 |     5
(1 row)

explain (verbose on, nodes off, costs off) select sum(val), avg(val), count(*) from tab1_modulo;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Finalize Aggregate
   Output: sum(val), avg(val), count(*)
   ->  Remote Subquery Scan on all
         Output: PARTIAL sum(val), PARTIAL avg(val), PARTIAL count(*)
         ->  Partial Aggregate
               Output: PARTIAL sum(val), PARTIAL avg(val), PARTIAL count(*)
               ->  Seq Scan on public.tab1_modulo
                     Output: val, val2
(8 rows)

-- should not get FQSed because of window functions
select first_value(val) over (partition by val2 order by val) from tab1_modulo;
 first_value 
-------------
           1
           1
           5
           2
           7
(5 rows)

explain (verbose on, nodes off, costs off) select first_value(val) over (partition by val2 order by val) from tab1_modulo;
                        QUERY PLAN                         
-----------------------------------------------------------
 WindowAgg
   Output: first_value(val) OVER (?), val, val2
   ->  Remote Subquery Scan on all
         Output: val, val2
         Sort Key: tab1_modulo.val2, tab1_modulo.val
         ->  Sort
               Output: val, val2
               Sort Key: tab1_modulo.val2, tab1_modulo.val
               ->  Seq Scan on public.tab1_modulo
                     Output: val, val2
(10 rows)

-- should not get FQSed because of LIMIT clause
select * from tab1_modulo where val2 = 3 limit 1;
 val | val2 
-----+------
   5 |    3
(1 row)

explain (verbose on, nodes off, costs off) select * from tab1_modulo where val2 = 3 limit 1;
                     QUERY PLAN                     
----------------------------------------------------
 Limit
   Output: val, val2
   ->  Remote Subquery Scan on all
         Output: val, val2
         ->  Limit
               Output: val, val2
               ->  Seq Scan on public.tab1_modulo
                     Output: val, val2
                     Filter: (tab1_modulo.val2 = 3)
(9 rows)

-- should not FQSed because of OFFSET clause
select * from tab1_modulo where val2 = 4 offset 1;
 val | val2 
-----+------
(0 rows)

explain (verbose on, nodes off, costs off) select * from tab1_modulo where val2 = 4 offset 1;
                  QUERY PLAN                  
----------------------------------------------
 Limit
   Output: val, val2
   ->  Remote Subquery Scan on all
         Output: val, val2
         ->  Seq Scan on public.tab1_modulo
               Output: val, val2
               Filter: (tab1_modulo.val2 = 4)
(7 rows)

-- should not get FQSed because of SORT clause
select * from tab1_modulo order by val;
 val | val2 
-----+------
   1 |    2
   2 |    4
   5 |    3
   7 |    8
   9 |    2
(5 rows)

explain (verbose on, nodes off, costs off) select * from tab1_modulo order by val;
                 QUERY PLAN                 
--------------------------------------------
 Remote Subquery Scan on all
   Output: val, val2
   Sort Key: tab1_modulo.val
   ->  Sort
         Output: val, val2
         Sort Key: tab1_modulo.val
         ->  Seq Scan on public.tab1_modulo
               Output: val, val2
(8 rows)

-- should get FQSed because DISTINCT clause contains distkey
select distinct val, val2 from tab1_modulo where val2 = 8;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off) select distinct val, val2 from tab1_modulo where val2 = 8;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: tab1_modulo.val, tab1_modulo.val2
   Remote query: SELECT DISTINCT val, val2 FROM tab1_modulo WHERE (val2 = 8)
   ->  Unique
         Output: val, val2
         ->  Sort
               Output: val, val2
               Sort Key: tab1_modulo.val
               ->  Seq Scan on public.tab1_modulo
                     Output: val, val2
                     Filter: (tab1_modulo.val2 = 8)
(11 rows)

-- should get FQSed because GROUP BY clause uses distkey
select val, val2 from tab1_modulo where val2 = 8 group by val, val2;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off) select val, val2 from tab1_modulo where val2 = 8 group by val, val2;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: tab1_modulo.val, tab1_modulo.val2
   Remote query: SELECT val, val2 FROM tab1_modulo WHERE (val2 = 8) GROUP BY val, val2
   ->  Group
         Output: val, val2
         Group Key: tab1_modulo.val, tab1_modulo.val2
         ->  Sort
               Output: val, val2
               Sort Key: tab1_modulo.val
               ->  Seq Scan on public.tab1_modulo
                     Output: val, val2
                     Filter: (tab1_modulo.val2 = 8)
(12 rows)

-- should not get FQSed because of HAVING clause
select sum(val) from tab1_modulo where val2 = 2 group by val2 having sum(val) > 1;
 sum 
-----
  10
(1 row)

explain (verbose on, nodes off, costs off) select sum(val) from tab1_modulo where val2 = 2 group by val2 having sum(val) > 1;
                  QUERY PLAN                  
----------------------------------------------
 GroupAggregate
   Output: sum(val), val2
   Group Key: tab1_modulo.val2
   Filter: (sum(tab1_modulo.val) > 1)
   ->  Remote Subquery Scan on all
         Output: val2, val
         ->  Seq Scan on public.tab1_modulo
               Output: val2, val
               Filter: (tab1_modulo.val2 = 2)
(9 rows)

-- tests for node reduction by application of quals. Having query FQSed because of
-- existence of ORDER BY, implies that nodes got reduced.
select * from tab1_modulo where val = 7;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off, num_nodes on) select * from tab1_modulo where val = 7;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_modulo.val, tab1_modulo.val2
   Remote query: SELECT val, val2 FROM tab1_modulo WHERE (val = 7)
   ->  Seq Scan on public.tab1_modulo
         Output: val, val2
         Filter: (tab1_modulo.val = 7)
(6 rows)

select * from tab1_modulo where val = 7 or val = 2 order by val;
 val | val2 
-----+------
   2 |    4
   7 |    8
(2 rows)

explain (verbose on, nodes off, costs off) select * from tab1_modulo where val = 7 or val = 2 order by val;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Remote Subquery Scan on all
   Output: val, val2
   Sort Key: tab1_modulo.val
   ->  Sort
         Output: val, val2
         Sort Key: tab1_modulo.val
         ->  Seq Scan on public.tab1_modulo
               Output: val, val2
               Filter: ((tab1_modulo.val = 7) OR (tab1_modulo.val = 2))
(9 rows)

select * from tab1_modulo where val = 7 and val2 = 8;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off, num_nodes on) select * from tab1_modulo where val = 7 and val2 = 8;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_modulo.val, tab1_modulo.val2
   Remote query: SELECT val, val2 FROM tab1_modulo WHERE ((val = 7) AND (val2 = 8))
   ->  Seq Scan on public.tab1_modulo
         Output: val, val2
         Filter: ((tab1_modulo.val = 7) AND (tab1_modulo.val2 = 8))
(6 rows)

select * from tab1_modulo where val = 3 + 4 and val2 = 8;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off, num_nodes on) select * from tab1_modulo where val = 3 + 4;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_modulo.val, tab1_modulo.val2
   Remote query: SELECT val, val2 FROM tab1_modulo WHERE (val = (3 + 4))
   ->  Seq Scan on public.tab1_modulo
         Output: val, val2
         Filter: (tab1_modulo.val = 7)
(6 rows)

select * from tab1_modulo where val = char_length('len')+4;
 val | val2 
-----+------
   7 |    8
(1 row)

explain (verbose on, nodes off, costs off, num_nodes on) select * from tab1_modulo where val = char_length('len')+4;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_modulo.val, tab1_modulo.val2
   Remote query: SELECT val, val2 FROM tab1_modulo WHERE (val = (char_length('len'::text) + 4))
   ->  Seq Scan on public.tab1_modulo
         Output: val, val2
         Filter: (tab1_modulo.val = 7)
(6 rows)

-- insert some more values 
insert into tab1_modulo values (7, 2); 
select avg(val) from tab1_modulo where val = 7;
        avg         
--------------------
 7.0000000000000000
(1 row)

explain (verbose on, nodes off, costs off, num_nodes on) select avg(val) from tab1_modulo where val = 7;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: avg(tab1_modulo.val)
   Remote query: SELECT avg(val) AS avg FROM tab1_modulo WHERE (val = 7)
   ->  Aggregate
         Output: avg(val)
         ->  Seq Scan on public.tab1_modulo
               Output: val, val2
               Filter: (tab1_modulo.val = 7)
(8 rows)

select val, val2 from tab1_modulo where val = 7 order by val2;
 val | val2 
-----+------
   7 |    2
   7 |    8
(2 rows)

explain (verbose on, nodes off, costs off, num_nodes on) select val, val2 from tab1_modulo where val = 7 order by val2;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_modulo.val, tab1_modulo.val2
   Remote query: SELECT val, val2 FROM tab1_modulo WHERE (val = 7) ORDER BY val2
   ->  Sort
         Output: val, val2
         Sort Key: tab1_modulo.val2
         ->  Seq Scan on public.tab1_modulo
               Output: val, val2
               Filter: (tab1_modulo.val = 7)
(9 rows)

select distinct val2 from tab1_modulo where val = 7;
 val2 
------
    2
    8
(2 rows)

explain (verbose on, nodes off, costs off, num_nodes on) select distinct val2 from tab1_modulo where val = 7;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_modulo.val2
   Remote query: SELECT DISTINCT val2 FROM tab1_modulo WHERE (val = 7)
   ->  Unique
         Output: val2
         ->  Sort
               Output: val2
               Sort Key: tab1_modulo.val2
               ->  Seq Scan on public.tab1_modulo
                     Output: val2
                     Filter: (tab1_modulo.val = 7)
(11 rows)

-- DMLs
update tab1_modulo set val2 = 1000 where val = 7; 
explain (verbose on, nodes off, costs off) update tab1_modulo set val2 = 1000 where val = 7; 
                             QUERY PLAN                             
--------------------------------------------------------------------
 Remote Fast Query Execution
   Output: 1000
   Remote query: UPDATE tab1_modulo SET val2 = 1000 WHERE (val = 7)
   ->  Update on public.tab1_modulo
         ->  Seq Scan on public.tab1_modulo
               Output: val, 1000, ctid
               Filter: (tab1_modulo.val = 7)
(7 rows)

select * from tab1_modulo where val = 7;
 val | val2 
-----+------
   7 | 1000
   7 | 1000
(2 rows)

delete from tab1_modulo where val = 7; 
explain (verbose on, costs off) delete from tab1_modulo where val = 7; 
                       QUERY PLAN                        
---------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   Remote query: DELETE FROM tab1_modulo WHERE (val = 7)
   ->  Delete on public.tab1_modulo
         ->  Seq Scan on public.tab1_modulo
               Output: ctid
               Filter: (tab1_modulo.val = 7)
(7 rows)

select * from tab1_modulo where val = 7;
 val | val2 
-----+------
(0 rows)

-- Testset 4 for replicated tables, for replicated tables, unless the expression
-- is itself unshippable, any query involving a single replicated table is shippable
select cr_table('tab1_replicated(val int, val2 int)', '{1, 2, 3}'::int[], 'replication');
 cr_table 
----------
 
(1 row)

insert into tab1_replicated values (1, 2);
insert into tab1_replicated values (2, 4);
insert into tab1_replicated values (5, 3);
insert into tab1_replicated values (7, 8);
insert into tab1_replicated values (9, 2);
explain (verbose on, nodes off, costs off) insert into tab1_replicated values (9, 2);
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Remote Fast Query Execution
   Output: 9, 2
   Remote query: INSERT INTO tab1_replicated (val, val2) VALUES (9, 2)
   ->  Insert on public.tab1_replicated
         ->  Result
               Output: 9, 2
(6 rows)

-- simple select
select * from tab1_replicated;
 val | val2 
-----+------
   1 |    2
   2 |    4
   5 |    3
   7 |    8
   9 |    2
(5 rows)

explain (num_nodes on, verbose on, nodes off, costs off) select * from tab1_replicated;
                            QUERY PLAN                            
------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_replicated.val, tab1_replicated.val2
   Remote query: SELECT val, val2 FROM tab1_replicated
   ->  Seq Scan on public.tab1_replicated
         Output: val, val2
(5 rows)

select sum(val), avg(val), count(*) from tab1_replicated;
 sum |        avg         | count 
-----+--------------------+-------
  24 | 4.8000000000000000 |     5
(1 row)

explain (num_nodes on, verbose on, nodes off, costs off) select sum(val), avg(val), count(*) from tab1_replicated;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: sum(tab1_replicated.val), avg(tab1_replicated.val), count(*)
   Remote query: SELECT sum(val) AS sum, avg(val) AS avg, count(*) AS count FROM tab1_replicated
   ->  Aggregate
         Output: sum(val), avg(val), count(*)
         ->  Seq Scan on public.tab1_replicated
               Output: val, val2
(7 rows)

select first_value(val) over (partition by val2 order by val) from tab1_replicated;
 first_value 
-------------
           1
           1
           5
           2
           7
(5 rows)

explain (num_nodes on, verbose on, nodes off, costs off) select first_value(val) over (partition by val2 order by val) from tab1_replicated;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: first_value(tab1_replicated.val) OVER (?), tab1_replicated.val, tab1_replicated.val2
   Remote query: SELECT first_value(val) OVER (PARTITION BY val2 ORDER BY val) AS first_value FROM tab1_replicated
   ->  WindowAgg
         Output: first_value(val) OVER (?), val, val2
         ->  Sort
               Output: val, val2
               Sort Key: tab1_replicated.val2, tab1_replicated.val
               ->  Seq Scan on public.tab1_replicated
                     Output: val, val2
(10 rows)

select * from tab1_replicated where val2 = 2 limit 2;
 val | val2 
-----+------
   1 |    2
   9 |    2
(2 rows)

explain (num_nodes on, verbose on, nodes off, costs off) select * from tab1_replicated where val2 = 2 limit 2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_replicated.val, tab1_replicated.val2
   Remote query: SELECT val, val2 FROM tab1_replicated WHERE (val2 = 2) LIMIT 2
   ->  Limit
         Output: val, val2
         ->  Seq Scan on public.tab1_replicated
               Output: val, val2
               Filter: (tab1_replicated.val2 = 2)
(8 rows)

select * from tab1_replicated where val2 = 4 offset 1;
 val | val2 
-----+------
(0 rows)

explain (num_nodes on, verbose on, nodes off, costs off) select * from tab1_replicated where val2 = 4 offset 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_replicated.val, tab1_replicated.val2
   Remote query: SELECT val, val2 FROM tab1_replicated WHERE (val2 = 4) OFFSET 1
   ->  Limit
         Output: val, val2
         ->  Seq Scan on public.tab1_replicated
               Output: val, val2
               Filter: (tab1_replicated.val2 = 4)
(8 rows)

select * from tab1_replicated order by val;
 val | val2 
-----+------
   1 |    2
   2 |    4
   5 |    3
   7 |    8
   9 |    2
(5 rows)

explain (num_nodes on, verbose on, nodes off, costs off) select * from tab1_replicated order by val;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_replicated.val, tab1_replicated.val2
   Remote query: SELECT val, val2 FROM tab1_replicated ORDER BY val
   ->  Sort
         Output: val, val2
         Sort Key: tab1_replicated.val
         ->  Seq Scan on public.tab1_replicated
               Output: val, val2
(8 rows)

select distinct val, val2 from tab1_replicated order by 1, 2;
 val | val2 
-----+------
   1 |    2
   2 |    4
   5 |    3
   7 |    8
   9 |    2
(5 rows)

explain (num_nodes on, verbose on, nodes off, costs off) select distinct val, val2 from tab1_replicated order by 1, 2;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_replicated.val, tab1_replicated.val2
   Remote query: SELECT DISTINCT val, val2 FROM tab1_replicated ORDER BY val, val2
   ->  Sort
         Output: val, val2
         Sort Key: tab1_replicated.val, tab1_replicated.val2
         ->  HashAggregate
               Output: val, val2
               Group Key: tab1_replicated.val, tab1_replicated.val2
               ->  Seq Scan on public.tab1_replicated
                     Output: val, val2
(11 rows)

explain (num_nodes on, verbose on, nodes off, costs off) select distinct val, val2 from tab1_replicated;
                            QUERY PLAN                            
------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_replicated.val, tab1_replicated.val2
   Remote query: SELECT DISTINCT val, val2 FROM tab1_replicated
   ->  HashAggregate
         Output: val, val2
         Group Key: tab1_replicated.val, tab1_replicated.val2
         ->  Seq Scan on public.tab1_replicated
               Output: val, val2
(8 rows)

select val, val2 from tab1_replicated group by val, val2 order by 1, 2;
 val | val2 
-----+------
   1 |    2
   2 |    4
   5 |    3
   7 |    8
   9 |    2
(5 rows)

explain (num_nodes on, verbose on, nodes off, costs off) select val, val2 from tab1_replicated group by val, val2 order by 1, 2;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_replicated.val, tab1_replicated.val2
   Remote query: SELECT val, val2 FROM tab1_replicated GROUP BY val, val2 ORDER BY val, val2
   ->  Sort
         Output: val, val2
         Sort Key: tab1_replicated.val, tab1_replicated.val2
         ->  HashAggregate
               Output: val, val2
               Group Key: tab1_replicated.val, tab1_replicated.val2
               ->  Seq Scan on public.tab1_replicated
                     Output: val, val2
(11 rows)

explain (num_nodes on, verbose on, nodes off, costs off) select val, val2 from tab1_replicated group by val, val2;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: tab1_replicated.val, tab1_replicated.val2
   Remote query: SELECT val, val2 FROM tab1_replicated GROUP BY val, val2
   ->  HashAggregate
         Output: val, val2
         Group Key: tab1_replicated.val, tab1_replicated.val2
         ->  Seq Scan on public.tab1_replicated
               Output: val, val2
(8 rows)

select sum(val) from tab1_replicated group by val2 having sum(val) > 1 order by 1;
 sum 
-----
   2
   5
   7
  10
(4 rows)

explain (num_nodes on, verbose on, nodes off, costs off) select sum(val) from tab1_replicated group by val2 having sum(val) > 1 order by 1;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: sum(tab1_replicated.val), tab1_replicated.val2
   Remote query: SELECT sum(val) AS sum FROM tab1_replicated GROUP BY val2 HAVING (sum(val) > 1) ORDER BY (sum(val))
   ->  Sort
         Output: (sum(val)), val2
         Sort Key: (sum(tab1_replicated.val))
         ->  HashAggregate
               Output: sum(val), val2
               Group Key: tab1_replicated.val2
               Filter: (sum(tab1_replicated.val) > 1)
               ->  Seq Scan on public.tab1_replicated
                     Output: val, val2
(12 rows)

explain (num_nodes on, verbose on, nodes off, costs off) select sum(val) from tab1_replicated group by val2 having sum(val) > 1;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Remote Fast Query Execution (primary node count=0, node count=1)
   Output: sum(tab1_replicated.val), tab1_replicated.val2
   Remote query: SELECT sum(val) AS sum FROM tab1_replicated GROUP BY val2 HAVING (sum(val) > 1)
   ->  HashAggregate
         Output: sum(val), val2
         Group Key: tab1_replicated.val2
         Filter: (sum(tab1_replicated.val) > 1)
         ->  Seq Scan on public.tab1_replicated
               Output: val, val2
(9 rows)

-- DMLs
update tab1_replicated set val2 = 1000 where val = 7; 
explain (verbose on, nodes off, costs off) update tab1_replicated set val2 = 1000 where val = 7; 
                               QUERY PLAN                               
------------------------------------------------------------------------
 Remote Fast Query Execution
   Output: 1000
   Remote query: UPDATE tab1_replicated SET val2 = 1000 WHERE (val = 7)
   ->  Update on public.tab1_replicated
         ->  Seq Scan on public.tab1_replicated
               Output: val, 1000, ctid
               Filter: (tab1_replicated.val = 7)
(7 rows)

select * from tab1_replicated where val = 7;
 val | val2 
-----+------
   7 | 1000
(1 row)

delete from tab1_replicated where val = 7; 
explain (verbose on, costs off) delete from tab1_replicated where val = 7; 
                         QUERY PLAN                          
-------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   Remote query: DELETE FROM tab1_replicated WHERE (val = 7)
   ->  Delete on public.tab1_replicated
         ->  Seq Scan on public.tab1_replicated
               Output: ctid
               Filter: (tab1_replicated.val = 7)
(7 rows)

select * from tab1_replicated where val = 7;
 val | val2 
-----+------
(0 rows)

drop table tab1_rr;
drop table tab1_hash;
drop table tab1_modulo;
drop table tab1_replicated;
drop function cr_table(varchar, int[], varchar); 
